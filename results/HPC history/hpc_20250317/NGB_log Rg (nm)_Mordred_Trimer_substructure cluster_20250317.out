


-------------------------------------------------- 
OOD TEST ON Fluorene



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 103), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028620092583875), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 304), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059908492546826786), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1401), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061927322826934784), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 985), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054409071286081585), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 363), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001601354006644182), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013328656651471272), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1446), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0020952739599883795), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09907410778620494), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 502), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.006653269778729872), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 831), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01851105150482453), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1218), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 230), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0787749672705762), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00023232971935534442), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06854087332893022), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 187), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1030), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 560), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09945170913998332), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1340), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.009402524282645708), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08146216961026964), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005782684919514924), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09932728743735353), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1892), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.006087748054927415), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03972893133963027), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 349), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.006422500474336274), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.045640277994553294), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 410), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06436609450660614), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 329), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03588853851861136), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 342), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09574699686126872), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1930), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.007461247712042598), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.046430753929634305), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 427), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09873837137089332), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 386), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.008870988655075561), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09959821624674509), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008210845176484398), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02991966112894751), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02469102860404532), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 422), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0575439383636083), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001375042128810296), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09630080686743717), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 266), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00011623221443992511), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 544), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 275), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0978104047863118), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 347), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.007026156519445887), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03090006758656468), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014759134558140888), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0993521779453051), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 312), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00903785168692514), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07045473403216711), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009022355377025671), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 541), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07023497166257245), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 424), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0993605923426322), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 960), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002355966774454417), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00038012600077239435), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06257509099441096), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 206), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05126316438438514), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 422), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09590527355399797), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1971), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010539475434522738), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09460036218365128), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1959), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0020794621396106254), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 98), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05731158185818455), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 507), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02701921427457359), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0012814386001975412), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 393), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09966945018382059), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 345), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.005067918277387686), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04748146257630806), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01723578805874995), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0996045495441123), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 211), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.006471424397272313), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0999492952741213), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 86), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.003666355096337945), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1179), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 215), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 380), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07881020779153591), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 987), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.008893390178900985), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04357533349199398), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.002749236435274275), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.053366625342480704), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1418), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON PPV



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05603651314424095), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1266), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010544736084373533), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09882563314994519), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 135), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.007987439132601389), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09894714370144651), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1821), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00012352473336755255), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09835228468234847), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 144), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.007922542789799147), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059032701733023565), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1938), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.009817812613848365), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026248203498198616), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09075966624522726), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00514844064604902), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1570), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09845529158900096), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 245), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.008325385722026155), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09953473683443848), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1909), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00017335199304854953), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0787749672705762), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00023232971935534442), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09991477853560458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 162), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0055872783968215056), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0839595948176321), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00025700188789342884), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03808345808494578), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 944), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.008819222828360219), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09976351216578701), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 703), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001687269930613141), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 342), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07073337175331647), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0839595948176321), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00025700188789342884), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06289846218561042), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 889), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08146216961026964), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005782684919514924), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012525053519861912), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1053), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1213), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.058043884354836456), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1435), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0339652237276787), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 861), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00011941497629735728), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 258), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09904253498858015), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00014595975748397182), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08146216961026964), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005782684919514924), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 599), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06105240860934713), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02885032653393382), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008394649195459168), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1478), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09959821624674509), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008210845176484398), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0628854942824106), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1076), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010523984395795573), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055546063832326714), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 279), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00012101663820455102), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 501), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09915803260918038), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1243), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.007716452241226306), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09816498081966443), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1985), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.007571410467608768), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07045473403216711), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009022355377025671), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013539661069971579), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09936139518179116), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 160), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010002982337681217), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08704502155242712), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1975), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00012084189247871524), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07045473403216711), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009022355377025671), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 868), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06481873095204368), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001234382155546646), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.058374466893819345), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1868), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.008972636942131271), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1273), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07741487986249732), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038898699471485484), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 704), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010169469833505614), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09952271881869197), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 275), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010393337488267689), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057005454690789305), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 344), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047624300945939016), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 688), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059743095031685775), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 947), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06713008258950522), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1204), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06576011022561784), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1132), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010202033785423636), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06115299030707321), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1115), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.008482209811715451), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09815853556355505), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 471), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.009717942535996454), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04256218032654544), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1007), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09801248342065051), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 128), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010470394465315593), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.058802805859445216), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1963), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00012488940987221762), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0994146810075993), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1966), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.008859163824924916), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05485873416540469), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001413739463649653), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.058522388976623076), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1921), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.009035120863299493), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON Thiophene



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09845290850062383), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1878), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.005967287240959126), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009764463066919221), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.049300337907426155), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 266), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010520547762620603), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0995966855240065), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 435), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001573595302773326), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05633772385518063), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1912), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.006730445612107874), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013328656651471272), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1446), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0020952739599883795), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09075966624522726), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00514844064604902), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07746233690368366), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06564942623076227), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 688), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0345485099372409), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 275), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056530586478039366), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 70), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00016836472936380986), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020417834675056968), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1101), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.009521516478241362), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09764838844479513), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1136), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.009919177923377917), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1112), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1122), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0839595948176321), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00025700188789342884), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 288), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 782), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05722272142611286), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04356477308657262), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1496), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001150031724692981), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09858176595273205), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 599), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.005230021760635684), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03391689960665273), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1245), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00824241460642686), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1179), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 461), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09737081379170966), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1990), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0018343817966870945), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 973), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031184811233398533), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 542), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07078622613663588), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 70), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00011367644354028337), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04630796174317997), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 260), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010183186726441263), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1326), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 102), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06089436426055351), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 785), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05415151983562698), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 604), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.009580556004686379), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09860609219609166), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1054), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00015518137703099361), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09941502342884392), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 906), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.009981043197288871), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03512299502163751), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 459), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007766893659964404), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0521873163587536), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 220), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0041342850845389485), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 313), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 179), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09997640917928179), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 128), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00013548512235881616), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0987433722354359), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1841), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00012544549911224087), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09990842615237484), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 373), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00011493056823597122), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09081148924846974), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 368), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07079596696736029), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 504), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.008528162250193221), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0339386665661628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 890), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05989021778925076), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 335), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04594024165912621), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 657), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0987357294085339), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 600), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00955206679555665), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006641918896777327), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020647407279959267), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1148), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06668222626768594), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 364), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.008993798201093741), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021072700190170122), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06399548845168336), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1543), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0987504228399758), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 925), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.005458479050338009), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 367), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.01), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01847463875126492), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1626), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 344), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09923795114050984), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1436), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0031278972998132065), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03980140412909695), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005495067218457976), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 294), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06345034340219557), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 593), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001126583426165899), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06926317822985503), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 385), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010389617153943425), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04902307786880074), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 373), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010907075637664428), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05889204391527006), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 600), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001), ('regressor__regressor__verbose', False)])


{'CO_Fluorene': {'cluster size (%)': 27, 6: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.691582729115745, 'test_rmse': 0.8344851400789066, 'test_r2': -0.6791428187803832, 'test_pearson_r': array([-0.23888692]), 'test_pearson_p_value': array([0.04482234]), 'test_spearman_r': -0.38185675499135874, 'test_spearman_p_value': 0.001016426960426357, 'test_kendall_r': -0.23168573740880366, 'test_kendall_p_value': 0.004375772677604368, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 103, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.6819954149595757, 'test_rmse': 0.8036763013107552, 'test_r2': -0.557445096402857, 'test_pearson_r': array([-0.27044667]), 'test_pearson_p_value': array([0.02254475]), 'test_spearman_r': -0.5029933618162937, 'test_spearman_p_value': 7.804968558553354e-06, 'test_kendall_r': -0.36763593805535577, 'test_kendall_p_value': 6.104978801950977e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06854087332893022, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.6917978745576275, 'test_rmse': 0.8465419361692396, 'test_r2': -0.728014473762189, 'test_pearson_r': array([-0.27338756]), 'test_pearson_p_value': array([0.0210631]), 'test_spearman_r': -0.343543230513385, 'test_spearman_p_value': 0.003354859524849136, 'test_kendall_r': -0.24792811768460013, 'test_kendall_p_value': 0.0023706881882323548, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 349, 'regressor__learning_rate': 0.03972893133963027, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.6961018653199215, 'test_rmse': 0.8346628524020813, 'test_r2': -0.6798580769224334, 'test_pearson_r': array([-0.24398164]), 'test_pearson_p_value': array([0.04032216]), 'test_spearman_r': -0.4471422246148568, 'test_spearman_p_value': 9.257766378681129e-05, 'test_kendall_r': -0.3076339722398299, 'test_kendall_p_value': 0.00016052039918902625, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 427, 'regressor__learning_rate': 0.046430753929634305, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.7376914975432565, 'test_rmse': 0.8689780542371223, 'test_r2': -0.8208242918396598, 'test_pearson_r': array([-0.26093964]), 'test_pearson_p_value': array([0.0279548]), 'test_spearman_r': -0.4047740828140413, 'test_spearman_p_value': 0.0004630452892321833, 'test_kendall_r': -0.2512098612195611, 'test_kendall_p_value': 0.0019831273052906546, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 275, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.6424027487062615, 'test_rmse': 0.7777919714825127, 'test_r2': -0.45873812422132354, 'test_pearson_r': array([-0.25402252]), 'test_pearson_p_value': array([0.03254617]), 'test_spearman_r': -0.42818453396243755, 'test_spearman_p_value': 0.00019530573205673633, 'test_kendall_r': -0.3071031271790623, 'test_kendall_p_value': 0.00015807029421422144, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1971, 'regressor__learning_rate': 0.09590527355399797, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.6907303812142835, 'test_rmse': 0.8208178102783107, 'test_r2': -0.6245907047881121, 'test_pearson_r': array([-0.23826139]), 'test_pearson_p_value': array([0.04540237]), 'test_spearman_r': -0.3803977822993121, 'test_spearman_p_value': 0.001066585249068305, 'test_kendall_r': -0.24540928283023108, 'test_kendall_p_value': 0.002540136529409647, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 215, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_Fluorene': {'cluster size (%)': 25, 6: {'fit_time': array([10.00953412,  9.6560781 , 10.01957893,  9.7318399 ]), 'score_time': array([0.1825397 , 0.18260574, 0.1708653 , 0.18356705]), 'test_pearson_r': array([0.94715129, 0.8901822 , 0.94169776, 0.96214972]), 'test_pearson_p': array([-8.22312721e-33, -3.47048998e-23, -1.66952373e-31, -1.03525340e-36]), 'test_spearman_r': array([0.91312096, 0.92020893, 0.93092596, 0.94558361]), 'test_spearman_p': array([-3.08606794e-26, -2.35774156e-27, -2.95558802e-29, -6.24684852e-32]), 'test_kendall_r': array([0.80531044, 0.82551203, 0.7901512 , 0.82417434]), 'test_kendall_p': array([-3.31996748e-21, -2.72915324e-22, -1.94457839e-20, -7.82307282e-22]), 'test_rmse': array([-0.21677725, -0.2982848 , -0.21166672, -0.15568013]), 'test_mae': array([-0.1148086 , -0.12730845, -0.1341513 , -0.10246607]), 'test_r2': array([0.89156554, 0.79047826, 0.88528703, 0.92547061]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 502, 'regressor__learning_rate': 0.09907410778620494, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([2.99763179, 3.4814086 , 3.62240934, 3.17890668]), 'score_time': array([0.07616639, 0.07775044, 0.07222319, 0.07145119]), 'test_pearson_r': array([0.87290217, 0.90608106, 0.92696628, 0.92145482]), 'test_pearson_p': array([-2.64298022e-21, -3.22189771e-25, -1.61033933e-28, -3.79805754e-27]), 'test_spearman_r': array([0.84036984, 0.92195048, 0.92184943, 0.90540247]), 'test_spearman_p': array([-2.06999839e-18, -1.20839555e-27, -1.25671110e-27, -9.49584377e-25]), 'test_kendall_r': array([0.71076783, 0.8240131 , 0.78706682, 0.77802753]), 'test_kendall_p': array([-7.66991783e-17, -3.76256717e-22, -2.65860157e-20, -1.20565988e-19]), 'test_rmse': array([-0.3398315 , -0.28966051, -0.22930562, -0.22859167]), 'test_mae': array([-0.17387194, -0.13193125, -0.1385891 , -0.13424258]), 'test_r2': array([0.70073568, 0.81633814, 0.8582722 , 0.84344167]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 187, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([43.48889375, 42.22391796, 44.06152606, 43.2292912 ]), 'score_time': array([0.65275049, 0.63051033, 0.63922071, 0.59595156]), 'test_pearson_r': array([0.97141239, 0.96594063, 0.91499704, 0.90729341]), 'test_pearson_p': array([-4.65412667e-41, -1.06669564e-38, -1.59699750e-26, -5.22601988e-25]), 'test_spearman_r': array([0.96419907, 0.96141616, 0.89473167, 0.92287617]), 'test_spearman_p': array([-4.99905640e-38, -5.06766313e-37, -9.82506472e-24, -2.20298844e-27]), 'test_kendall_r': array([0.85108523, 0.84572826, 0.78872746, 0.83434391]), 'test_kendall_p': array([-1.52343044e-23, -2.57688690e-23, -1.87507518e-20, -3.22185231e-22]), 'test_rmse': array([-0.16331433, -0.16248176, -0.23378342, -0.285786  ]), 'test_mae': array([-0.11145314, -0.1164771 , -0.1279562 , -0.11754643]), 'test_r2': array([0.93855164, 0.92556909, 0.83149274, 0.82114627]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([11.55218387, 10.97599506, 11.03402305, 10.80494642]), 'score_time': array([0.20823836, 0.18824315, 0.18341136, 0.18063426]), 'test_pearson_r': array([0.97822164, 0.9128541 , 0.85313076, 0.93521187]), 'test_pearson_p': array([-9.77822756e-45, -3.38513804e-26, -1.83835470e-19, -1.19415110e-29]), 'test_spearman_r': array([0.97717977, 0.9059915 , 0.8876746 , 0.9291847 ]), 'test_spearman_p': array([-4.19559273e-44, -3.31550942e-25, -6.79631057e-23, -1.71930216e-28]), 'test_kendall_r': array([0.89466674, 0.79797739, 0.78080815, 0.81400569]), 'test_kendall_p': array([-1.24021186e-25, -6.47533215e-21, -4.81063976e-20, -2.16751821e-21]), 'test_rmse': array([-0.12474402, -0.27580866, -0.32008218, -0.23553593]), 'test_mae': array([-0.07873957, -0.14441771, -0.14488247, -0.13239074]), 'test_r2': array([0.95595822, 0.82574994, 0.70965547, 0.86911018]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 544, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([7.79687858, 7.12932587, 6.54004574, 7.57910728]), 'score_time': array([0.14501405, 0.16088486, 0.14468551, 0.14427114]), 'test_pearson_r': array([0.97048554, 0.96729336, 0.88665684, 0.8536017 ]), 'test_pearson_p': array([-1.25401424e-40, -3.03696832e-39, -8.88730923e-23, -3.23870608e-19]), 'test_spearman_r': array([0.92389419, 0.97378572, 0.8387365 , 0.88378323]), 'test_spearman_p': array([-5.62539523e-28, -3.14496006e-42, -2.77906220e-18, -4.02769709e-22]), 'test_kendall_r': array([0.78851385, 0.87075815, 0.7574911 , 0.81669191]), 'test_kendall_p': array([-2.27034731e-20, -1.28198023e-24, -6.63551886e-19, -1.63974786e-21]), 'test_rmse': array([-0.14985286, -0.16417331, -0.31016928, -0.33262452]), 'test_mae': array([-0.10314182, -0.11052343, -0.13833353, -0.12934443]), 'test_r2': array([0.94100368, 0.93351179, 0.76008631, 0.71403741]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 424, 'regressor__learning_rate': 0.07023497166257245, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([39.89853382, 41.2248385 , 42.98092699, 39.78932476]), 'score_time': array([0.64354873, 0.678931  , 0.62957978, 0.64975142]), 'test_pearson_r': array([0.92165251, 0.97615518, 0.96897898, 0.87967931]), 'test_pearson_p': array([-1.35628762e-27, -1.64807048e-43, -5.88246159e-40, -1.10879875e-21]), 'test_spearman_r': array([0.91996853, 0.96730341, 0.96527983, 0.90654672]), 'test_spearman_p': array([-2.58254421e-27, -3.00816016e-39, -1.93464071e-38, -6.62592109e-25]), 'test_kendall_r': array([0.76101138, 0.85177272, 0.85989995, 0.79831362]), 'test_kendall_p': array([-3.50802040e-19, -1.44107601e-23, -5.70842863e-24, -1.69311044e-20]), 'test_rmse': array([-0.23867069, -0.14302833, -0.15221727, -0.33459904]), 'test_mae': array([-0.14988139, -0.0974948 , -0.1037346 , -0.16808224]), 'test_r2': array([0.8300206 , 0.95080364, 0.93334863, 0.76119361]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04748146257630806, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([20.57476234, 21.41952157, 22.35108733, 22.21707654]), 'score_time': array([0.33158898, 0.32833958, 0.31330252, 0.31756115]), 'test_pearson_r': array([0.87768817, 0.95542586, 0.93887601, 0.9508641 ]), 'test_pearson_p': array([-8.50416245e-22, -4.36446914e-35, -7.08825939e-31, -2.85470605e-33]), 'test_spearman_r': array([0.87275329, 0.95258494, 0.92041012, 0.94772873]), 'test_spearman_p': array([-2.73585350e-21, -2.92779564e-34, -2.18424128e-27, -1.85387237e-32]), 'test_kendall_r': array([0.76373612, 0.85067526, 0.77518324, 0.82732983]), 'test_kendall_p': array([-3.67737806e-19, -1.53331589e-23, -9.90650774e-20, -5.03088381e-22]), 'test_rmse': array([-0.32120707, -0.16785708, -0.22078708, -0.1988799 ]), 'test_mae': array([-0.14300914, -0.10161912, -0.1585821 , -0.1175437 ]), 'test_r2': array([0.76306305, 0.91222107, 0.86898404, 0.90325435]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 987, 'regressor__learning_rate': 0.07881020779153591, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_PPV': {'cluster size (%)': 11, 6: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.5145307623189662, 'test_rmse': 0.649690013483174, 'test_r2': -2.055735018482159, 'test_pearson_r': array([-0.43937591]), 'test_pearson_p_value': array([0.019317]), 'test_spearman_r': -0.37720727557190714, 'test_spearman_p_value': 0.04784082869334608, 'test_kendall_r': -0.24015943145160154, 'test_kendall_p_value': 0.07991219989696607, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1938, 'regressor__learning_rate': 0.059032701733023565, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.5744230961773039, 'test_rmse': 0.7856304224235483, 'test_r2': -3.468274999854157, 'test_pearson_r': array([-0.66695006]), 'test_pearson_p_value': array([0.0001062]), 'test_spearman_r': -0.4443887173525971, 'test_spearman_p_value': 0.017826748080188252, 'test_kendall_r': -0.31657379600438385, 'test_kendall_p_value': 0.020977211414741518, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 289, 'regressor__learning_rate': 0.0839595948176321, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.5321052039077745, 'test_rmse': 0.6836810565569212, 'test_r2': -2.3838445364108063, 'test_pearson_r': array([-0.50589293]), 'test_pearson_p_value': array([0.00602331]), 'test_spearman_r': -0.3838152862388602, 'test_spearman_p_value': 0.04376455490328527, 'test_kendall_r': -0.2619921070381107, 'test_kendall_p_value': 0.056082329478436985, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 889, 'regressor__learning_rate': 0.06289846218561042, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.5314421728001676, 'test_rmse': 0.6937162495250199, 'test_r2': -2.4839109341645953, 'test_pearson_r': array([-0.55620255]), 'test_pearson_p_value': array([0.00211606]), 'test_spearman_r': -0.3873946253501265, 'test_spearman_p_value': 0.04167468687479304, 'test_kendall_r': -0.25653393814148345, 'test_kendall_p_value': 0.0614011765684743, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1478, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.4816098449802742, 'test_rmse': 0.6214202651649469, 'test_r2': -1.7955942125040818, 'test_pearson_r': array([-0.33952574]), 'test_pearson_p_value': array([0.07712341]), 'test_spearman_r': -0.3108518351245862, 'test_spearman_p_value': 0.10738540690581921, 'test_kendall_r': -0.18557774248532843, 'test_kendall_p_value': 0.17599279788109568, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1123, 'regressor__learning_rate': 0.07045473403216711, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.5048216606706194, 'test_rmse': 0.6191986772430188, 'test_r2': -1.7756413494240606, 'test_pearson_r': array([-0.27662616]), 'test_pearson_p_value': array([0.15415302]), 'test_spearman_r': -0.24201839067715794, 'test_spearman_p_value': 0.2146794986816055, 'test_kendall_r': -0.18011957358870115, 'test_kendall_p_value': 0.1890492748415309, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 704, 'regressor__learning_rate': 0.038898699471485484, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.5823933951932692, 'test_rmse': 0.7220532964981923, 'test_r2': -2.7743469463632375, 'test_pearson_r': array([-0.63425746]), 'test_pearson_p_value': array([0.00028956]), 'test_spearman_r': -0.58563494535872, 'test_spearman_p_value': 0.0010598529411425391, 'test_kendall_r': -0.40390449835042075, 'test_kendall_p_value': 0.0032275344760099058, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1007, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_PPV': {'cluster size (%)': 11, 6: {'fit_time': array([19.90642047, 19.02914143, 18.78885913, 19.14305568, 18.41205835,
       18.62740278, 20.48759437, 18.69776392, 19.20807099]), 'score_time': array([0.21321821, 0.22209406, 0.21420336, 0.21396971, 0.22276688,
       0.22446704, 0.21143413, 0.21246147, 0.22320628]), 'test_pearson_r': array([0.98063908, 0.98793447, 0.96557007, 0.97827649, 0.80833238,
       0.97032902, 0.95371537, 0.96839132, 0.96396732]), 'test_pearson_p': array([-1.17626555e-20, -2.07227884e-23, -2.55332162e-17, -5.48952772e-20,
       -1.13417515e-07, -3.52490830e-18, -1.29230928e-15, -3.34299430e-17,
       -1.78995915e-16]), 'test_spearman_r': array([0.95934959, 0.98127618, 0.95123153, 0.95307305, 0.84039409,
       0.95929085, 0.95749668, 0.94689296, 0.92705626]), 'test_spearman_p': array([-2.31665240e-16, -7.51545773e-21, -2.57891562e-15, -1.55065114e-15,
       -1.17267616e-08, -2.36143883e-16, -4.18238541e-16, -2.51552931e-14,
       -1.39040263e-12]), 'test_kendall_r': array([0.87901235, 0.9037037 , 0.84236453, 0.84093775, 0.77832512,
       0.85435005, 0.84302187, 0.83289125, 0.79205367]), 'test_kendall_p': array([-2.38586962e-11, -6.51700114e-12, -1.21301076e-14, -1.57812551e-10,
       -8.83762460e-12, -1.13319651e-10, -1.55501337e-10, -5.43616888e-10,
       -3.45545976e-09]), 'test_rmse': array([-0.12668753, -0.11081217, -0.16261015, -0.13135474, -0.41197002,
       -0.14598787, -0.18819606, -0.16976091, -0.13819987]), 'test_mae': array([-0.08555524, -0.07487409, -0.10921147, -0.08932353, -0.15798989,
       -0.09275938, -0.13668049, -0.12635473, -0.09388874]), 'test_r2': array([0.95616081, 0.97517275, 0.93001437, 0.95589953, 0.62161132,
       0.93890587, 0.90292787, 0.92439583, 0.92489323]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 847, 'regressor__learning_rate': 0.09075966624522726, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([6.50870728, 6.95890498, 7.35699964, 7.35249281, 7.02601504,
       6.1497376 , 6.92014408, 6.91009688, 6.85827374]), 'score_time': array([0.0971632 , 0.0944066 , 0.0921967 , 0.09714723, 0.09469533,
       0.09687519, 0.09373784, 0.09512329, 0.09718657]), 'test_pearson_r': array([0.98015282, 0.98982871, 0.98214384, 0.8192978 , 0.96283152,
       0.96868301, 0.95707784, 0.94713335, 0.95104252]), 'test_pearson_p': array([-1.63945959e-20, -2.08908908e-24, -3.98087666e-21, -5.48827989e-08,
       -7.05986858e-17, -7.23569644e-18, -4.76252568e-16, -2.37471176e-14,
       -8.94478596e-15]), 'test_spearman_r': array([0.95648965, 0.98102049, 0.96551724, 0.87322903, 0.96155753,
       0.90169995, 0.95671564, 0.95566502, 0.92661569]), 'test_spearman_p': array([-5.70323230e-16, -9.01209069e-21, -2.60591271e-17, -6.41653643e-10,
       -1.10437079e-16, -2.46425571e-11, -5.32318756e-16, -2.52955344e-15,
       -1.49981050e-12]), 'test_kendall_r': array([0.84863785, 0.90458558, 0.87192118, 0.78121197, 0.84796628,
       0.75555786, 0.88202092, 0.84126984, 0.79947514]), 'test_kendall_p': array([-1.33814460e-10, -7.20592321e-12, -2.66222766e-16, -3.01694751e-09,
       -1.20922745e-10, -9.35716306e-09, -2.54992542e-11, -4.90701553e-14,
       -2.66554153e-09]), 'test_rmse': array([-0.11731761, -0.09495412, -0.12939841, -0.42898254, -0.16387353,
       -0.1433775 , -0.18550255, -0.2013407 , -0.19278267]), 'test_mae': array([-0.08362265, -0.07190499, -0.08581163, -0.20083097, -0.10135139,
       -0.11544345, -0.08955744, -0.12867301, -0.12197597]), 'test_r2': array([0.96025456, 0.97814206, 0.95813027, 0.65518773, 0.91728227,
       0.9377815 , 0.91581593, 0.8941782 , 0.87193513]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 342, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([13.49835443, 14.45991325, 12.24945998, 13.5759542 , 13.81738114,
       13.10513616, 13.74637341, 13.11145902, 13.43483853]), 'score_time': array([0.15527678, 0.15528059, 0.16121101, 0.15880179, 0.15902281,
       0.1592226 , 0.16506529, 0.158921  , 0.15883303]), 'test_pearson_r': array([0.96495263, 0.96814318, 0.97145731, 0.97132572, 0.94650722,
       0.94275151, 0.96646534, 0.96839712, 0.78302881]), 'test_pearson_p': array([-3.23394398e-17, -9.08448882e-18, -2.10250557e-18, -2.23545664e-18,
       -8.73635973e-15, -2.13517025e-14, -1.79859297e-17, -3.33513997e-17,
       -8.42294575e-07]), 'test_spearman_r': array([0.95367188, 0.95997045, 0.94371229, 0.96736052, 0.95060969,
       0.88357774, 0.96391182, 0.905802  , 0.82464073]), 'test_spearman_p': array([-1.30846113e-15, -1.88895713e-16, -1.70880125e-14, -1.25485758e-17,
       -3.04871135e-15, -2.16591461e-10, -4.77132732e-17, -3.41557348e-11,
       -6.81331915e-08]), 'test_kendall_r': array([0.83807746, 0.85573431, 0.82120901, 0.89025962, 0.87053087,
       0.76391131, 0.88039524, 0.80972423, 0.79947514]), 'test_kendall_p': array([-1.97736002e-10, -7.50543543e-11, -4.16983982e-10, -1.26268113e-11,
       -3.52550588e-11, -6.65912062e-09, -2.11571094e-11, -2.20339434e-09,
       -2.67819760e-09]), 'test_rmse': array([-0.164591  , -0.20565658, -0.14728169, -0.1525807 , -0.16673518,
       -0.19617032, -0.16510827, -0.17478381, -0.41173721]), 'test_mae': array([-0.1065344 , -0.13875921, -0.09960557, -0.08957148, -0.09727637,
       -0.111035  , -0.09981634, -0.09679565, -0.14481789]), 'test_r2': array([0.93091681, 0.92147631, 0.93521755, 0.938252  , 0.89305583,
       0.88788202, 0.93096082, 0.93363356, 0.59011965]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 599, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([11.51171041, 11.55111217,  9.42294431, 10.54431796, 10.85349631,
       10.51062012, 11.12449837, 10.98374677, 11.86955976]), 'score_time': array([0.12960982, 0.1347506 , 0.13359046, 0.1373961 , 0.13505578,
       0.13940287, 0.13288784, 0.13305807, 0.13061118]), 'test_pearson_r': array([0.9826198 , 0.9798199 , 0.796987  , 0.9530932 , 0.98265488,
       0.71416558, 0.98519568, 0.91173483, 0.95665847]), 'test_pearson_p': array([-2.77198724e-21, -2.04824106e-20, -2.29338554e-07, -1.54186872e-15,
       -2.69795280e-21, -1.35606059e-05, -3.22738152e-22, -1.51751735e-11,
       -1.89472381e-15]), 'test_spearman_r': array([0.98583049, 0.9746    , 0.82461829, 0.95172414, 0.98608204,
       0.77328736, 0.97573594, 0.82934173, 0.94964423]), 'test_spearman_p': array([-1.79272347e-22, -4.43452594e-19, -3.79135820e-08, -2.25520496e-15,
       -1.40972220e-22, -8.74501178e-07, -2.40714675e-19, -4.92310345e-08,
       -1.27968866e-14]), 'test_kendall_r': array([0.9207949 , 0.893325  , 0.72638839, 0.84729064, 0.90998836,
       0.69307143, 0.88039524, 0.71258341, 0.83068783]), 'test_kendall_p': array([-2.89136442e-12, -1.34955879e-11, -4.07327060e-08, -6.69045427e-15,
       -4.42356122e-12, -1.47261860e-07, -2.11571094e-11, -1.06340769e-07,
       -1.57749947e-13]), 'test_rmse': array([-0.12289601, -0.12361223, -0.33783334, -0.2262264 , -0.10582156,
       -0.42378479, -0.10976836, -0.27742067, -0.19708343]), 'test_mae': array([-0.0883579 , -0.08507002, -0.16502366, -0.14272984, -0.08403924,
       -0.18511015, -0.07602161, -0.15169697, -0.14130519]), 'test_r2': array([0.95949389, 0.95839318, 0.55332945, 0.90593508, 0.96494389,
       0.44345161, 0.96847013, 0.81586882, 0.90857049]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 501, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([45.97180033, 46.13989115, 46.53370357, 45.38738632, 45.94962788,
       49.08548427, 46.60279894, 46.49460053, 46.14601302]), 'score_time': array([0.49123287, 0.47726989, 0.5012877 , 0.49818301, 0.49272323,
       0.5263145 , 0.5008266 , 0.49783349, 0.47802591]), 'test_pearson_r': array([0.96672819, 0.98446717, 0.94705508, 0.97605874, 0.8172719 ,
       0.95988317, 0.96451514, 0.96351054, 0.80788061]), 'test_pearson_p': array([-1.61983807e-17, -6.14663719e-22, -7.62764881e-15, -2.01281558e-19,
       -6.29856663e-08, -1.94431701e-16, -3.81366145e-17, -2.10301052e-16,
       -2.01671234e-07]), 'test_spearman_r': array([0.86580423, 0.96155745, 0.94506039, 0.96847291, 0.73251232,
       0.91890571, 0.94235036, 0.95373669, 0.82934173]), 'test_spearman_p': array([-1.32162704e-09, -1.10440419e-16, -1.24181062e-14, -7.90943118e-18,
       -6.25190197e-06, -2.03628911e-12, -2.34062511e-14, -4.35167694e-15,
       -4.92310345e-08]), 'test_kendall_r': array([0.72278113, 0.85891352, 0.82963216, 0.87192118, 0.66009852,
       0.76580455, 0.86913845, 0.84880935, 0.78145764]), 'test_kendall_p': array([-4.20885311e-08, -7.33587827e-11, -2.88328550e-10, -2.66222766e-16,
       -4.51103986e-08, -6.55214275e-09, -3.97082077e-11, -2.53962859e-10,
       -5.56566894e-09]), 'test_rmse': array([-0.15947814, -0.10010493, -0.20953309, -0.13960701, -0.32126816,
       -0.20869696, -0.16022469, -0.15738679, -0.40493021]), 'test_mae': array([-0.10708257, -0.0773461 , -0.13492915, -0.09695003, -0.17071693,
       -0.13436808, -0.08916643, -0.10893533, -0.14454354]), 'test_r2': array([0.93269965, 0.96875282, 0.89443969, 0.95257961, 0.60534636,
       0.91222243, 0.9295486 , 0.92634474, 0.62476996]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06481873095204368, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([27.1269505 , 27.17737508, 27.18995094, 27.49537253, 25.97531033,
       29.1883657 , 27.65270042, 26.2921207 , 29.21044683]), 'score_time': array([0.30609584, 0.2940402 , 0.31992674, 0.30256033, 0.3050034 ,
       0.29213691, 0.30699658, 0.29159737, 0.27787018]), 'test_pearson_r': array([0.93248906, 0.97661336, 0.98942788, 0.96662178, 0.98336792,
       0.92914974, 0.9825533 , 0.84142867, 0.94849149]), 'test_pearson_p': array([-1.85996454e-13, -1.47163766e-19, -3.51198646e-24, -1.69012690e-17,
       -1.53721269e-21, -3.49832677e-13, -2.91750777e-21, -2.03705542e-08,
       -1.70623257e-14]), 'test_spearman_r': array([0.96599322, 0.969697  , 0.98459649, 0.948639  , 0.97314612,
       0.9353289 , 0.97387888, 0.89345398, 0.94140211]), 'test_spearman_p': array([-2.16615200e-17, -4.66771449e-18, -5.49475033e-22, -5.10988635e-15,
       -9.32115062e-19, -1.05909004e-13, -6.44375584e-19, -1.57637860e-10,
       -8.75991421e-14]), 'test_kendall_r': array([0.85785509, 0.89382989, 0.92574541, 0.8261412 , 0.89382989,
       0.81975309, 0.90729919, 0.83888818, 0.81541152]), 'test_kendall_p': array([-7.35417537e-11, -1.09970969e-11, -2.19855865e-12, -3.27734355e-10,
       -1.09970969e-11, -4.66833449e-10, -5.63227803e-12, -4.65885945e-10,
       -1.28232131e-09]), 'test_rmse': array([-0.16876479, -0.14899183, -0.08339736, -0.18310976, -0.10427969,
       -0.2232456 , -0.12435481, -0.38410174, -0.23011769]), 'test_mae': array([-0.11207795, -0.08696111, -0.06075584, -0.09588652, -0.06491956,
       -0.1525968 , -0.08656813, -0.15536693, -0.1729798 ]), 'test_r2': array([0.86554202, 0.95312728, 0.97896703, 0.92761731, 0.96659063,
       0.83215857, 0.96432295, 0.70312904, 0.88851735]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1204, 'regressor__learning_rate': 0.06713008258950522, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([45.54868007, 45.29289484, 44.73566318, 44.09476161, 45.05744839,
       46.52842379, 49.48073006, 46.87536716, 46.3830483 ]), 'score_time': array([0.48325801, 0.48183227, 0.49022508, 0.48559952, 0.47647095,
       0.47701478, 0.4722662 , 0.4696157 , 0.46915126]), 'test_pearson_r': array([0.823786  , 0.97610334, 0.93243344, 0.97824449, 0.9553381 ,
       0.95634186, 0.9613207 , 0.94543172, 0.9891959 ]), 'test_pearson_p': array([-4.02044570e-08, -1.96329614e-19, -1.88013057e-13, -5.59864248e-20,
       -8.05946670e-16, -5.96515230e-16, -1.19816303e-16, -3.55021740e-14,
       -3.26675282e-23]), 'test_spearman_r': array([0.80379874, 0.94947031, 0.92042378, 0.98312185, 0.94295923,
       0.92804348, 0.95158316, 0.94417077, 0.98029557]), 'test_spearman_p': array([-1.51088657e-07, -4.11991178e-15, -1.59228820e-12, -1.87161018e-21,
       -2.03544358e-14, -4.28362314e-13, -2.34378736e-15, -4.74358217e-14,
       -7.67565317e-20]), 'test_kendall_r': array([0.74287147, 0.85999172, 0.8148173 , 0.90729365, 0.83807233,
       0.808411  , 0.85291069, 0.7989418 , 0.89417989]), 'test_kendall_p': array([-1.92947275e-08, -7.24255419e-11, -5.92776403e-10, -5.66462409e-12,
       -1.98707699e-10, -8.36473981e-10, -9.48435326e-11, -3.76788962e-12,
       -4.66574006e-17]), 'test_rmse': array([-0.41015989, -0.13853179, -0.20351578, -0.12397919, -0.16402885,
       -0.18131829, -0.18289594, -0.21045536, -0.09821494]), 'test_mae': array([-0.14836452, -0.0924839 , -0.10827346, -0.07915121, -0.11152242,
       -0.11614072, -0.1305848 , -0.14174619, -0.07306088]), 'test_r2': array([0.63757922, 0.95226085, 0.86893547, 0.9566658 , 0.91179658,
       0.91289105, 0.91084012, 0.88878733, 0.97734659]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1966, 'regressor__learning_rate': 0.0994146810075993, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_Thiophene': {'cluster size (%)': 62, 6: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.5269197878335781, 'test_rmse': 0.6836148830674762, 'test_r2': -0.5222879406633114, 'test_pearson_r': array([0.06553809]), 'test_pearson_p_value': array([0.41028952]), 'test_spearman_r': 0.11525233273869787, 'test_spearman_p_value': 0.14671037622388214, 'test_kendall_r': 0.08482796830560965, 'test_kendall_p_value': 0.11504566635490734, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1878, 'regressor__learning_rate': 0.09845290850062383, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.4530459472209323, 'test_rmse': 0.6412617503969493, 'test_r2': -0.339505375549894, 'test_pearson_r': array([0.12103346]), 'test_pearson_p_value': array([0.12736585]), 'test_spearman_r': 0.1801978308592462, 'test_spearman_p_value': 0.022597678505013305, 'test_kendall_r': 0.12707085940025148, 'test_kendall_p_value': 0.018329223158883124, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 275, 'regressor__learning_rate': 0.0345485099372409, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.5025151227357959, 'test_rmse': 0.6679281180230406, 'test_r2': -0.4532262750799949, 'test_pearson_r': array([0.12467975]), 'test_pearson_p_value': array([0.11621557]), 'test_spearman_r': 0.18202740016607993, 'test_spearman_p_value': 0.02123880296426767, 'test_kendall_r': 0.12240667895786082, 'test_kendall_p_value': 0.023018674323319964, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05722272142611286, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.45626548276641987, 'test_rmse': 0.629766869650413, 'test_r2': -0.29191341583140185, 'test_pearson_r': array([0.14724455]), 'test_pearson_p_value': array([0.06316192]), 'test_spearman_r': 0.23156075621158614, 'test_spearman_p_value': 0.003216799832833349, 'test_kendall_r': 0.15073226292333247, 'test_kendall_p_value': 0.005169520549098361, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 542, 'regressor__learning_rate': 0.031184811233398533, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.5912245441862274, 'test_rmse': 0.7411990953969612, 'test_r2': -0.7895488159580062, 'test_pearson_r': array([0.27015345]), 'test_pearson_p_value': array([0.00055055]), 'test_spearman_r': 0.3566180766500867, 'test_spearman_p_value': 3.6807224716689757e-06, 'test_kendall_r': 0.23851752712723726, 'test_kendall_p_value': 9.505013620106028e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 128, 'regressor__learning_rate': 0.09997640917928179, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.49257776895984884, 'test_rmse': 0.6801161130744793, 'test_r2': -0.5067455474076368, 'test_pearson_r': array([0.12338743]), 'test_pearson_p_value': array([0.12007715]), 'test_spearman_r': 0.1803761029098143, 'test_spearman_p_value': 0.02246205894823303, 'test_kendall_r': 0.11296453006973746, 'test_kendall_p_value': 0.035960177994689126, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 657, 'regressor__learning_rate': 0.04594024165912621, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.5204546153635293, 'test_rmse': 0.6927739467669745, 'test_r2': -0.5633523903749265, 'test_pearson_r': array([0.19865266]), 'test_pearson_p_value': array([0.01179473]), 'test_spearman_r': 0.25629181824108777, 'test_spearman_p_value': 0.001070696587206178, 'test_kendall_r': 0.1708375460533428, 'test_kendall_p_value': 0.0015108194043507597, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 344, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_Thiophene': {'cluster size (%)': 50, 6: {'fit_time': array([15.22463465, 16.02701616]), 'score_time': array([0.42723393, 0.47036719]), 'test_pearson_r': array([0.89027101, 0.88549452]), 'test_pearson_p': array([-1.49693404e-45, -4.22714778e-44]), 'test_spearman_r': array([0.88533154, 0.87623219]), 'test_spearman_p': array([-2.13154193e-44, -4.36353370e-42]), 'test_kendall_r': array([0.76140471, 0.76712877]), 'test_kendall_p': array([-1.30961697e-37, -8.67557265e-38]), 'test_rmse': array([-0.30557686, -0.28572564]), 'test_mae': array([-0.16374127, -0.14555639]), 'test_r2': array([0.78355872, 0.77222543]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 847, 'regressor__learning_rate': 0.09075966624522726, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([22.39966416, 22.36843681]), 'score_time': array([0.58206987, 0.61543393]), 'test_pearson_r': array([0.89443147, 0.79782247]), 'test_pearson_p': array([-1.44532007e-46, -1.08601520e-29]), 'test_spearman_r': array([0.882414  , 0.81388409]), 'test_spearman_p': array([-9.66938346e-44, -9.76963329e-32]), 'test_kendall_r': array([0.76579026, 0.69250599]), 'test_kendall_p': array([-5.38864763e-38, -3.80297827e-31]), 'test_rmse': array([-0.30548712, -0.37947568]), 'test_mae': array([-0.14855243, -0.1987107 ]), 'test_r2': array([0.78433325, 0.5917381 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1112, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([16.90434766, 18.80597901]), 'score_time': array([0.53043175, 0.54308319]), 'test_pearson_r': array([0.77489719, 0.88131634]), 'test_pearson_p': array([-2.85437504e-27, -3.59120065e-43]), 'test_spearman_r': array([0.84673447, 0.88990978]), 'test_spearman_p': array([-6.86693972e-37, -4.01799960e-45]), 'test_kendall_r': array([0.73194374, 0.77542433]), 'test_kendall_p': array([-6.24538039e-35, -1.39716923e-38]), 'test_rmse': array([-0.40853963, -0.29905988]), 'test_mae': array([-0.18915711, -0.15775774]), 'test_r2': array([0.57836598, 0.77070479]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 973, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([39.97570324, 40.89920926]), 'score_time': array([1.0276947 , 1.00314593]), 'test_pearson_r': array([0.92445116, 0.87088266]), 'test_pearson_p': array([-1.91980136e-55, -5.37815055e-41]), 'test_spearman_r': array([0.92514831, 0.87789156]), 'test_spearman_p': array([-1.08473849e-55, -1.95512851e-42]), 'test_kendall_r': array([0.80960397, 0.75622696]), 'test_kendall_p': array([-3.29756254e-42, -7.90338064e-37]), 'test_rmse': array([-0.24293216, -0.32005253]), 'test_mae': array([-0.13687309, -0.15729038]), 'test_r2': array([0.85059327, 0.74054538]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([5.14640832, 5.549227  ]), 'score_time': array([0.19272828, 0.19520926]), 'test_pearson_r': array([0.92109378, 0.86759655]), 'test_pearson_p': array([-2.78493786e-54, -2.38147253e-40]), 'test_spearman_r': array([0.89929815, 0.87655959]), 'test_spearman_p': array([-8.26333202e-48, -3.72772608e-42]), 'test_kendall_r': array([0.77720111, 0.77435626]), 'test_kendall_p': array([-4.42408187e-39, -1.73647778e-38]), 'test_rmse': array([-0.24684703, -0.31729329]), 'test_mae': array([-0.13841052, -0.14960515]), 'test_r2': array([0.84572464, 0.74454724]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 368, 'regressor__learning_rate': 0.09081148924846974, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([16.33025527, 15.27230048]), 'score_time': array([0.47863317, 0.45132184]), 'test_pearson_r': array([0.89538578, 0.90243455]), 'test_pearson_p': array([-8.33889337e-47, -2.81495254e-48]), 'test_spearman_r': array([0.87294974, 0.9116792 ]), 'test_spearman_p': array([-1.00361905e-41, -6.81573519e-51]), 'test_kendall_r': array([0.7207619 , 0.78483166]), 'test_kendall_p': array([-7.22442282e-34, -1.77758202e-39]), 'test_rmse': array([-0.28066857, -0.28074536]), 'test_mae': array([-0.17085309, -0.15406237]), 'test_r2': array([0.79340124, 0.80745588]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 925, 'regressor__learning_rate': 0.0987504228399758, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([5.25743032, 5.06533861]), 'score_time': array([0.18375254, 0.19947028]), 'test_pearson_r': array([0.87313277, 0.91449484]), 'test_pearson_p': array([-9.20712899e-42, -9.53453398e-52]), 'test_spearman_r': array([0.87124726, 0.91539965]), 'test_spearman_p': array([-2.22383166e-41, -4.99492123e-52]), 'test_kendall_r': array([0.75242909, 0.7882225 ]), 'test_kendall_p': array([-1.16496317e-36, -7.03683866e-40]), 'test_rmse': array([-0.31485604, -0.25990121]), 'test_mae': array([-0.1456549 , -0.14622622]), 'test_r2': array([0.74176037, 0.82693611]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 385, 'regressor__learning_rate': 0.06926317822985503, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/substructure cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/substructure cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/substructure cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c016n03>
Subject: Job 383423: <NGB_log Rg (nm)_Mordred_Trimer_substructure cluster_20250317> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_Mordred_Trimer_substructure cluster_20250317> was submitted from host <c205n11> by user <sdehgha2> in cluster <Hazel> at Tue Mar 18 17:52:56 2025
Job was executed on host(s) <10*c016n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 19 09:37:15 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 19 09:37:15 2025
Terminated at Fri Mar 21 07:00:52 2025
Results reported at Fri Mar 21 07:00:52 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 10
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_Mordred_Trimer_substructure cluster_20250317"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250317/NGB_log Rg (nm)_Mordred_Trimer_substructure cluster_20250317.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250317/NGB_log Rg (nm)_Mordred_Trimer_substructure cluster_20250317.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "substructure cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   732586.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.95 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   163417 sec.
    Turnaround time :                            220076 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250317/NGB_log Rg (nm)_Mordred_Trimer_substructure cluster_20250317.err> for stderr output of this job.

