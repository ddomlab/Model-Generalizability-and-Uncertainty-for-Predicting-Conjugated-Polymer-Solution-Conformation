


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6

------------------------------------------------------------
Sender: LSF System <lsfadmin@c202n12>
Subject: Job 432655: <NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317> in cluster <Hazel> Exited

Job <NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317> was submitted from host <c028n04> by user <sdehgha2> in cluster <Hazel> at Fri Mar 21 14:31:17 2025
Job was executed on host(s) <10*c202n12>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Fri Mar 21 14:45:34 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Fri Mar 21 14:45:34 2025
Terminated at Mon Mar 24 14:50:23 2025
Results reported at Mon Mar 24 14:50:23 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 10
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250317/NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250317/NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM5 polymer_solvent HSP and polysize cluster" 



------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   1145723.00 sec.
    Max Memory :                                 3 GB
    Average Memory :                             2.99 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   259502 sec.
    Turnaround time :                            260346 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250317/NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317.err> for stderr output of this job.




-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1726), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1179), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1598), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1864), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1851), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1611), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1541), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1739), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1779), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1697), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1496), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1677), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1855), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1142), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1994), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1656), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1994), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1632), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1994), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 993), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1708), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1816), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 516), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 951), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 825), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1419), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1555), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1613), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1864), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1995), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1739), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1860), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1513), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1930), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1324), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1100), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1697), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1779), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1761), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1990), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1656), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1809), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1458), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1994), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1580), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 385), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1645), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1736), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 506), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1697), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1819), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1834), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1522), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1878), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1688), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1778), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1487), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1693), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1851), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1564), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1931), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1753), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1931), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1113), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1739), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1529), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1837), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1739), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1705), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1779), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 948), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1814), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1697), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1779), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1663), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1994), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1802), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1467), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1732), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1734), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1758), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1511), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1447), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1685), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1668), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 545), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1582), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1802), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1298), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1688), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1589), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1662), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1864), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1397), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1864), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1995), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1851), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1599), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1173), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1995), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1449), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1846), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1445), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1858), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1629), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1723), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1879), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1834), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1198), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1703), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1994), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1994), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1463), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1994), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1464), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1771), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1772), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1826), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 505), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1582), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1458), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 954), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1689), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1633), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1098), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1926), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1655), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1734), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1455), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 4



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 237), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1851), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1720), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1150), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1316), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1864), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1995), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1226), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1567), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1552), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1274), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1568), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1765), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1834), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1779), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1727), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1782), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1235), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1694), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1994), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1753), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1994), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 503), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1188), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 543), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1708), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1883), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1373), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1298), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 1465), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 34, 6: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.577213361403202, 'test_rmse': 0.7183122171657496, 'test_r2': -0.595609238466515, 'test_pearson_r': array([-0.29012485]), 'test_pearson_p_value': array([0.00581696]), 'test_spearman_r': -0.296296459287156, 'test_spearman_p_value': 0.004812213161752175, 'test_kendall_r': -0.17301260017787315, 'test_kendall_p_value': 0.018304420146118803, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1726, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.6016725774233787, 'test_rmse': 0.7551401772411448, 'test_r2': -0.7634176817621432, 'test_pearson_r': array([-0.33230325]), 'test_pearson_p_value': array([0.00146488]), 'test_spearman_r': -0.3221155310432734, 'test_spearman_p_value': 0.002081405442652573, 'test_kendall_r': -0.2131390164841871, 'test_kendall_p_value': 0.0036536540731856894, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1652, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.5914550858643303, 'test_rmse': 0.7337911258739216, 'test_r2': -0.6651177358598894, 'test_pearson_r': array([-0.31417287]), 'test_pearson_p_value': array([0.0027148]), 'test_spearman_r': -0.3194066597505852, 'test_spearman_p_value': 0.002280627382098268, 'test_kendall_r': -0.1976872483150883, 'test_kendall_p_value': 0.006998493226661625, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1496, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.5933729395666162, 'test_rmse': 0.7365529203421399, 'test_r2': -0.6776754432375776, 'test_pearson_r': array([-0.31597567]), 'test_pearson_p_value': array([0.00255752]), 'test_spearman_r': -0.3283997042110397, 'test_spearman_p_value': 0.0016782928078813593, 'test_kendall_r': -0.21904476394333236, 'test_kendall_p_value': 0.002805502295273689, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1994, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.5786012636590206, 'test_rmse': 0.7193247941367168, 'test_r2': -0.6001109465252881, 'test_pearson_r': array([-0.29405666]), 'test_pearson_p_value': array([0.00515745]), 'test_spearman_r': -0.31473949151541564, 'test_spearman_p_value': 0.00266445654693815, 'test_kendall_r': -0.1971663332997653, 'test_kendall_p_value': 0.007149282802574549, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1708, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.5674526203765143, 'test_rmse': 0.7051647386517584, 'test_r2': -0.5377339795763911, 'test_pearson_r': array([-0.27071984]), 'test_pearson_p_value': array([0.01028883]), 'test_spearman_r': -0.3077174084120436, 'test_spearman_p_value': 0.003351694871885348, 'test_kendall_r': -0.18674803299330475, 'test_kendall_p_value': 0.01084420498788859, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.5965577535054728, 'test_rmse': 0.7442788106065393, 'test_r2': -0.7130551544137222, 'test_pearson_r': array([-0.32099957]), 'test_pearson_p_value': array([0.0021615]), 'test_spearman_r': -0.29754690651748783, 'test_spearman_p_value': 0.004628547694862061, 'test_kendall_r': -0.17424607262555217, 'test_kendall_p_value': 0.01744824302727639, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 33, 6: {'fit_time': array([31.02398968, 35.95481443, 30.58608961]), 'score_time': array([0.85877061, 0.84819508, 0.84177613]), 'test_pearson_r': array([0.93601516, 0.89156682, 0.87355242]), 'test_pearson_p': array([-2.60534142e-40, -1.23135585e-30, -5.34407375e-28]), 'test_spearman_r': array([0.92749859, 0.90119316, 0.85541686]), 'test_spearman_p': array([-4.41371664e-38, -3.03868634e-32, -1.00921144e-25]), 'test_kendall_r': array([0.81377383, 0.80505041, 0.75798797]), 'test_kendall_p': array([-8.40788897e-29, -6.98510846e-28, -6.30059341e-25]), 'test_rmse': array([-0.2304043 , -0.29902924, -0.29267714]), 'test_mae': array([-0.12847676, -0.13655961, -0.14766566]), 'test_r2': array([0.87247389, 0.79221626, 0.74414592]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([32.59258461, 39.50898194, 31.45430803]), 'score_time': array([0.86916685, 0.84514093, 0.89383769]), 'test_pearson_r': array([0.88658888, 0.89383513, 0.88401924]), 'test_pearson_p': array([-3.35761650e-30, -5.31562312e-31, -1.77190189e-29]), 'test_spearman_r': array([0.83759029, 0.90509193, 0.87791001]), 'test_spearman_p': array([-4.92495333e-24, -6.08006881e-33, -1.34422039e-28]), 'test_kendall_r': array([0.69963828, 0.78425622, 0.73264128]), 'test_kendall_p': array([-1.06852195e-21, -1.47706016e-26, -2.33328841e-23]), 'test_rmse': array([-0.31260938, -0.29322658, -0.28908688]), 'test_mae': array([-0.16878882, -0.14488958, -0.17393285]), 'test_r2': array([0.74750879, 0.79222377, 0.76944562]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([30.51996779, 33.16128778, 30.87174964]), 'score_time': array([0.83620191, 0.73382807, 0.7812407 ]), 'test_pearson_r': array([0.96194856, 0.89031303, 0.92326746]), 'test_pearson_p': array([-1.14128960e-49, -1.94348701e-30, -1.17792791e-36]), 'test_spearman_r': array([0.96304904, 0.85556777, 0.92917382]), 'test_spearman_p': array([-3.35416071e-50, -9.69041253e-26, -4.60631424e-38]), 'test_kendall_r': array([0.84853416, 0.7392277 , 0.81672679]), 'test_kendall_p': array([-3.43805121e-31, -9.52996852e-24, -1.52466746e-28]), 'test_rmse': array([-0.17931068, -0.2658648 , -0.2522446 ]), 'test_mae': array([-0.12477768, -0.15162416, -0.12231333]), 'test_r2': array([0.92386053, 0.788422  , 0.84975239]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([33.47988224, 35.86948967, 30.22468305]), 'score_time': array([0.83197236, 0.76656222, 0.8233695 ]), 'test_pearson_r': array([0.92828483, 0.84256639, 0.93385813]), 'test_pearson_p': array([-2.82305469e-38, -2.73355865e-24, -2.86639514e-39]), 'test_spearman_r': array([0.93212804, 0.85993575, 0.93357424]), 'test_spearman_p': array([-2.94505702e-39, -2.93049346e-26, -3.41121521e-39]), 'test_kendall_r': array([0.82944434, 0.74629832, 0.80827198]), 'test_kendall_p': array([-1.16488103e-29, -3.29950025e-24, -3.51860744e-28]), 'test_rmse': array([-0.21787308, -0.36129973, -0.24049662]), 'test_mae': array([-0.11468154, -0.18650302, -0.13435552]), 'test_r2': array([0.86108822, 0.68016542, 0.86551815]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([33.53778505, 29.64589143, 33.40451145]), 'score_time': array([0.79793262, 0.8761251 , 0.76953435]), 'test_pearson_r': array([0.95272622, 0.86223876, 0.89093554]), 'test_pearson_p': array([-9.55217755e-46, -1.53453079e-26, -1.55052081e-30]), 'test_spearman_r': array([0.92644313, 0.83614113, 0.90668315]), 'test_spearman_p': array([-7.97885366e-38, -1.27606602e-23, -3.09020321e-33]), 'test_kendall_r': array([0.78331246, 0.72854404, 0.82156213]), 'test_kendall_p': array([-9.71059150e-27, -3.70909534e-23, -5.55160071e-29]), 'test_rmse': array([-0.19201446, -0.33176645, -0.28819988]), 'test_mae': array([-0.12391203, -0.16440802, -0.12428085]), 'test_r2': array([0.90636785, 0.72126595, 0.7896935 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([30.51525354, 33.38507104, 30.73932719]), 'score_time': array([0.81317282, 0.80079055, 0.8192513 ]), 'test_pearson_r': array([0.94316755, 0.92871523, 0.89006589]), 'test_pearson_p': array([-1.96236049e-42, -5.98341542e-38, -2.12503392e-30]), 'test_spearman_r': array([0.93344605, 0.92919381, 0.90046587]), 'test_spearman_p': array([-1.31562293e-39, -4.55389475e-38, -4.07209673e-32]), 'test_kendall_r': array([0.79319685, 0.77762591, 0.80127831]), 'test_kendall_p': array([-1.84940948e-27, -3.72640340e-26, -1.72261571e-27]), 'test_rmse': array([-0.20565409, -0.23045336, -0.31381367]), 'test_mae': array([-0.13162336, -0.15707593, -0.15674458]), 'test_r2': array([0.88053729, 0.85463935, 0.78861777]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([34.9336412 , 34.53043914, 32.71435714]), 'score_time': array([0.7907567 , 0.77563334, 0.78831077]), 'test_pearson_r': array([0.86561672, 0.8792343 , 0.95846273]), 'test_pearson_p': array([-2.89466386e-27, -8.74506870e-29, -1.55354157e-47]), 'test_spearman_r': array([0.87181325, 0.87437723, 0.95147518]), 'test_spearman_p': array([-4.45099982e-28, -4.13174105e-28, -9.23241266e-45]), 'test_kendall_r': array([0.76787604, 0.75062026, 0.82099892]), 'test_kendall_p': array([-1.22627868e-25, -2.06338260e-24, -5.58567433e-29]), 'test_rmse': array([-0.32000365, -0.28188332, -0.19035233]), 'test_mae': array([-0.1467472 , -0.15978252, -0.12550484]), 'test_r2': array([0.7411452 , 0.76666212, 0.91099725]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 6, 6: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.9978598547098487, 'test_rmse': 1.2689099239212973, 'test_r2': -0.9462835101563727, 'test_pearson_r': array([0.15425512]), 'test_pearson_p_value': array([0.56840561]), 'test_spearman_r': 0.54440822748326, 'test_spearman_p_value': 0.02923279098779576, 'test_kendall_r': 0.30562492275106334, 'test_kendall_p_value': 0.11413285386698617, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1997, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.986003683427394, 'test_rmse': 1.254909304563291, 'test_r2': -0.9035715002625588, 'test_pearson_r': array([0.17082395]), 'test_pearson_p_value': array([0.52703091]), 'test_spearman_r': 0.5478582386622125, 'test_spearman_p_value': 0.028024588728261204, 'test_kendall_r': 0.31613745392988496, 'test_kendall_p_value': 0.10350415650864107, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1513, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.9882094585247544, 'test_rmse': 1.2576042025173506, 'test_r2': -0.9117560585341629, 'test_pearson_r': array([0.19686378]), 'test_pearson_p_value': array([0.46491532]), 'test_spearman_r': 0.54440822748326, 'test_spearman_p_value': 0.02923279098779576, 'test_kendall_r': 0.30562492275106334, 'test_kendall_p_value': 0.11413285386698617, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.9858963370518461, 'test_rmse': 1.2550401603831591, 'test_r2': -0.9039685112585907, 'test_pearson_r': array([0.17213499]), 'test_pearson_p_value': array([0.52381652]), 'test_spearman_r': 0.5504572077886296, 'test_spearman_p_value': 0.027139911010647937, 'test_kendall_r': 0.3236028593834788, 'test_kendall_p_value': 0.09436253263444551, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1809, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.9858949362991987, 'test_rmse': 1.2546101665466531, 'test_r2': -0.9026640837149873, 'test_pearson_r': array([0.21642459]), 'test_pearson_p_value': array([0.42077072]), 'test_spearman_r': 0.5478582386622125, 'test_spearman_p_value': 0.028024588728261204, 'test_kendall_r': 0.31613745392988496, 'test_kendall_p_value': 0.10350415650864107, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1645, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.980710643745065, 'test_rmse': 1.2463507176975013, 'test_r2': -0.8776950070702532, 'test_pearson_r': array([0.21044098]), 'test_pearson_p_value': array([0.43403623]), 'test_spearman_r': 0.5478582386622125, 'test_spearman_p_value': 0.028024588728261204, 'test_kendall_r': 0.31613745392988496, 'test_kendall_p_value': 0.10350415650864107, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1697, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.98850340759355, 'test_rmse': 1.2600061682671948, 'test_r2': -0.9190657634363397, 'test_pearson_r': array([0.1894014]), 'test_pearson_p_value': array([0.4823362]), 'test_spearman_r': 0.54440822748326, 'test_spearman_p_value': 0.02923279098779576, 'test_kendall_r': 0.30562492275106334, 'test_kendall_p_value': 0.11413285386698617, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1997, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 6, 6: {'fit_time': array([36.38213396, 43.27124405, 36.87026882, 37.19284582, 45.98937011,
       36.18528605, 47.17104626, 38.42209148, 44.98035288, 54.09807372,
       42.30233026, 40.92013359, 36.7425406 , 47.01849771, 42.26692295,
       37.28993678]), 'score_time': array([0.47086596, 0.50209355, 0.46211219, 0.44887543, 0.42615294,
       0.45556617, 0.45564032, 0.4560008 , 0.41154242, 0.46477342,
       0.42989182, 0.44236302, 0.4586668 , 0.44887543, 0.46826243,
       0.45447254]), 'test_pearson_r': array([0.95082914, 0.9859498 , 0.99033824, 0.98658144, 0.93909617,
       0.97684898, 0.97075213, 0.7155007 , 0.94922049, 0.93525747,
       0.97164834, 0.95468391, 0.97918925, 0.95442242, 0.93083822,
       0.95982643]), 'test_pearson_p': array([-4.90159525e-09, -4.51291245e-13, -2.75582415e-14, -2.02740277e-12,
       -7.08849646e-08, -8.99108824e-11, -4.54418085e-10, -1.83101676e-03,
       -2.04017692e-08, -1.07616774e-07, -3.66335439e-10, -9.33182090e-09,
       -4.29069289e-11, -9.70855406e-09, -1.68825564e-07, -4.07143721e-09]), 'test_spearman_r': array([0.91421569, 0.94788491, 0.98712465, 0.95      , 0.83235294,
       0.95588235, 0.90507751, 0.76470588, 0.90588235, 0.91764706,
       0.95511431, 0.93823529, 0.96688768, 0.90588235, 0.91605401,
       0.92273756]), 'test_spearman_p': array([-2.85894357e-07, -7.51642282e-09, -2.35235248e-13, -1.83461727e-08,
       -6.32812457e-05, -7.76027446e-09, -1.44408329e-06, -5.59676294e-04,
       -1.36351336e-06, -5.52865496e-07, -8.73885027e-09, -7.80221977e-08,
       -1.07216639e-09, -1.36351336e-06, -6.29486679e-07, -3.58624443e-07]), 'test_kendall_r': array([0.82352941, 0.84871427, 0.93727575, 0.85      , 0.68333333,
       0.86666667, 0.77824949, 0.76666667, 0.78333333, 0.81666667,
       0.86193223, 0.85      , 0.87866878, 0.75      , 0.80675117,
       0.79498604]), 'test_kendall_p': array([-1.25716600e-07, -2.12480839e-06, -1.64175866e-07, -1.02027025e-07,
       -8.26619198e-05, -3.98309214e-08, -2.77306574e-05, -4.72451181e-06,
       -2.41022656e-06, -5.50848432e-07, -3.45008795e-06, -1.02027025e-07,
       -2.22140114e-06, -8.91848950e-06, -1.48467740e-05, -1.85653874e-05]), 'test_rmse': array([-0.18568468, -0.12219834, -0.1226373 , -0.11859305, -0.16651421,
       -0.15162366, -0.13957961, -0.51695849, -0.22216237, -0.21364673,
       -0.13985967, -0.18597219, -0.1459597 , -0.17455685, -0.21352288,
       -0.13949227]), 'test_mae': array([-0.10786967, -0.08218162, -0.08695411, -0.0846126 , -0.13113288,
       -0.11101822, -0.08699596, -0.20821737, -0.11582082, -0.14420742,
       -0.09739526, -0.13754558, -0.11102617, -0.12690819, -0.10494877,
       -0.10259996]), 'test_r2': array([0.89749983, 0.9605692 , 0.97276923, 0.9675361 , 0.87052467,
       0.94836462, 0.94100252, 0.45760049, 0.89701317, 0.86687604,
       0.942639  , 0.90887879, 0.95156298, 0.87140958, 0.83768918,
       0.91698339]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([37.20709991, 41.46629453, 44.2542665 , 44.05822992, 37.50349736,
       46.71103263, 46.84585309, 37.85619044, 46.9403038 , 50.95686126,
       48.90934801, 42.70852423, 44.60495806, 50.98279619, 48.95966482,
       42.65016747]), 'score_time': array([0.456393  , 0.45681262, 0.44343543, 0.44983673, 0.46136999,
       0.42603827, 0.43098426, 0.52677965, 0.43509912, 0.51834011,
       0.4708097 , 0.46880603, 0.50909734, 0.50981188, 0.43196368,
       0.45981503]), 'test_pearson_r': array([0.98146733, 0.96778516, 0.98502776, 0.98247248, 0.99271984,
       0.94370334, 0.62036814, 0.98575673, 0.95508193, 0.96637158,
       0.79478298, 0.99236605, 0.98107121, 0.95409232, 0.9691858 ,
       0.92990751]), 'test_pearson_p': array([-3.55429519e-12, -2.15983405e-10, -7.24993446e-13, -1.30115195e-11,
       -2.85109862e-14, -4.13808312e-08, -1.03484406e-02, -3.07129782e-12,
       -8.78232270e-09, -1.19311862e-09, -2.34277443e-04, -3.97067603e-14,
       -2.22093031e-11, -1.02025813e-08, -6.51996078e-10, -1.84920035e-07]), 'test_spearman_r': array([0.94297994, 0.92336008, 0.98280395, 0.85209736, 0.96470588,
       0.91979422, 0.72647059, 0.98235294, 0.90802085, 0.92715257,
       0.88070788, 0.99411765, 0.99117647, 0.94550913, 0.94845464,
       0.87647059]), 'test_spearman_p': array([-1.45460594e-08, -1.26134975e-07, -2.03521631e-12, -2.78199541e-05,
       -1.66620775e-09, -4.62206235e-07, -1.43618264e-03, -1.36412383e-11,
       -1.16766988e-06, -2.40408570e-07, -6.68750309e-06, -6.43399749e-15,
       -1.09082915e-13, -3.30972919e-08, -2.26091507e-08, -8.43911858e-06]), 'test_kendall_r': array([0.84871427, 0.78967327, 0.92942583, 0.77824949, 0.9       ,
       0.84519568, 0.66666667, 0.93333333, 0.74477639, 0.81172259,
       0.72271459, 0.96666667, 0.96666667, 0.82355849, 0.82355849,
       0.73333333]), 'test_kendall_p': array([-2.12480839e-06, -1.02725536e-05, -2.40218359e-07, -2.77306574e-05,
       -4.72556483e-09, -5.31661458e-06, -1.34937165e-04, -3.55879882e-10,
       -6.04438410e-05, -1.23329686e-05, -1.04538557e-04, -1.29045888e-11,
       -1.29045888e-11, -9.81644457e-06, -9.81644457e-06, -1.62687222e-05]), 'test_rmse': array([-0.09889413, -0.18393781, -0.10300225, -0.15970147, -0.08162434,
       -0.23806776, -0.57308595, -0.12797987, -0.14593742, -0.15377688,
       -0.37966502, -0.09540017, -0.11498156, -0.19020293, -0.18897764,
       -0.24200327]), 'test_mae': array([-0.06222784, -0.14526577, -0.07699587, -0.10925613, -0.05855927,
       -0.1734011 , -0.25305265, -0.08298139, -0.1076175 , -0.11623718,
       -0.24745274, -0.06551038, -0.08513219, -0.13185938, -0.12637306,
       -0.15609495]), 'test_r2': array([0.96316878, 0.91908525, 0.96874085, 0.94621079, 0.98204652,
       0.88001973, 0.3157346 , 0.96853187, 0.90600908, 0.92346841,
       0.60354198, 0.98029711, 0.95909326, 0.89745109, 0.90897214,
       0.76690061]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([35.03642797, 33.51520967, 42.86276412, 42.43515253, 39.13696218,
       33.95283508, 43.0304935 , 33.87720346, 33.53883958, 33.78798914,
       34.1030705 , 37.09699845, 33.35743856, 36.71024656, 35.92161655,
       44.7752564 ]), 'score_time': array([0.40364838, 0.41635513, 0.53321099, 0.42801833, 0.3803134 ,
       0.39589381, 0.38368535, 0.40221834, 0.40442896, 0.40543914,
       0.39740109, 0.42862272, 0.40588975, 0.42812538, 0.37404728,
       0.44466853]), 'test_pearson_r': array([0.95039233, 0.98362063, 0.93817654, 0.90743673, 0.97888459,
       0.97923149, 0.96332138, 0.97907719, 0.92752527, 0.94833712,
       0.98024011, 0.95205183, 0.94194469, 0.98503221, 0.57306014,
       0.98863083]), 'test_pearson_p': array([-5.23106492e-09, -1.41627994e-12, -2.63061923e-08, -1.21863514e-06,
       -4.74634637e-11, -4.23057371e-11, -2.17321086e-09, -4.45372490e-11,
       -2.32163585e-07, -2.29652194e-08, -2.99372464e-11, -1.37576949e-08,
       -5.10813243e-08, -4.33836198e-12, -2.03170196e-02, -6.38923796e-13]), 'test_spearman_r': array([0.96014733, 0.94911115, 0.93382353, 0.80294118, 0.95882353,
       0.95588235, 0.97866104, 0.98454773, 0.92058824, 0.95805765,
       0.96176471, 0.95294118, 0.94922763, 0.92694358, 0.66470588,
       0.96760046]), 'test_spearman_p': array([-1.04178502e-09, -6.30978333e-09, -4.32632699e-08, -1.80516795e-04,
       -4.82554077e-09, -7.76027446e-09, -5.10643005e-11, -5.41517846e-12,
       -4.32041043e-07, -5.47877174e-09, -2.89508013e-09, -1.20965793e-08,
       -2.03820935e-08, -2.45139626e-07, -4.96738594e-03, -9.22423035e-10]), 'test_kendall_r': array([0.84871427, 0.84871427, 0.80882353, 0.68333333, 0.88333333,
       0.85      , 0.91214188, 0.92887842, 0.81666667, 0.87866878,
       0.86666667, 0.85      , 0.86193223, 0.84757938, 0.65      ,
       0.89078776]), 'test_kendall_p': array([-2.12480839e-06, -2.12480839e-06, -2.67494633e-07, -8.26619198e-05,
       -1.43717927e-08, -1.02027025e-07, -8.99518934e-07, -5.65704076e-07,
       -5.50848432e-07, -2.22140114e-06, -3.98309214e-08, -1.02027025e-07,
       -3.45008795e-06, -6.07683023e-06, -2.15302431e-04, -1.73481918e-06]), 'test_rmse': array([-0.20752229, -0.12100876, -0.23453533, -0.25227011, -0.14855232,
       -0.13461423, -0.15732966, -0.10616967, -0.20542927, -0.20053228,
       -0.1316835 , -0.18027045, -0.24206402, -0.1168279 , -0.55187749,
       -0.13420502]), 'test_mae': array([-0.13090037, -0.09545158, -0.15145986, -0.16323319, -0.09931525,
       -0.10679466, -0.11288963, -0.06973173, -0.14395201, -0.13714574,
       -0.09415195, -0.11033207, -0.11594265, -0.07195792, -0.22721963,
       -0.09328181]), 'test_r2': array([0.89959543, 0.9673993 , 0.86369411, 0.80340259, 0.95175624,
       0.95476922, 0.91510605, 0.95325251, 0.8305114 , 0.87340234,
       0.95471591, 0.89965092, 0.87919101, 0.96840081, 0.22179294,
       0.95829783]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1779, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([37.26254916, 40.56225753, 38.5130074 , 39.15065312, 36.54577279,
       45.33113933, 39.74053311, 42.14526367, 45.18101263, 44.846421  ,
       50.54716873, 49.42387891, 36.95179391, 50.54904771, 43.21966362,
       39.81863713]), 'score_time': array([0.45716953, 0.4310751 , 0.52052546, 0.45330548, 0.48496246,
       0.41598535, 0.44280291, 0.42155838, 0.41256261, 0.4716785 ,
       0.42041159, 0.47444558, 0.45495558, 0.4445219 , 0.47070193,
       0.43594098]), 'test_pearson_r': array([0.99078734, 0.96381789, 0.97391621, 0.99553245, 0.68944566,
       0.83672212, 0.98253882, 0.97232484, 0.97813822, 0.52636697,
       0.84388857, 0.9741644 , 0.95749039, 0.98603549, 0.96500795,
       0.96409681]), 'test_pearson_p': array([-1.93098181e-14, -5.10145753e-10, -4.51344086e-11, -9.41296788e-16,
       -3.12915948e-03, -5.32509982e-05, -1.26728811e-11, -3.09913585e-10,
       -6.04092257e-11, -3.62098747e-02, -3.96830567e-05, -1.92424487e-10,
       -6.00988347e-09, -2.67641036e-12, -1.57017513e-09, -1.87516451e-09]), 'test_spearman_r': array([0.98711656, 0.97303922, 0.96259981, 0.98669374, 0.7275405 ,
       0.84705882, 0.97647059, 0.97277436, 0.98010556, 0.65783682,
       0.82855063, 0.92941176, 0.98160439, 0.96176471, 0.89705882,
       0.95882353]), 'test_spearman_p': array([-2.36339814e-13, -5.76923068e-11, -6.51633967e-10, -1.91214071e-12,
       -1.40172429e-03, -3.46804648e-05, -1.00615044e-10, -2.76678019e-10,
       -3.13824861e-11, -5.60716637e-03, -7.32496781e-05, -1.94011895e-07,
       -1.82090718e-11, -2.89508013e-09, -2.49237597e-06, -4.82554077e-09]), 'test_kendall_r': array([0.93333333, 0.89705882, 0.86347451, 0.94048016, 0.58823529,
       0.73333333, 0.91666667, 0.87866878, 0.91990493, 0.6443571 ,
       0.6778302 , 0.8       , 0.91214188, 0.86666667, 0.78333333,
       0.86666667]), 'test_kendall_p': array([-2.00290194e-07, -1.23139016e-09, -1.40967662e-06, -5.83620144e-07,
       -1.58878871e-03, -1.62687222e-05, -1.38948965e-09, -2.22140114e-06,
       -8.54700027e-07, -5.19968854e-04, -2.61704221e-04, -1.17934846e-06,
       -8.99518934e-07, -3.98309214e-08, -2.41022656e-06, -3.98309214e-08]), 'test_rmse': array([-0.10158914, -0.1273567 , -0.16007998, -0.06131336, -0.43408389,
       -0.35199701, -0.18651807, -0.14731288, -0.12020518, -0.54264743,
       -0.28132779, -0.16620139, -0.15032122, -0.12116156, -0.16344874,
       -0.19682686]), 'test_mae': array([-0.07666999, -0.08223192, -0.10959955, -0.04577534, -0.22676075,
       -0.20428078, -0.11343641, -0.11904658, -0.09536596, -0.22828232,
       -0.17777238, -0.12561879, -0.09561057, -0.08913407, -0.13013293,
       -0.13449534]), 'test_r2': array([0.97531612, 0.92754653, 0.9289804 , 0.98721298, 0.21757601,
       0.68712792, 0.94412045, 0.93784798, 0.94997245, 0.02879235,
       0.70985396, 0.93733166, 0.91551074, 0.96874546, 0.91361141,
       0.92890408]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1994, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([38.11696386, 36.20641232, 41.07404256, 37.3373313 , 47.09923959,
       37.82573318, 49.72044182, 46.01387119, 41.75908804, 45.46188784,
       42.42653489, 36.86798501, 44.51745629, 46.54285645, 41.48559928,
       49.47703242]), 'score_time': array([0.47914696, 0.45987749, 0.46226811, 0.45240355, 0.44889665,
       0.45095396, 0.4965229 , 0.44413066, 0.41989088, 0.46641207,
       0.42357254, 0.45739913, 0.47802472, 0.52582026, 0.43070292,
       0.51077342]), 'test_pearson_r': array([0.95395857, 0.98292651, 0.99126732, 0.96525285, 0.93161756,
       0.9779507 , 0.96840943, 0.99090526, 0.67395202, 0.92902169,
       0.98468577, 0.98618693, 0.92479015, 0.97921261, 0.58164381,
       0.99452916]), 'test_pearson_p': array([-3.02078208e-09, -1.92959900e-12, -1.29449237e-14, -1.49582155e-09,
       -1.56279171e-07, -6.40990276e-11, -7.74453033e-10, -1.34735944e-13,
       -4.19987681e-03, -2.01429910e-07, -5.08734394e-12, -2.48071433e-12,
       -2.98674116e-07, -4.25734402e-11, -1.81066278e-02, -3.87679070e-15]), 'test_spearman_r': array([0.90864517, 0.88287745, 0.96319018, 0.89330414, 0.93009591,
       0.95882353, 0.96470588, 0.98235294, 0.55294118, 0.90574374,
       0.93745426, 0.96470588, 0.88200974, 0.94628429, 0.70294118,
       0.95805765]), 'test_spearman_p': array([-4.50751295e-07, -2.68998526e-06, -5.79327661e-10, -3.16996646e-06,
       -1.81561070e-07, -4.82554077e-09, -1.66620775e-09, -1.36412383e-11,
       -2.63144999e-02, -1.37711163e-06, -8.50171042e-08, -1.66620775e-09,
       -6.21531151e-06, -3.00012032e-08, -2.38695267e-03, -5.47877174e-09]), 'test_kendall_r': array([0.77491302, 0.75207105, 0.85185185, 0.76151294, 0.79498604,
       0.86666667, 0.86666667, 0.91666667, 0.46666667, 0.77310924,
       0.84519568, 0.86666667, 0.76799402, 0.84519568, 0.66666667,
       0.84519568]), 'test_kendall_p': array([-1.49855832e-05, -3.32635548e-05, -2.08319812e-06, -4.10999309e-05,
       -1.85653874e-05, -3.98309214e-08, -3.98309214e-08, -1.38948965e-09,
       -1.14805971e-02, -3.31810562e-05, -5.31661458e-06, -3.98309214e-08,
       -3.91635038e-05, -5.31661458e-06, -1.34937165e-04, -5.31661458e-06]), 'test_rmse': array([-0.18345889, -0.11016314, -0.08855794, -0.1552949 , -0.29090651,
       -0.11160405, -0.17909098, -0.11754869, -0.38844153, -0.30838181,
       -0.13308707, -0.09852194, -0.20340693, -0.12725926, -0.53808545,
       -0.08866125]), 'test_mae': array([-0.12007516, -0.08326867, -0.06869581, -0.10791624, -0.20752973,
       -0.08179336, -0.12521708, -0.08689089, -0.22920333, -0.19711388,
       -0.08856017, -0.06994963, -0.11694956, -0.10707033, -0.23592813,
       -0.06745244]), 'test_r2': array([0.90891577, 0.9656282 , 0.97842149, 0.92836749, 0.82715529,
       0.95568902, 0.93691328, 0.96005172, 0.22699689, 0.82716214,
       0.96541731, 0.97247443, 0.82538981, 0.95647722, 0.15628895,
       0.97808615]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([37.07273507, 46.40744495, 44.03493738, 38.03812838, 38.45228148,
       50.52537012, 38.57976413, 36.69105697, 41.99779272, 50.50320673,
       41.5427227 , 41.75110269, 46.1471622 , 42.32506084, 42.28772807,
       44.18514585]), 'score_time': array([0.46501851, 0.43107986, 0.45039535, 0.44592786, 0.46317625,
       0.43300271, 0.45253301, 0.45739818, 0.46799922, 0.41547275,
       0.45084548, 0.49889827, 0.48570824, 0.4719224 , 0.48016   ,
       0.43816233]), 'test_pearson_r': array([0.97974701, 0.82517057, 0.99322639, 0.99156979, 0.99629564,
       0.92833365, 0.98552211, 0.98126832, 0.99145523, 0.90841768,
       0.96648538, 0.98973387, 0.97862661, 0.6724218 , 0.98526912,
       0.96830468]), 'test_pearson_p': array([-6.88219262e-12, -4.55180548e-05, -1.93681761e-15, -7.93558585e-14,
       -2.54156124e-16, -2.15101698e-07, -3.44127952e-12, -2.06508613e-11,
       -8.71929479e-14, -1.13408473e-06, -1.16549408e-09, -3.13658411e-13,
       -5.16391845e-11, -4.31984826e-03, -3.88235448e-12, -7.92387224e-10]), 'test_spearman_r': array([0.96078431, 0.78847348, 0.97177987, 0.99337775, 0.99337775,
       0.94411765, 0.94039761, 0.96764706, 0.94705882, 0.95658598,
       0.93529412, 0.99115475, 0.99558282, 0.79323053, 0.9616561 ,
       0.95      ]), 'test_spearman_p': array([-9.24915993e-10, -1.69533500e-04, -8.09524658e-11, -1.47168758e-14,
       -1.47168758e-14, -3.93392920e-08, -6.11516412e-08, -9.13289481e-10,
       -2.71573117e-08, -6.94731437e-09, -1.07201672e-07, -1.10969762e-13,
       -8.69589913e-16, -2.45874782e-04, -2.95228084e-09, -1.83461727e-08]), 'test_kendall_r': array([0.88235294, 0.62731054, 0.91854372, 0.96235152, 0.96235152,
       0.83333333, 0.81172259, 0.88333333, 0.83333333, 0.86193223,
       0.8       , 0.9536629 , 0.97482434, 0.76151294, 0.85238897,
       0.86666667]), 'test_kendall_p': array([-3.57438554e-09, -4.57727189e-04, -3.11133291e-07, -2.18526649e-07,
       -2.18526649e-07, -2.44193725e-07, -1.23329686e-05, -1.43717927e-08,
       -2.44193725e-07, -3.45008795e-06, -1.17934846e-06, -3.28081900e-07,
       -1.66572686e-07, -4.10999309e-05, -5.01240995e-06, -3.98309214e-08]), 'test_rmse': array([-0.10489488, -0.26610538, -0.10780799, -0.11920199, -0.05442915,
       -0.21186038, -0.12474247, -0.12262821, -0.07267128, -0.28192715,
       -0.14423562, -0.10603927, -0.14652585, -0.54859223, -0.11983899,
       -0.22980046]), 'test_mae': array([-0.07402157, -0.20731582, -0.07830549, -0.09257935, -0.0384286 ,
       -0.11214442, -0.08911593, -0.09349969, -0.05892357, -0.19661772,
       -0.10387031, -0.08047875, -0.09533726, -0.24162755, -0.09189477,
       -0.17335655]), 'test_r2': array([0.95376912, 0.63099414, 0.97742784, 0.96224037, 0.9921962 ,
       0.84343901, 0.96982374, 0.96190819, 0.97889354, 0.71890208,
       0.92086918, 0.97822093, 0.94981243, 0.41522308, 0.96037676,
       0.90145003]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([45.47613406, 37.52388477, 38.38324285, 45.0242815 , 36.775249  ,
       39.66109061, 37.55388308, 43.69691825, 50.62160778, 47.89504719,
       44.22845864, 46.73399282, 44.97524047, 42.68038082, 44.22468424,
       43.12106681]), 'score_time': array([0.41722226, 0.46140027, 0.45998597, 0.41564584, 0.45415258,
       0.48141217, 0.49455714, 0.43348908, 0.46579146, 0.40469956,
       0.47836685, 0.41096711, 0.41615939, 0.44333625, 0.4800365 ,
       0.4519949 ]), 'test_pearson_r': array([0.93773322, 0.71445177, 0.96847553, 0.92562569, 0.94726503,
       0.98752276, 0.98105847, 0.94992408, 0.91634402, 0.95652024,
       0.98780642, 0.98057183, 0.82704374, 0.97364809, 0.97660514,
       0.9952071 ]), 'test_pearson_p': array([-2.77181761e-08, -1.27122728e-03, -1.83963031e-10, -2.76832642e-07,
       -2.64400847e-08, -1.22154083e-12, -2.23134085e-11, -1.85382993e-08,
       -6.14905086e-07, -7.02005695e-09, -1.04068961e-12, -2.66148956e-11,
       -7.75468020e-05, -2.20709056e-10, -9.66905381e-11, -1.53834528e-15]), 'test_spearman_r': array([0.77375858, 0.73464595, 0.93742402, 0.87564409, 0.93451092,
       0.98454773, 0.98235294, 0.92647059, 0.83799796, 0.95      ,
       0.99410462, 0.94698188, 0.83529412, 0.95294118, 0.97647059,
       0.96764706]), 'test_spearman_p': array([-2.68051248e-04, -7.82679109e-04, -2.87411513e-08, -8.82222352e-06,
       -1.16375217e-07, -5.41517846e-12, -1.36412383e-11, -2.56139707e-07,
       -5.05865491e-05, -1.83461727e-08, -6.53417850e-15, -2.74291427e-08,
       -5.63713206e-05, -1.20965793e-08, -1.00615044e-10, -9.13289481e-10]), 'test_kendall_r': array([0.67159129, 0.75097607, 0.81483717, 0.7113033 , 0.87866878,
       0.92887842, 0.91666667, 0.8       , 0.67229265, 0.85      ,
       0.97054189, 0.87398044, 0.7       , 0.83333333, 0.9       ,
       0.88333333]), 'test_kendall_p': array([-1.75630107e-04, -3.00010062e-05, -5.65491557e-06, -1.27728091e-04,
       -2.22140114e-06, -5.65704076e-07, -1.38948965e-09, -1.17934846e-06,
       -3.07232055e-04, -1.02027025e-07, -2.02597451e-07, -2.70729796e-06,
       -4.94106357e-05, -2.44193725e-07, -4.72556483e-09, -1.43717927e-08]), 'test_rmse': array([-0.24286804, -0.54863615, -0.16591247, -0.23804798, -0.18029793,
       -0.08387562, -0.12617109, -0.16308605, -0.24704845, -0.16498115,
       -0.11894107, -0.13300861, -0.37236317, -0.15238713, -0.12629097,
       -0.08661211]), 'test_mae': array([-0.14217496, -0.19023437, -0.1160065 , -0.15992002, -0.10362313,
       -0.06318293, -0.06973247, -0.12180068, -0.19549402, -0.12926995,
       -0.08840054, -0.09389763, -0.22544047, -0.1147084 , -0.09227786,
       -0.07118647]), 'test_r2': array([0.84502659, 0.44686337, 0.9337125 , 0.84360266, 0.89710334,
       0.9733709 , 0.95929535, 0.90215643, 0.824225  , 0.90618675,
       0.96658275, 0.95532094, 0.66844035, 0.9189915 , 0.95314077,
       0.98430017]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 22, 6: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.7080542199997981, 'test_rmse': 0.8492517988501577, 'test_r2': -0.5558512682517918, 'test_pearson_r': array([0.46406877]), 'test_pearson_p_value': array([0.00024326]), 'test_spearman_r': 0.3909077041505768, 'test_spearman_p_value': 0.002413519430806873, 'test_kendall_r': 0.3243261338096678, 'test_kendall_p_value': 0.0003391753886094337, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.7110868419621369, 'test_rmse': 0.8503739256743035, 'test_r2': -0.5599655153092309, 'test_pearson_r': array([0.46317017]), 'test_pearson_p_value': array([0.00025102]), 'test_spearman_r': 0.3832769346886269, 'test_spearman_p_value': 0.0029807002228544976, 'test_kendall_r': 0.31460849684158787, 'test_kendall_p_value': 0.0005089262326781409, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1529, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.708316711680801, 'test_rmse': 0.8488122730808059, 'test_r2': -0.5542412398277985, 'test_pearson_r': array([0.4608613]), 'test_pearson_p_value': array([0.00027202]), 'test_spearman_r': 0.38930770410210347, 'test_spearman_p_value': 0.0025237705700002513, 'test_kendall_r': 0.32554083843067777, 'test_kendall_p_value': 0.0003221536989101072, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1997, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.7123265411698241, 'test_rmse': 0.8507846230656138, 'test_r2': -0.5614726839994428, 'test_pearson_r': array([0.46452889]), 'test_pearson_p_value': array([0.00023937]), 'test_spearman_r': 0.38841539638276257, 'test_spearman_p_value': 0.0025871836419452186, 'test_kendall_r': 0.3206820199466378, 'test_kendall_p_value': 0.0003954253649624002, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1663, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.7081494106342893, 'test_rmse': 0.8474332100852161, 'test_r2': -0.5491949994218, 'test_pearson_r': array([0.46735088]), 'test_pearson_p_value': array([0.00021673]), 'test_spearman_r': 0.37847693454320674, 'test_spearman_p_value': 0.0033953729782435563, 'test_kendall_r': 0.30732026911552796, 'test_kendall_p_value': 0.0006850629818128785, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1511, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.7124616485558384, 'test_rmse': 0.8524604069798218, 'test_r2': -0.5676299834455458, 'test_pearson_r': array([0.46022343]), 'test_pearson_p_value': array([0.00027809]), 'test_spearman_r': 0.3794615499576519, 'test_spearman_p_value': 0.003306371309932476, 'test_kendall_r': 0.31582320146259785, 'test_kendall_p_value': 0.0004840434285498793, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1802, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.7184806281729675, 'test_rmse': 0.8570133102775896, 'test_r2': -0.5844198011752073, 'test_pearson_r': array([0.46088153]), 'test_pearson_p_value': array([0.00027183]), 'test_spearman_r': 0.3781077037627898, 'test_spearman_p_value': 0.0034292916482196937, 'test_kendall_r': 0.3170379060836079, 'test_kendall_p_value': 0.0004602990381513206, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1997, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 25, 6: {'fit_time': array([31.1716783 , 31.15287924, 39.67557073, 38.29573822]), 'score_time': array([0.63875413, 0.62022138, 0.62127852, 0.5990448 ]), 'test_pearson_r': array([0.94426875, 0.89683677, 0.94536573, 0.93133602]), 'test_pearson_p': array([-4.19351575e-32, -5.37279860e-24, -2.27953670e-32, -6.82410849e-29]), 'test_spearman_r': array([0.90032136, 0.92575999, 0.9447523 , 0.91374534]), 'test_spearman_p': array([-1.92140710e-24, -2.64853129e-28, -3.21032967e-32, -6.15891506e-26]), 'test_kendall_r': array([0.79440488, 0.83706438, 0.80299709, 0.7717562 ]), 'test_kendall_p': array([-1.14140923e-20, -7.12958522e-23, -4.59321117e-21, -2.39234723e-19]), 'test_rmse': array([-0.22172159, -0.28915382, -0.20570127, -0.20803719]), 'test_mae': array([-0.11429943, -0.12494447, -0.13790408, -0.13615446]), 'test_r2': array([0.8865627 , 0.80310952, 0.89166187, 0.86691069]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1931, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([32.26435089, 32.11501479, 39.79797482, 40.36414742]), 'score_time': array([0.63898945, 0.66541672, 0.59726048, 0.61702013]), 'test_pearson_r': array([0.86644938, 0.90055416, 0.91621909, 0.91167405]), 'test_pearson_p': array([-1.13623497e-20, -1.79142944e-24, -1.03126756e-26, -1.24552510e-25]), 'test_spearman_r': array([0.83760301, 0.92249689, 0.90979642, 0.90699272]), 'test_spearman_p': array([-3.40286292e-18, -9.76651226e-28, -9.56895167e-26, -5.75151985e-25]), 'test_kendall_r': array([0.70755875, 0.832692  , 0.77124127, 0.76578968]), 'test_kendall_p': array([-1.07028580e-16, -1.38162087e-22, -1.42604394e-19, -4.50251797e-19]), 'test_rmse': array([-0.34586853, -0.29688041, -0.24577804, -0.24303764]), 'test_mae': array([-0.17801845, -0.12940696, -0.14677909, -0.15656614]), 'test_r2': array([0.69000853, 0.80706835, 0.83717847, 0.82302885]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([32.39673281, 37.97407174, 32.50635028, 32.17926836]), 'score_time': array([0.6427536 , 0.60504961, 0.62462616, 0.60622931]), 'test_pearson_r': array([0.96967661, 0.94675122, 0.90117399, 0.89892034]), 'test_pearson_p': array([-2.90359213e-40, -1.03651589e-32, -1.48538270e-24, -6.71367074e-24]), 'test_spearman_r': array([0.96334667, 0.93617161, 0.88564935, 0.91233949]), 'test_spearman_p': array([-1.03567891e-37, -2.66024947e-30, -1.15611991e-22, -9.95219683e-26]), 'test_kendall_r': array([0.84915751, 0.8092494 , 0.78168902, 0.83833598]), 'test_kendall_p': array([-1.91445799e-23, -1.86227889e-21, -4.13693264e-20, -2.04345275e-22]), 'test_rmse': array([-0.17026913, -0.20640425, -0.25225735, -0.29804139]), 'test_mae': array([-0.11598414, -0.14077487, -0.1352255 , -0.12118757]), 'test_r2': array([0.9332066 , 0.87988938, 0.8038091 , 0.80547776]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([32.97617888, 33.0553515 , 30.51822448, 29.98621392]), 'score_time': array([0.6444211 , 0.61416054, 0.63602018, 0.599545  ]), 'test_pearson_r': array([0.97948884, 0.90126988, 0.86061364, 0.93991156]), 'test_pearson_p': array([-1.50792527e-45, -1.44279276e-24, -3.98599859e-20, -1.24100291e-30]), 'test_spearman_r': array([0.97720212, 0.89892257, 0.89733559, 0.93273348]), 'test_spearman_p': array([-4.06941031e-44, -2.91632946e-24, -4.64790832e-24, -3.68405994e-29]), 'test_kendall_r': array([0.89229424, 0.78093404, 0.77984359, 0.81400569]), 'test_kendall_p': array([-1.58074746e-25, -4.16724530e-20, -5.34312451e-20, -2.16751821e-21]), 'test_rmse': array([-0.1220832 , -0.29290794, -0.31159201, -0.22595884]), 'test_mae': array([-0.07742568, -0.16189111, -0.14367564, -0.13191073]), 'test_r2': array([0.95781702, 0.80347427, 0.72485396, 0.87953796]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([31.1742146 , 37.3995564 , 30.60249996, 32.02635646]), 'score_time': array([0.61633825, 0.62413001, 0.62619495, 0.6357832 ]), 'test_pearson_r': array([0.96330091, 0.95973521, 0.87877462, 0.85831166]), 'test_pearson_p': array([-1.07645291e-37, -1.89318127e-36, -6.53083792e-22, -1.26469939e-19]), 'test_spearman_r': array([0.91542249, 0.96137161, 0.83054796, 0.8863704 ]), 'test_spearman_p': array([-1.37247797e-26, -5.25175136e-37, -1.16012568e-17, -2.08553229e-22]), 'test_kendall_r': array([0.7824263 , 0.8519143 , 0.7368966 , 0.82066608]), 'test_kendall_p': array([-4.50253672e-20, -1.29495886e-23, -5.74874665e-18, -1.04829513e-21]), 'test_rmse': array([-0.16609705, -0.18513964, -0.32014407, -0.32692861]), 'test_mae': array([-0.10543063, -0.13058619, -0.15247699, -0.13065199]), 'test_r2': array([0.92751992, 0.91544518, 0.74440734, 0.72374728]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([41.33055425, 33.02585459, 33.18398547, 32.70017004]), 'score_time': array([0.61824465, 0.66271114, 0.67932177, 0.64059949]), 'test_pearson_r': array([0.90032834, 0.97898609, 0.96939257, 0.88473934]), 'test_pearson_p': array([-1.91737861e-24, -3.20915488e-45, -3.87823476e-40, -3.16386246e-22]), 'test_spearman_r': array([0.9109176 , 0.97263628, 0.96735627, 0.90868705]), 'test_spearman_p': array([-6.56559319e-26, -1.19458050e-41, -2.86095582e-39, -3.33762672e-25]), 'test_kendall_r': array([0.7617314 , 0.85659317, 0.86981769, 0.80400002]), 'test_kendall_p': array([-4.35763854e-19, -8.11957410e-24, -1.68749076e-24, -9.27415896e-21]), 'test_rmse': array([-0.26205454, -0.13523383, -0.15141416, -0.3258695 ]), 'test_mae': array([-0.17629353, -0.09101928, -0.10017733, -0.17235965]), 'test_r2': array([0.79508135, 0.95601956, 0.93405008, 0.77349177]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([33.64643526, 41.99731112, 42.9922564 , 42.9056015 ]), 'score_time': array([0.71566224, 0.64112759, 0.6595993 , 0.6305387 ]), 'test_pearson_r': array([0.87092688, 0.93499454, 0.94903189, 0.94440787]), 'test_pearson_p': array([-4.16466664e-21, -4.64636683e-30, -2.70229476e-33, -1.19079089e-31]), 'test_spearman_r': array([0.86779887, 0.92004548, 0.93272713, 0.94345801]), 'test_spearman_p': array([-8.42886675e-21, -2.50842882e-27, -1.32168698e-29, -1.98504984e-31]), 'test_kendall_r': array([0.77601695, 0.79913471, 0.80097553, 0.82107447]), 'test_kendall_p': array([-1.00833117e-19, -6.38965977e-21, -5.98356680e-21, -1.04395990e-21]), 'test_rmse': array([-0.33130756, -0.20102562, -0.20570141, -0.21314428]), 'test_mae': array([-0.15031596, -0.13763798, -0.15287315, -0.12807277]), 'test_r2': array([0.7479276 , 0.87410347, 0.88627618, 0.88887878]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 7, 6: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.4162577689015956, 'test_rmse': 0.4731016932527244, 'test_r2': -2.4807880937708444, 'test_pearson_r': array([-0.03385294]), 'test_pearson_p_value': array([0.89057044]), 'test_spearman_r': -0.06496927129060578, 'test_spearman_p_value': 0.7915892274748079, 'test_kendall_r': -0.00588235294117647, 'test_kendall_p_value': 0.9720571374725545, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1864, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.4328439534729783, 'test_rmse': 0.49331424379274863, 'test_r2': -2.784564319569193, 'test_pearson_r': array([-0.08614296]), 'test_pearson_p_value': array([0.72585116]), 'test_spearman_r': -0.13608428446005266, 'test_spearman_p_value': 0.5785510123426153, 'test_kendall_r': -0.04117647058823529, 'test_kendall_p_value': 0.8063027952688955, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.43789492997784335, 'test_rmse': 0.49921627037263117, 'test_r2': -2.875663319305827, 'test_pearson_r': array([-0.10340535]), 'test_pearson_p_value': array([0.67356081]), 'test_spearman_r': -0.179982440737489, 'test_spearman_p_value': 0.460928701935612, 'test_kendall_r': -0.06470588235294117, 'test_kendall_p_value': 0.7000064112704418, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1997, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.4133840031115785, 'test_rmse': 0.4694293918680713, 'test_r2': -2.4269607959117248, 'test_pearson_r': array([-0.0323631]), 'test_pearson_p_value': array([0.89536059]), 'test_spearman_r': -0.04302019315188762, 'test_spearman_p_value': 0.8611815933432427, 'test_kendall_r': 0.017647058823529408, 'test_kendall_p_value': 0.9163083302399408, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1994, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.43007139361415136, 'test_rmse': 0.4888446684287699, 'test_r2': -2.7162964097172684, 'test_pearson_r': array([-0.08191968]), 'test_pearson_p_value': array([0.73883328]), 'test_spearman_r': -0.13081650570676032, 'test_spearman_p_value': 0.5934745839145044, 'test_kendall_r': -0.02941176470588235, 'test_kendall_p_value': 0.860968267099983, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.4056493378561393, 'test_rmse': 0.4601872366717356, 'test_r2': -2.293348717261834, 'test_pearson_r': array([-4.39692317e-05]), 'test_pearson_p_value': array([0.99985746]), 'test_spearman_r': 0.03910370578285885, 'test_spearman_p_value': 0.8737181306247062, 'test_kendall_r': 0.06508989689553324, 'test_kendall_p_value': 0.6996576230771437, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1582, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.4343748992621537, 'test_rmse': 0.492656509737235, 'test_r2': -2.7744791561082502, 'test_pearson_r': array([-0.1033521]), 'test_pearson_p_value': array([0.67372007]), 'test_spearman_r': -0.16417910447761191, 'test_spearman_p_value': 0.5018151581841588, 'test_kendall_r': -0.05294117647058823, 'test_kendall_p_value': 0.7525679587590386, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 7, 6: {'fit_time': array([37.69268131, 45.56575465, 45.33869052, 41.62247348, 46.5479188 ,
       39.85650563, 36.80893087, 44.87362552, 44.85322499, 39.27523017,
       39.51978064, 36.28010654, 36.70751309, 45.38668466]), 'score_time': array([0.46944404, 0.46988368, 0.43320966, 0.43725491, 0.41450214,
       0.44390345, 0.47112846, 0.44296598, 0.51671505, 0.47477436,
       0.43793321, 0.45933294, 0.45874786, 0.42786026]), 'test_pearson_r': array([0.96599006, 0.99213633, 0.98626952, 0.9758068 , 0.92596421,
       0.98760005, 0.73125685, 0.96127565, 0.95519211, 0.95131653,
       0.9714623 , 0.98036172, 0.92302413, 0.93687777]), 'test_pearson_p': array([-2.03154476e-11, -8.71818520e-17, -9.75777020e-15, -1.16157950e-12,
       -1.31756745e-08, -4.12137315e-15, -3.74570768e-04, -2.25148613e-10,
       -7.09690344e-10, -1.36127753e-09, -2.02257252e-11, -1.04598153e-12,
       -4.85840923e-08, -1.03845336e-08]), 'test_spearman_r': array([0.88547617, 0.97717296, 0.98070175, 0.93859649, 0.93988601,
       0.96842105, 0.78070175, 0.93491785, 0.93698397, 0.92982456,
       0.97470328, 0.92720714, 0.90599222, 0.95405279]), 'test_spearman_p': array([-4.66386138e-07, -7.12013249e-13, -1.72884140e-13, -2.80606429e-09,
       -2.35329013e-09, -1.09055587e-11, -7.99824651e-05, -1.31796416e-08,
       -1.02490540e-08, -2.36925600e-08, -7.78922481e-12, -3.14918237e-08,
       -2.27573103e-07, -8.64446630e-10]), 'test_kendall_r': array([0.79765739, 0.91176471, 0.91812865, 0.83625731, 0.79765739,
       0.90643275, 0.77777778, 0.8355444 , 0.82238622, 0.80392157,
       0.89180807, 0.82623395, 0.80922804, 0.83934877]), 'test_kendall_p': array([-1.92681603e-06, -5.65458167e-08, -7.20796807e-12, -5.55516932e-09,
       -1.92681603e-06, -2.27996852e-11, -1.64978258e-07, -1.45452173e-06,
       -2.12120439e-06, -1.16879681e-07, -2.53540670e-07, -1.78800684e-06,
       -3.07634090e-06, -1.22329014e-06]), 'test_rmse': array([-0.17098768, -0.11698981, -0.117796  , -0.16108433, -0.21320704,
       -0.10111776, -0.48181766, -0.18978498, -0.19525088, -0.17926071,
       -0.1498345 , -0.1262337 , -0.23171745, -0.16200978]), 'test_mae': array([-0.11137467, -0.08943326, -0.08898641, -0.11950081, -0.16416413,
       -0.060623  , -0.18772573, -0.08814973, -0.13817031, -0.11941589,
       -0.10986   , -0.09673084, -0.12643745, -0.11922954]), 'test_r2': array([0.91534578, 0.96963995, 0.97088733, 0.94345859, 0.83899472,
       0.97481715, 0.49985122, 0.91351704, 0.90551581, 0.9032201 ,
       0.94147443, 0.95183475, 0.84192184, 0.87425683]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([36.87274957, 39.01568055, 36.4379487 , 36.84293842, 38.2385633 ,
       36.06256747, 38.20734978, 46.19396734, 44.81368232, 41.271065  ,
       45.65028214, 46.40898085, 36.6383183 , 42.44733071]), 'score_time': array([0.46715236, 0.4470613 , 0.47689843, 0.47049999, 0.47231507,
       0.47362852, 0.47014713, 0.44275737, 0.44880915, 0.53064823,
       0.49954319, 0.43744373, 0.4722333 , 0.43274236]), 'test_pearson_r': array([0.97989214, 0.98163392, 0.98421462, 0.98907623, 0.96028131,
       0.68993073, 0.98810897, 0.96065324, 0.92272299, 0.90215685,
       0.99037984, 0.90986933, 0.98145858, 0.93505147]), 'test_pearson_p': array([-2.44496704e-13, -1.13857915e-13, -3.17087284e-14, -1.41026241e-15,
       -7.45050900e-11, -1.07969740e-03, -2.89122246e-15, -2.55278125e-10,
       -5.00771310e-08, -3.09499640e-07, -3.57910290e-15, -1.64526144e-07,
       -6.62727490e-13, -1.29702552e-08]), 'test_spearman_r': array([0.9499561 , 0.94339632, 0.97805092, 0.93508772, 0.95041694,
       0.78070175, 0.98421053, 0.91425669, 0.89416636, 0.9163228 ,
       0.97676833, 0.93959744, 0.98348813, 0.86319062]), 'test_spearman_p': array([-5.12723828e-10, -1.42825065e-09, -5.11677137e-13, -4.44614837e-09,
       -4.74698356e-10, -7.99824651e-05, -3.17781778e-14, -1.11945142e-07,
       -5.65121290e-07, -9.27154202e-08, -3.96681845e-12, -7.36446168e-09,
       -2.63828912e-13, -3.98148195e-06]), 'test_kendall_r': array([0.85294118, 0.80938764, 0.92352941, 0.8128655 , 0.84457841,
       0.67251462, 0.92982456, 0.78291168, 0.747545  , 0.79606986,
       0.89180807, 0.81311912, 0.90849673, 0.72131535]), 'test_kendall_p': array([-3.79206619e-07, -1.35872010e-06, -3.80976840e-08, -2.37852170e-08,
       -4.63085373e-07, -1.56889756e-05, -2.06767062e-12, -6.36380428e-06,
       -1.55211882e-05, -4.43688739e-06, -2.53540670e-07, -2.59896801e-06,
       -9.76656516e-11, -3.05216065e-05]), 'test_rmse': array([-0.10112256, -0.1443724 , -0.11296705, -0.09747008, -0.20373555,
       -0.51664339, -0.1091256 , -0.13880724, -0.23189887, -0.27294578,
       -0.10276276, -0.22311264, -0.12739993, -0.24077707]), 'test_mae': array([-0.06713   , -0.10402431, -0.0844781 , -0.06899098, -0.13102183,
       -0.23536171, -0.06913937, -0.10555675, -0.15851938, -0.1559679 ,
       -0.07342507, -0.14887289, -0.08940992, -0.15195941]), 'test_r2': array([0.95962335, 0.95206466, 0.96864793, 0.97226523, 0.91722979,
       0.40267992, 0.97384703, 0.91940032, 0.85072849, 0.80307552,
       0.97468706, 0.81892102, 0.95950326, 0.79407733]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([36.40581584, 38.43378878, 35.97867584, 31.50722051, 37.32678175,
       34.51645231, 38.22477937, 31.39030194, 31.15258074, 36.98193049,
       34.34500003, 30.24297357, 29.93280935, 37.43995309]), 'score_time': array([0.38988209, 0.36687684, 0.37175131, 0.39817405, 0.36441445,
       0.37576294, 0.36254597, 0.40161157, 0.39321423, 0.35882735,
       0.3895545 , 0.37095308, 0.38683701, 0.38313079]), 'test_pearson_r': array([0.94882809, 0.9536487 , 0.97718516, 0.97637587, 0.93896638,
       0.97997098, 0.96887776, 0.76969396, 0.98806459, 0.90029744,
       0.98635154, 0.96273607, 0.65372667, 0.98375938]), 'test_pearson_p': array([-6.17289466e-10, -2.70654503e-10, -7.08813604e-13, -9.50643796e-13,
       -2.66898310e-09, -2.36531005e-13, -9.65037089e-12, -1.87512051e-04,
       -1.99467392e-14, -3.57642664e-07, -5.80114446e-14, -1.66306768e-10,
       -3.25533304e-03, -2.31282085e-13]), 'test_spearman_r': array([0.93988601, 0.9521721 , 0.96666667, 0.95964912, 0.90917078,
       0.97674428, 0.9837649 , 0.68972647, 0.97210796, 0.85964912,
       0.98502853, 0.92029429, 0.66563467, 0.96900878]), 'test_spearman_p': array([-2.35329013e-09, -3.51549176e-10, -1.71650853e-11, -8.50242512e-11,
       -7.06484225e-08, -8.32796316e-13, -4.01991254e-14, -1.53900723e-03,
       -1.68763179e-11, -4.82799743e-06, -1.21105572e-13, -6.36446577e-08,
       -2.56832796e-03, -3.88244787e-11]), 'test_kendall_r': array([0.80938764, 0.85630867, 0.87134503, 0.88304094, 0.76246662,
       0.90322969, 0.91495995, 0.53770781, 0.87501894, 0.73856209,
       0.91803772, 0.82403396, 0.62091503, 0.87501894]), 'test_kendall_p': array([-1.35872010e-06, -3.20420144e-07, -4.58322529e-10, -1.79983887e-10,
       -5.34143245e-06, -7.00361385e-08, -4.73213851e-08, -1.88229380e-03,
       -4.53574602e-07, -2.52158005e-06, -1.11636054e-07, -2.40473321e-06,
       -1.54908277e-04, -4.53574602e-07]), 'test_rmse': array([-0.21379983, -0.20998374, -0.17182981, -0.14992514, -0.16338114,
       -0.1405546 , -0.12880708, -0.2947524 , -0.11522657, -0.25320701,
       -0.12652225, -0.18628235, -0.52894094, -0.14667245]), 'test_mae': array([-0.13568418, -0.14805423, -0.11775701, -0.09796482, -0.1212771 ,
       -0.09666902, -0.09110133, -0.20426908, -0.08216623, -0.16005162,
       -0.08707914, -0.09201468, -0.21873545, -0.10781411]), 'test_r2': array([0.89013672, 0.895853  , 0.94379794, 0.94832095, 0.87134643,
       0.95665808, 0.93863379, 0.54557799, 0.96980061, 0.79837742,
       0.96663262, 0.92033909, 0.36090106, 0.94490413]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1703, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([37.00860286, 37.01317358, 38.47388387, 37.36814094, 44.61619067,
       37.18627906, 37.51541638, 45.41264629, 36.46610022, 37.07658362,
       45.74480844, 35.28945351, 37.82030082, 45.34428596]), 'score_time': array([0.46725965, 0.46577668, 0.44571948, 0.45331192, 0.44112015,
       0.46463513, 0.45758486, 0.43023801, 0.47011971, 0.43002558,
       0.41640854, 0.44553661, 0.43414068, 0.41638684]), 'test_pearson_r': array([0.98922711, 0.97735378, 0.9676477 , 0.78898784, 0.80827855,
       0.97812591, 0.98406999, 0.97962472, 0.60740536, 0.97034203,
       0.97053307, 0.92218432, 0.96359318, 0.95558016]), 'test_pearson_p': array([-1.25365865e-15, -6.65880567e-13, -1.33604240e-11, -5.94360566e-05,
       -2.82342018e-05, -4.97132804e-13, -3.42478988e-14, -1.40127152e-12,
       -7.50471571e-03, -2.74253535e-11, -2.60592002e-11, -5.28472208e-08,
       -1.38432516e-10, -6.62800761e-10]), 'test_spearman_r': array([0.98902546, 0.97894737, 0.96445819, 0.85704669, 0.79596322,
       0.95263158, 0.9837649 , 0.97417407, 0.65875073, 0.88854489,
       0.94579259, 0.82249742, 0.93395253, 0.94992269]), 'test_spearman_p': array([-1.46670481e-15, -3.60064188e-13, -2.93899065e-11, -2.77674296e-06,
       -4.58212488e-05, -3.24364567e-10, -4.01991254e-14, -9.17709168e-12,
       -2.94911970e-03, -8.39466355e-07, -3.16038098e-09, -2.79261707e-05,
       -1.47814823e-08, -1.69863644e-09]), 'test_kendall_r': array([0.93529412, 0.89473684, 0.89149943, 0.73743277, 0.68035483,
       0.84795322, 0.91495995, 0.9013353 , 0.59016711, 0.76470588,
       0.86557842, 0.7124183 , 0.83006536, 0.83934877]), 'test_kendall_p': array([-2.55460982e-08, -6.63913300e-11, -1.03161918e-07, -1.59608771e-05,
       -4.89022874e-05, -2.53233265e-09, -4.73213851e-08, -2.02850566e-07,
       -6.46204380e-04, -8.04176944e-07, -5.63141283e-07, -7.18615992e-06,
       -2.71335027e-08, -1.22329014e-06]), 'test_rmse': array([-0.10754714, -0.11572613, -0.15917886, -0.35331101, -0.34608341,
       -0.16927573, -0.12317674, -0.11485645, -0.49356332, -0.14457602,
       -0.11727814, -0.27990426, -0.15693928, -0.22419082]), 'test_mae': array([-0.08274258, -0.07287635, -0.10516744, -0.159726  , -0.21592103,
       -0.11530119, -0.09762136, -0.08972332, -0.22456234, -0.11257321,
       -0.07410032, -0.15782479, -0.11425629, -0.16894892]), 'test_r2': array([0.9722559 , 0.9524555 , 0.93028474, 0.52753563, 0.64081937,
       0.94679716, 0.96556425, 0.95709807, 0.30298312, 0.9389114 ,
       0.93938024, 0.84726296, 0.92563816, 0.9043128 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([34.75411677, 41.79128242, 34.49146771, 33.82552862, 41.6852212 ,
       33.89761972, 40.29827166, 37.16093254, 40.6877594 , 41.11421204,
       34.53598142, 36.52570081, 37.95648837, 40.07449222]), 'score_time': array([0.42800403, 0.39990449, 0.43671298, 0.42531013, 0.40362406,
       0.44462824, 0.41459489, 0.43355203, 0.43499517, 0.40440583,
       0.44519949, 0.42193174, 0.41750264, 0.41093135]), 'test_pearson_r': array([0.96265806, 0.96100331, 0.97567124, 0.96956772, 0.93036652,
       0.98805627, 0.98089462, 0.69957696, 0.95924459, 0.96628774,
       0.94590629, 0.96208916, 0.64587963, 0.9923518 ]), 'test_pearson_p': array([-4.44551259e-11, -6.39049378e-11, -1.21752023e-12, -7.99471902e-12,
       -7.94480592e-09, -3.00143613e-15, -1.58840179e-13, -1.23119088e-03,
       -3.36735584e-10, -7.54698573e-11, -3.10885997e-09, -1.90467407e-10,
       -3.78541698e-03, -5.74725708e-16]), 'test_spearman_r': array([0.89473684, 0.91740036, 0.87747044, 0.95655999, 0.92280702,
       0.96842105, 0.94561404, 0.5981405 , 0.92458678, 0.93698397,
       0.9163228 , 0.9628483 , 0.7378741 , 0.97110423]), 'test_spearman_p': array([-2.35296190e-07, -3.24291961e-08, -8.05218228e-07, -1.57498426e-10,
       -1.85857755e-08, -1.09055587e-11, -1.02463740e-09, -8.73961979e-03,
       -4.14396940e-08, -1.02490540e-08, -9.27154202e-08, -1.62399435e-10,
       -4.73056696e-04, -2.23221965e-11]), 'test_kendall_r': array([0.76608187, 0.8023913 , 0.72566687, 0.85630867, 0.76608187,
       0.88304094, 0.84795322, 0.51973684, 0.79605263, 0.80922804,
       0.84870258, 0.85620915, 0.73856209, 0.88235294]), 'test_kendall_p': array([-2.97692997e-07, -1.85371850e-06, -1.62432075e-05, -3.20420144e-07,
       -2.97692997e-07, -1.79983887e-10, -2.53233265e-09, -2.72984759e-03,
       -4.43734615e-06, -3.07634090e-06, -9.91848331e-07, -5.28843419e-09,
       -2.52158005e-06, -8.28241250e-10]), 'test_rmse': array([-0.16291654, -0.1763659 , -0.11522207, -0.15631146, -0.23988486,
       -0.10905828, -0.12839756, -0.37054858, -0.22929904, -0.18467362,
       -0.16053672, -0.16362556, -0.52114504, -0.09966252]), 'test_mae': array([-0.10329906, -0.12183994, -0.0916413 , -0.11123753, -0.15577485,
       -0.07809081, -0.09615335, -0.21402333, -0.13921643, -0.14130545,
       -0.08201794, -0.12754257, -0.21593793, -0.07974196]), 'test_r2': array([0.92522086, 0.91850865, 0.94548526, 0.9208697 , 0.85180435,
       0.97537192, 0.94655689, 0.34267843, 0.9049059 , 0.92627437,
       0.89186713, 0.92550986, 0.29525843, 0.97588407]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1826, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([30.09603   , 37.64745283, 36.09591794, 32.91585422, 35.86542368,
       30.54117441, 29.89705491, 30.36157036, 30.82002378, 30.64693189,
       36.49315095, 31.15044689, 30.3921876 , 35.75915694]), 'score_time': array([0.39490485, 0.35512424, 0.36852217, 0.38788891, 0.36876416,
       0.38883185, 0.39283252, 0.37368131, 0.37757301, 0.37576127,
       0.36744666, 0.46617389, 0.3783524 , 0.37310958]), 'test_pearson_r': array([0.90589901, 0.81836911, 0.98836241, 0.99173224, 0.93011159,
       0.98613739, 0.97693376, 0.96153237, 0.93250287, 0.98071143,
       0.96770388, 0.7328624 , 0.97836977, 0.9625245 ]), 'test_pearson_p': array([-9.43579922e-08, -1.84973671e-05, -2.40948591e-15, -1.33295436e-16,
       -8.18824504e-09, -1.05806057e-14, -7.77350362e-13, -2.13654735e-10,
       -1.75039855e-08, -9.06928358e-13, -5.37790775e-11, -5.40917756e-04,
       -2.25150160e-12, -1.73896213e-10]), 'test_spearman_r': array([0.93508772, 0.81562806, 0.96575981, 0.98945671, 0.96315789,
       0.95614035, 0.97849944, 0.83014983, 0.94427245, 0.94785764,
       0.99174407, 0.79235579, 0.97004184, 0.95872033]), 'test_spearman_p': array([-4.44614837e-09, -2.08010407e-05, -2.14977899e-11, -1.04468862e-15,
       -3.97114834e-11, -1.70664316e-10, -4.29972653e-13, -2.01385238e-05,
       -3.92399721e-09, -2.33156775e-09, -1.05753411e-15, -8.84604490e-05,
       -2.96982597e-11, -3.72370945e-10]), 'test_kendall_r': array([0.80116959, 0.62942265, 0.87648575, 0.94398977, 0.87134503,
       0.84795322, 0.90322969, 0.6426264 , 0.84313725, 0.87869325,
       0.96078431, 0.75659532, 0.87501894, 0.88235294]), 'test_kendall_p': array([-4.67377304e-08, -1.78217201e-04, -1.79656543e-07, -2.01982025e-08,
       -4.58322529e-10, -2.53233265e-09, -7.00361385e-08, -2.03460668e-04,
       -1.22726897e-08, -3.78914056e-07, -3.50182620e-13, -1.28761880e-05,
       -4.53574602e-07, -8.28241250e-10]), 'test_rmse': array([-0.21032983, -0.27891081, -0.14664805, -0.08361498, -0.19623246,
       -0.12155295, -0.14140151, -0.12322807, -0.21894766, -0.14616634,
       -0.16579849, -0.49058384, -0.16904454, -0.22013713]), 'test_mae': array([-0.12661883, -0.19522391, -0.112346  , -0.05976629, -0.10206324,
       -0.0843717 , -0.09486658, -0.09136986, -0.12884563, -0.11044674,
       -0.12024583, -0.19673283, -0.13721241, -0.15618109]), 'test_r2': array([0.80844582, 0.63321748, 0.96163355, 0.97909482, 0.85619742,
       0.97146579, 0.95346946, 0.90581104, 0.85372853, 0.95527707,
       0.9281525 , 0.49409731, 0.92664995, 0.90776171]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1633, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([40.07161117, 39.66906714, 37.64684916, 42.68677163, 38.04623151,
       37.59501457, 35.74132824, 40.60683703, 39.37918758, 46.54088378,
       45.53273392, 46.0381043 , 36.88704491, 37.04341578]), 'score_time': array([0.46719313, 0.46090698, 0.46206284, 0.44477248, 0.46828628,
       0.47404933, 0.48529792, 0.44861555, 0.49551749, 0.52334189,
       0.44099116, 0.42900801, 0.4641664 , 0.45735765]), 'test_pearson_r': array([0.96914586, 0.7190626 , 0.98037371, 0.93171749, 0.91841527,
       0.9811552 , 0.95045765, 0.96114695, 0.94608722, 0.98077869,
       0.9430219 , 0.92883328, 0.96935367, 0.9943348 ]), 'test_pearson_p': array([-8.97433449e-12, -5.21598811e-04, -1.99294968e-13, -6.75749718e-09,
       -2.92973409e-08, -1.41464687e-13, -4.71461719e-10, -2.31110942e-10,
       -3.02838263e-09, -8.82121785e-13, -4.66769716e-09, -2.64220931e-08,
       -3.55382404e-11, -5.24079366e-17]), 'test_spearman_r': array([0.91004835, 0.70474626, 0.98638645, 0.90478289, 0.89776226,
       0.97192982, 0.89863984, 0.9214881 , 0.9003615 , 0.97624019,
       0.94992269, 0.95459236, 0.95665635, 0.97729618]), 'test_spearman_p': array([-6.52515223e-08, -7.53672900e-04, -9.07717203e-15, -1.03899466e-07,
       -1.85595135e-07, -4.05534963e-12, -1.73012659e-07, -5.66236287e-08,
       -3.55882285e-07, -4.74047396e-12, -1.69863644e-09, -7.87841526e-10,
       -5.46578066e-10, -3.30605345e-12]), 'test_kendall_r': array([0.80938764, 0.62539322, 0.94398977, 0.78592713, 0.78592713,
       0.89473684, 0.76246662, 0.80922804, 0.76065983, 0.9013353 ,
       0.8524636 , 0.84313725, 0.85620915, 0.90849673]), 'test_kendall_p': array([-1.35872010e-06, -2.01745727e-04, -2.04681459e-08, -2.71955004e-06,
       -2.71955004e-06, -6.63913300e-11, -5.34143245e-06, -3.07634090e-06,
       -1.09773191e-05, -2.02850566e-07, -8.32299419e-07, -1.22726897e-08,
       -5.28843419e-09, -9.76656516e-11]), 'test_rmse': array([-0.1676695 , -0.499114  , -0.13706249, -0.20364365, -0.19160006,
       -0.1333598 , -0.16037451, -0.18448704, -0.18129881, -0.15471776,
       -0.23097761, -0.25151245, -0.13451311, -0.08780431]), 'test_mae': array([-0.11020546, -0.19797396, -0.09630181, -0.12611304, -0.12664522,
       -0.06539656, -0.1190245 , -0.14200683, -0.12765591, -0.12966005,
       -0.14528477, -0.17024176, -0.095745  , -0.06986622]), 'test_r2': array([0.92856868, 0.46692572, 0.95866724, 0.85970285, 0.83800345,
       0.95849838, 0.90119693, 0.90950291, 0.88322032, 0.93691953,
       0.87774127, 0.86262659, 0.93510194, 0.98412264]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_4': {'cluster size (%)': 30, 6: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.6929851562080188, 'test_rmse': 0.9255747093395507, 'test_r2': -3.1069359391439413, 'test_pearson_r': array([-0.35981603]), 'test_pearson_p_value': array([0.00130851]), 'test_spearman_r': -0.45993506233303244, 'test_spearman_p_value': 2.5734376436716062e-05, 'test_kendall_r': -0.2996411443209438, 'test_kendall_p_value': 0.00012871418947783532, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1316, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.6951937716033315, 'test_rmse': 0.9275459652624052, 'test_r2': -3.124448178423912, 'test_pearson_r': array([-0.36106605]), 'test_pearson_p_value': array([0.00125494]), 'test_spearman_r': -0.4797769871639064, 'test_spearman_p_value': 1.0097128265661396e-05, 'test_kendall_r': -0.31164177916276375, 'test_kendall_p_value': 6.807827836316938e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.6976388328937022, 'test_rmse': 0.9321333910813222, 'test_r2': -3.165346180697414, 'test_pearson_r': array([-0.36286238]), 'test_pearson_p_value': array([0.00118143]), 'test_spearman_r': -0.46285461695625424, 'test_spearman_p_value': 2.2505957079820506e-05, 'test_kendall_r': -0.30239646518826285, 'test_kendall_p_value': 0.00011149302555339691, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1779, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.691850939476308, 'test_rmse': 0.9248269048690259, 'test_r2': -3.1003023430331575, 'test_pearson_r': array([-0.36373065]), 'test_pearson_p_value': array([0.00114732]), 'test_spearman_r': -0.4968569855985059, 'test_spearman_p_value': 4.301523634637265e-06, 'test_kendall_r': -0.3328767409878534, 'test_kendall_p_value': 2.084367445134387e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.6911834254243137, 'test_rmse': 0.9229193390565584, 'test_r2': -3.0834050619500974, 'test_pearson_r': array([-0.35659747]), 'test_pearson_p_value': array([0.00145609]), 'test_spearman_r': -0.47751814580712004, 'test_spearman_p_value': 1.1265124344251614e-05, 'test_kendall_r': -0.321683711259496, 'test_kendall_p_value': 3.946792009519507e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.7046505559586919, 'test_rmse': 0.9397897828868037, 'test_r2': -3.234054154375108, 'test_pearson_r': array([-0.36166229]), 'test_pearson_p_value': array([0.0012301]), 'test_spearman_r': -0.4574363444122571, 'test_spearman_p_value': 2.883491490274172e-05, 'test_kendall_r': -0.28999752128532724, 'test_kendall_p_value': 0.00021082702379404247, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.6952004937737906, 'test_rmse': 0.9264814931245988, 'test_r2': -3.114986995696218, 'test_pearson_r': array([-0.35649117]), 'test_pearson_p_value': array([0.00146121]), 'test_spearman_r': -0.4721393267039773, 'test_spearman_p_value': 1.4574398597669234e-05, 'test_kendall_r': -0.3154842393080282, 'test_kendall_p_value': 5.545648134813923e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_4': {'cluster size (%)': 33, 6: {'fit_time': array([31.79915404, 37.27198029, 31.50198174]), 'score_time': array([0.8652215 , 0.84679914, 0.84052563]), 'test_pearson_r': array([0.93586662, 0.89018618, 0.87390503]), 'test_pearson_p': array([-2.86625983e-40, -2.03470249e-30, -4.78849413e-28]), 'test_spearman_r': array([0.92923936, 0.89831101, 0.85662459]), 'test_spearman_p': array([-1.62967315e-38, -9.56789098e-32, -7.28203216e-26]), 'test_kendall_r': array([0.81645336, 0.80356801, 0.75798797]), 'test_kendall_p': array([-5.56752872e-29, -8.58731140e-28, -6.30059341e-25]), 'test_rmse': array([-0.23078511, -0.30078182, -0.29223046]), 'test_mae': array([-0.12980532, -0.13708817, -0.14732043]), 'test_r2': array([0.87205199, 0.78977352, 0.7449263 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([32.13936806, 38.84292221, 30.82233953]), 'score_time': array([0.86482358, 0.83965921, 0.75267601]), 'test_pearson_r': array([0.8865976 , 0.89306138, 0.88372029]), 'test_pearson_p': array([-3.34728491e-30, -7.09451800e-31, -1.96174342e-29]), 'test_spearman_r': array([0.83715282, 0.90503532, 0.87774016]), 'test_spearman_p': array([-5.46861677e-24, -6.22687529e-33, -1.41991186e-28]), 'test_kendall_r': array([0.69802991, 0.7837076 , 0.73099427]), 'test_kendall_p': array([-1.32158304e-21, -1.60045541e-26, -2.92163124e-23]), 'test_rmse': array([-0.3124858 , -0.29427391, -0.2895637 ]), 'test_mae': array([-0.16899048, -0.14566109, -0.17413525]), 'test_r2': array([0.74770838, 0.79073687, 0.76868443]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([32.42969608, 35.0227356 , 32.23213172]), 'score_time': array([0.89958   , 0.80516815, 0.84601545]), 'test_pearson_r': array([0.96151214, 0.88975809, 0.92307929]), 'test_pearson_p': array([-1.83639928e-49, -2.37432389e-30, -1.30046027e-36]), 'test_spearman_r': array([0.96316312, 0.85560552, 0.92856036]), 'test_spearman_p': array([-2.94801756e-50, -9.59240592e-26, -6.53340794e-38]), 'test_kendall_r': array([0.84922384, 0.7386787 , 0.81562682]), 'test_kendall_p': array([-3.02545342e-31, -1.02789658e-23, -1.80112161e-28]), 'test_rmse': array([-0.18029894, -0.26653346, -0.25260107]), 'test_mae': array([-0.12540911, -0.15253326, -0.12257021]), 'test_r2': array([0.92301893, 0.78735641, 0.84932744]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([35.33459592, 37.04069805, 31.44854522]), 'score_time': array([0.91009188, 0.8522718 , 0.8780961 ]), 'test_pearson_r': array([0.93153823, 0.8431173 , 0.93406275]), 'test_pearson_p': array([-4.20174608e-39, -2.38762790e-24, -2.52728887e-39]), 'test_spearman_r': array([0.93295781, 0.86070945, 0.93355537]), 'test_spearman_p': array([-1.77664267e-39, -2.36107888e-26, -3.45080547e-39]), 'test_kendall_r': array([0.82998242, 0.74794396, 0.80717639]), 'test_kendall_p': array([-1.07139881e-29, -2.62260461e-24, -4.15172109e-28]), 'test_rmse': array([-0.2128739 , -0.3605021 , -0.23998049]), 'test_mae': array([-0.11373097, -0.18586871, -0.13392267]), 'test_r2': array([0.86738985, 0.68157605, 0.86609475]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([35.68806076, 30.90097713, 35.74419689]), 'score_time': array([0.86487055, 0.89047337, 0.85833287]), 'test_pearson_r': array([0.95268831, 0.86359542, 0.89010807]), 'test_pearson_p': array([-9.87543918e-46, -1.04250279e-26, -2.09292237e-30]), 'test_spearman_r': array([0.92806557, 0.84392529, 0.90649444]), 'test_spearman_p': array([-3.19937002e-38, -1.95601431e-24, -3.35057055e-33]), 'test_kendall_r': array([0.78706936, 0.73731837, 0.81991627]), 'test_kendall_p': array([-5.57133487e-27, -1.11490619e-23, -7.14120866e-29]), 'test_rmse': array([-0.19193603, -0.33006386, -0.28927443]), 'test_mae': array([-0.12389484, -0.1631427 , -0.12439155]), 'test_r2': array([0.90644433, 0.72411947, 0.78812233]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([31.8582809 , 34.84371424, 32.32053876]), 'score_time': array([0.83065605, 0.83345318, 0.86273026]), 'test_pearson_r': array([0.94517415, 0.93015673, 0.88994192]), 'test_pearson_p': array([-4.44081975e-43, -2.61389778e-38, -2.22221768e-30]), 'test_spearman_r': array([0.93649008, 0.92955235, 0.90067352]), 'test_spearman_p': array([-1.91721124e-40, -3.70691345e-38, -3.74645782e-32]), 'test_kendall_r': array([0.79855447, 0.77872271, 0.80182883]), 'test_kendall_p': array([-8.26455579e-28, -3.17750205e-26, -1.58734010e-27]), 'test_rmse': array([-0.20230557, -0.22766287, -0.313912  ]), 'test_mae': array([-0.12876704, -0.15538869, -0.15636884]), 'test_r2': array([0.88439587, 0.85813829, 0.78848529]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([24.79932261, 24.5136292 , 23.82368088]), 'score_time': array([0.60872388, 0.61480546, 0.62373018]), 'test_pearson_r': array([0.86467875, 0.87925658, 0.95820415]), 'test_pearson_p': array([-3.81201697e-27, -8.68167115e-29, -2.00551961e-47]), 'test_spearman_r': array([0.87181325, 0.87360347, 0.95096569]), 'test_spearman_p': array([-4.45099982e-28, -5.25992739e-28, -1.41676921e-44]), 'test_kendall_r': array([0.76787604, 0.74952165, 0.81990242]), 'test_kendall_p': array([-1.22627868e-25, -2.40567287e-24, -6.60685681e-29]), 'test_rmse': array([-0.32102388, -0.28190987, -0.19160357]), 'test_mae': array([-0.14720137, -0.16033368, -0.12626199]), 'test_r2': array([0.73949201, 0.76661816, 0.90982332]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1465, 'regressor__learning_rate': 0.01, 'regressor__minibatch_frac': 1.0, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM5 polymer_solvent HSP and polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM5 polymer_solvent HSP and polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM5 polymer_solvent HSP and polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c018n03>
Subject: Job 540326: <NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317> was submitted from host <c020n02> by user <sdehgha2> in cluster <Hazel> at Thu Mar 27 09:17:07 2025
Job was executed on host(s) <10*c018n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Thu Mar 27 09:17:09 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Thu Mar 27 09:17:09 2025
Terminated at Sat Mar 29 21:39:27 2025
Results reported at Sat Mar 29 21:39:27 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 10
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250317/NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250317/NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM5 polymer_solvent HSP and polysize cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   964091.06 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.96 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   217341 sec.
    Turnaround time :                            217340 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250317/NGB_log Rg (nm)_Mordred_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250317.err> for stderr output of this job.

