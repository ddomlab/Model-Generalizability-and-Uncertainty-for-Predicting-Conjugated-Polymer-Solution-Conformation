


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6

------------------------------------------------------------
Sender: LSF System <lsfadmin@c026n03>
Subject: Job 295211: <XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311> in cluster <Hazel> Exited

Job <XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:09:31 2025
Job was executed on host(s) <8*c026n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 06:36:09 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 06:36:09 2025
Terminated at Thu Mar 13 01:58:07 2025
Results reported at Thu Mar 13 01:58:07 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "XGBR"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 Mordred_Polysize cluster" 



------------------------------------------------------------

Exited with exit code 120.

Resource usage summary:

    CPU time :                                   279282.09 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.58 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   2 GB
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   69744 sec.
    Turnaround time :                            110916 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.err> for stderr output of this job.




-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0037513263540373894), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 723), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07757405427431793), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 175), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04407167712333106), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 212), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 121), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09900421675060596), ('regressor__regressor__max_depth', 2249), ('regressor__regressor__n_estimators', 216), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006723478660805179), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0036525487186360533), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007612478900414036), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020697583950890736), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 71), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054611118933333466), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044142961484786865), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 163), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09964956943278974), ('regressor__regressor__max_depth', 37), ('regressor__regressor__n_estimators', 263), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08122210979569741), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 160), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 248), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007377329116269909), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1242), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015276282214246914), ('regressor__regressor__max_depth', 11), ('regressor__regressor__n_estimators', 1325), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 238), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06430422638335676), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 348), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002861049879148768), ('regressor__regressor__max_depth', 3169), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.003386741244757927), ('regressor__regressor__max_depth', 13), ('regressor__regressor__n_estimators', 1075), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03515886636542566), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 432), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005043259217208091), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1337), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013787482942759175), ('regressor__regressor__max_depth', 14), ('regressor__regressor__n_estimators', 477), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05399391259205921), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1392), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0636380275390342), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 270), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0023878802071886857), ('regressor__regressor__max_depth', 6612), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07144648941556735), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 257), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0056446688924867835), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06447772008708622), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06403010167135444), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 751), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__max_depth', 41), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06932966365817923), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025454649768777), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004553430532180703), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 159), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09802801005850448), ('regressor__regressor__max_depth', 13), ('regressor__regressor__n_estimators', 476), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 8913), ('regressor__regressor__n_estimators', 272), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007178970092733118), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1090), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.003682317486583056), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 795), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0018906632583248512), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03437207373023222), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1048), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04043514983864281), ('regressor__regressor__max_depth', 7159), ('regressor__regressor__n_estimators', 1084), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 523), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02666301886779036), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050214704114692206), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1579), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 499), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0026839179024668756), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1347), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06665053474106748), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 112), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06668470132155592), ('regressor__regressor__max_depth', 8589), ('regressor__regressor__n_estimators', 195), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0016782628487438305), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08722595424697485), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 549), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009658578773779758), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06719393641583839), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 139), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 67), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05965489986489107), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05202801783293359), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 236), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012607890015677553), ('regressor__regressor__max_depth', 254), ('regressor__regressor__n_estimators', 413), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024379851498044936), ('regressor__regressor__max_depth', 2253), ('regressor__regressor__n_estimators', 963), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 231), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09900421675060596), ('regressor__regressor__max_depth', 2249), ('regressor__regressor__n_estimators', 216), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010968982407921433), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021996450413989815), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 335), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07146963708609326), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 80), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020624839470100013), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1467), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07975090400997696), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054611118933333466), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044142961484786865), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 163), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09964956943278974), ('regressor__regressor__max_depth', 37), ('regressor__regressor__n_estimators', 263), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08122210979569741), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 160), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 248), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.033544262075521594), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 624), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06617861212812683), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 587), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05521076039083104), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07193067766840879), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1089), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 736), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06430422638335676), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 348), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002861049879148768), ('regressor__regressor__max_depth', 3169), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01905510041751923), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 495), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0031173702192761076), ('regressor__regressor__max_depth', 12), ('regressor__regressor__n_estimators', 1280), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05978665481613259), ('regressor__regressor__max_depth', 6821), ('regressor__regressor__n_estimators', 405), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 17), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0706202559176876), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0636380275390342), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 270), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0023878802071886857), ('regressor__regressor__max_depth', 6612), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07144648941556735), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 257), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0056446688924867835), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004028333964258597), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008119784092156605), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 538), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 316), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028619098315663952), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 357), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 128), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__max_depth', 41), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06932966365817923), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025454649768777), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004553430532180703), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004325429629663517), ('regressor__regressor__max_depth', 9843), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024757874764182626), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 274), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06449854041502759), ('regressor__regressor__max_depth', 11), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03863511017736674), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1112), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 3111), ('regressor__regressor__n_estimators', 263), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0018906632583248512), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03437207373023222), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1048), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04043514983864281), ('regressor__regressor__max_depth', 7159), ('regressor__regressor__n_estimators', 1084), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 523), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02666301886779036), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 978), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02283713732302411), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 184), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07298786238805675), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 724), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012104936533754284), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 441), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0016782628487438305), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08722595424697485), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 549), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009658578773779758), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06719393641583839), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 139), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 67), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09499063014307962), ('regressor__regressor__max_depth', 31), ('regressor__regressor__n_estimators', 466), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014113278951406476), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1056), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04823727055041478), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 124), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09900421675060596), ('regressor__regressor__max_depth', 2249), ('regressor__regressor__n_estimators', 216), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08517985194697146), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 84), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014484666836726407), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1349), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03887062922448268), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 181), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037061220033545235), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 572), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054611118933333466), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044142961484786865), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 163), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09964956943278974), ('regressor__regressor__max_depth', 37), ('regressor__regressor__n_estimators', 263), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08122210979569741), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 160), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 248), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011282432352271856), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1072), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04653802980250082), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06145467062150431), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 89), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054810706161922206), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 274), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019181213079775127), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 970), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06430422638335676), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 348), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002861049879148768), ('regressor__regressor__max_depth', 3169), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022793710945218308), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05456525264758426), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061848655977775065), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0636380275390342), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 270), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0023878802071886857), ('regressor__regressor__max_depth', 6612), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07144648941556735), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 257), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0056446688924867835), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 449), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04580010797775503), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 151), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__max_depth', 41), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06932966365817923), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025454649768777), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004553430532180703), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07445987364336244), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 606), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04140856023528387), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 197), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 846), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07713430277295555), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 167), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0018906632583248512), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03437207373023222), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1048), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04043514983864281), ('regressor__regressor__max_depth', 7159), ('regressor__regressor__n_estimators', 1084), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 523), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02666301886779036), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008027737621878878), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1248), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05992181172761272), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 201), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0685356115784565), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1191), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.045009840877011244), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08287102576365797), ('regressor__regressor__max_depth', 8141), ('regressor__regressor__n_estimators', 1480), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0016782628487438305), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08722595424697485), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 549), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009658578773779758), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06719393641583839), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 139), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 67), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 231), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004866083656078861), ('regressor__regressor__max_depth', 26), ('regressor__regressor__n_estimators', 1446), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 157), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06222497756794347), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014759409961708526), ('regressor__regressor__max_depth', 55), ('regressor__regressor__n_estimators', 366), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09900421675060596), ('regressor__regressor__max_depth', 2249), ('regressor__regressor__n_estimators', 216), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06061507383582916), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 387), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0689331572618047), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 433), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06904581264171722), ('regressor__regressor__max_depth', 9557), ('regressor__regressor__n_estimators', 179), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005510102115096849), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054611118933333466), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044142961484786865), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 163), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09964956943278974), ('regressor__regressor__max_depth', 37), ('regressor__regressor__n_estimators', 263), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08122210979569741), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 160), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 248), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008906090102576389), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1349), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 338), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001682328755588585), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07686695551743043), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06430422638335676), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 348), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002861049879148768), ('regressor__regressor__max_depth', 3169), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006686730621352456), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02256825001011882), ('regressor__regressor__max_depth', 522), ('regressor__regressor__n_estimators', 132), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0054151530889436465), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 750), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006711894568164306), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0021589688674217415), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0636380275390342), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 270), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0023878802071886857), ('regressor__regressor__max_depth', 6612), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07144648941556735), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 257), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0056446688924867835), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06295941044705164), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 70), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011652461796690931), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 915), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03527835574208596), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 132), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0036082093896403255), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1051), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__max_depth', 41), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06932966365817923), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025454649768777), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004553430532180703), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0018840665878057555), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1501), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06079315973608671), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002063336367011251), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044392458353297644), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 575), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0018906632583248512), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03437207373023222), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1048), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04043514983864281), ('regressor__regressor__max_depth', 7159), ('regressor__regressor__n_estimators', 1084), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 523), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02666301886779036), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00526836470413542), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 672), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06220140726486066), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 185), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05533463174576571), ('regressor__regressor__max_depth', 6957), ('regressor__regressor__n_estimators', 194), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0016782628487438305), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08722595424697485), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 549), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009658578773779758), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06719393641583839), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 139), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 67), ('regressor__regressor__n_jobs', -2)])


{'CO_0': {'cluster size (%)': 54, 6: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.41617468702690036, 'test_rmse': 0.6449851562444807, 'test_r2': -0.27357878357511, 'test_pearson_r': array([0.3803187]), 'test_pearson_p_value': array([3.28957838e-06]), 'test_spearman_r': 0.4467218754707672, 'test_spearman_p_value': 2.814225400577005e-08, 'test_kendall_r': 0.29942076189161276, 'test_kendall_p_value': 2.4342514483016864e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.04407167712333106, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 212, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.41238757103235213, 'test_rmse': 0.6437560839564708, 'test_r2': -0.26872958991244444, 'test_pearson_r': array([0.36466527]), 'test_pearson_p_value': array([8.76124294e-06]), 'test_spearman_r': 0.41149031215090986, 'test_spearman_p_value': 3.9975042599150095e-07, 'test_kendall_r': 0.2654198242076162, 'test_kendall_p_value': 4.6972729522029364e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 71, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.3959581504737781, 'test_rmse': 0.6364704360432373, 'test_r2': -0.24017464182590298, 'test_pearson_r': array([0.34939755]), 'test_pearson_p_value': array([2.17076333e-05]), 'test_spearman_r': 0.3706936354859882, 'test_spearman_p_value': 6.044251688039504e-06, 'test_kendall_r': 0.2481560086107631, 'test_kendall_p_value': 1.914611421535974e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 50, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.41157932658328716, 'test_rmse': 0.6434731819951295, 'test_r2': -0.2676147352885514, 'test_pearson_r': array([0.3799573]), 'test_pearson_p_value': array([3.36676758e-06]), 'test_spearman_r': 0.4334102180635808, 'test_spearman_p_value': 7.947733492130069e-08, 'test_kendall_r': 0.28755970898796623, 'test_kendall_p_value': 6.283971302541991e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.03515886636542566, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 432, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.4178217594324128, 'test_rmse': 0.6473128186871299, 'test_r2': -0.2827877107568073, 'test_pearson_r': array([0.38042101]), 'test_pearson_p_value': array([3.26803217e-06]), 'test_spearman_r': 0.43845629993024177, 'test_spearman_p_value': 5.390071426801329e-08, 'test_kendall_r': 0.29396200464499783, 'test_kendall_p_value': 3.953036931601773e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06447772008708622, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.41711600581147196, 'test_rmse': 0.6469566839621032, 'test_r2': -0.2813765859860653, 'test_pearson_r': array([0.37050084]), 'test_pearson_p_value': array([6.11714629e-06]), 'test_spearman_r': 0.4059389196959738, 'test_spearman_p_value': 5.911485532720689e-07, 'test_kendall_r': 0.2681219612115838, 'test_kendall_p_value': 3.4041918713084625e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 159, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.41166648944332185, 'test_rmse': 0.6448098204548839, 'test_r2': -0.2728864464337819, 'test_pearson_r': array([0.38181422]), 'test_pearson_p_value': array([2.98764135e-06]), 'test_spearman_r': 0.46169710763875027, 'test_spearman_p_value': 8.289408402021082e-09, 'test_kendall_r': 0.3108531545102274, 'test_kendall_p_value': 7.385031914993768e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.050214704114692206, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1579, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 50, 6: {'fit_time': array([2.36047244, 2.37778687]), 'score_time': array([0.10591626, 0.10897732]), 'test_pearson_r': array([0.85992496, 0.8967973 ]), 'test_pearson_p': array([-3.36242337e-39, -8.30583711e-47]), 'test_spearman_r': array([0.85526754, 0.8870296 ]), 'test_spearman_p': array([-2.33563735e-38, -1.88600428e-44]), 'test_kendall_r': array([0.74671251, 0.77470646]), 'test_kendall_p': array([-3.16863182e-36, -1.76787727e-38]), 'test_rmse': array([-0.34489928, -0.27622273]), 'test_mae': array([-0.1615249 , -0.13249668]), 'test_r2': array([0.72427018, 0.78712452]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([1.74076509, 1.7152276 ]), 'score_time': array([0.14923882, 0.10947275]), 'test_pearson_r': array([0.88073753, 0.82157445]), 'test_pearson_p': array([-2.26425908e-43, -8.68625416e-33]), 'test_spearman_r': array([0.87387393, 0.81092162]), 'test_spearman_p': array([-6.48493347e-42, -2.40910050e-31]), 'test_kendall_r': array([0.77301017, 0.68501519]), 'test_kendall_p': array([-1.33357551e-38, -1.65023556e-30]), 'test_rmse': array([-0.32810931, -0.35603204]), 'test_mae': array([-0.14575123, -0.19584787]), 'test_r2': array([0.7512091 , 0.64062396]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.044142961484786865, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 163, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([17.22329712, 22.44165158]), 'score_time': array([0.12742138, 0.1263876 ]), 'test_pearson_r': array([0.75627692, 0.89169061]), 'test_pearson_p': array([-2.40811812e-25, -1.51142381e-45]), 'test_spearman_r': array([0.82266612, 0.90633205]), 'test_spearman_p': array([-3.45627285e-33, -2.39774952e-49]), 'test_kendall_r': array([0.73703887, 0.81477574]), 'test_kendall_p': array([-2.51557060e-35, -2.38486036e-42]), 'test_rmse': array([-0.42558416, -0.29289983]), 'test_mae': array([-0.17589227, -0.1272046 ]), 'test_r2': array([0.5424504 , 0.78005357]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.002861049879148768, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 3169, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([1.32090259, 1.43198633]), 'score_time': array([0.1007874 , 0.14440441]), 'test_pearson_r': array([0.87564224, 0.88259763]), 'test_pearson_p': array([-2.78493111e-42, -1.87954228e-43]), 'test_spearman_r': array([0.90120947, 0.88906982]), 'test_spearman_p': array([-2.57981787e-48, -6.33527052e-45]), 'test_kendall_r': array([0.79085894, 0.78812369]), 'test_kendall_p': array([-2.25157795e-40, -7.41104472e-40]), 'test_rmse': array([-0.32483629, -0.30798178]), 'test_mae': array([-0.1487296 , -0.13753879]), 'test_r2': array([0.73286596, 0.75974694]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.09939793013929618, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 4800, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 161, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([6.85008574, 7.98576665]), 'score_time': array([0.10702109, 0.10671282]), 'test_pearson_r': array([0.8971027 , 0.84188082]), 'test_pearson_p': array([-3.05848660e-47, -7.98335882e-36]), 'test_spearman_r': array([0.90024707, 0.85377657]), 'test_spearman_p': array([-4.64980222e-48, -8.25690323e-38]), 'test_kendall_r': array([0.78320354, 0.77517301]), 'test_kendall_p': array([-1.20213978e-39, -1.55932186e-38]), 'test_rmse': array([-0.28906733, -0.34747046]), 'test_mae': array([-0.14747088, -0.15076571]), 'test_r2': array([0.78843747, 0.69364525]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.014798641065097335, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 41, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 720, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([2.78108025, 3.08812308]), 'score_time': array([0.14656091, 0.10425258]), 'test_pearson_r': array([0.91108896, 0.88793165]), 'test_pearson_p': array([-4.19166966e-51, -1.16734928e-44]), 'test_spearman_r': array([0.89100805, 0.88997055]), 'test_spearman_p': array([-9.96235256e-46, -3.88723832e-45]), 'test_kendall_r': array([0.74502246, 0.79513877]), 'test_kendall_p': array([-4.74643993e-36, -2.02240006e-40]), 'test_rmse': array([-0.27268086, -0.30087486]), 'test_mae': array([-0.15541746, -0.1368771 ]), 'test_r2': array([0.80499333, 0.77885513]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.02666301886779036, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 289, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([1.64421463, 1.98556709]), 'score_time': array([0.10638475, 0.10414267]), 'test_pearson_r': array([0.88058438, 0.92097787]), 'test_pearson_p': array([-2.44571766e-43, -7.85322865e-54]), 'test_spearman_r': array([0.8897701 , 0.91200577]), 'test_spearman_p': array([-1.97093360e-45, -5.44392495e-51]), 'test_kendall_r': array([0.80838686, 0.78103154]), 'test_kendall_p': array([-4.66047675e-42, -3.54037679e-39]), 'test_rmse': array([-0.31308016, -0.24422289]), 'test_mae': array([-0.1333686 , -0.13503827]), 'test_r2': array([0.74466524, 0.84718619]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08722595424697485, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 549, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 7, 6: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5326664379970589, 'test_rmse': 0.7884093233331361, 'test_r2': -3.4105376717379627, 'test_pearson_r': array([-0.33982343]), 'test_pearson_p_value': array([0.15459956]), 'test_spearman_r': -0.28998242530755713, 'test_spearman_p_value': 0.22848065914773194, 'test_kendall_r': -0.22485207100591714, 'test_kendall_p_value': 0.18263059728016928, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.024379851498044936, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2253, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 963, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5240637121649732, 'test_rmse': 0.7841851368656427, 'test_r2': -3.3634022002658064, 'test_pearson_r': array([-0.32938236]), 'test_pearson_p_value': array([0.16849253]), 'test_spearman_r': -0.22144112478031638, 'test_spearman_p_value': 0.36224565695962063, 'test_kendall_r': -0.17751479289940827, 'test_kendall_p_value': 0.2927395429639259, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.07975090400997696, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5308624908745855, 'test_rmse': 0.7882599561655098, 'test_r2': -3.4088666435166024, 'test_pearson_r': array([-0.34432272]), 'test_pearson_p_value': array([0.14886391]), 'test_spearman_r': -0.28998242530755713, 'test_spearman_p_value': 0.22848065914773194, 'test_kendall_r': -0.22485207100591714, 'test_kendall_p_value': 0.18263059728016928, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.05521076039083104, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 178, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5262498725035255, 'test_rmse': 0.7802072936925863, 'test_r2': -3.3192470470554847, 'test_pearson_r': array([-0.32538317]), 'test_pearson_p_value': array([0.17403226]), 'test_spearman_r': -0.21538463619221318, 'test_spearman_p_value': 0.37585345411725635, 'test_kendall_r': -0.18397707110864803, 'test_kendall_p_value': 0.2766554925499205, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.01905510041751923, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 495, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5301898712808146, 'test_rmse': 0.7815787858226851, 'test_r2': -3.334445623091738, 'test_pearson_r': array([-0.32946456]), 'test_pearson_p_value': array([0.16837995]), 'test_spearman_r': -0.2618629173989455, 'test_spearman_p_value': 0.27881628903656425, 'test_kendall_r': -0.20118343195266272, 'test_kendall_p_value': 0.2330985982447037, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.004028333964258597, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5185351649030825, 'test_rmse': 0.7787384036070305, 'test_r2': -3.302998732417586, 'test_pearson_r': array([-0.31592151]), 'test_pearson_p_value': array([0.18762685]), 'test_spearman_r': -0.27340661981950326, 'test_spearman_p_value': 0.2573853746705211, 'test_kendall_r': -0.20771604802589297, 'test_kendall_p_value': 0.21935963620736787, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06449854041502759, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 11, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 82, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5364421746580595, 'test_rmse': 0.7870743960125113, 'test_r2': -3.3956145536997457, 'test_pearson_r': array([-0.35058264]), 'test_pearson_p_value': array([0.14113173]), 'test_spearman_r': -0.2987697715289983, 'test_spearman_p_value': 0.21404628824496755, 'test_kendall_r': -0.2366863905325444, 'test_kendall_p_value': 0.16066423799712393, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 978, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 7, 6: {'fit_time': array([4.49588966, 4.68574643, 4.38710213, 3.61010885, 3.84284902,
       3.86107397, 4.01341152, 3.99610734, 4.24301028, 3.88808465,
       3.93548083, 4.56595469, 3.96657372, 4.53995633]), 'score_time': array([0.09654617, 0.09629655, 0.09618044, 0.10696101, 0.10672498,
       0.16584659, 0.10568213, 0.10369182, 0.10109043, 0.12694359,
       0.11573672, 0.09782434, 0.1130209 , 0.09734774]), 'test_pearson_r': array([0.89321584, 0.99347567, 0.98771321, 0.96940596, 0.60176723,
       0.99333874, 0.86759658, 0.96932315, 0.93551679, 0.96418532,
       0.9930846 , 0.95125865, 0.98440768, 0.98271928]), 'test_pearson_p': array([-2.64396665e-07, -1.79111387e-17, -3.81386947e-15, -8.35863122e-12,
       -6.41323748e-03, -2.13597417e-17, -1.50253419e-06, -3.58189330e-11,
       -1.22634672e-08, -1.21640289e-10, -2.57348764e-16, -1.37402708e-09,
       -1.67297452e-13, -3.78792520e-13]), 'test_spearman_r': array([0.85263158, 0.97805092, 0.94736842, 0.94210526, 0.71929825,
       0.98245614, 0.86491228, 0.94883835, 0.94166249, 0.93188854,
       0.99122367, 0.95405279, 0.97830631, 0.96491228]), 'test_spearman_p': array([-3.53981453e-06, -5.11677137e-13, -7.80082922e-10, -1.72238365e-09,
       -5.18354290e-04, -7.73558991e-14, -1.76513030e-06, -2.00924333e-09,
       -5.61230323e-09, -1.87828793e-08, -1.72171485e-15, -8.64446630e-10,
       -2.30443206e-12, -1.03472876e-10]), 'test_kendall_r': array([0.75438596, 0.9       , 0.87134503, 0.83625731, 0.67251462,
       0.91812865, 0.77777778, 0.87132984, 0.86557842, 0.83006536,
       0.94426737, 0.8524636 , 0.91449348, 0.86928105]), 'test_kendall_p': array([-5.24238695e-07, -8.35279080e-08, -4.58322529e-10, -5.55516932e-09,
       -1.56889756e-05, -7.20796807e-12, -1.64978258e-07, -5.42460793e-07,
       -5.63141283e-07, -2.71335027e-08, -4.80698932e-08, -8.32299419e-07,
       -1.34526112e-07, -2.15825858e-09]), 'test_rmse': array([-0.27791933, -0.08149525, -0.12804959, -0.17467355, -0.50319335,
       -0.07946063, -0.35853806, -0.16235008, -0.23354297, -0.15732878,
       -0.07454196, -0.18497365, -0.11070071, -0.08832024]), 'test_mae': array([-0.12842832, -0.04874483, -0.07770959, -0.0906649 , -0.19667492,
       -0.05553965, -0.14834443, -0.06740453, -0.09355605, -0.09598152,
       -0.05389875, -0.12885822, -0.06212148, -0.06363387]), 'test_r2': array([0.77635641, 0.98526768, 0.9655985 , 0.93351643, 0.10317679,
       0.98444915, 0.72304812, 0.93671339, 0.86482177, 0.92545281,
       0.98551483, 0.89658037, 0.96392094, 0.96263006]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([4.75465751, 4.86450148, 3.58583999, 5.08891082, 4.90743947,
       5.16553831, 3.24319935, 3.825809  , 4.66908288, 4.78153825,
       4.60286593, 4.94126534, 4.46253872, 4.95407748]), 'score_time': array([0.15808463, 0.16794658, 0.16822863, 0.10185385, 0.12385631,
       0.09587789, 0.1299901 , 0.12158036, 0.21005678, 0.1188488 ,
       0.11777353, 0.10415363, 0.11357474, 0.10639191]), 'test_pearson_r': array([0.98305392, 0.91799418, 0.98975064, 0.9820831 , 0.73583617,
       0.84050307, 0.9940664 , 0.97471688, 0.97753425, 0.98794419,
       0.99207055, 0.95679165, 0.98913694, 0.93727222]), 'test_pearson_p': array([-5.77293157e-14, -3.05630909e-08, -8.22323245e-16, -9.23881750e-14,
       -3.29287971e-04, -6.63856812e-06, -8.01007431e-18, -7.75610775e-12,
       -3.04096370e-12, -2.16063485e-14, -7.66566934e-16, -5.33304770e-10,
       -9.42425931e-15, -9.88905219e-09]), 'test_spearman_r': array([0.92361721, 0.89552273, 0.97366111, 0.93157895, 0.74275709,
       0.91754386, 0.99122807, 0.95611784, 0.94785764, 0.95611784,
       0.98657077, 0.9504644 , 0.98555212, 0.87764596]), 'test_spearman_p': array([-1.70392493e-08, -2.21384800e-07, -2.37451687e-12, -6.87164496e-09,
       -2.69684992e-04, -3.19693619e-08, -2.20085178e-16, -6.02298234e-10,
       -2.33156775e-09, -6.02298234e-10, -5.09977899e-14, -1.55976502e-09,
       -9.12417033e-14, -1.70877825e-06]), 'test_kendall_r': array([0.81764706, 0.78236648, 0.91176471, 0.8245614 , 0.71177702,
       0.8128655 , 0.95321637, 0.8524636 , 0.8524636 , 0.86557842,
       0.94080983, 0.85620915, 0.93464052, 0.73443018]), 'test_kendall_p': array([-1.12198370e-06, -3.18078416e-06, -5.65458167e-08, -1.17067315e-08,
       -2.25073168e-05, -2.37852170e-08, -1.16815227e-13, -8.32299419e-07,
       -8.32299419e-07, -5.63141283e-07, -5.81823612e-08, -5.28843419e-09,
       -7.81116540e-12, -2.18253405e-05]), 'test_rmse': array([-0.0928169 , -0.2668494 , -0.09446777, -0.12547602, -0.5347441 ,
       -0.38135979, -0.07420631, -0.11569061, -0.12813003, -0.10286422,
       -0.09747179, -0.15473571, -0.09577486, -0.22624995]), 'test_mae': array([-0.05142505, -0.11677759, -0.06742052, -0.07873519, -0.20900592,
       -0.1717062 , -0.0489592 , -0.08663428, -0.09294601, -0.06301398,
       -0.06732512, -0.10501236, -0.0605942 , -0.12740253]), 'test_r2': array([0.9659836 , 0.83623543, 0.97807548, 0.95403752, 0.42979317,
       0.67454184, 0.98790657, 0.94401067, 0.95442974, 0.97203108,
       0.97722654, 0.91290347, 0.97711322, 0.81817614]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.044142961484786865, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 163, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([55.93460107, 53.92809558, 61.56815696, 53.29951024, 58.03415775,
       60.80914807, 51.96142983, 59.97207594, 59.8985672 , 61.34675956,
       54.25066423, 56.86704063, 55.38523436, 61.49317265]), 'score_time': array([0.11454129, 0.1136446 , 0.10497618, 0.12204313, 0.11642003,
       0.1041081 , 0.11224198, 0.11081219, 0.1129992 , 0.10803843,
       0.11617827, 0.12485266, 0.11300325, 0.10018682]), 'test_pearson_r': array([0.91849236, 0.97584097, 0.99152982, 0.98876352, 0.96667203,
       0.98920727, 0.98354599, 0.44288021, 0.98270341, 0.96965277,
       0.99081023, 0.91401004, 0.84132753, 0.99343564]), 'test_pearson_p': array([-2.90706499e-08, -1.14784091e-12, -1.63610624e-16, -1.79074272e-15,
       -1.71419371e-11, -1.27332835e-15, -4.50130039e-14, -6.56761522e-02,
       -3.81566202e-13, -3.28874523e-11, -2.48505364e-15, -1.14456330e-07,
       -1.21254381e-05, -1.69823466e-16]), 'test_spearman_r': array([0.89951742, 0.96445819, 0.9877193 , 0.97368421, 0.93549812,
       0.98727522, 0.9837649 , 0.59266915, 0.96384349, 0.94427245,
       0.98915862, 0.90580147, 0.86171311, 0.98553772]), 'test_spearman_p': array([-1.61180294e-07, -2.93899065e-11, -3.79790244e-15, -2.35705500e-12,
       -4.21876611e-09, -5.12890798e-15, -4.01991254e-14, -9.54244177e-03,
       -1.31102802e-10, -3.92399721e-09, -9.27540331e-15, -2.31150851e-07,
       -4.31768401e-06, -9.19675963e-14]), 'test_kendall_r': array([0.8211179 , 0.89149943, 0.92982456, 0.91812865, 0.80938764,
       0.93842046, 0.9266902 , 0.57705228, 0.87501894, 0.83006536,
       0.94426737, 0.82403396, 0.77777778, 0.92765165]), 'test_kendall_p': array([-9.53596222e-07, -1.03161918e-07, -2.06767062e-12, -7.20796807e-12,
       -1.35872010e-06, -2.12970819e-08, -3.18217344e-08, -8.51059259e-04,
       -4.53574602e-07, -2.71335027e-08, -4.80698932e-08, -2.40473321e-06,
       -4.36097754e-07, -8.87180979e-08]), 'test_rmse': array([-0.26205169, -0.14800182, -0.09913501, -0.10229006, -0.13109444,
       -0.10637335, -0.09916489, -0.53836354, -0.12849809, -0.14282576,
       -0.09516102, -0.28504606, -0.36669418, -0.07406901]), 'test_mae': array([-0.11365561, -0.07222114, -0.07602207, -0.06185123, -0.08870113,
       -0.07445755, -0.06714267, -0.22740318, -0.08488617, -0.09534008,
       -0.05718214, -0.12303857, -0.14416745, -0.05368168]), 'test_r2': array([ 0.83495142,  0.94826201,  0.98129278,  0.9759435 ,  0.91717021,
        0.97517532,  0.96362812, -0.5159886 ,  0.96244341,  0.93584939,
        0.98112415,  0.8134772 ,  0.69284204,  0.9859494 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.002861049879148768, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 3169, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([3.03195739, 2.26663852, 2.4329977 , 2.65753889, 2.3509829 ,
       2.69850731, 2.42395091, 2.40999937, 2.58759093, 2.56785393,
       2.87677264, 2.73546314, 3.386379  , 3.51926708]), 'score_time': array([0.10205865, 0.21773124, 0.16570473, 0.10728693, 0.1103611 ,
       0.10228109, 0.13532472, 0.12727618, 0.10248876, 0.10965776,
       0.09581852, 0.10163522, 0.09536743, 0.09278226]), 'test_pearson_r': array([0.99132286, 0.98924085, 0.98112898, 0.43694362, 0.98987213,
       0.96551168, 0.98974033, 0.96529064, 0.75814962, 0.98536716,
       0.98797742, 0.9185152 , 0.98009569, 0.98014481]), 'test_pearson_p': array([-2.00735229e-16, -1.24018925e-15, -1.43133366e-13, -6.14018349e-02,
       -7.43364734e-16, -2.28392753e-11, -8.29352252e-16, -9.49898001e-11,
       -2.66509852e-04, -1.00957307e-13, -2.11366435e-14, -7.55046562e-08,
       -1.16388683e-12, -1.14128305e-12]), 'test_spearman_r': array([0.98463565, 0.9877193 , 0.97323397, 0.68439782, 0.99122807,
       0.93157895, 0.97715441, 0.95971126, 0.80949933, 0.95872033,
       0.98968008, 0.85758514, 0.9504644 , 0.97936017]), 'test_spearman_p': array([-2.52347607e-14, -3.79790244e-15, -2.71850932e-12, -1.22844681e-03,
       -2.20085178e-16, -6.87164496e-09, -7.16901319e-13, -3.07551300e-10,
       -4.70504360e-05, -3.72370945e-10, -6.26289422e-15, -5.38925995e-06,
       -1.55976502e-09, -1.55232323e-12]), 'test_kendall_r': array([0.92352941, 0.92982456, 0.91495995, 0.62863121, 0.94152047,
       0.83625731, 0.89679028, 0.86186076, 0.72131535, 0.89542484,
       0.94771242, 0.76470588, 0.86928105, 0.92156863]), 'test_kendall_p': array([-3.80976840e-08, -2.06767062e-12, -4.73213851e-08, -2.34744248e-04,
       -5.27929196e-13, -5.55516932e-09, -9.83316810e-08, -6.72597856e-07,
       -3.05216065e-05, -2.96242626e-10, -1.81026609e-12, -8.04176944e-07,
       -2.15825858e-09, -2.92550870e-11]), 'test_rmse': array([-0.08612298, -0.0794163 , -0.11937705, -0.69638629, -0.08484177,
       -0.19339801, -0.09849364, -0.15696219, -0.42556529, -0.10216098,
       -0.08472351, -0.32211775, -0.11642568, -0.14627241]), 'test_mae': array([-0.06925258, -0.05077806, -0.07941518, -0.26307924, -0.06091187,
       -0.11268993, -0.06899153, -0.08511326, -0.19412242, -0.06472354,
       -0.05536728, -0.17364233, -0.07656098, -0.08671362]), 'test_r2': array([ 0.98220857,  0.97760986,  0.96078983, -0.83550324,  0.97841407,
        0.93055365,  0.97798248,  0.91987721,  0.48180892,  0.96949734,
        0.96836353,  0.79771921,  0.9590754 ,  0.95926732]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.09939793013929618, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 4800, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 161, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([17.94192672, 15.27891493, 16.18780589, 15.63154745, 14.12123346,
       16.97612739, 15.37552547, 19.01625514, 16.04619455, 16.20652819,
       15.75507975, 18.31818867, 15.95060086, 14.72506905]), 'score_time': array([0.1386447 , 0.11200237, 0.10399866, 0.11153936, 0.10725093,
       0.09784627, 0.11429572, 0.09880304, 0.1067853 , 0.10355711,
       0.10673761, 0.09523702, 0.11438513, 0.16422486]), 'test_pearson_r': array([0.97057619, 0.88424051, 0.98865177, 0.97803168, 0.96035122,
       0.97380731, 0.62133873, 0.91680562, 0.99576991, 0.98823842,
       0.90305279, 0.98188679, 0.85865543, 0.99132074]), 'test_pearson_p': array([-6.02405266e-12, -5.08711852e-07, -1.94716132e-15, -5.15469091e-13,
       -7.34152188e-11, -2.26590865e-12, -4.51718224e-03, -8.86589166e-08,
       -5.08642290e-18, -1.77473959e-14, -2.88376623e-07, -5.50475241e-13,
       -5.09160238e-06, -1.57562071e-15]), 'test_spearman_r': array([0.91754386, 0.89279575, 0.9793589 , 0.95480483, 0.96842105,
       0.97368421, 0.71578947, 0.92561983, 0.94834711, 0.94166249,
       0.85493042, 0.98142415, 0.89473684, 0.98968008]), 'test_spearman_p': array([-3.19693619e-08, -2.72966487e-07, -3.04866461e-13, -2.19224178e-10,
       -1.09055587e-11, -2.35705500e-12, -5.68469114e-04, -3.72334764e-08,
       -2.16548572e-09, -5.61230323e-09, -6.19280424e-06, -6.72563970e-13,
       -5.42211053e-07, -6.26289422e-15]), 'test_kendall_r': array([0.8245614 , 0.77879156, 0.90265879, 0.86803892, 0.88304094,
       0.89473684, 0.66081871, 0.79605263, 0.82236842, 0.82623395,
       0.81311912, 0.90849673, 0.81699346, 0.94771242]), 'test_kendall_p': array([-1.17067315e-08, -3.68335665e-06, -8.20285757e-08, -2.20656528e-07,
       -1.79983887e-10, -6.63913300e-11, -2.38419293e-05, -4.43734615e-06,
       -2.12143788e-06, -1.78800684e-06, -2.59896801e-06, -9.76656516e-11,
       -5.74338967e-08, -1.81026609e-12]), 'test_rmse': array([-0.1459091 , -0.30634985, -0.07442169, -0.13398035, -0.17761544,
       -0.16768635, -0.51593188, -0.19354472, -0.06926879, -0.10497915,
       -0.2295005 , -0.11670879, -0.33527099, -0.09076987]), 'test_mae': array([-0.07807132, -0.15134459, -0.06088726, -0.09242822, -0.08331516,
       -0.08918802, -0.19740619, -0.12290902, -0.04845466, -0.06845406,
       -0.09265031, -0.08746052, -0.13209626, -0.057648  ]), 'test_r2': array([0.94001883, 0.75412317, 0.97725732, 0.94186423, 0.91875601,
       0.94177511, 0.13709517, 0.82067112, 0.99132191, 0.97617599,
       0.77900815, 0.9621031 , 0.70832137, 0.97999569]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.014798641065097335, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 41, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 720, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([5.40130734, 5.47860813, 5.50521255, 4.84825158, 5.14378643,
       5.75748134, 4.56890988, 4.77555132, 7.11474633, 5.61126828,
       7.40217376, 6.74005437, 5.58953762, 5.00974178]), 'score_time': array([0.10586023, 0.11131096, 0.15809035, 0.11341   , 0.16308093,
       0.1047616 , 0.16857409, 0.11637783, 0.0960784 , 0.09884453,
       0.09331942, 0.09589195, 0.10142922, 0.17416477]), 'test_pearson_r': array([0.83276799, 0.94209428, 0.99845123, 0.99266633, 0.98605514,
       0.9683719 , 0.99760959, 0.90311739, 0.94613206, 0.99404242,
       0.99443107, 0.89081178, 0.99197511, 0.77190483]), 'test_pearson_p': array([-9.65633931e-06, -1.72509692e-09, -8.94788369e-23, -4.82630330e-17,
       -1.11231681e-14, -1.10488468e-11, -3.56956178e-21, -2.86903089e-07,
       -3.00872274e-09, -7.83133876e-17, -4.57069519e-17, -7.17492437e-07,
       -8.43313419e-16, -1.74907471e-04]), 'test_spearman_r': array([0.84358654, 0.91531382, 0.99209871, 0.9841843 , 0.98947368,
       0.97368421, 0.98947368, 0.79183884, 0.97110423, 0.96644308,
       0.99948387, 0.9127518 , 0.98037242, 0.78121775]), 'test_spearman_p': array([-5.68610425e-06, -3.97996537e-08, -9.07791577e-17, -3.22268444e-14,
       -1.03053958e-15, -2.35705500e-12, -1.03053958e-15, -9.00793632e-05,
       -2.23221965e-11, -7.27678973e-11, -2.52759617e-25, -1.28040412e-07,
       -1.04146544e-12, -1.29363860e-04]), 'test_kendall_r': array([0.74339194, 0.75073637, 0.95884012, 0.94398977, 0.94152047,
       0.90643275, 0.92982456, 0.58552632, 0.88235294, 0.87869325,
       0.99672667, 0.82623395, 0.91449348, 0.73856209]), 'test_kendall_p': array([-9.95689890e-06, -7.43302335e-06, -1.13214749e-08, -2.01982025e-08,
       -5.27929196e-13, -2.27996852e-11, -2.06767062e-12, -7.35622083e-04,
       -8.28241250e-10, -3.78914056e-07, -8.33473697e-09, -1.78800684e-06,
       -1.34526112e-07, -2.52158005e-06]), 'test_rmse': array([-0.26984218, -0.17553712, -0.04866855, -0.07124317, -0.09808816,
       -0.18163801, -0.05548024, -0.18626768, -0.21115362, -0.07536492,
       -0.07332368, -0.32236214, -0.09653903, -0.51100506]), 'test_mae': array([-0.11623792, -0.1241929 , -0.03826261, -0.04692011, -0.0647675 ,
       -0.08121953, -0.0392642 , -0.11722954, -0.12634369, -0.05382464,
       -0.0559679 , -0.13534515, -0.07588976, -0.19088338]), 'test_r2': array([0.68471047, 0.85471665, 0.99577433, 0.98482348, 0.96406992,
       0.93628402, 0.99283681, 0.78479332, 0.86395704, 0.98811022,
       0.98594797, 0.78156181, 0.97607764, 0.50297867]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.02666301886779036, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 289, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([3.04080534, 2.95758319, 3.01129723, 4.10784745, 3.01462531,
       3.28842592, 2.8516748 , 3.14968467, 3.03650331, 3.03043628,
       3.15391135, 3.20513988, 4.42094398, 4.34020948]), 'score_time': array([0.11939955, 0.13096023, 0.11031985, 0.09239292, 0.12405133,
       0.09776139, 0.27444553, 0.10099506, 0.10944033, 0.10842204,
       0.10496092, 0.10926008, 0.09527707, 0.09445715]), 'test_pearson_r': array([0.99222958, 0.65609926, 0.99470665, 0.94092757, 0.47895137,
       0.99585511, 0.93430685, 0.88081501, 0.97966653, 0.99272716,
       0.99039885, 0.98226252, 0.96357387, 0.99638082]), 'test_pearson_p': array([-7.87995420e-17, -2.28424182e-03, -3.04141163e-18, -2.03568192e-09,
       -3.80153007e-02, -3.81856663e-19, -4.90859043e-09, -1.39963778e-06,
       -1.37860908e-12, -3.84705019e-16, -3.52310286e-15, -4.66036819e-13,
       -1.39012581e-10, -1.46328693e-18]), 'test_spearman_r': array([0.97147881, 0.62917496, 0.98287305, 0.9240896 , 0.57368421,
       0.99298246, 0.89776226, 0.80578555, 0.94372754, 0.98913937,
       0.98089843, 0.98142415, 0.94014448, 0.98348813]), 'test_spearman_p': array([-4.63665082e-12, -3.90057676e-03, -6.31424104e-14, -1.61904890e-08,
       -1.02225810e-02, -3.32215984e-17, -1.85595135e-07, -5.42251287e-05,
       -4.23430894e-09, -9.40746531e-15, -8.39423191e-13, -6.72563970e-13,
       -6.85945810e-09, -2.63828912e-13]), 'test_kendall_r': array([0.90322969, 0.66079284, 0.9321899 , 0.8211179 , 0.62573099,
       0.95321637, 0.76246662, 0.71712078, 0.81311912, 0.94710295,
       0.93115255, 0.92156863, 0.81699346, 0.93464052]), 'test_kendall_p': array([-7.00361385e-08, -8.59381967e-05, -3.06124963e-08, -9.53596222e-07,
       -7.70690079e-05, -1.16815227e-13, -5.34143245e-06, -3.55564627e-05,
       -2.59896801e-06, -5.48777592e-08, -7.34599652e-08, -2.92550870e-11,
       -5.74338967e-08, -7.81116540e-12]), 'test_rmse': array([-0.08100578, -0.5735106 , -0.07435804, -0.19649379, -0.54290551,
       -0.0599937 , -0.19782125, -0.2942498 , -0.11182584, -0.08053291,
       -0.09638837, -0.13474448, -0.15505925, -0.06149473]), 'test_mae': array([-0.05790026, -0.19916626, -0.04957301, -0.10064888, -0.20776129,
       -0.04281262, -0.13781589, -0.14101109, -0.07709222, -0.05585942,
       -0.07750277, -0.06898156, -0.11792877, -0.04280758]), 'test_r2': array([ 0.98332705,  0.29616457,  0.98783497,  0.86938148, -0.3006576 ,
        0.99160102,  0.84967001,  0.76978413,  0.95557149,  0.98290924,
        0.97870933,  0.96057192,  0.91376216,  0.99221207]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08722595424697485, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 549, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 29, 6: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5899866466049524, 'test_rmse': 0.6902198218241551, 'test_r2': -0.19273345670789088, 'test_pearson_r': array([0.20964876]), 'test_pearson_p_value': array([0.07301393]), 'test_spearman_r': 0.030382035309040063, 'test_spearman_p_value': 0.7972050629895207, 'test_kendall_r': 0.023805277331311988, 'test_kendall_p_value': 0.7651107572653689, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5872994372436441, 'test_rmse': 0.68648592093857, 'test_r2': -0.17986363718441534, 'test_pearson_r': array([0.22139495]), 'test_pearson_p_value': array([0.05800169]), 'test_spearman_r': 0.020175088199904226, 'test_spearman_p_value': 0.8645262512802758, 'test_kendall_r': 0.0011160807738938821, 'test_kendall_p_value': 0.988826166312524, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08517985194697146, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 84, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.588432427301048, 'test_rmse': 0.6872728278140277, 'test_r2': -0.1825701018293333, 'test_pearson_r': array([0.22445581]), 'test_pearson_p_value': array([0.05453299]), 'test_spearman_r': 0.03144994014135697, 'test_spearman_p_value': 0.7902372864189012, 'test_kendall_r': 0.030743130916428284, 'test_kendall_p_value': 0.7044916929573412, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06145467062150431, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 89, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5911094813196357, 'test_rmse': 0.6889309090084199, 'test_r2': -0.18828300776642393, 'test_pearson_r': array([0.21639594]), 'test_pearson_p_value': array([0.06405106]), 'test_spearman_r': 0.024085231039654997, 'test_spearman_p_value': 0.8385948371162645, 'test_kendall_r': 0.01604517935387416, 'test_kendall_p_value': 0.8408520340275556, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.09939793013929618, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 4800, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 161, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5883488358140914, 'test_rmse': 0.687310607469055, 'test_r2': -0.1827001180809389, 'test_pearson_r': array([0.22357129]), 'test_pearson_p_value': array([0.0555175]), 'test_spearman_r': 0.02586341038942942, 'test_spearman_p_value': 0.8268570433941806, 'test_kendall_r': 0.002230911853812165, 'test_kendall_p_value': 0.9776546045407888, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.05913781436124809, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2125, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1123, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5925271431604869, 'test_rmse': 0.6900862746984648, 'test_r2': -0.19227194948920312, 'test_pearson_r': array([0.21173319]), 'test_pearson_p_value': array([0.07014374]), 'test_spearman_r': 0.02973413336433459, 'test_spearman_p_value': 0.8014402019640342, 'test_kendall_r': 0.021916864586404555, 'test_kendall_p_value': 0.7830124924066457, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5884836663533823, 'test_rmse': 0.6869533449415988, 'test_r2': -0.1814709078444381, 'test_pearson_r': array([0.22344676]), 'test_pearson_p_value': array([0.05565726]), 'test_spearman_r': 0.03478486286731745, 'test_spearman_p_value': 0.7685856440868777, 'test_kendall_r': 0.0033432505301295083, 'test_kendall_p_value': 0.9664911528871283, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.008027737621878878, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1248, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 25, 6: {'fit_time': array([3.00646186, 2.95236278, 2.94259477, 2.84656501]), 'score_time': array([0.09652758, 0.09497333, 0.09855127, 0.09532857]), 'test_pearson_r': array([0.94151261, 0.79691984, 0.95829645, 0.97857395]), 'test_pearson_p': array([-1.83969427e-31, -2.01628428e-15, -5.59854598e-36, -2.87890638e-44]), 'test_spearman_r': array([0.91742721, 0.83548786, 0.94412084, 0.96758683]), 'test_spearman_p': array([-6.64869503e-27, -4.94503701e-18, -4.54843441e-32, -9.16558641e-39]), 'test_kendall_r': array([0.82943597, 0.77708314, 0.85018294, 0.8651097 ]), 'test_kendall_p': array([-2.13187585e-22, -6.33526143e-20, -1.89911936e-23, -7.32867076e-24]), 'test_rmse': array([-0.22734612, -0.41897382, -0.18344083, -0.11860017]), 'test_mae': array([-0.10454682, -0.14584004, -0.0905846 , -0.08157614]), 'test_r2': array([0.88073445, 0.58662841, 0.91384125, 0.95674544]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([2.25501299, 2.22945285, 2.14795399, 2.098171  ]), 'score_time': array([0.09792876, 0.09794474, 0.18555665, 0.09819484]), 'test_pearson_r': array([0.92592284, 0.82654993, 0.97028046, 0.92626634]), 'test_pearson_p': array([-2.47769628e-28, -2.26788126e-17, -1.55487165e-40, -5.75422122e-28]), 'test_spearman_r': array([0.91022853, 0.86853697, 0.95345307, 0.92271234]), 'test_spearman_p': array([-8.28074370e-26, -7.14868832e-21, -1.65746197e-34, -2.34697381e-27]), 'test_kendall_r': array([0.79092235, 0.82094939, 0.83634905, 0.78896465]), 'test_kendall_p': array([-1.75438339e-20, -5.81275255e-22, -8.76254770e-23, -3.71271278e-20]), 'test_rmse': array([-0.25899063, -0.40196658, -0.15109707, -0.22250422]), 'test_mae': array([-0.1320039 , -0.13681976, -0.09445745, -0.12693412]), 'test_r2': array([0.82618159, 0.64631203, 0.93846279, 0.851669  ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.044142961484786865, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 163, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([26.19217396, 24.36345243, 28.44785237, 27.56575322]), 'score_time': array([0.10220003, 0.10414481, 0.09928441, 0.11459494]), 'test_pearson_r': array([0.97618895, 0.97988407, 0.85917834, 0.92997592]), 'test_pearson_p': array([-1.57690553e-43, -8.21795797e-46, -5.38052614e-20, -1.22813578e-28]), 'test_spearman_r': array([0.97568334, 0.96760023, 0.89493586, 0.94476207]), 'test_spearman_p': array([-3.03369057e-43, -2.26713488e-39, -9.27155964e-24, -9.81921353e-32]), 'test_kendall_r': array([0.89216237, 0.86925177, 0.80810367, 0.86599879]), 'test_kendall_p': array([-1.17565003e-25, -1.61430294e-24, -2.29907434e-21, -8.41604714e-24]), 'test_rmse': array([-0.14863042, -0.12017525, -0.31169271, -0.25304183]), 'test_mae': array([-0.08288604, -0.08009321, -0.13734273, -0.10297796]), 'test_r2': array([0.94910477, 0.95928315, 0.70046713, 0.85978298]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.002861049879148768, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 3169, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([1.8000598 , 1.687994  , 1.89278793, 1.74397397]), 'score_time': array([0.09430695, 0.09698081, 0.092767  , 0.09453464]), 'test_pearson_r': array([0.98184939, 0.84552173, 0.83720103, 0.92010209]), 'test_pearson_p': array([-3.31933130e-47, -7.99598623e-19, -3.65486831e-18, -6.31812436e-27]), 'test_spearman_r': array([0.97532141, 0.86181687, 0.86538653, 0.91543508]), 'test_spearman_p': array([-4.80546932e-43, -3.09167299e-20, -1.43426819e-20, -3.42178037e-26]), 'test_kendall_r': array([0.87970626, 0.78698832, 0.80598916, 0.80178877]), 'test_kendall_p': array([-7.38496802e-25, -2.31701088e-20, -3.15566035e-21, -8.60446310e-21]), 'test_rmse': array([-0.11279368, -0.38237338, -0.34994003, -0.26600236]), 'test_mae': array([-0.07545509, -0.14909604, -0.12381459, -0.14128619]), 'test_r2': array([0.96399234, 0.66508667, 0.65296131, 0.83305918]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.09939793013929618, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 4800, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 161, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([10.9676733 , 10.1251502 , 10.87907386, 11.43169308]), 'score_time': array([0.09962249, 0.1045146 , 0.10021615, 0.09796143]), 'test_pearson_r': array([0.95099788, 0.88711439, 0.86887542, 0.87390484]), 'test_pearson_p': array([-8.06346411e-34, -7.88016409e-23, -6.62638433e-21, -4.33787958e-21]), 'test_spearman_r': array([0.92613566, 0.91385923, 0.82881192, 0.88316238]), 'test_spearman_p': array([-2.27041070e-28, -2.38559971e-26, -1.55537937e-17, -4.70590222e-22]), 'test_kendall_r': array([0.82356321, 0.84228271, 0.74493067, 0.7925472 ]), 'test_kendall_p': array([-4.36857046e-22, -4.04486258e-23, -2.46725753e-18, -2.41895553e-20]), 'test_rmse': array([-0.19242228, -0.30417709, -0.33243441, -0.31556253]), 'test_mae': array([-0.10483629, -0.1240846 , -0.13797149, -0.12819837]), 'test_r2': array([0.90272404, 0.77175958, 0.72440623, 0.74262192]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.014798641065097335, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 41, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 720, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([3.80853128, 3.66626501, 3.74523234, 3.69886088]), 'score_time': array([0.102561  , 0.13977647, 0.09819889, 0.09686327]), 'test_pearson_r': array([0.91118907, 0.98137829, 0.96846691, 0.7586868 ]), 'test_pearson_p': array([-5.98879316e-26, -7.38832159e-47, -9.77694316e-40, -3.80116064e-13]), 'test_spearman_r': array([0.92377978, 0.97368536, 0.97241651, 0.77543172]), 'test_spearman_p': array([-5.88764869e-28, -3.54187975e-42, -1.53185103e-41, -5.37379696e-14]), 'test_kendall_r': array([0.80502531, 0.87201859, 0.87271065, 0.7181724 ]), 'test_kendall_p': array([-3.51292613e-21, -1.26756651e-24, -1.18939588e-24, -6.70522422e-17]), 'test_rmse': array([-0.25642333, -0.127977  , -0.16304512, -0.48181419]), 'test_mae': array([-0.13962519, -0.07521469, -0.09677246, -0.19247771]), 'test_r2': array([0.8037936 , 0.96061302, 0.92352898, 0.5048284 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.02666301886779036, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 289, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([2.28004599, 2.11527371, 2.40202522, 2.41094255]), 'score_time': array([0.09267092, 0.09548593, 0.09616375, 0.09358668]), 'test_pearson_r': array([0.86187944, 0.84273262, 0.95099159, 0.96744058]), 'test_pearson_p': array([-3.05089729e-20, -1.34385113e-18, -8.09534901e-34, -1.05155330e-38]), 'test_spearman_r': array([0.88138837, 0.86220387, 0.93559214, 0.95693583]), 'test_spearman_p': array([-3.42421165e-22, -2.84762727e-20, -3.50528370e-30, -5.23553927e-35]), 'test_kendall_r': array([0.82536466, 0.76811999, 0.83149023, 0.86352357]), 'test_kendall_p': array([-4.20207181e-22, -1.70081211e-19, -1.80071840e-22, -6.68761271e-24]), 'test_rmse': array([-0.361321  , -0.33835729, -0.18948749, -0.16184024]), 'test_mae': array([-0.12467606, -0.14286933, -0.09976398, -0.08996335]), 'test_r2': array([0.700188  , 0.64333373, 0.90349763, 0.93593473]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08722595424697485, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 549, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 10, 6: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.5138851468137805, 'test_rmse': 0.6490513198401281, 'test_r2': -1.235904404402623, 'test_pearson_r': array([-0.65805463]), 'test_pearson_p_value': array([0.00034953]), 'test_spearman_r': -0.5329842873648454, 'test_spearman_p_value': 0.006083316028033848, 'test_kendall_r': -0.37447664740253334, 'test_kendall_p_value': 0.010834202338407555, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.014759409961708526, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 55, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 366, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.4953327168804503, 'test_rmse': 0.6384563905442824, 'test_r2': -1.1635036555750085, 'test_pearson_r': array([-0.61946763]), 'test_pearson_p_value': array([0.00095938]), 'test_spearman_r': -0.5132010277901677, 'test_spearman_p_value': 0.008700445070788383, 'test_kendall_r': -0.3536723892135037, 'test_kendall_p_value': 0.016108593861828814, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06061507383582916, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 387, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.5187530819944446, 'test_rmse': 0.6523647958536433, 'test_r2': -1.2587917363307968, 'test_pearson_r': array([-0.65367927]), 'test_pearson_p_value': array([0.00039468]), 'test_spearman_r': -0.5205712617493613, 'test_spearman_p_value': 0.007633212493947019, 'test_kendall_r': -0.3606071419431803, 'test_kendall_p_value': 0.014142201093599085, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.001682328755588585, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.5170241753629748, 'test_rmse': 0.648660936323321, 'test_r2': -1.2332155639387943, 'test_pearson_r': array([-0.67164001]), 'test_pearson_p_value': array([0.00023671]), 'test_spearman_r': -0.5523796398890392, 'test_spearman_p_value': 0.004193673880486219, 'test_kendall_r': -0.38834615286188645, 'test_kendall_p_value': 0.008232760994652939, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.0021589688674217415, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.5158835427335804, 'test_rmse': 0.6486258786829951, 'test_r2': -1.2329741769584635, 'test_pearson_r': array([-0.65300127]), 'test_pearson_p_value': array([0.00040212]), 'test_spearman_r': -0.5213470758503291, 'test_spearman_p_value': 0.007527533087186824, 'test_kendall_r': -0.3675418946728568, 'test_kendall_p_value': 0.012390745592999073, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.0036082093896403255, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1051, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.4948033396772449, 'test_rmse': 0.6251543510578637, 'test_r2': -1.0742909524870834, 'test_pearson_r': array([-0.63459684]), 'test_pearson_p_value': array([0.00065618]), 'test_spearman_r': -0.565180572555007, 'test_spearman_p_value': 0.0032405797799190212, 'test_kendall_r': -0.40915041105091604, 'test_kendall_p_value': 0.005370503697696927, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1501, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.4888474406582213, 'test_rmse': 0.6269179446997124, 'test_r2': -1.0860108303898022, 'test_pearson_r': array([-0.61486202]), 'test_pearson_p_value': array([0.0010729]), 'test_spearman_r': -0.5585861526967812, 'test_spearman_p_value': 0.0037055783248449953, 'test_kendall_r': -0.4022156583212395, 'test_kendall_p_value': 0.006205088220470119, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.05533463174576571, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 6957, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 194, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 10, 6: {'fit_time': array([3.18689346, 3.34405756, 3.16978741, 3.26491261, 3.32285714,
       3.11109066, 3.25068688, 3.1860106 , 3.24603581, 3.1015265 ]), 'score_time': array([0.15203357, 0.09128213, 0.09704185, 0.09346557, 0.09274554,
       0.09736824, 0.09453321, 0.09392834, 0.09401298, 0.09497738]), 'test_pearson_r': array([0.92337221, 0.97866777, 0.9705862 , 0.76040767, 0.89819062,
       0.93059096, 0.99348097, 0.97581265, 0.95641524, 0.98849766]), 'test_pearson_p': array([-1.82173949e-11, -5.25839761e-18, -2.38239940e-16, -6.54359627e-06,
       -4.82563433e-10, -5.77136098e-12, -3.76249858e-24, -2.33947944e-17,
       -2.48124208e-14, -2.25451971e-20]), 'test_spearman_r': array([0.9034023 , 0.97708618, 0.96854701, 0.79965812, 0.91726496,
       0.94681045, 0.98615149, 0.95246244, 0.93194254, 0.97980383]), 'test_spearman_p': array([-2.64063140e-10, -1.23045591e-17, -5.26972485e-16, -9.52706875e-07,
       -4.42769934e-11, -2.57595309e-13, -3.06112276e-20, -6.88978171e-14,
       -4.59056148e-12, -1.40038190e-17]), 'test_kendall_r': array([0.81972362, 0.91049383, 0.88923077, 0.74153846, 0.85230769,
       0.8346303 , 0.936827  , 0.87346095, 0.8117284 , 0.89816486]), 'test_kendall_p': array([-4.50549884e-09, -7.74797512e-11, -2.23573211e-15, -2.43286087e-09,
       -1.91803722e-13, -2.59182200e-09, -2.05220877e-11, -4.35362070e-10,
       -6.64170717e-09, -3.29544994e-10]), 'test_rmse': array([-0.24763418, -0.14614517, -0.16291852, -0.43319721, -0.30014523,
       -0.23299111, -0.07249635, -0.13740193, -0.17942143, -0.08191967]), 'test_mae': array([-0.11199342, -0.06944609, -0.08823521, -0.17047899, -0.11689871,
       -0.09330987, -0.05193757, -0.0788397 , -0.13294451, -0.05585698]), 'test_r2': array([0.83894618, 0.95594007, 0.93810869, 0.49478047, 0.79208648,
       0.84678234, 0.98678328, 0.95108977, 0.90355752, 0.97424849]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([2.69660592, 2.75173187, 2.81963921, 2.77847505, 2.58946013,
       2.62412524, 2.6660707 , 2.70796061, 2.57592988, 2.64511108]), 'score_time': array([0.10091019, 0.13488913, 0.12742424, 0.09344006, 0.11119986,
       0.109025  , 0.10226107, 0.09692407, 0.1121316 , 0.10289192]), 'test_pearson_r': array([0.99238908, 0.92246086, 0.98677339, 0.75755243, 0.76414492,
       0.97816866, 0.9615559 , 0.99041782, 0.98591068, 0.94797413]), 'test_pearson_p': array([-2.39942629e-23, -2.08940794e-11, -1.76932022e-20, -7.42225396e-06,
       -5.53424720e-06, -6.92265403e-18, -5.65130738e-15, -3.76766142e-22,
       -3.76004302e-20, -6.37309691e-13]), 'test_spearman_r': array([0.97518411, 0.87390964, 0.9615319 , 0.766336  , 0.79808515,
       0.955377  , 0.94475812, 0.98939814, 0.9808547 , 0.9082516 ]), 'test_spearman_p': array([-3.17261628e-17, -5.52049032e-09, -5.69308806e-15, -5.00943268e-06,
       -1.03734070e-06, -3.27359173e-14, -4.01430269e-13, -1.26132064e-21,
       -1.45220631e-18, -3.56225626e-10]), 'test_kendall_r': array([0.89751986, 0.73995227, 0.87519364, 0.72446168, 0.78274361,
       0.84437697, 0.8346303 , 0.93518964, 0.92      , 0.77796436]), 'test_kendall_p': array([-1.76728919e-10, -1.33545564e-07, -3.81728436e-10, -2.43373869e-07,
       -2.14457728e-08, -1.53302077e-09, -2.59182200e-09, -2.35965562e-11,
       -2.27082443e-17, -5.23340882e-08]), 'test_rmse': array([-0.07297085, -0.26227144, -0.10461289, -0.47268022, -0.47423836,
       -0.11682423, -0.18667569, -0.08902233, -0.10375933, -0.2028684 ]), 'test_mae': array([-0.05076152, -0.12959043, -0.06529245, -0.17716523, -0.16546677,
       -0.08722028, -0.11641405, -0.06293403, -0.07381452, -0.11250253]), 'test_r2': array([0.98460961, 0.83936206, 0.96721704, 0.47921189, 0.55512082,
       0.94993215, 0.92328527, 0.97879709, 0.96696281, 0.86370588]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.044142961484786865, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 163, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([37.58516073, 39.13857722, 38.22574997, 42.52193141, 39.74804926,
       39.48686314, 41.6534245 , 40.32265425, 40.42236304, 38.73705149]), 'score_time': array([0.17812157, 0.11019182, 0.18754792, 0.09762096, 0.10756016,
       0.15863395, 0.10109115, 0.10802078, 0.09971523, 0.10843015]), 'test_pearson_r': array([0.94027884, 0.9572477 , 0.99272346, 0.98420921, 0.9381824 ,
       0.67951967, 0.98509437, 0.98555767, 0.93189531, 0.88360849]), 'test_pearson_p': array([-9.99537699e-13, -1.97714312e-14, -1.40184388e-23, -1.46413753e-19,
       -1.49574950e-12, -1.34638588e-04, -7.36044261e-20, -5.05096583e-20,
       -4.62779298e-12, -4.85094061e-09]), 'test_spearman_r': array([0.93499851, 0.9492221 , 0.97999659, 0.97042231, 0.91502822,
       0.75294923, 0.97519283, 0.98734616, 0.89547893, 0.93535982]), 'test_spearman_p': array([-2.68766363e-12, -1.49471695e-13, -2.44692904e-18, -2.54452060e-16,
       -6.02675253e-11, -9.06189342e-06, -3.15940622e-17, -1.04318951e-20,
       -6.52062918e-10, -7.26883660e-12]), 'test_kendall_r': array([0.84699519, 0.84437697, 0.91833699, 0.88752031, 0.77658027,
       0.70262025, 0.88856193, 0.93518964, 0.79883069, 0.85619208]), 'test_kendall_p': array([-1.49622074e-09, -1.53302077e-09, -5.03226074e-11, -2.16002957e-10,
       -2.76310638e-08, -4.99005619e-07, -2.40270672e-10, -2.35965562e-11,
       -1.51709944e-08, -2.20230584e-09]), 'test_rmse': array([-0.22602818, -0.20302461, -0.0861571 , -0.1148664 , -0.17124635,
       -0.45748895, -0.10782568, -0.11963174, -0.2431895 , -0.31175769]), 'test_mae': array([-0.09398139, -0.09945864, -0.06210814, -0.07367569, -0.10377469,
       -0.18211259, -0.07164673, -0.07018616, -0.11053286, -0.11691516]), 'test_r2': array([0.88017292, 0.91061133, 0.98288297, 0.9666922 , 0.8715037 ,
       0.21345229, 0.96960091, 0.96742594, 0.85892092, 0.76282429]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.002861049879148768, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 3169, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([2.28671813, 2.20683551, 2.20852017, 2.05887222, 2.14545894,
       2.22929382, 2.23297572, 2.18594623, 2.18900752, 2.13936543]), 'score_time': array([0.10281467, 0.09444141, 0.09238577, 0.14405584, 0.09521818,
       0.09365773, 0.09465265, 0.09236503, 0.09331179, 0.13573742]), 'test_pearson_r': array([0.9947825 , 0.98274365, 0.52029156, 0.98785176, 0.97275852,
       0.9266698 , 0.70489882, 0.92370088, 0.98240413, 0.97735965]), 'test_pearson_p': array([-2.61638207e-25, -4.21568469e-19, -6.43533728e-03, -6.41171493e-21,
       -9.59442948e-17, -1.09335083e-11, -5.80241705e-05, -1.73314089e-11,
       -5.31684101e-19, -5.14794096e-17]), 'test_spearman_r': array([0.99281684, 0.97247394, 0.76471896, 0.98153846, 0.96221578,
       0.94661241, 0.76504788, 0.92049924, 0.97726108, 0.98076923]), 'test_spearman_p': array([-1.20113794e-23, -1.08528386e-16, -5.39220802e-06, -9.41926724e-19,
       -4.60678694e-15, -2.69066468e-13, -5.31229646e-06, -2.79093456e-11,
       -1.12337123e-17, -8.01043174e-18]), 'test_kendall_r': array([0.95208769, 0.89368365, 0.72257367, 0.90769231, 0.85670364,
       0.85583967, 0.7191358 , 0.81972362, 0.89984698, 0.91333333]), 'test_kendall_p': array([-1.09263094e-11, -1.62021758e-10, -3.69933256e-07, -1.60555143e-16,
       -8.84108293e-10, -1.11606729e-09, -2.77420408e-07, -4.50549884e-09,
       -1.21299979e-10, -3.83758895e-16]), 'test_rmse': array([-0.06575943, -0.11214727, -0.59923445, -0.10876977, -0.16503707,
       -0.22637061, -0.47593654, -0.24246069, -0.13852668, -0.14162388]), 'test_mae': array([-0.05019339, -0.06988015, -0.19884142, -0.07585709, -0.08688276,
       -0.1046265 , -0.18853707, -0.10575711, -0.08941979, -0.08391024]), 'test_r2': array([ 0.98905537,  0.96440963, -0.46386424,  0.97367921,  0.94307386,
        0.83168671,  0.35693681,  0.8287334 ,  0.95985361,  0.95291545]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.09939793013929618, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 4800, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 161, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([13.12080598, 12.58968711, 12.08558393, 12.92753649, 12.67708254,
       12.2304945 , 13.43281651, 13.02476883, 12.64595389, 12.19151664]), 'score_time': array([0.09414721, 0.10074544, 0.10613537, 0.09553695, 0.1001687 ,
       0.1046567 , 0.09342146, 0.09518194, 0.09928632, 0.10627174]), 'test_pearson_r': array([0.916228  , 0.97105295, 0.97064268, 0.97363376, 0.8107416 ,
       0.91940679, 0.99385363, 0.93221861, 0.9796344 , 0.75085385]), 'test_pearson_p': array([-5.11350680e-11, -1.97103984e-16, -2.32875271e-16, -6.51300725e-17,
       -5.11716351e-07, -3.26874213e-11, -1.86004982e-24, -4.37834627e-12,
       -3.02924795e-18, -1.53038286e-05]), 'test_spearman_r': array([0.84722016, 0.9710963 , 0.96716826, 0.9774359 , 0.83911781,
       0.92831492, 0.97640225, 0.89998292, 0.96837068, 0.79053666]), 'test_spearman_p': array([-4.78606256e-08, -1.93633551e-16, -8.75564045e-16, -1.02492569e-17,
       -8.51379431e-08, -8.39952558e-12, -1.74510491e-17, -3.93661710e-10,
       -5.63027008e-16, -2.57382219e-06]), 'test_kendall_r': array([0.76472054, 0.88099023, 0.87962963, 0.90769231, 0.7642536 ,
       0.78947747, 0.91049816, 0.81356029, 0.89368365, 0.77796436]), 'test_kendall_p': array([-5.02438879e-08, -3.24879876e-10, -3.28082967e-10, -1.60555143e-16,
       -4.56085181e-08, -1.83407737e-08, -7.74772425e-11, -5.87127803e-09,
       -1.62021758e-10, -5.23340882e-08]), 'test_rmse': array([-0.25582723, -0.14563232, -0.1522341 , -0.14018774, -0.41058043,
       -0.18777974, -0.08469906, -0.20245687, -0.11698568, -0.48273584]), 'test_mae': array([-0.11357436, -0.09197889, -0.09672809, -0.08400591, -0.14031012,
       -0.11035309, -0.05590721, -0.09072698, -0.08710916, -0.14013702]), 'test_r2': array([0.83017351, 0.93808002, 0.93853489, 0.94776737, 0.59960996,
       0.82029635, 0.98762904, 0.85470605, 0.95954787, 0.49933215]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.014798641065097335, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 41, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 720, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([4.22141242, 4.53734565, 4.70545793, 4.38436389, 4.40718675,
       4.14582634, 4.57787585, 4.83724594, 4.40823245, 4.63411999]), 'score_time': array([0.1097126 , 0.09970713, 0.09470868, 0.10152936, 0.10622573,
       0.11072087, 0.0966866 , 0.09363675, 0.10633326, 0.09549427]), 'test_pearson_r': array([0.84997918, 0.98434183, 0.9943185 , 0.97477029, 0.99655473,
       0.94749713, 0.98237049, 0.99281663, 0.76248141, 0.80397153]), 'test_pearson_p': array([-3.90401692e-08, -1.32410236e-19, -7.25578034e-25, -3.86085069e-17,
       -1.81446598e-27, -2.21191767e-13, -5.43918881e-19, -1.20155624e-23,
       -5.96493206e-06, -1.28931440e-06]), 'test_spearman_r': array([0.85841318, 0.95878241, 0.99572297, 0.97452557, 0.97931272,
       0.89633943, 0.94047234, 0.99435802, 0.84770725, 0.82361994]), 'test_spearman_p': array([-2.04084112e-08, -1.28517329e-14, -2.42068794e-26, -4.32956244e-17,
       -3.65001219e-18, -5.93188955e-10, -9.62330600e-13, -6.67407465e-25,
       -4.61833996e-08, -4.24265052e-07]), 'test_kendall_r': array([0.76234931, 0.87172498, 0.97523687, 0.89368365, 0.89984698,
       0.73374965, 0.84699519, 0.96764368, 0.78760542, 0.77128655]), 'test_kendall_p': array([-5.12523937e-08, -4.96357216e-10, -3.62816505e-12, -1.62021758e-10,
       -1.21299979e-10, -1.70504047e-07, -1.49622074e-09, -4.43025504e-12,
       -2.06745865e-08, -6.79649026e-08]), 'test_rmse': array([-0.23694062, -0.12494602, -0.06517483, -0.11271427, -0.0630612 ,
       -0.188786  , -0.10815634, -0.08538606, -0.46965501, -0.44219183]), 'test_mae': array([-0.10853662, -0.06846366, -0.04332176, -0.06538445, -0.04462756,
       -0.11096264, -0.07130757, -0.05907861, -0.1930698 , -0.16370619]), 'test_r2': array([0.71080668, 0.96640046, 0.98850063, 0.94549277, 0.99239417,
       0.87208957, 0.96165568, 0.98510166, 0.55288257, 0.57195435]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.02666301886779036, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 289, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([2.78697872, 2.66644716, 2.6477077 , 2.85958362, 2.58392644,
       2.8101213 , 2.72566009, 2.74174118, 2.73424363, 2.93718481]), 'score_time': array([0.10600901, 0.10153532, 0.10176182, 0.09546971, 0.10341954,
       0.10093427, 0.09380913, 0.13981915, 0.09631395, 0.10057116]), 'test_pearson_r': array([0.99091755, 0.71970162, 0.91273563, 0.7208034 , 0.94162821,
       0.90678179, 0.98750387, 0.99118103, 0.95080488, 0.98616665]), 'test_pearson_p': array([-1.98629215e-22, -3.40887327e-05, -8.19559224e-11, -3.27223266e-05,
       -7.65155017e-13, -1.75341962e-10, -8.98149922e-21, -1.39702026e-22,
       -1.03060913e-13, -1.86106851e-19]), 'test_spearman_r': array([0.97140037, 0.74114655, 0.90719311, 0.7753078 , 0.93759618,
       0.86183316, 0.98424802, 0.98751105, 0.9157121 , 0.96384615]), 'test_spearman_p': array([-1.70822239e-16, -1.48337394e-05, -1.66641810e-10, -3.29366032e-06,
       -1.67000866e-12, -1.55026417e-08, -1.42181711e-19, -8.92009863e-21,
       -5.48952589e-11, -1.04843958e-14]), 'test_kendall_r': array([0.89582802, 0.70899192, 0.79195984, 0.7808642 , 0.83205029,
       0.7438307 , 0.92240028, 0.94429055, 0.8505403 , 0.87333333]), 'test_kendall_p': array([-1.97983706e-10, -4.34362144e-07, -1.77651111e-08, -2.41600375e-08,
       -2.63811153e-09, -1.06894012e-07, -5.37479055e-11, -1.69305710e-11,
       -1.16530353e-09, -7.25596650e-14]), 'test_rmse': array([-0.08046562, -0.56670694, -0.25328882, -0.4239431 , -0.2003299 ,
       -0.25380736, -0.09964934, -0.08641353, -0.18294439, -0.10918267]), 'test_mae': array([-0.05713085, -0.20009327, -0.11878212, -0.13546705, -0.12442986,
       -0.1283336 , -0.06522526, -0.06742292, -0.09046871, -0.06775806]), 'test_r2': array([0.98011297, 0.40837772, 0.80554647, 0.35642794, 0.87975051,
       0.81721484, 0.97406706, 0.98201031, 0.89819497, 0.9707274 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08722595424697485, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 549, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 Mordred_Polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 Mordred_Polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 Mordred_Polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c035n03>
Subject: Job 347645: <XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311> in cluster <Hazel> Done

Job <XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311> was submitted from host <c025n03> by user <sdehgha2> in cluster <Hazel> at Sun Mar 16 15:02:04 2025
Job was executed on host(s) <8*c035n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Mar 16 15:02:06 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Mar 16 15:02:06 2025
Terminated at Mon Mar 17 13:23:05 2025
Results reported at Mon Mar 17 13:23:05 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 80:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "XGBR"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 Mordred_Polysize cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   341960.56 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.64 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   80467 sec.
    Turnaround time :                            80461 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.err> for stderr output of this job.

