


-------------------------------------------------- 
OOD TEST ON ionic-EG



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04536980504310037), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1610), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1210), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06611467217816529), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1320), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004107728071581991), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06042070628755169), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1474), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030957198884498365), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013703132031879433), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02204411918994602), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 351), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03923052671481533), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09949892882620026), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 785), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.9981755713788937e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044095384173221494), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 572), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05075431908386577), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1939), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008826615632836517), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027021472930904934), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.046923599864661596), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 539), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05430405788169288), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055847286796322525), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1991), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010194217071356749), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 304), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09519991703670388), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1980), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00042950047384347474), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09830254385055572), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1887), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009832858576632336), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041025262072558515), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06575684856376013), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 628), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0695178444067355), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04092161085213235), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1470), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09975111405986348), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 279), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004082630511258039), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04393647898360335), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05085899727890498), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1058), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04854413804710995), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1494), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09927228024888755), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1208), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.500202762329991e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 451), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06867366437970923), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 307), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0496972787585652), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04715949636941122), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 214), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0712577184847663), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1429), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04876067386670827), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 568), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05096374995112962), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 690), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057328918351459875), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1163), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055138058441602925), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04193605126284001), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007750903859219658), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09710930288359544), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1328), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0155732929112604e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02800307894618573), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 729), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08570076872934597), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 569), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09744346986525854), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 887), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005682856730553875), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07682220299314736), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 765), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03720391046854435), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07537917915652038), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 828), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03359200457809129), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06401747922373925), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 183), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008365419929080034), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 657), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 118), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009287958133767796), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055988316220721666), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 917), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1010), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04500987520111051), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])


{'CO_ionic-EG': {'cluster size (%)': 6, 6: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.1780800829115963, 'test_rmse': 1.4571842619293014, 'test_r2': -1.5666902412071524, 'test_pearson_r': array([-0.04009622]), 'test_pearson_p_value': array([0.88279031]), 'test_spearman_r': 0.17075117426311595, 'test_spearman_p_value': 0.5272095921645825, 'test_kendall_r': 0.11629879691581348, 'test_kendall_p_value': 0.5462236183562896, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1210, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.1640326034529092, 'test_rmse': 1.4453494162605693, 'test_r2': -1.52516765630974, 'test_pearson_r': array([-0.04949622]), 'test_pearson_p_value': array([0.85555513]), 'test_spearman_r': 0.17075117426311595, 'test_spearman_p_value': 0.5272095921645825, 'test_kendall_r': 0.11629879691581348, 'test_kendall_p_value': 0.5462236183562896, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.0098536581889377, 'test_rmse': 1.2725318877670202, 'test_r2': -0.9574102721082649, 'test_pearson_r': array([-0.08144814]), 'test_pearson_p_value': array([0.7642815]), 'test_spearman_r': -0.17981760829478582, 'test_spearman_p_value': 0.5051619374331615, 'test_kendall_r': -0.11629879691581348, 'test_kendall_p_value': 0.5462236183562896, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 539, 'regressor__learning_rate': 0.046923599864661596, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.2256824759702396, 'test_rmse': 1.481796063376724, 'test_r2': -1.654125096739361, 'test_pearson_r': array([0.22581961]), 'test_pearson_p_value': array([0.40037619]), 'test_spearman_r': 0.545497114238804, 'test_spearman_p_value': 0.028847250700541786, 'test_kendall_r': 0.31311214554257477, 'test_kendall_p_value': 0.10424453561934134, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0695178444067355, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.1877681484847833, 'test_rmse': 1.4849931231082805, 'test_r2': -1.6655903051351348, 'test_pearson_r': array([-0.1525327]), 'test_pearson_p_value': array([0.57278434]), 'test_spearman_r': -0.01964394040195139, 'test_spearman_p_value': 0.9424362771994955, 'test_kendall_r': 0.008946061301216422, 'test_kendall_p_value': 0.9629774227312178, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.0946159285270476, 'test_rmse': 1.335158135766454, 'test_r2': -1.1548146928535634, 'test_pearson_r': array([0.34617965]), 'test_pearson_p_value': array([0.1890306]), 'test_spearman_r': 0.4699434973082218, 'test_spearman_p_value': 0.06624152049715464, 'test_kendall_r': 0.2773279003377091, 'test_kendall_p_value': 0.1501660892362776, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1328, 'regressor__learning_rate': 0.09710930288359544, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.1163947451778804, 'test_rmse': 1.395223352791968, 'test_r2': -1.3530545137577419, 'test_pearson_r': array([0.14124777]), 'test_pearson_p_value': array([0.6018174]), 'test_spearman_r': 0.34301342086484354, 'test_spearman_p_value': 0.19337973647759937, 'test_kendall_r': 0.22365153253041056, 'test_kendall_p_value': 0.2458698860440076, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03720391046854435, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_ionic-EG': {'cluster size (%)': 6, 6: {'fit_time': array([25.90499258, 27.08458424, 26.18281484, 27.81391859, 26.6293242 ,
       30.19183779, 27.35859132, 28.66219401, 27.63894725, 32.61351395,
       29.12805653, 29.7960639 , 26.78046417, 29.85925317, 26.46927381,
       29.47600293]), 'score_time': array([0.37348676, 0.37045979, 0.38200045, 0.35274673, 0.36878109,
       0.36301398, 0.36026192, 0.36472511, 0.36941767, 0.32442212,
       0.38826704, 0.35480666, 0.35720587, 0.33382559, 0.38274884,
       0.33710027]), 'test_pearson_r': array([0.96725332, 0.98840066, 0.9911825 , 0.98995253, 0.93665949,
       0.97500953, 0.97623859, 0.70249673, 0.96969071, 0.93626686,
       0.98030945, 0.96303953, 0.97438707, 0.96631456, 0.93485981,
       0.95584962]), 'test_pearson_p': array([-2.43828492e-10, -1.07933287e-13, -1.39147676e-14, -2.69934070e-13,
       -9.26751944e-08, -1.52800316e-10, -1.07702134e-10, -2.40887735e-03,
       -5.81569383e-10, -9.66697845e-08, -2.92149078e-11, -2.29111666e-09,
       -1.81218170e-10, -1.20716914e-09, -1.12209611e-07, -7.79998418e-09]), 'test_spearman_r': array([0.93382353, 0.95892109, 0.98712465, 0.94705882, 0.83529412,
       0.94117647, 0.98160439, 0.67647059, 0.94117647, 0.92273756,
       0.95217097, 0.93823529, 0.961001  , 0.90882353, 0.90132646,
       0.93451092]), 'test_spearman_p': array([-4.32632699e-08, -1.30297692e-09, -2.35235248e-13, -2.71573117e-08,
       -5.63713206e-05, -5.58893763e-08, -1.82090718e-11, -4.00825239e-03,
       -5.58893763e-08, -3.58624443e-07, -1.35244908e-08, -7.80221977e-08,
       -3.31817876e-09, -1.10058522e-06, -1.87484175e-06, -1.16375217e-07]), 'test_kendall_r': array([0.86764706, 0.86347451, 0.93727575, 0.85      , 0.71666667,
       0.8       , 0.94561497, 0.7       , 0.85      , 0.81172259,
       0.84519568, 0.85      , 0.86193223, 0.78333333, 0.77313654,
       0.82845913]), 'test_kendall_p': array([-9.57597523e-09, -1.40967662e-06, -1.64175866e-07, -1.02027025e-07,
       -2.87624658e-05, -1.17934846e-06, -3.52984089e-07, -4.94106357e-05,
       -1.02027025e-07, -1.23329686e-05, -5.31661458e-06, -1.02027025e-07,
       -3.45008795e-06, -2.41022656e-06, -3.31759538e-05, -8.12917002e-06]), 'test_rmse': array([-0.15149433, -0.11000323, -0.10611037, -0.09751755, -0.17666071,
       -0.16093304, -0.14429676, -0.5282144 , -0.17400938, -0.21042359,
       -0.11595402, -0.16758507, -0.16390437, -0.14982373, -0.20296634,
       -0.15085392]), 'test_mae': array([-0.09044007, -0.07218547, -0.07464766, -0.07985757, -0.11713005,
       -0.12164255, -0.08451302, -0.21917266, -0.09273022, -0.13441334,
       -0.08177067, -0.13119893, -0.11546425, -0.11061721, -0.09444421,
       -0.10862437]), 'test_r2': array([0.9317716 , 0.9680467 , 0.97961407, 0.97804933, 0.85426482,
       0.94182936, 0.93694745, 0.43372367, 0.93681906, 0.87086245,
       0.96057212, 0.92600641, 0.93892091, 0.90526815, 0.85334169,
       0.90290923]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1474, 'regressor__learning_rate': 0.06042070628755169, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([34.27307034, 36.46062827, 35.14989018, 40.61276102, 32.01500177,
       38.94482231, 45.99505687, 44.65990901, 44.52106953, 43.10377121,
       43.98548603, 44.63704515, 42.65025091, 48.79921007, 47.48851299,
       36.15125942]), 'score_time': array([0.48310518, 0.48182058, 0.48109818, 0.49386573, 0.47384763,
       0.47819924, 0.46176863, 0.45154953, 0.45470119, 0.46146393,
       0.48963833, 0.4860189 , 0.54306293, 0.43121386, 0.4413445 ,
       0.47064328]), 'test_pearson_r': array([0.98448902, 0.98335798, 0.99421166, 0.98924802, 0.98896194,
       0.94897152, 0.71754165, 0.98703562, 0.96272502, 0.97500899,
       0.8527362 , 0.99401306, 0.9849838 , 0.96397923, 0.98353011,
       0.9255669 ]), 'test_pearson_p': array([-9.43632986e-13, -1.59454014e-12, -5.97479409e-16, -4.32985877e-13,
       -5.19967114e-13, -2.10982942e-08, -1.75156132e-03, -1.59507202e-12,
       -2.42908885e-09, -1.52823032e-10, -2.70377701e-05, -7.27680172e-15,
       -4.43696539e-12, -1.91797817e-09, -8.43981129e-12, -2.78323761e-07]), 'test_spearman_r': array([0.93562249, 0.94052746, 0.98280395, 0.9256809 , 0.95882353,
       0.94922763, 0.77058824, 0.98529412, 0.90507751, 0.95658598,
       0.77851382, 0.99411765, 0.99117647, 0.94628429, 0.97496424,
       0.89117647]), 'test_spearman_p': array([-3.53712041e-08, -1.98053909e-08, -2.03521631e-12, -2.75438509e-07,
       -4.82554077e-09, -2.03820935e-08, -4.76822395e-04, -3.83671954e-12,
       -1.44408329e-06, -6.94731437e-09, -3.81414500e-04, -6.43399749e-15,
       -1.09082915e-13, -3.00012032e-08, -1.54730831e-10, -3.61864891e-06]), 'test_kendall_r': array([0.81919377, 0.80443352, 0.92942583, 0.81172259, 0.86666667,
       0.86193223, 0.71666667, 0.93333333, 0.7113033 , 0.86193223,
       0.61088401, 0.96666667, 0.96666667, 0.82845913, 0.89078776,
       0.76666667]), 'test_kendall_p': array([-4.73348832e-06, -6.99598360e-06, -2.40218359e-07, -1.23329686e-05,
       -3.98309214e-08, -3.45008795e-06, -2.87624658e-05, -3.55879882e-10,
       -1.27728091e-04, -3.45008795e-06, -1.00194553e-03, -1.29045888e-11,
       -1.29045888e-11, -8.12917002e-06, -1.73481918e-06, -4.72451181e-06]), 'test_rmse': array([-0.09284606, -0.12784153, -0.06939282, -0.12058976, -0.09166145,
       -0.22508118, -0.50659507, -0.12121325, -0.14658346, -0.13541717,
       -0.32123127, -0.07877053, -0.10117106, -0.17134608, -0.12582897,
       -0.22298511]), 'test_mae': array([-0.05843526, -0.09722329, -0.06006605, -0.08729866, -0.06308277,
       -0.15685181, -0.21637783, -0.07181827, -0.10736465, -0.10247826,
       -0.20419737, -0.0566594 , -0.06827603, -0.12174825, -0.07856127,
       -0.14190165]), 'test_r2': array([0.96753599, 0.96091325, 0.98581227, 0.9693311 , 0.97735968,
       0.89275254, 0.46530394, 0.9717715 , 0.90517506, 0.94065199,
       0.7161874 , 0.98656743, 0.96832978, 0.91677669, 0.95964338,
       0.8020979 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03923052671481533, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([37.61684799, 42.34049535, 42.96609759, 42.13871837, 40.60249448,
       37.15412092, 45.99153304, 43.643852  , 37.79099059, 43.88270402,
       44.18096852, 39.70646358, 44.79897881, 43.67397857, 37.16514778,
       36.2532506 ]), 'score_time': array([0.44883418, 0.44147515, 0.4403379 , 0.4492712 , 0.43191743,
       0.44212985, 0.40297794, 0.43693781, 0.45706367, 0.41998935,
       0.40707159, 0.45319724, 0.39797163, 0.45030379, 0.44786   ,
       0.44674015]), 'test_pearson_r': array([0.98115929, 0.98871748, 0.96405288, 0.95982695, 0.97502779,
       0.97794637, 0.9653094 , 0.97852954, 0.83872159, 0.92538606,
       0.98371719, 0.97705255, 0.94455346, 0.98469912, 0.60982644,
       0.99379966]), 'test_pearson_p': array([-4.01848124e-12, -8.77704085e-14, -4.86147737e-10, -4.07107125e-09,
       -1.52027779e-10, -6.41865305e-11, -1.47908447e-09, -5.32897459e-11,
       -4.91255142e-05, -2.82953441e-07, -7.79504593e-12, -8.45660185e-11,
       -3.72849247e-08, -5.05655494e-12, -1.21335372e-02, -9.29325758e-15]), 'test_spearman_r': array([0.98712465, 0.95524236, 0.95098039, 0.93529412, 0.95588235,
       0.96764706, 0.98454773, 0.9757177 , 0.79411765, 0.89330414,
       0.96764706, 0.96470588, 0.95511431, 0.89742308, 0.67352941,
       0.97349148]), 'test_spearman_p': array([-2.35235248e-13, -2.45265013e-09, -4.79175685e-09, -1.07201672e-07,
       -7.76027446e-09, -9.13289481e-10, -5.41517846e-12, -1.25183504e-10,
       -2.39190928e-04, -3.16996646e-06, -9.13289481e-10, -1.66620775e-09,
       -8.73885027e-09, -2.43371777e-06, -4.23273925e-03, -2.29960211e-10]), 'test_kendall_r': array([0.93727575, 0.86347451, 0.82352941, 0.83333333, 0.85      ,
       0.88333333, 0.92887842, 0.91214188, 0.68333333, 0.79498604,
       0.88333333, 0.86666667, 0.87866878, 0.77977303, 0.68333333,
       0.90759507]), 'test_kendall_p': array([-1.64175866e-07, -1.40967662e-06, -1.25716600e-07, -2.44193725e-07,
       -1.02027025e-07, -1.43717927e-08, -5.65704076e-07, -8.99518934e-07,
       -8.26619198e-05, -1.85653874e-05, -1.43717927e-08, -3.98309214e-08,
       -2.22140114e-06, -3.15745343e-05, -8.26619198e-05, -1.10296350e-06]), 'test_rmse': array([-0.13767423, -0.10206839, -0.20071945, -0.16318576, -0.15093855,
       -0.13998198, -0.15701396, -0.10706299, -0.29855267, -0.22791206,
       -0.12807086, -0.12476189, -0.23928421, -0.11608282, -0.53947695,
       -0.08620801]), 'test_mae': array([-0.08541765, -0.08331977, -0.13694643, -0.10055595, -0.10179044,
       -0.10119141, -0.12232636, -0.0699167 , -0.18061373, -0.136013  ,
       -0.08876187, -0.08915319, -0.10957941, -0.07011674, -0.20805633,
       -0.06771233]), 'test_r2': array([0.95580946, 0.97680599, 0.90016634, 0.91773583, 0.95019389,
       0.95109013, 0.91544641, 0.95246252, 0.64202082, 0.83647215,
       0.95716649, 0.95193508, 0.88194976, 0.96880258, 0.25637224,
       0.98279256]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1887, 'regressor__learning_rate': 0.09830254385055572, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([28.19638157, 31.10450721, 30.17543364, 32.76159406, 23.8129003 ,
       34.4885757 , 32.08985996, 38.40695906, 31.47100663, 27.30249929,
       33.46295333, 29.43891287, 32.15326667, 32.98375034, 28.07475138,
       28.00782871]), 'score_time': array([0.36300707, 0.35960984, 0.3652308 , 0.3198514 , 0.35764742,
       0.32148099, 0.3533833 , 0.31036949, 0.36188912, 0.43453836,
       0.32830691, 0.35443211, 0.35571361, 0.33396029, 0.35790229,
       0.36598873]), 'test_pearson_r': array([0.99132326, 0.97291437, 0.97366173, 0.99608249, 0.71744246,
       0.88513412, 0.98538022, 0.95217765, 0.97964273, 0.54106402,
       0.93938157, 0.98310635, 0.97122816, 0.98795569, 0.96105443,
       0.9694019 ]), 'test_pearson_p': array([-1.23376946e-14, -5.97047579e-11, -4.85079076e-11, -3.75786145e-16,
       -1.75535696e-03, -5.19532632e-06, -3.68304630e-12, -1.35115276e-08,
       -3.68188563e-11, -3.04414691e-02, -6.86448761e-08, -1.00711064e-11,
       -4.05619267e-10, -9.55094407e-13, -3.28695200e-09, -6.21011268e-10]), 'test_spearman_r': array([0.96503067, 0.9754902 , 0.95769485, 0.98965678, 0.73343152,
       0.86176471, 0.97352941, 0.8903608 , 0.95947176, 0.65489348,
       0.87564409, 0.95588235, 0.97866104, 0.97941176, 0.88823529,
       0.95882353]), 'test_spearman_p': array([-3.96439919e-10, -2.84287327e-11, -1.61879123e-09, -3.30454141e-13,
       -1.22385101e-03, -1.78051844e-05, -2.27689766e-10, -3.80430564e-06,
       -4.32571114e-09, -5.90068619e-03, -8.82222352e-06, -7.76027446e-09,
       -5.10643005e-11, -3.98200979e-11, -4.32625087e-06, -4.82554077e-09]), 'test_kendall_r': array([0.88888889, 0.89705882, 0.84871427, 0.9575798 , 0.60504202,
       0.75      , 0.9       , 0.74477639, 0.86926796, 0.62762056,
       0.76151294, 0.86666667, 0.89540533, 0.9       , 0.78333333,
       0.86666667]), 'test_kendall_p': array([-7.36461249e-07, -1.23139016e-09, -2.12480839e-06, -3.62993104e-07,
       -1.16143904e-03, -8.91848950e-06, -4.72556483e-09, -6.04438410e-05,
       -3.29555117e-06, -7.24551643e-04, -4.10999309e-05, -3.98309214e-08,
       -1.41912826e-06, -4.72556483e-09, -2.41022656e-06, -3.98309214e-08]), 'test_rmse': array([-0.09653968, -0.11003076, -0.15542245, -0.05663911, -0.42621213,
       -0.3026991 , -0.18205515, -0.18606389, -0.11316337, -0.53708864,
       -0.17929698, -0.12708555, -0.12636421, -0.11495498, -0.16031546,
       -0.18235995]), 'test_mae': array([-0.06863671, -0.0703591 , -0.10575029, -0.04323829, -0.22313869,
       -0.17040942, -0.11680624, -0.14184727, -0.08917397, -0.23223872,
       -0.11256092, -0.08402847, -0.09633411, -0.07446839, -0.11929239,
       -0.11795204]), 'test_r2': array([0.97770895, 0.94591911, 0.93305292, 0.98908831, 0.24569595,
       0.76862782, 0.94676258, 0.90084879, 0.95566215, 0.04858822,
       0.8821479 , 0.96335867, 0.94029522, 0.97186552, 0.91689176,
       0.9389712 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1494, 'regressor__learning_rate': 0.04854413804710995, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([25.16150403, 25.98087597, 25.97362018, 26.29486537, 23.32257795,
       26.00485492, 27.85695076, 26.65647006, 26.5605824 , 27.03349066,
       24.78486943, 22.845824  , 25.86334324, 27.98198104, 26.44420004,
       25.46148849]), 'score_time': array([0.35500431, 0.34159684, 0.34174418, 0.31262255, 0.34499907,
       0.33355308, 0.3184588 , 0.32536554, 0.31697965, 0.30801773,
       0.33519864, 0.34859133, 0.3367157 , 0.3120904 , 0.34050369,
       0.33737683]), 'test_pearson_r': array([0.98143826, 0.96787353, 0.98922342, 0.97037027, 0.96913024,
       0.978182  , 0.96687893, 0.99043783, 0.64316535, 0.9725766 ,
       0.98866349, 0.98578942, 0.93684809, 0.97149587, 0.6348378 ,
       0.99232658]), 'test_pearson_p': array([-3.59601357e-12, -2.11633806e-10, -6.23079964e-14, -4.97106474e-10,
       -6.60173000e-10, -5.95743391e-11, -1.07412564e-09, -1.91122199e-13,
       -7.19429495e-03, -2.90903537e-10, -6.26236314e-13, -3.02254685e-12,
       -9.08068993e-08, -3.80197214e-10, -8.24246298e-03, -4.11621397e-14]), 'test_spearman_r': array([0.92647059, 0.76943509, 0.96809816, 0.91390753, 0.96541601,
       0.95882353, 0.97352941, 0.97647059, 0.48235294, 0.93519882,
       0.95217097, 0.97647059, 0.94100704, 0.93156758, 0.70882353,
       0.96176471]), 'test_spearman_p': array([-9.32988232e-08, -3.04753037e-04, -2.00915720e-10, -7.46809230e-07,
       -1.44797070e-09, -4.82554077e-09, -2.27689766e-10, -1.00615044e-10,
       -5.84589768e-02, -1.08283925e-07, -1.35244908e-08, -1.00615044e-10,
       -5.70000178e-08, -1.57059247e-07, -2.11168124e-03, -2.89508013e-09]), 'test_kendall_r': array([0.80882353, 0.61669826, 0.88148148, 0.81172259, 0.87866878,
       0.85      , 0.88333333, 0.9       , 0.45      , 0.84033613,
       0.89540533, 0.9       , 0.81863099, 0.82845913, 0.68333333,
       0.86666667]), 'test_kendall_p': array([-2.67494633e-07, -6.66723508e-04, -9.09691968e-07, -1.23329686e-05,
       -2.22140114e-06, -1.02027025e-07, -1.43717927e-08, -4.72556483e-09,
       -1.51553436e-02, -6.44110257e-06, -1.41912826e-06, -4.72556483e-09,
       -1.16785197e-05, -8.12917002e-06, -8.26619198e-05, -3.98309214e-08]), 'test_rmse': array([-0.11753614, -0.14986123, -0.09296071, -0.14535006, -0.20066751,
       -0.11264758, -0.1832524 , -0.10838158, -0.42755434, -0.17808749,
       -0.10806656, -0.10267292, -0.18482901, -0.14479556, -0.49152233,
       -0.07415355]), 'test_mae': array([-0.07896193, -0.09946784, -0.07639845, -0.10048629, -0.12436639,
       -0.08655901, -0.12860611, -0.08212711, -0.22987572, -0.12618027,
       -0.0615108 , -0.0674511 , -0.10591973, -0.10267159, -0.23000683,
       -0.05459765]), 'test_r2': array([0.96261404, 0.93639252, 0.97622255, 0.93724819, 0.91775616,
       0.95485651, 0.93394741, 0.96603955, 0.06348971, 0.94235944,
       0.97719817, 0.97010613, 0.85582885, 0.94365592, 0.29599173,
       0.98467096]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1429, 'regressor__learning_rate': 0.0712577184847663, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([12.99224591, 13.57554483, 13.41075134, 12.27359915, 13.25541997,
       15.06936526, 11.37168503, 11.09842944, 13.18368363, 13.73601484,
       12.66755271, 12.22651935, 13.47931027, 13.22722006, 12.3123529 ,
       13.72263646]), 'score_time': array([0.18613243, 0.1867888 , 0.18054008, 0.18657732, 0.1950171 ,
       0.16913462, 0.18840933, 0.1928618 , 0.18517303, 0.1711719 ,
       0.18359351, 0.18979335, 0.17022491, 0.19013524, 0.18893623,
       0.18350029]), 'test_pearson_r': array([0.98128207, 0.92488947, 0.99465337, 0.99370679, 0.99474745,
       0.89216225, 0.98754208, 0.99097179, 0.98957677, 0.94260456,
       0.95261852, 0.98618148, 0.98589534, 0.68559952, 0.98303522,
       0.9673345 ]), 'test_pearson_p': array([-3.82754178e-12, -1.08929127e-07, -3.29851541e-16, -1.03100599e-14,
       -2.91700009e-15, -3.40452997e-06, -1.20841957e-12, -1.28008127e-13,
       -3.48695512e-13, -4.72368014e-08, -1.26782780e-08, -2.48753867e-12,
       -2.86913208e-12, -3.37167399e-03, -1.03697366e-11, -9.76060325e-10]), 'test_spearman_r': array([0.95833333, 0.93137255, 0.97177987, 0.99632109, 0.99337775,
       0.84705882, 0.94628429, 0.97941176, 0.96470588, 0.98160439,
       0.94411765, 0.99115475, 0.98674628, 0.72553368, 0.96755583,
       0.96176471]), 'test_spearman_p': array([-1.44699119e-09, -5.64206510e-08, -8.09524658e-11, -2.42198312e-16,
       -1.47168758e-14, -3.46804648e-05, -3.00012032e-08, -3.98200979e-11,
       -1.66620775e-09, -1.82090718e-11, -3.93392920e-08, -1.10969762e-13,
       -1.86016303e-12, -1.46692158e-03, -9.31243359e-10, -2.89508013e-09]), 'test_kendall_r': array([0.88235294, 0.80882353, 0.91854372, 0.97908807, 0.96235152,
       0.75      , 0.82845913, 0.93333333, 0.86666667, 0.92887842,
       0.85      , 0.9536629 , 0.9412097 , 0.74477639, 0.86926796,
       0.88333333]), 'test_kendall_p': array([-3.57438554e-09, -2.67494633e-07, -3.11133291e-07, -1.34225153e-07,
       -2.18526649e-07, -8.91848950e-06, -8.12917002e-06, -3.55879882e-10,
       -3.98309214e-08, -5.65704076e-07, -1.02027025e-07, -3.28081900e-07,
       -4.35438108e-07, -6.04438410e-05, -3.24532792e-06, -1.43717927e-08]), 'test_rmse': array([-0.10105084, -0.18390874, -0.08878341, -0.09599722, -0.06603525,
       -0.27106896, -0.11388942, -0.0875183 , -0.08315264, -0.21901566,
       -0.16329439, -0.12439246, -0.11750834, -0.53503138, -0.11929195,
       -0.21654939]), 'test_mae': array([-0.07142076, -0.13887352, -0.05907597, -0.07813728, -0.05023913,
       -0.13415216, -0.08319192, -0.06531586, -0.05593359, -0.15493564,
       -0.10916421, -0.08244386, -0.06208888, -0.24791311, -0.09438879,
       -0.16707529]), 'test_r2': array([0.95709543, 0.82374938, 0.98469142, 0.97551061, 0.98851331,
       0.74370293, 0.97484621, 0.98059791, 0.97236612, 0.8303577 ,
       0.89857543, 0.9700295 , 0.96772211, 0.44377638, 0.96073768,
       0.91248779]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 765, 'regressor__learning_rate': 0.07682220299314736, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([17.8087914 , 22.9006598 , 21.62134051, 22.24170232, 19.76004577,
       20.03575158, 17.15635371, 20.06094122, 22.60208368, 20.63679457,
       20.27098513, 18.0718751 , 27.32486653, 24.34140539, 21.19794536,
       17.31902647]), 'score_time': array([0.25392103, 0.25035405, 0.24855208, 0.22523904, 0.2388196 ,
       0.24000621, 0.25109506, 0.23848772, 0.22576094, 0.25943613,
       0.24108863, 0.24698997, 0.22031689, 0.22153616, 0.24359035,
       0.29969239]), 'test_pearson_r': array([0.97909427, 0.77480771, 0.97337269, 0.95407947, 0.95261897,
       0.97236332, 0.98811132, 0.96786859, 0.86460558, 0.94883969,
       0.98622338, 0.97946521, 0.89760415, 0.98062032, 0.95885121,
       0.99532532]), 'test_pearson_p': array([-8.71423739e-12, -2.59725740e-04, -5.26015284e-11, -1.02222348e-08,
       -1.26774631e-08, -3.06941502e-10, -8.72341354e-13, -8.70917079e-10,
       -1.55183360e-05, -2.14752103e-08, -2.43548795e-12, -3.91077114e-11,
       -2.40499740e-06, -2.61567769e-11, -4.80323641e-09, -1.29200336e-15]), 'test_spearman_r': array([0.96014733, 0.82555532, 0.93742402, 0.95805765, 0.94628429,
       0.94186928, 0.97647059, 0.95882353, 0.75846916, 0.92352941,
       0.99410462, 0.94698188, 0.90588235, 0.95294118, 0.95      ,
       0.97058824]), 'test_spearman_p': array([-1.04178502e-09, -4.48252862e-05, -2.87411513e-08, -5.47877174e-09,
       -3.00012032e-08, -5.15371766e-08, -1.00615044e-10, -4.82554077e-09,
       -6.60107510e-04, -3.34390001e-07, -6.53417850e-15, -2.74291427e-08,
       -1.36351336e-06, -1.20965793e-08, -1.83461727e-08, -4.72340113e-10]), 'test_kendall_r': array([0.86347451, 0.7807177 , 0.81483717, 0.84519568, 0.87866878,
       0.84519568, 0.9       , 0.86666667, 0.6218707 , 0.8       ,
       0.97054189, 0.87398044, 0.78333333, 0.83333333, 0.86666667,
       0.9       ]), 'test_kendall_p': array([-1.40967662e-06, -1.43299199e-05, -5.65491557e-06, -5.31661458e-06,
       -2.22140114e-06, -5.31661458e-06, -4.72556483e-09, -3.98309214e-08,
       -8.42501532e-04, -1.17934846e-06, -2.02597451e-07, -2.70729796e-06,
       -2.41022656e-06, -2.44193725e-07, -3.98309214e-08, -4.72556483e-09]), 'test_rmse': array([-0.13629284, -0.49053316, -0.15387869, -0.18957307, -0.17172888,
       -0.12271811, -0.09729568, -0.13118086, -0.29896292, -0.18581389,
       -0.11321382, -0.13332444, -0.29280706, -0.12819496, -0.16742674,
       -0.07391486]), 'test_mae': array([-0.08241961, -0.17841488, -0.11471435, -0.12884369, -0.08368261,
       -0.08475973, -0.06451222, -0.09742009, -0.18320425, -0.12283579,
       -0.07244342, -0.10255844, -0.19128222, -0.09468249, -0.11083356,
       -0.05518028]), 'test_r2': array([0.9511952 , 0.55781875, 0.94297956, 0.90081326, 0.90665168,
       0.94299641, 0.97579464, 0.93669477, 0.74258877, 0.88099865,
       0.96972349, 0.95510851, 0.79498232, 0.9426708 , 0.91764305,
       0.98856592]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1010, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 522)}}
Trimer_scaler
Filename: (ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/EG-Ionic-Based Cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/EG-Ionic-Based Cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/EG-Ionic-Based Cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c035n03>
Subject: Job 295237: <NGB_log Rg (nm)_ECFP_Trimer_EG-Ionic-Based Cluster_20250311> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_ECFP_Trimer_EG-Ionic-Based Cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:12:46 2025
Job was executed on host(s) <8*c035n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Thu Mar 13 10:28:10 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Thu Mar 13 10:28:10 2025
Terminated at Thu Mar 13 23:37:09 2025
Results reported at Thu Mar 13 23:37:09 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_ECFP_Trimer_EG-Ionic-Based Cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_EG-Ionic-Based Cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_EG-Ionic-Based Cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "ECFP"                                       --regressor_type "NGB"                                       --radius "3"                                       --vector "count"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "EG-Ionic-Based Cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   208436.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.79 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   47341 sec.
    Turnaround time :                            188663 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_EG-Ionic-Based Cluster_20250311.err> for stderr output of this job.

