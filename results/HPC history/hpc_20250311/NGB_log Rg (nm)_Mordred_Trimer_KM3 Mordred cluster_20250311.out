


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03237198429940487), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06788784528681167), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05202936012775939), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 576), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004866083656078861), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1446), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 9.590941089616503e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0621569244928673), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1298), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06690878074110478), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 236), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.0882871925854953e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03156966038149249), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06324891054810594), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 487), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09802839489310182), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.038974921879261e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06672421358776096), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06705170092047213), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023850382824279384), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09896091003071157), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1934), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3940963366364436e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1207), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03698489381369788), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 604), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 490), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 448), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017215014038960988), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1879), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007470394357331939), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03870513535793773), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 195), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06597933535314547), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07264109164006564), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 318), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009422015710167528), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09984160850557258), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1016), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6680932085388465e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1315), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03846825718717571), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 519), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04794765284357155), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 681), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012135470109781173), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05839859887854655), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.046267302572665155), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 205), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06320909862056831), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 333), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0814282571946158e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023777822409828325), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1014), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1070), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1326), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 646), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.813756417489015e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03203000181269244), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027125777901728407), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025971147282494663), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 388), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06696665658897816), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 328), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005945456154149235), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09957644471024361), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1745), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.741373119085552e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047892211886987106), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06615845362149422), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 253), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4368431157669114e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04360396284165189), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 102), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038245742060045045), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0992849331487508), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 275), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0595770537512154e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016157050452579525), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1962), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.694718500573707e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 503), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4492640727539615e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059307633769785935), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 461), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006369854654195981), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06710350955794765), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1311), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00041153848328513384), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03693499023328491), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6980259507827906e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025110050741759458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2881294633636083e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.018596608299181056), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 179), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00014862745018686505), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006847763747456636), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1482), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03286389630510646), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08829912602233878), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 209), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009689950692351167), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05289561759215815), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1090), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0345764858269042e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09998712522217162), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 245), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 9.814110356887233e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030230719135013535), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1986), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.8760987230369905e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0600511254861591), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1411), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09802839489310182), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.038974921879261e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.053446116841040406), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01738423626319311), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1985), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1727263662434467e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09954605241346837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1468), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00048442009922385705), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0407317605920897), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1662), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09901740543431413), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 402), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006003854852004248), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09824891037572928), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1512), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007222591914768074), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09961345446146942), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1445), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5182217034478748e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0736439347566004e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05197155250939099), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06057539605408772), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 968), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 599), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09701762666231041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003180614538446503), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1240), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05232945838022956), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 288), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09925529857310478), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1341), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000889955944871127), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09789793478849139), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 338), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.8059922732833264e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015550790441708956), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1985), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4144081237995499e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 678), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09805399184227677), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 271), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006221783918127036), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048400449689015135), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 730), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05811448969757228), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1043), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3592426227629034e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05939020987154606), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1448), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1380), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0996044968778107), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1192), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.7795032281921703e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03339093659720527), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 485), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023856180188117488), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 935), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1430), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 566), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06529933363683309), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 979), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0984517089521891), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 992), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2069274837114224e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06451280552636807), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 221), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0782080126695916e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 827), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059825630356352875), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 373), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03445513415612125), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 379), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016514366626174826), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07804434838532388), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09950781581359784), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1177), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.377441416997496e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057007993575322276), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 710), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057929676001226026), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09988418516049129), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 239), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6539503939240421e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0758190681240728), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1493), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.409183930128859e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05637136869456241), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 440), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03618748855998037), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 556), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1487), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04750100297244296), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 680), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02184002915033903), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024788560679862345), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025968078662527986), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1315), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0700127499181433), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 490), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06517698027713494), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 311), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007819308747723227), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09872214750903409), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1954), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.741516668942424e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.052220183182120176), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06731051507688472), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 860), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0966614643691989), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 678), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3219414454259747e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04419587909781461), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 873), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0994401163444142), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 333), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002719844164722201), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 148), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001709626313980425), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012632818843253556), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1976), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004858539754558233), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09820359045643907), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.754013281195407e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04592792337071767), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1067), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09820359045643907), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.754013281195407e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1322), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09319337748035546), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1986), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002773193651105463), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 125), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06776573778967063), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 302), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031964080936634644), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 746), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017935409173082804), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 397), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030265920255377297), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 394), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04449103863041631), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 255), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09925529857310478), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1341), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000889955944871127), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03760773917637089), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05670614706462086), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1813), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008544955982240737), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09323742942938647), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1893), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1696110819214866e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09740524916085616), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1881), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1627812615084256e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036873398202361234), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 703), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09804697500837978), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1972), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003818371276154087), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05588603215554048), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1124), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0681730253444973), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 691), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4905246453347918e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 470), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09205988756757671), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1250), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0071951532565228e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03230554365491964), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000866339891284522), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 244), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09995810551770351), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 774), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006150194876932741), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 563), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09813936800903357), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1014), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5929724106265351e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05435575589190798), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 488), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06629909464883918), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1360), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 389), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06051294539184799), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 319), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07413783475918857), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1193), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05676338205488912), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 281), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1551201416438955e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1347), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 930), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09816959856484282), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 407), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006714756678723694), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05506470414148385), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0993936020782067), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 970), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3348896929669792e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03248407931768997), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 854), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050759581824957975), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1960), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003428334844242966), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01991222995825114), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1318), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.612331531206991e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06074072972546597), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1987), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006421674311017409), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06210692271569811), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1335), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 264), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0057698486514932085), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05803047808597792), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1032), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3595579460845381e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013646812592765904), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1371520179986641e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0583675162648701), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1359), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06604091019774246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 387), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054564837612564525), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05975700750594326), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 64, 6: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5859243600225645, 'test_rmse': 0.718040739609659, 'test_r2': -0.3627784955750386, 'test_pearson_r': array([0.29383795]), 'test_pearson_p_value': array([0.00012184]), 'test_spearman_r': 0.37586421538860865, 'test_spearman_p_value': 6.028867455376442e-07, 'test_kendall_r': 0.2556066374221784, 'test_kendall_p_value': 1.313873488010107e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 576, 'regressor__learning_rate': 0.05202936012775939, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.567183468344624, 'test_rmse': 0.698448791036284, 'test_r2': -0.28942545817603427, 'test_pearson_r': array([0.28460977]), 'test_pearson_p_value': array([0.00020209]), 'test_spearman_r': 0.3501908966278498, 'test_spearman_p_value': 3.7440291216030584e-06, 'test_kendall_r': 0.23244239980935394, 'test_kendall_p_value': 1.0987760422312796e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06705170092047213, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5536625006555274, 'test_rmse': 0.6812307567345561, 'test_r2': -0.2266356876653013, 'test_pearson_r': array([0.26107464]), 'test_pearson_p_value': array([0.00068027]), 'test_spearman_r': 0.3279922005851212, 'test_spearman_p_value': 1.6039967305076448e-05, 'test_kendall_r': 0.20898689375136276, 'test_kendall_p_value': 7.829409259256775e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 448, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5779307516392309, 'test_rmse': 0.7130615475035552, 'test_r2': -0.3439438844027076, 'test_pearson_r': array([0.31056311]), 'test_pearson_p_value': array([4.65616031e-05]), 'test_spearman_r': 0.3556408175748812, 'test_spearman_p_value': 2.5745113076196958e-06, 'test_kendall_r': 0.23541175179631002, 'test_kendall_p_value': 8.195161211478117e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.012135470109781173, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5757857545434614, 'test_rmse': 0.7182824927446726, 'test_r2': -0.36369630264866326, 'test_pearson_r': array([0.31511672]), 'test_pearson_p_value': array([3.54698007e-05]), 'test_spearman_r': 0.395860772269509, 'test_spearman_p_value': 1.2986864574470596e-07, 'test_kendall_r': 0.27785855858184527, 'test_kendall_p_value': 1.4396555555738366e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03203000181269244, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.6124458842410008, 'test_rmse': 0.7435128306604084, 'test_r2': -0.46118106470617026, 'test_pearson_r': array([0.24488308]), 'test_pearson_p_value': array([0.00147369]), 'test_spearman_r': 0.30245957458311806, 'test_spearman_p_value': 7.474776318142532e-05, 'test_kendall_r': 0.18800327495477143, 'test_kendall_p_value': 0.0003690153012719997, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5463830174954776, 'test_rmse': 0.6937488360523462, 'test_r2': -0.27213041350153344, 'test_pearson_r': array([0.32427294]), 'test_pearson_p_value': array([2.02477133e-05]), 'test_spearman_r': 0.40155778755942917, 'test_spearman_p_value': 8.228938935051852e-08, 'test_kendall_r': 0.2696754650757767, 'test_kendall_p_value': 3.420703074496761e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 179, 'regressor__learning_rate': 0.018596608299181056, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 50, 6: {'fit_time': array([47.85190535, 45.77102566]), 'score_time': array([1.19357681, 1.21349525]), 'test_pearson_r': array([0.89885702, 0.88658301]), 'test_pearson_p': array([-1.07745344e-47, -2.38799889e-44]), 'test_spearman_r': array([0.89737185, 0.87966749]), 'test_spearman_p': array([-2.60929296e-47, -8.17239627e-43]), 'test_kendall_r': array([0.77063868, 0.764511  ]), 'test_kendall_p': array([-1.70974453e-38, -1.46982366e-37]), 'test_rmse': array([-0.29386337, -0.28418668]), 'test_mae': array([-0.16311648, -0.14306817]), 'test_r2': array([0.79983411, 0.77467247]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06324891054810594, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([26.46511889, 25.58129025]), 'score_time': array([0.72851682, 0.72347045]), 'test_pearson_r': array([0.89573026, 0.79319305]), 'test_pearson_p': array([-6.82841591e-47, -3.90431892e-29]), 'test_spearman_r': array([0.88297668, 0.80836165]), 'test_spearman_p': array([-7.24619387e-44, -5.18871602e-31]), 'test_kendall_r': array([0.7660295 , 0.68456731]), 'test_kendall_p': array([-5.11461725e-38, -1.77232286e-30]), 'test_rmse': array([-0.3038589 , -0.38265367]), 'test_mae': array([-0.1481883 , -0.20177598]), 'test_r2': array([0.78662609, 0.58487132]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1207, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([26.21608543, 28.93155956]), 'score_time': array([0.74426913, 0.74968481]), 'test_pearson_r': array([0.77716219, 0.88248185]), 'test_pearson_p': array([-1.61670941e-27, -1.99340660e-43]), 'test_spearman_r': array([0.84944786, 0.89056676]), 'test_spearman_p': array([-2.39733193e-37, -2.80681370e-45]), 'test_kendall_r': array([0.73855939, 0.7776124 ]), 'test_kendall_p': array([-1.57088916e-35, -8.64900154e-39]), 'test_rmse': array([-0.40701532, -0.29766073]), 'test_mae': array([-0.18538002, -0.15590671]), 'test_r2': array([0.58150645, 0.77284528]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1315, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([24.4942584 , 24.84488463]), 'score_time': array([0.64579248, 0.61535025]), 'test_pearson_r': array([0.90932866, 0.86999239]), 'test_pearson_p': array([-1.38839969e-50, -8.08052061e-41]), 'test_spearman_r': array([0.90635139, 0.87793908]), 'test_spearman_p': array([-9.96649857e-50, -1.91036006e-42]), 'test_kendall_r': array([0.78063396, 0.75452648]), 'test_kendall_p': array([-2.30491894e-39, -1.13644905e-36]), 'test_rmse': array([-0.26643746, -0.32104461]), 'test_mae': array([-0.14600814, -0.15736907]), 'test_r2': array([0.82028236, 0.73893441]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1070, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([37.74343848, 40.70688152]), 'score_time': array([1.05250907, 0.99499011]), 'test_pearson_r': array([0.91617933, 0.85755654]), 'test_pearson_p': array([-1.13567747e-52, -1.77352503e-38]), 'test_spearman_r': array([0.88835368, 0.86469321]), 'test_spearman_p': array([-4.25980947e-45, -8.58135692e-40]), 'test_kendall_r': array([0.75134674, 0.75545446]), 'test_kendall_p': array([-1.19677331e-36, -9.93083647e-37]), 'test_rmse': array([-0.25355462, -0.32792468]), 'test_mae': array([-0.14823213, -0.15864415]), 'test_r2': array([0.83722646, 0.72714179]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1745, 'regressor__learning_rate': 0.09957644471024361, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([27.07751608, 26.9271419 ]), 'score_time': array([0.75757146, 0.78806806]), 'test_pearson_r': array([0.92481651, 0.89818845]), 'test_pearson_p': array([-1.42437022e-55, -3.67006512e-47]), 'test_spearman_r': array([0.91355199, 0.90523851]), 'test_spearman_p': array([-7.51953087e-52, -4.83715960e-49]), 'test_kendall_r': array([0.77547435, 0.78310811]), 'test_kendall_p': array([-5.66311738e-39, -2.52499553e-39]), 'test_rmse': array([-0.24170948, -0.28588588]), 'test_mae': array([-0.14206711, -0.1476281 ]), 'test_r2': array([0.84677574, 0.80034027]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1311, 'regressor__learning_rate': 0.06710350955794765, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([4.41734719, 4.43333817]), 'score_time': array([0.16392398, 0.1614089 ]), 'test_pearson_r': array([0.87819823, 0.92278212]), 'test_pearson_p': array([-8.02029747e-43, -1.91930327e-54]), 'test_spearman_r': array([0.87357449, 0.91808116]), 'test_spearman_p': array([-7.47343457e-42, -7.04045809e-53]), 'test_kendall_r': array([0.7479675 , 0.78615443]), 'test_kendall_p': array([-3.07285474e-36, -1.17348853e-39]), 'test_rmse': array([-0.31054668, -0.2458909 ]), 'test_mae': array([-0.15102829, -0.1438482 ]), 'test_r2': array([0.74878093, 0.84509166]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 245, 'regressor__learning_rate': 0.09998712522217162, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 7, 6: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.3072284810590452, 'test_rmse': 0.4673118015843162, 'test_r2': -0.549535501870986, 'test_pearson_r': array([0.24730343]), 'test_pearson_p_value': array([0.30736992]), 'test_spearman_r': 0.3177436059780934, 'test_spearman_p_value': 0.18495516463626507, 'test_kendall_r': 0.27715369768804643, 'test_kendall_p_value': 0.1048323872354933, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.053446116841040406, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.28160398411271464, 'test_rmse': 0.379907795427632, 'test_r2': -0.024104897867809116, 'test_pearson_r': array([0.51660678]), 'test_pearson_p_value': array([0.02353248]), 'test_spearman_r': 0.5488128771702383, 'test_spearman_p_value': 0.014958218812256063, 'test_kendall_r': 0.4523889667122646, 'test_kendall_p_value': 0.00761581289191135, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 968, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.35954055481320707, 'test_rmse': 0.45144647693848994, 'test_r2': -0.446107469719204, 'test_pearson_r': array([0.13289986]), 'test_pearson_p_value': array([0.58755333]), 'test_spearman_r': 0.10591453532603114, 'test_spearman_p_value': 0.6660715672441226, 'test_kendall_r': 0.09640128615236399, 'test_kendall_p_value': 0.5726678775679765, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1341, 'regressor__learning_rate': 0.09925529857310478, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.28117509181997324, 'test_rmse': 0.42734699815184835, 'test_r2': -0.2958339333515323, 'test_pearson_r': array([0.46417177]), 'test_pearson_p_value': array([0.04528385]), 'test_spearman_r': 0.40335785536663515, 'test_spearman_p_value': 0.08680990365099464, 'test_kendall_r': 0.33740450153327395, 'test_kendall_p_value': 0.04833132364866384, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 730, 'regressor__learning_rate': 0.048400449689015135, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.2993017235639479, 'test_rmse': 0.43060947203484307, 'test_r2': -0.31569489764317615, 'test_pearson_r': array([0.2401245]), 'test_pearson_p_value': array([0.32207231]), 'test_spearman_r': 0.2665515805705117, 'test_spearman_p_value': 0.26998277012812033, 'test_kendall_r': 0.24100321538090996, 'test_kendall_p_value': 0.15844614150199832, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 373, 'regressor__learning_rate': 0.059825630356352875, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.24318196667461817, 'test_rmse': 0.36671493396866034, 'test_r2': 0.04578722664518187, 'test_pearson_r': array([0.47390791]), 'test_pearson_p_value': array([0.04038637]), 'test_spearman_r': 0.41424818132561253, 'test_spearman_p_value': 0.07785103525006964, 'test_kendall_r': 0.35714918424652464, 'test_kendall_p_value': 0.03513282141572034, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.057929676001226026, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.27391952978423867, 'test_rmse': 0.40675643659661737, 'test_r2': -0.17396973562352702, 'test_pearson_r': array([0.33998816]), 'test_pearson_p_value': array([0.15438692]), 'test_spearman_r': 0.2990326574325016, 'test_spearman_p_value': 0.21362389803484483, 'test_kendall_r': 0.2976243202054373, 'test_kendall_p_value': 0.07914189693581544, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.024788560679862345, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 7, 6: {'fit_time': array([10.37598014, 10.9821229 , 10.45657206, 10.18267965,  9.97922277,
       11.05743194, 10.84591174, 11.13342738, 10.6219945 , 10.32084084,
       10.7992475 ,  9.79951429, 10.54310489,  9.3987658 ]), 'score_time': array([0.17472839, 0.17046475, 0.16806483, 0.17861104, 0.16810918,
       0.17486763, 0.17029953, 0.17059374, 0.18341494, 0.18253207,
       0.17884755, 0.17206287, 0.17931032, 0.16851258]), 'test_pearson_r': array([0.97039888, 0.99289865, 0.99132174, 0.97696703, 0.94180006,
       0.98759796, 0.74073471, 0.97496655, 0.9693648 , 0.97515857,
       0.9808489 , 0.97635903, 0.91446355, 0.95446893]), 'test_pearson_p': array([-6.33586613e-12, -3.67387724e-17, -2.00954443e-16, -7.67958181e-13,
       -1.79921671e-09, -4.12724129e-15, -2.86069058e-04, -7.16976382e-12,
       -3.54363772e-11, -6.74550204e-12, -8.56859571e-13, -4.55578410e-12,
       -1.09875930e-07, -8.04822885e-10]), 'test_spearman_r': array([0.89473684, 0.97805092, 0.98070175, 0.96140351, 0.96621334,
       0.97674428, 0.77894737, 0.95557902, 0.97004184, 0.93188854,
       0.97263823, 0.92307705, 0.88946328, 0.93959744]), 'test_spearman_p': array([-2.35296190e-07, -5.11677137e-13, -1.72884140e-13, -5.86202817e-11,
       -1.92238776e-11, -8.32796316e-13, -8.50353921e-05, -6.62934630e-10,
       -2.96982597e-11, -1.87828793e-08, -1.44981731e-11, -4.83257537e-08,
       -7.88053542e-07, -7.36446168e-09]), 'test_kendall_r': array([0.80116959, 0.9       , 0.91812865, 0.89473684, 0.86803892,
       0.91495995, 0.77777778, 0.84870258, 0.87501894, 0.83006536,
       0.89180807, 0.81311912, 0.7697535 , 0.81311912]), 'test_kendall_p': array([-4.67377304e-08, -8.35279080e-08, -7.20796807e-12, -6.63913300e-11,
       -2.20656528e-07, -4.73213851e-08, -1.64978258e-07, -9.91848331e-07,
       -4.53574602e-07, -2.71335027e-08, -2.53540670e-07, -2.59896801e-06,
       -9.07720685e-06, -2.59896801e-06]), 'test_rmse': array([-0.15454292, -0.09335914, -0.0944241 , -0.15261807, -0.18365808,
       -0.10276845, -0.47262184, -0.15122107, -0.16288976, -0.12826514,
       -0.12444228, -0.13597599, -0.2479727 , -0.14360943]), 'test_mae': array([-0.10462411, -0.06422419, -0.06528383, -0.09767243, -0.13885502,
       -0.065541  , -0.18952104, -0.0789255 , -0.10331974, -0.09439115,
       -0.09187114, -0.10193717, -0.12894433, -0.1060804 ]), 'test_r2': array([0.93084602, 0.98066607, 0.98129375, 0.9492458 , 0.88053048,
       0.97398824, 0.51876039, 0.94509252, 0.93424016, 0.95045131,
       0.95963008, 0.9441134 , 0.81896517, 0.90119751]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 402, 'regressor__learning_rate': 0.09901740543431413, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([16.73962212, 16.51510501, 16.49989486, 16.39847064, 17.11697602,
       17.06528831, 16.53061557, 16.5749042 , 16.65728116, 17.07368517,
       15.83376884, 16.69963264, 15.58384848, 15.55898929]), 'score_time': array([0.24531722, 0.24507403, 0.25934362, 0.2579093 , 0.26018715,
       0.24284649, 0.26045537, 0.2423048 , 0.23783207, 0.24093628,
       0.23938489, 0.24129844, 0.24433446, 0.26258063]), 'test_pearson_r': array([0.9740324 , 0.98850293, 0.99137816, 0.98847212, 0.95476454,
       0.69071723, 0.98803078, 0.95704021, 0.96987584, 0.92970729,
       0.99103304, 0.91526483, 0.99174251, 0.94218845]), 'test_pearson_p': array([-2.10724082e-12, -2.17413333e-15, -1.90151997e-16, -2.22392270e-15,
       -2.20860322e-10, -1.05983350e-03, -3.05605795e-15, -5.09651508e-10,
       -3.10243476e-11, -2.40021577e-08, -2.04343916e-15, -1.02170189e-07,
       -1.05912868e-15, -5.22881313e-09]), 'test_spearman_r': array([0.9429324 , 0.95919272, 0.98244074, 0.93859649, 0.95041694,
       0.76491228, 0.99473684, 0.9287195 , 0.9086217 , 0.91219057,
       0.99122367, 0.93188854, 0.98348813, 0.88177606]), 'test_spearman_p': array([-1.52842515e-09, -9.34084168e-11, -7.79310290e-14, -2.80606429e-09,
       -4.74698356e-10, -1.36233942e-04, -2.89737181e-18, -2.67521689e-08,
       -1.82914385e-07, -1.34535861e-07, -1.72171485e-15, -1.87828793e-08,
       -2.63828912e-13, -1.31598583e-06]), 'test_kendall_r': array([0.82941176, 0.84457841, 0.93529412, 0.8245614 , 0.84457841,
       0.64912281, 0.96491228, 0.7697535 , 0.76065983, 0.78291168,
       0.94426737, 0.84313725, 0.92156863, 0.76065983]), 'test_kendall_p': array([-7.85254763e-07, -4.63085373e-07, -2.55460982e-08, -1.17067315e-08,
       -4.63085373e-07, -3.57225177e-05, -2.15380643e-14, -9.07720685e-06,
       -1.09773191e-05, -6.36380428e-06, -4.80698932e-08, -1.22726897e-08,
       -2.92550870e-11, -1.09773191e-05]), 'test_rmse': array([-0.114362  , -0.11298917, -0.08421799, -0.09831667, -0.21325604,
       -0.51597432, -0.10776524, -0.15924802, -0.14790578, -0.23396546,
       -0.09751043, -0.21261393, -0.08522402, -0.2270344 ]), 'test_mae': array([-0.06994358, -0.08675285, -0.0742458 , -0.0675244 , -0.13066324,
       -0.24831676, -0.07197182, -0.11519808, -0.11700404, -0.13221429,
       -0.06495874, -0.14628565, -0.06608142, -0.12803178]), 'test_r2': array([0.94835864, 0.97063966, 0.98257501, 0.97178135, 0.9093134 ,
       0.40422602, 0.97449501, 0.89391423, 0.93927746, 0.85530602,
       0.97720849, 0.83556164, 0.98187802, 0.81691311]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 599, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([58.25534868, 57.31221294, 57.7916646 , 56.86554837, 58.25518131,
       57.34877086, 60.97175312, 57.14871097, 57.5170908 , 59.18894863,
       59.16479993, 58.72407269, 58.64239883, 58.29260635]), 'score_time': array([0.75380015, 0.75382543, 0.75704455, 0.80523968, 0.77723193,
       0.73894954, 0.80633879, 0.75872731, 0.75727034, 0.76693273,
       0.7680161 , 0.79670095, 0.75292993, 0.73728895]), 'test_pearson_r': array([0.95034603, 0.97250098, 0.97368658, 0.96809489, 0.94635728,
       0.9719423 , 0.97355685, 0.82577096, 0.98809676, 0.93543933,
       0.98982476, 0.96614267, 0.6708762 , 0.99178597]), 'test_pearson_p': array([-4.80383097e-10, -3.41179482e-12, -2.35526765e-12, -1.18877058e-11,
       -9.13863502e-10, -4.04022027e-12, -2.45473684e-12, -2.43277645e-05,
       -1.95226395e-14, -1.23787499e-08, -5.59654462e-15, -7.80716169e-11,
       -2.30635899e-03, -1.01548295e-15]), 'test_spearman_r': array([0.94690663, 0.95041694, 0.97894737, 0.96140351, 0.9319878 ,
       0.96445819, 0.97674428, 0.79360165, 0.97830631, 0.91950464,
       0.98915862, 0.91615349, 0.66357069, 0.98140548]), 'test_spearman_p': array([-8.38882187e-10, -4.74698356e-10, -3.60064188e-13, -5.86202817e-11,
       -6.53956231e-09, -2.93899065e-11, -8.32796316e-13, -8.46599736e-05,
       -2.30443206e-12, -6.86926274e-08, -9.27540331e-15, -9.41755501e-08,
       -2.67798397e-03, -6.77950044e-13]), 'test_kendall_r': array([0.83284816, 0.84457841, 0.90643275, 0.89473684, 0.80938764,
       0.89149943, 0.90322969, 0.66013072, 0.91449348, 0.79084967,
       0.94426737, 0.81074309, 0.62091503, 0.92765165]), 'test_kendall_p': array([-6.66104086e-07, -4.63085373e-07, -2.27996852e-11, -6.63913300e-11,
       -1.35872010e-06, -1.03161918e-07, -7.00361385e-08, -4.59206923e-05,
       -1.34526112e-07, -2.29491225e-07, -4.80698932e-08, -3.48443378e-06,
       -1.54908277e-04, -8.87180979e-08]), 'test_rmse': array([-0.20300155, -0.16199024, -0.17380247, -0.16826136, -0.1633564 ,
       -0.17033605, -0.11884487, -0.25327279, -0.10804031, -0.20528394,
       -0.10296467, -0.17804869, -0.52356755, -0.08786482]), 'test_mae': array([-0.11951248, -0.10680742, -0.11850523, -0.10129535, -0.1114877 ,
       -0.11820668, -0.07711324, -0.17399594, -0.07568636, -0.13950124,
       -0.06789475, -0.09411008, -0.20772682, -0.06927935]), 'test_r2': array([0.90095408, 0.93801978, 0.9425001 , 0.93490699, 0.87138539,
       0.93634521, 0.94775909, 0.66447743, 0.97345   , 0.86747505,
       0.9779014 , 0.92722547, 0.37382   , 0.98022794]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([15.63278031, 14.56230712, 15.18706489, 15.22275496, 16.41025162,
       13.02351403, 15.93857741, 16.19685674, 15.46017075, 15.20754766,
       16.78899264, 14.66910005, 15.07031941, 15.78490829]), 'score_time': array([0.22627878, 0.23536897, 0.22388053, 0.23614049, 0.23534393,
       0.22868991, 0.23492599, 0.23790526, 0.2367487 , 0.25043583,
       0.22445631, 0.23232913, 0.23566842, 0.2304976 ]), 'test_pearson_r': array([0.99287322, 0.98831137, 0.97970583, 0.73941619, 0.87417695,
       0.97369145, 0.98397116, 0.98095259, 0.59715741, 0.97674065,
       0.96831453, 0.96044812, 0.96486984, 0.96756206]), 'test_pearson_p': array([-3.78686332e-17, -2.50037107e-15, -2.64269521e-13, -2.97199131e-04,
       -9.97172262e-07, -2.35160801e-12, -3.60845682e-14, -8.20708235e-13,
       -8.87971277e-03, -4.00444265e-12, -4.62517215e-11, -2.65948143e-10,
       -1.04464426e-10, -5.56727341e-11]), 'test_spearman_r': array([0.99078139, 0.98070175, 0.97849944, 0.81986078, 0.88596491,
       0.95614035, 0.9837649 , 0.95971126, 0.66907598, 0.93601651,
       0.9251421 , 0.88028896, 0.93188854, 0.9628483 ]), 'test_spearman_p': array([-3.35186168e-16, -1.72884140e-13, -4.29972653e-13, -1.73386634e-05,
       -4.50511072e-07, -1.70664316e-10, -4.01991254e-14, -3.07551300e-10,
       -2.39372581e-03, -1.15418850e-08, -3.91301914e-08, -1.44733680e-06,
       -1.87828793e-08, -1.62399435e-10]), 'test_kendall_r': array([0.94705882, 0.90643275, 0.9266902 , 0.70116558, 0.78947368,
       0.84795322, 0.9266902 , 0.84870258, 0.60328193, 0.83006536,
       0.83934877, 0.79084967, 0.80392157, 0.88235294]), 'test_kendall_p': array([-1.70481486e-08, -2.27996852e-11, -3.18217344e-08, -4.08216850e-05,
       -8.90628326e-08, -2.53233265e-09, -3.18217344e-08, -9.91848331e-07,
       -4.88013116e-04, -2.71335027e-08, -1.22329014e-06, -2.29491225e-07,
       -1.16879681e-07, -8.28241250e-10]), 'test_rmse': array([-0.09341562, -0.08416525, -0.12607219, -0.39508113, -0.2816273 ,
       -0.17746955, -0.12295247, -0.10830307, -0.50651138, -0.1299139 ,
       -0.12082284, -0.20660249, -0.15157124, -0.18559208]), 'test_mae': array([-0.0711917 , -0.05897593, -0.08418565, -0.17523292, -0.16934962,
       -0.11044022, -0.09790629, -0.08037945, -0.22397992, -0.09908649,
       -0.06759726, -0.12081542, -0.115299  , -0.13340972]), 'test_r2': array([0.97906794, 0.97485202, 0.95626837, 0.40921794, 0.76215126,
       0.94152191, 0.96568953, 0.96185413, 0.26593258, 0.95067366,
       0.93566043, 0.91678599, 0.93063819, 0.93442519]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 566, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([48.60102296, 56.91151953, 50.30763769, 50.60062575, 52.67381763,
       49.99649096, 56.18234873, 50.73527694, 57.78206134, 56.45272589,
       52.79261732, 51.37016678, 53.44378114, 57.467448  ]), 'score_time': array([0.75245714, 0.74192476, 0.80198956, 0.76787257, 0.75846052,
       0.77191591, 0.75433636, 0.7802422 , 0.78339577, 0.81605768,
       0.76953173, 0.76439929, 0.72948861, 0.76025057]), 'test_pearson_r': array([0.96553642, 0.9612341 , 0.98158085, 0.97056835, 0.93374022,
       0.98603642, 0.98530832, 0.70396397, 0.95419815, 0.96575815,
       0.94520646, 0.96387606, 0.69538136, 0.99165962]), 'test_pearson_p': array([-2.27022726e-11, -6.08084978e-11, -1.16663693e-13, -6.03756291e-12,
       -5.27001686e-09, -1.12500484e-14, -1.72870796e-14, -1.11161295e-03,
       -8.43196572e-10, -8.53497430e-11, -3.43791176e-09, -1.30174244e-10,
       -1.35536194e-03, -1.14693507e-15]), 'test_spearman_r': array([0.89473684, 0.91740036, 0.94422495, 0.95655999, 0.93508772,
       0.96491228, 0.94561404, 0.58367769, 0.92458678, 0.9411162 ,
       0.9163228 , 0.96904025, 0.79566563, 0.97729618]), 'test_spearman_p': array([-2.35296190e-07, -3.24291961e-08, -1.26357377e-09, -1.57498426e-10,
       -4.44614837e-09, -2.63877371e-11, -1.02463740e-09, -1.09895557e-02,
       -4.14396940e-08, -6.03626232e-09, -9.27154202e-08, -3.85140601e-11,
       -7.86687184e-05, -3.30605345e-12]), 'test_kendall_r': array([0.76608187, 0.8023913 , 0.82006256, 0.85630867, 0.80116959,
       0.87134503, 0.84795322, 0.50657895, 0.79605263, 0.82238622,
       0.84870258, 0.88235294, 0.75163399, 0.90849673]), 'test_kendall_p': array([-2.97692997e-07, -1.85371850e-06, -1.10523131e-06, -3.20420144e-07,
       -4.67377304e-08, -4.58322529e-10, -2.53233265e-09, -3.49175624e-03,
       -4.43734615e-06, -2.12120439e-06, -9.91848331e-07, -8.28241250e-10,
       -1.44239308e-06, -9.76656516e-11]), 'test_rmse': array([-0.15643576, -0.17597729, -0.10251886, -0.15179485, -0.23560765,
       -0.11607846, -0.11644291, -0.37159266, -0.24219958, -0.18494227,
       -0.16004861, -0.15977822, -0.48214518, -0.10531361]), 'test_mae': array([-0.09932115, -0.12216755, -0.08071339, -0.10895661, -0.15070355,
       -0.08365532, -0.08777716, -0.20495387, -0.14482966, -0.13856286,
       -0.08903048, -0.1219209 , -0.20296424, -0.08267197]), 'test_r2': array([0.93105191, 0.91886738, 0.95684311, 0.92537655, 0.85704196,
       0.97209921, 0.9560454 , 0.33896902, 0.89390478, 0.92605972,
       0.89252369, 0.92897166, 0.3967903 , 0.97307168]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.016514366626174826, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([46.96788287, 57.4066236 , 57.53395247, 57.13491559, 51.60020161,
       52.12626576, 52.09963965, 52.87957907, 57.88324952, 53.49245524,
       56.88035655, 52.18296385, 48.92143202, 59.55302835]), 'score_time': array([0.75593209, 0.73350859, 0.76588058, 0.76888752, 0.82194448,
       0.75521731, 0.77522373, 0.77773952, 0.75777006, 0.80190253,
       0.76988125, 0.75934553, 0.75530481, 0.81507254]), 'test_pearson_r': array([0.89178222, 0.88026126, 0.98723425, 0.99010405, 0.94178987,
       0.98867601, 0.98471993, 0.96644169, 0.93312175, 0.98210625,
       0.97543191, 0.73306739, 0.98104321, 0.96565384]), 'test_pearson_p': array([-2.94645828e-07, -6.68561426e-07, -5.27022280e-15, -6.10979989e-16,
       -1.80183434e-09, -1.91224335e-15, -2.40888125e-14, -7.27916614e-11,
       -1.62927188e-08, -4.99670207e-13, -6.17940393e-12, -5.37990465e-04,
       -7.90213035e-13, -8.74234059e-11]), 'test_spearman_r': array([0.86666667, 0.85425845, 0.96751574, 0.98945671, 0.97719298,
       0.96842105, 0.98200975, 0.82705225, 0.9504644 , 0.93546734,
       0.98968008, 0.80681861, 0.96537584, 0.96078431]), 'test_spearman_p': array([-1.58937749e-06, -3.23984540e-06, -1.38245687e-11, -1.04468862e-15,
       -7.06769745e-13, -1.09055587e-11, -9.56293130e-14, -2.30313770e-05,
       -1.55976502e-09, -1.23369500e-08, -6.26289422e-15, -5.21417546e-05,
       -9.31654882e-11, -2.48656703e-10]), 'test_kendall_r': array([0.73099415, 0.65295247, 0.87648575, 0.94398977, 0.90643275,
       0.87134503, 0.9266902 , 0.65574123, 0.85620915, 0.83934877,
       0.94771242, 0.79606986, 0.87132984, 0.89542484]), 'test_kendall_p': array([-1.52091530e-06, -1.01006864e-04, -1.79656543e-07, -2.01982025e-08,
       -2.27996852e-11, -4.58322529e-10, -3.18217344e-08, -1.50350254e-04,
       -5.28843419e-09, -1.22329014e-06, -1.81026609e-12, -4.43688739e-06,
       -5.42460793e-07, -2.96242626e-10]), 'test_rmse': array([-0.22580548, -0.22658887, -0.1484444 , -0.08975013, -0.18617532,
       -0.10956307, -0.11492202, -0.1158886 , -0.22306875, -0.13562648,
       -0.14537969, -0.4900219 , -0.15114279, -0.22163373]), 'test_mae': array([-0.12358879, -0.16418702, -0.11349834, -0.0645197 , -0.09930893,
       -0.07405614, -0.07580773, -0.08186887, -0.12078705, -0.10520875,
       -0.10213121, -0.1950275 , -0.12185404, -0.1647305 ]), 'test_r2': array([0.77922046, 0.75792214, 0.96068786, 0.97591449, 0.87055979,
       0.97681734, 0.96926477, 0.91669671, 0.8481704 , 0.96149435,
       0.94475945, 0.49525562, 0.94136283, 0.90650329]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.02184002915033903, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([57.96117234, 56.81004715, 58.02818441, 50.67978168, 55.28732324,
       54.78188419, 50.43974304, 54.86190844, 59.58453226, 59.21462226,
       56.36212516, 55.32697701, 57.40557814, 54.84836054]), 'score_time': array([0.77064037, 0.76067686, 0.75802684, 0.74547315, 0.78443837,
       0.74911046, 0.7555263 , 0.77198362, 0.7302618 , 0.72543907,
       0.75577784, 0.79708147, 0.76800203, 0.77314019]), 'test_pearson_r': array([0.9777854 , 0.71763421, 0.98101221, 0.95337047, 0.91468736,
       0.98892184, 0.96634219, 0.95507265, 0.95397784, 0.9838051 ,
       0.97912564, 0.93934059, 0.97729081, 0.99510667]), 'test_pearson_p': array([-5.66231917e-13, -5.41635293e-04, -1.50779386e-13, -2.84508119e-10,
       -4.22805530e-08, -1.58811990e-15, -1.86177527e-11, -7.24695562e-10,
       -8.75583576e-10, -2.26157533e-13, -1.69792193e-12, -7.61250678e-09,
       -3.31226120e-12, -1.62764411e-17]), 'test_spearman_r': array([0.96621334, 0.7205635 , 0.98638645, 0.94515147, 0.92105263,
       0.98727522, 0.93988601, 0.91942198, 0.921012  , 0.98450466,
       0.98089843, 0.95665635, 0.95665635, 0.97316821]), 'test_spearman_p': array([-1.92238776e-11, -5.01222852e-04, -9.07717203e-15, -1.09937206e-09,
       -2.23613329e-08, -5.12890798e-15, -2.35329013e-09, -6.92406015e-08,
       -5.93386907e-08, -1.59200608e-13, -8.39423191e-13, -5.46578066e-10,
       -5.46578066e-10, -1.24188235e-11]), 'test_kendall_r': array([0.89149943, 0.63719309, 0.94398977, 0.85630867, 0.80116959,
       0.9266902 , 0.80938764, 0.80922804, 0.8000043 , 0.94080983,
       0.91803772, 0.86928105, 0.85620915, 0.90849673]), 'test_kendall_p': array([-1.03161918e-07, -1.52508316e-04, -2.04681459e-08, -3.20420144e-07,
       -4.67377304e-08, -3.18217344e-08, -1.35872010e-06, -3.07634090e-06,
       -3.75687779e-06, -5.81823612e-08, -1.11636054e-07, -2.15825858e-09,
       -5.28843419e-09, -9.76656516e-11]), 'test_rmse': array([-0.13613298, -0.50606677, -0.13492871, -0.16695257, -0.1935801 ,
       -0.10405079, -0.13362995, -0.19083913, -0.16132371, -0.12707252,
       -0.13890602, -0.23605284, -0.11566585, -0.07687659]), 'test_mae': array([-0.08628805, -0.19700948, -0.09601022, -0.09786465, -0.12335958,
       -0.05861727, -0.11089317, -0.12735709, -0.11564825, -0.09492383,
       -0.09959728, -0.14889196, -0.08768843, -0.05688442]), 'test_r2': array([0.95291233, 0.45197058, 0.95994415, 0.90570399, 0.83463794,
       0.97473578, 0.93140265, 0.9031638 , 0.90753577, 0.9574482 ,
       0.95578371, 0.87899532, 0.95201419, 0.98782876]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.052220183182120176, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 29, 6: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.6888322590226557, 'test_rmse': 0.8073760662652458, 'test_r2': -0.6320005067392742, 'test_pearson_r': array([-0.10671843]), 'test_pearson_p_value': array([0.36547305]), 'test_spearman_r': -0.08631607097384009, 'test_spearman_p_value': 0.4646300568757773, 'test_kendall_r': -0.048681002932347096, 'test_kendall_p_value': 0.5408759948506432, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 148, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7099741821175716, 'test_rmse': 0.8547253294930462, 'test_r2': -0.8290336505383504, 'test_pearson_r': array([-0.24420883]), 'test_pearson_p_value': array([0.03600595]), 'test_spearman_r': -0.33958393842672585, 'test_spearman_p_value': 0.003076624941981583, 'test_kendall_r': -0.19360917960116672, 'test_kendall_p_value': 0.015017703340999533, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 397, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7795353667145859, 'test_rmse': 0.9085399907040964, 'test_r2': -1.0666010389555645, 'test_pearson_r': array([-0.3466875]), 'test_pearson_p_value': array([0.00247821]), 'test_spearman_r': -0.43369202515097793, 'test_spearman_p_value': 0.00011334991813044891, 'test_kendall_r': -0.30869346561529126, 'test_kendall_p_value': 0.00010492897194407878, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1246, 'regressor__learning_rate': 0.07352481813242628, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7274747683973548, 'test_rmse': 0.8488183863756582, 'test_r2': -0.8038403760441502, 'test_pearson_r': array([-0.25084931]), 'test_pearson_p_value': array([0.03110346]), 'test_spearman_r': -0.38409974896578913, 'test_spearman_p_value': 0.000728851154318442, 'test_kendall_r': -0.22301080261780132, 'test_kendall_p_value': 0.005164134646246591, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 691, 'regressor__learning_rate': 0.0681730253444973, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.6973956375955129, 'test_rmse': 0.80536649038216, 'test_r2': -0.6238864506901967, 'test_pearson_r': array([-0.19753624]), 'test_pearson_p_value': array([0.0916017]), 'test_spearman_r': -0.3502984754127598, 'test_spearman_p_value': 0.0022159358897680097, 'test_kendall_r': -0.1847593984019811, 'test_kendall_p_value': 0.02033955583581192, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1123, 'regressor__learning_rate': 0.05913781436124809, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.6907563670695661, 'test_rmse': 0.8417834174184865, 'test_r2': -0.7740639849192807, 'test_pearson_r': array([-0.24296854]), 'test_pearson_p_value': array([0.03698961]), 'test_spearman_r': -0.30196392156024077, 'test_spearman_p_value': 0.008930317143766343, 'test_kendall_r': -0.15621538542463667, 'test_kendall_p_value': 0.04941642787079013, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1347, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.8058431895435557, 'test_rmse': 0.9292838471820137, 'test_r2': -1.1620479606650438, 'test_pearson_r': array([-0.34993075]), 'test_pearson_p_value': array([0.00224146]), 'test_spearman_r': -0.438534000576343, 'test_spearman_p_value': 9.302663298928341e-05, 'test_kendall_r': -0.2980702980807986, 'test_kendall_p_value': 0.0001782398699921716, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1032, 'regressor__learning_rate': 0.05803047808597792, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 25, 6: {'fit_time': array([51.43339801, 52.49351239, 50.93581033, 51.35968018]), 'score_time': array([0.96354508, 0.91685534, 0.9581666 , 0.92528749]), 'test_pearson_r': array([0.95342957, 0.88388783, 0.95813856, 0.95780926]), 'test_pearson_p': array([-1.68342875e-34, -1.82045653e-22, -6.29124993e-36, -2.81007968e-35]), 'test_spearman_r': array([0.91030113, 0.9105373 , 0.95344162, 0.9391615 ]), 'test_spearman_p': array([-8.08140857e-26, -7.46454117e-26, -1.67006263e-34, -1.80266958e-30]), 'test_kendall_r': array([0.80627546, 0.82041491, 0.82742266, 0.82446636]), 'test_kendall_p': array([-2.97920696e-21, -5.01085012e-22, -2.82123607e-22, -7.40673801e-22]), 'test_rmse': array([-0.20251037, -0.30650006, -0.18084492, -0.16503041]), 'test_mae': array([-0.10584414, -0.1336013 , -0.11150336, -0.1035909 ]), 'test_r2': array([0.90536878, 0.77877817, 0.9162625 , 0.91624917]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.09820359045643907, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([50.84691286, 52.72336626, 54.72683024, 50.18945098]), 'score_time': array([0.9358747 , 0.96142364, 0.93756509, 0.92997503]), 'test_pearson_r': array([0.87451993, 0.91153488, 0.9378472 , 0.92648604]), 'test_pearson_p': array([-1.81086611e-21, -5.32455768e-26, -1.18054101e-30, -5.26317798e-28]), 'test_spearman_r': array([0.84068852, 0.92883527, 0.93274753, 0.91574127]), 'test_spearman_p': array([-1.95363101e-18, -7.32299257e-29, -1.30953048e-29, -3.07204401e-26]), 'test_kendall_r': array([0.71011347, 0.832692  , 0.7979792 , 0.8001997 ]), 'test_kendall_p': array([-8.05493489e-17, -1.38162087e-22, -7.82256560e-21, -1.06680420e-20]), 'test_rmse': array([-0.34046347, -0.28110002, -0.21296021, -0.22028479]), 'test_mae': array([-0.17132249, -0.12445293, -0.12756068, -0.12644929]), 'test_r2': array([0.69962159, 0.82703344, 0.8777574 , 0.85461338]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([50.37012005, 49.99542785, 52.69225049, 52.38681006]), 'score_time': array([0.92605925, 0.93123698, 0.9203527 , 0.9766674 ]), 'test_pearson_r': array([0.97235282, 0.9576226 , 0.91324948, 0.90513723]), 'test_pearson_p': array([-1.64571555e-41, -9.18214183e-36, -2.95130459e-26, -1.03152204e-24]), 'test_spearman_r': array([0.96500776, 0.94745124, 0.89215269, 0.92012747]), 'test_spearman_p': array([-2.46380460e-38, -6.90473705e-33, -2.02312777e-23, -6.25858532e-27]), 'test_kendall_r': array([0.85108523, 0.83225052, 0.78583659, 0.83234787]), 'test_kendall_p': array([-1.52343044e-23, -1.25135726e-22, -2.57686729e-20, -4.04230735e-22]), 'test_rmse': array([-0.16090111, -0.17975205, -0.23623954, -0.28908558]), 'test_mae': array([-0.10889432, -0.12092803, -0.12865471, -0.11799905]), 'test_r2': array([0.94035421, 0.90890557, 0.82793348, 0.81699247]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([52.16235065, 47.57854939, 51.76704168, 51.51046681]), 'score_time': array([0.96509361, 0.92701054, 0.94021106, 0.9085505 ]), 'test_pearson_r': array([0.98014216, 0.91958786, 0.85470907, 0.93435846]), 'test_pearson_p': array([-5.49262500e-46, -2.98143461e-27, -1.34121004e-19, -1.76882422e-29]), 'test_spearman_r': array([0.97535395, 0.91247241, 0.88815546, 0.92927628]), 'test_spearman_p': array([-4.61207855e-43, -3.86196398e-26, -5.98192056e-23, -1.65397018e-28]), 'test_kendall_r': array([0.8929959 , 0.80115551, 0.78370182, 0.81599228]), 'test_kendall_p': array([-1.48648046e-25, -4.44900071e-21, -3.50828547e-20, -1.73468692e-21]), 'test_rmse': array([-0.11953777, -0.26417718, -0.31840673, -0.2361402 ]), 'test_mae': array([-0.07565524, -0.13678016, -0.14396188, -0.1326865 ]), 'test_r2': array([0.95955771, 0.84013708, 0.7126871 , 0.86843771]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([32.99208474, 34.74075317, 32.79964876, 33.95748591]), 'score_time': array([0.6387496 , 0.62656379, 0.65493321, 0.64862776]), 'test_pearson_r': array([0.96842763, 0.95855421, 0.8873209 , 0.86839066]), 'test_pearson_p': array([-1.01619196e-39, -4.62324948e-36, -7.46252461e-23, -1.50133691e-20]), 'test_spearman_r': array([0.91711757, 0.95939419, 0.833337  , 0.90191634]), 'test_spearman_p': array([-7.44511471e-27, -2.45662091e-36, -7.19282868e-18, -2.76511990e-24]), 'test_kendall_r': array([0.78078806, 0.84833895, 0.74686304, 0.82762088]), 'test_kendall_p': array([-5.27811753e-20, -1.93512415e-23, -2.01871748e-18, -4.76702606e-22]), 'test_rmse': array([-0.15441762, -0.18751381, -0.31189189, -0.31612575]), 'test_mae': array([-0.10040059, -0.13080528, -0.13909818, -0.12829236]), 'test_r2': array([0.9373547 , 0.91326267, 0.75741406, 0.74170235]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1360, 'regressor__learning_rate': 0.06629909464883918, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([32.41758227, 25.45517111, 27.62077117, 25.53217387]), 'score_time': array([0.62649274, 0.61665583, 0.638237  , 0.61701894]), 'test_pearson_r': array([0.90576488, 0.97906656, 0.97052113, 0.8892772 ]), 'test_pearson_p': array([-3.56424070e-25, -2.84725948e-45, -1.20789071e-40, -9.76546941e-23]), 'test_spearman_r': array([0.91274746, 0.97072419, 0.96424201, 0.91332583]), 'test_spearman_p': array([-3.51230049e-26, -9.74508943e-41, -4.81674334e-38, -7.11320307e-26]), 'test_kendall_r': array([0.76062343, 0.85590451, 0.85438855, 0.81227538]), 'test_kendall_p': array([-4.42964405e-19, -8.61431895e-24, -1.07686675e-23, -3.64316873e-21]), 'test_rmse': array([-0.25541157, -0.13408458, -0.14819594, -0.32019109]), 'test_mae': array([-0.17314668, -0.09212412, -0.09988042, -0.1627116 ]), 'test_r2': array([0.80533886, 0.95676389, 0.93682374, 0.78131699]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1318, 'regressor__learning_rate': 0.01991222995825114, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([31.94385409, 31.15672684, 36.85940266, 36.33563733]), 'score_time': array([0.61933208, 0.64987469, 0.64167285, 0.64056063]), 'test_pearson_r': array([0.88234258, 0.94789894, 0.95215261, 0.95558796]), 'test_pearson_p': array([-2.69491074e-22, -5.30934772e-33, -3.87143474e-34, -1.33413757e-34]), 'test_spearman_r': array([0.87591179, 0.94224738, 0.94132952, 0.94888439]), 'test_spearman_p': array([-1.30251677e-21, -1.24922902e-31, -2.02439117e-31, -9.43106505e-33]), 'test_kendall_r': array([0.77021133, 0.84104134, 0.80705993, 0.82902677]), 'test_kendall_p': array([-1.87990575e-19, -4.78055371e-23, -2.97051400e-21, -4.23927237e-22]), 'test_rmse': array([-0.31542828, -0.18280745, -0.19551316, -0.19079775]), 'test_mae': array([-0.14646192, -0.1023499 , -0.1454724 , -0.11991577]), 'test_r2': array([0.77151176, 0.89588849, 0.89726252, 0.91095774]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1359, 'regressor__learning_rate': 0.0583675162648701, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n02>
Subject: Job 295216: <NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:09:31 2025
Job was executed on host(s) <8*c205n02>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 16:24:07 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 16:24:07 2025
Terminated at Fri Mar 14 21:57:22 2025
Results reported at Fri Mar 14 21:57:22 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM3 Mordred cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   860712.00 sec.
    Max Memory :                                 3 GB
    Average Memory :                             2.82 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              26
    Max Threads :                                29
    Run time :                                   192818 sec.
    Turnaround time :                            269271 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.err> for stderr output of this job.




-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010687061489402364), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0664379049672715), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01970704062592384), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 264), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06016150865401709), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 196), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008005575809513513), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05582149317482225), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 313), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09907546635814805), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 454), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.90851325753223e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09862822447154428), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1967), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0751255917310225e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0325483409582531), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 605), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06711172130813876), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.035233382965306315), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 546), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03165904106967154), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 463), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1194), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06448613014264502), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1143), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000920515689165055), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05207916458231266), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 651), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 85), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007943649099604606), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0633032879467581), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 101), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 373), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1052), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09899263009675877), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1892), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004749905899576313), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05017151235401148), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1990), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00016183602398622037), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01703736994762658), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 857), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015332493631262364), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1399), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05794984669479041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 680), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.5602461552532904e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04715488046119623), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05206855425185139), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06592992267754524), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1273), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009794359046935367), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 986), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0288643690138194), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09726013747450506), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1985), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006588175910662454), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0317838460557584), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036459073309181765), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1258), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00039896146018924097), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050194319050059534), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1632), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07470801715016527), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012150470309442869), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07098006849950626), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 472), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0995745213196144), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1917), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3842542767070137e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014044590250285796), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.5871897255499115e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09843182228101437), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1159), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.6467059234567833e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 632), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02253410971566555), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0720518513645981e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09911146567445997), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1983), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00018485090839408285), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02611177812170276), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.0198940421205517e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.042435962510399376), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1090), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1532), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07476182183960049), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 362), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009192892814552299), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08183287781055792), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1374), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032458384426860595), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 205), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025110050741759458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2881294633636083e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011399414660404138), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 516), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041144309070055646), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025110050741759458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2881294633636083e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07128811058189538), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 502), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054967357330758165), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03638409020078633), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1203), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09987068081360422), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 479), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00047582570667067026), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07731652537416088), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1419), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005483865068129565), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06071139613813341), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02732351477978054), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02960648341799016), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 436), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1494), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09802839489310182), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.038974921879261e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09742965311862581), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1991), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00034032249133394407), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04500990731705748), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 797), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06527653082649572), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 693), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1465), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0440786869077142), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1554), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 409), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 239), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06410293393970151), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 284), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03935308286433089), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1001), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09915893774545972), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 144), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009559329528019333), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09700385705733648), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 352), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1846842865460402e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036796273130210194), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1991), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000868498367559976), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 281), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09891167091568198), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1986), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00053669030410338), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05106811743537961), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04502350077878986), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 602), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09804697500837978), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1972), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003818371276154087), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09987901943389355), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1731), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5060670509463575e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09966576499612387), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1101), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.5374983382144752e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057680218264603324), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1514), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03217295667634276), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 844), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07134945147413715), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 780), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0997757086218001), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1189), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008109737257844314), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00044588890448342693), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1151), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1324), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06496072066570592), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 356), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0071702210855602e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09985994890140112), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.025577913565513e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03945628723945844), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 516), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08635434278070352), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1738), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03126865577464419), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1318), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0306610459123303e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04248471026446772), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 694), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07226014354381594), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07501323161931191), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1976), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00020891781712548994), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1295), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07630148224530153), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 225), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4051063824272156e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04944419020652374), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 570), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03352924509536427), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1078), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05932341559594269), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03902151188701211), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1079), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06165522109409692), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 648), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03843156613502105), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06477091807351548), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 458), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005751595137777689), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08257261715984339), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1381), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03391222105048334), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 386), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027574212264484355), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07002666101659609), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 224), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.090938425019779e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019160981964657393), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1351), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 797), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 268), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04994116326840676), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 259), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014998236324931089), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05675842334975239), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05601881738624126), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 389), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07310868238543344), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 301), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07916044719333536), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 596), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06601426256114053), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036755252938399714), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1438), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.058362584579066), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01193405847955489), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1396), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1166), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.049709700672415584), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 304), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1932455227600253e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1523), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 254), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 207), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06001107536382486), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1632), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09899263009675877), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1892), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004749905899576313), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007729629804289208), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05381731753811938), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1604), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.360418912614815e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06478511185307397), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 801), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09817924415010872), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1931), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.775420364245121e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 878), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09205988756757671), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1250), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0071951532565228e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05237251639839315), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 399), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05923025185902813), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 360), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000564237360825945), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09984164711240609), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 584), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.602491727624702e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 445), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054026506803844125), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 106), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 617), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1321), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 438), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0790796301548218), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 262), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6219616168962345e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07655617569514521), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1764), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 747), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015127610546218239), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1436), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 232), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 755), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 721), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012027416832199775), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06217815109194595), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1566), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09926164643075035), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 319), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2086729975964592e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 500), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010576499093372653), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1973), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000960264541878385), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03770556603158898), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04333674059381126), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1189), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06749461016959755), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 229), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.049487639404110904), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06443420611682987), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06597866240702638), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06979765609527952), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.052099657620767965), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1268), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0663764799111039), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1008), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009194800548167196), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 64, 6: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5451094759995853, 'test_rmse': 0.6895513723861252, 'test_r2': -0.25678316629561704, 'test_pearson_r': array([0.28434335]), 'test_pearson_p_value': array([0.00020501]), 'test_spearman_r': 0.3536325503869124, 'test_spearman_p_value': 2.9578784449469403e-06, 'test_kendall_r': 0.23992731102694545, 'test_kendall_p_value': 5.653690951188284e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 264, 'regressor__learning_rate': 0.01970704062592384, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5528756349805358, 'test_rmse': 0.6807462375431707, 'test_r2': -0.2248914411812648, 'test_pearson_r': array([0.30954686]), 'test_pearson_p_value': array([4.94468189e-05]), 'test_spearman_r': 0.35741780685723534, 'test_spearman_p_value': 2.2751365232022677e-06, 'test_kendall_r': 0.24309186910128722, 'test_kendall_p_value': 4.14406146074095e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06711172130813876, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5750674129250712, 'test_rmse': 0.6984403795564136, 'test_r2': -0.28939440103593905, 'test_pearson_r': array([0.24436772]), 'test_pearson_p_value': array([0.00150918]), 'test_spearman_r': 0.32052650596569193, 'test_spearman_p_value': 2.552445381246368e-05, 'test_kendall_r': 0.21616965410319888, 'test_kendall_p_value': 4.429415750247308e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 85, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5653394014119487, 'test_rmse': 0.7061966570291631, 'test_r2': -0.31819122245942366, 'test_pearson_r': array([0.30751265]), 'test_pearson_p_value': array([5.57336824e-05]), 'test_spearman_r': 0.35053997801002534, 'test_spearman_p_value': 3.656047756177373e-06, 'test_kendall_r': 0.23872355033088113, 'test_kendall_p_value': 6.20580568658162e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1399, 'regressor__learning_rate': 0.015332493631262364, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5521834352465206, 'test_rmse': 0.684727283563393, 'test_r2': -0.2392598137787616, 'test_pearson_r': array([0.31131467]), 'test_pearson_p_value': array([4.45304197e-05]), 'test_spearman_r': 0.37379700503641716, 'test_spearman_p_value': 7.025304692315889e-07, 'test_kendall_r': 0.25310338951798766, 'test_kendall_p_value': 1.5918769896446423e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0317838460557584, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5745339954132176, 'test_rmse': 0.7152118019242711, 'test_r2': -0.3520614962747859, 'test_pearson_r': array([0.28945928]), 'test_pearson_p_value': array([0.00015523]), 'test_spearman_r': 0.3113714470817148, 'test_spearman_p_value': 4.438041548942958e-05, 'test_kendall_r': 0.1941072756363085, 'test_kendall_p_value': 0.00023447815503399805, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1159, 'regressor__learning_rate': 0.09843182228101437, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5489915875915891, 'test_rmse': 0.6816247076645593, 'test_r2': -0.2280548073707258, 'test_pearson_r': array([0.29629223]), 'test_pearson_p_value': array([0.00010618]), 'test_spearman_r': 0.3409010427668106, 'test_spearman_p_value': 6.9771713064431174e-06, 'test_kendall_r': 0.23033700951769798, 'test_kendall_p_value': 1.3312788758270826e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 516, 'regressor__learning_rate': 0.011399414660404138, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 50, 6: {'fit_time': array([7.86070466, 8.83136797]), 'score_time': array([0.26151538, 0.27088499]), 'test_pearson_r': array([0.88942168, 0.88061252]), 'test_pearson_p': array([-2.38467912e-45, -5.10880751e-43]), 'test_spearman_r': array([0.89103774, 0.87509751]), 'test_spearman_p': array([-9.79965250e-46, -7.50556599e-42]), 'test_kendall_r': array([0.7637046 , 0.75869398]), 'test_kendall_p': array([-7.79208288e-38, -5.28520545e-37]), 'test_rmse': array([-0.30483349, -0.29150528]), 'test_mae': array([-0.16719232, -0.15414889]), 'test_r2': array([0.7846105 , 0.76291741]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 454, 'regressor__learning_rate': 0.09907546635814805, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([42.14587355, 40.80515528]), 'score_time': array([1.15271902, 1.12698221]), 'test_pearson_r': array([0.89803809, 0.79241781]), 'test_pearson_p': array([-1.75767787e-47, -4.82191411e-29]), 'test_spearman_r': array([0.88503619, 0.80771866]), 'test_spearman_p': array([-2.48874766e-44, -6.28006742e-31]), 'test_kendall_r': array([0.76531179, 0.68578216]), 'test_kendall_p': array([-5.98125182e-38, -1.40029514e-30]), 'test_rmse': array([-0.3005059 , -0.38430495]), 'test_mae': array([-0.1472486 , -0.20223181]), 'test_r2': array([0.79130916, 0.58128075]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([39.07691765, 42.39950848]), 'score_time': array([1.11908436, 1.07980084]), 'test_pearson_r': array([0.77478819, 0.88222713]), 'test_pearson_p': array([-2.93305028e-27, -2.26827682e-43]), 'test_spearman_r': array([0.84682597, 0.8898343 ]), 'test_spearman_p': array([-6.62972964e-37, -4.18645634e-45]), 'test_kendall_r': array([0.73505026, 0.77736928]), 'test_kendall_p': array([-3.25779453e-35, -9.12298969e-39]), 'test_rmse': array([-0.40864783, -0.29808506]), 'test_mae': array([-0.18970397, -0.1559818 ]), 'test_r2': array([0.57814262, 0.77219718]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([19.91479778, 20.29857802]), 'score_time': array([0.54811597, 0.55515838]), 'test_pearson_r': array([0.91130849, 0.86955697]), 'test_pearson_p': array([-3.60382450e-51, -9.85007409e-41]), 'test_spearman_r': array([0.91086145, 0.87559928]), 'test_spearman_p': array([-4.90023586e-51, -5.90889866e-42]), 'test_kendall_r': array([0.78494355, 0.75015383]), 'test_kendall_p': array([-8.83085102e-40, -2.88103692e-36]), 'test_rmse': array([-0.26399134, -0.32059014]), 'test_mae': array([-0.1488366 , -0.15781648]), 'test_r2': array([0.82356713, 0.73967301]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 986, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([10.33148789, 11.13814044]), 'score_time': array([0.33422112, 0.33776259]), 'test_pearson_r': array([0.91118889, 0.86335512]), 'test_pearson_p': array([-3.91325091e-51, -1.53391843e-39]), 'test_spearman_r': array([0.88883715, 0.87122953]), 'test_spearman_p': array([-3.27831089e-45, -4.58553299e-41]), 'test_kendall_r': array([0.75110754, 0.76840971]), 'test_kendall_p': array([-1.25965664e-36, -6.04968236e-38]), 'test_rmse': array([-0.25984955, -0.3220966 ]), 'test_mae': array([-0.15212376, -0.15386972]), 'test_r2': array([0.82904388, 0.7367544 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 586, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([27.58367133, 29.7961235 ]), 'score_time': array([0.7584703 , 0.76854134]), 'test_pearson_r': array([0.90818646, 0.89605507]), 'test_pearson_p': array([-2.98103552e-50, -1.27811844e-46]), 'test_spearman_r': array([0.89348655, 0.90205426]), 'test_spearman_p': array([-2.47870656e-46, -3.55975936e-48]), 'test_kendall_r': array([0.75197631, 0.78060325]), 'test_kendall_p': array([-1.10825062e-36, -4.43484070e-39]), 'test_rmse': array([-0.2634412 , -0.28737238]), 'test_mae': array([-0.15523921, -0.15264734]), 'test_r2': array([0.81798484, 0.79825855]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1374, 'regressor__learning_rate': 0.08183287781055792, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([8.68641806, 9.51650929]), 'score_time': array([0.2752564 , 0.27282381]), 'test_pearson_r': array([0.86635587, 0.92080869]), 'test_pearson_p': array([-2.05648750e-40, -8.94700118e-54]), 'test_spearman_r': array([0.86608125, 0.91428787]), 'test_spearman_p': array([-2.32394894e-40, -1.10429812e-51]), 'test_kendall_r': array([0.74380526, 0.77993851]), 'test_kendall_p': array([-7.29155630e-36, -4.50279421e-39]), 'test_rmse': array([-0.3245136 , -0.24931022]), 'test_mae': array([-0.15886036, -0.14744154]), 'test_r2': array([0.72567548, 0.84075345]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 479, 'regressor__learning_rate': 0.09987068081360422, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 7, 6: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.28715568464769553, 'test_rmse': 0.43090139771297425, 'test_r2': -0.31747941629747367, 'test_pearson_r': array([0.27663758]), 'test_pearson_p_value': array([0.25157864]), 'test_spearman_r': 0.292876102720656, 'test_spearman_p_value': 0.22365967282621513, 'test_kendall_r': 0.3095292930136547, 'test_kendall_p_value': 0.06786317147849583, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06071139613813341, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.28790125798290794, 'test_rmse': 0.42925189711658635, 'test_r2': -0.3074120384858887, 'test_pearson_r': array([0.40545907]), 'test_pearson_p_value': array([0.08502519]), 'test_spearman_r': 0.3892359173231644, 'test_spearman_p_value': 0.09952372178704293, 'test_kendall_r': 0.31330417999518295, 'test_kendall_p_value': 0.06674133603112885, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0440786869077142, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.3271693163784323, 'test_rmse': 0.45505730096684577, 'test_r2': -0.4693329110542197, 'test_pearson_r': array([0.33430896]), 'test_pearson_p_value': array([0.161835]), 'test_spearman_r': 0.2409851415779572, 'test_spearman_p_value': 0.3202881010993202, 'test_kendall_r': 0.2500044289725673, 'test_kendall_p_value': 0.14027252377176272, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 144, 'regressor__learning_rate': 0.09915893774545972, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.2652944848281422, 'test_rmse': 0.3990778577663523, 'test_r2': -0.13006467043879022, 'test_pearson_r': array([0.34427847]), 'test_pearson_p_value': array([0.14891959]), 'test_spearman_r': 0.2585752978975161, 'test_spearman_p_value': 0.2851154347405658, 'test_kendall_r': 0.2500044289725673, 'test_kendall_p_value': 0.14027252377176272, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05106811743537961, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.2917927631888032, 'test_rmse': 0.3663992772652943, 'test_r2': 0.047429232449318404, 'test_pearson_r': array([0.5175685]), 'test_pearson_p_value': array([0.0232302]), 'test_spearman_r': 0.4626211112043996, 'test_spearman_p_value': 0.046104039759392854, 'test_kendall_r': 0.3809591298629597, 'test_kendall_p_value': 0.024622193071599838, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1123, 'regressor__learning_rate': 0.05913781436124809, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.23581126842587866, 'test_rmse': 0.3668606549594529, 'test_r2': 0.04502872763303112, 'test_pearson_r': array([0.63125886]), 'test_pearson_p_value': array([0.00374883]), 'test_spearman_r': 0.553210416250128, 'test_spearman_p_value': 0.014013282788019785, 'test_kendall_r': 0.48810388513691705, 'test_kendall_p_value': 0.003985256379007244, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1976, 'regressor__learning_rate': 0.07501323161931191, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.2913986387038978, 'test_rmse': 0.3871049729355964, 'test_r2': -0.063274831961464, 'test_pearson_r': array([0.42516942]), 'test_pearson_p_value': array([0.06957232]), 'test_spearman_r': 0.45118750959668624, 'test_spearman_p_value': 0.052506971817242294, 'test_kendall_r': 0.3690541570547422, 'test_kendall_p_value': 0.029476712595932736, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1079, 'regressor__learning_rate': 0.03902151188701211, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 7, 6: {'fit_time': array([36.28113866, 37.91783667, 36.88444948, 36.84171271, 36.80209136,
       37.64008117, 36.69275069, 35.82434511, 38.265975  , 38.11011696,
       35.38924003, 36.02566957, 37.54918766, 38.16452074]), 'score_time': array([0.35822201, 0.38003492, 0.3730247 , 0.36111927, 0.36498904,
       0.35972357, 0.35954785, 0.36114025, 0.36046529, 0.36823964,
       0.35703397, 0.35686469, 0.36424494, 0.37148905]), 'test_pearson_r': array([0.97637071, 0.99092159, 0.9944577 , 0.97994864, 0.94421616,
       0.98084145, 0.76339204, 0.97442798, 0.97219718, 0.96494082,
       0.982742  , 0.96761275, 0.90841162, 0.94495071]), 'test_pearson_p': array([-9.52395556e-13, -2.94386044e-16, -4.49122347e-18, -2.38764048e-13,
       -1.26522924e-09, -1.62608068e-13, -1.43096377e-04, -8.48643622e-12,
       -1.64538541e-11, -1.02810818e-10, -3.74852630e-13, -5.49893079e-11,
       -1.86179291e-07, -3.56549832e-09]), 'test_spearman_r': array([0.93684211, 0.97980685, 0.98070175, 0.95087719, 0.95919272,
       0.95789474, 0.80701754, 0.95764514, 0.97417407, 0.91744066,
       0.97263823, 0.91068675, 0.84607483, 0.95198774]), 'test_spearman_p': array([-3.54377793e-09, -2.53380837e-13, -1.72884140e-13, -4.39213996e-10,
       -9.34084168e-11, -1.21353119e-10, -2.97153744e-05, -4.55862708e-10,
       -9.17709168e-12, -8.35580353e-08, -1.44981731e-11, -1.53365498e-07,
       -9.66078028e-06, -1.22077937e-09]), 'test_kendall_r': array([0.87134503, 0.91176471, 0.91812865, 0.85964912, 0.85630867,
       0.85964912, 0.78947368, 0.87501894, 0.88817712, 0.79084967,
       0.89180807, 0.77377465, 0.74343714, 0.83934877]), 'test_kendall_p': array([-4.58322529e-10, -5.65458167e-08, -7.20796807e-12, -1.10425357e-09,
       -3.20420144e-07, -1.10425357e-09, -8.90628326e-08, -4.53574602e-07,
       -3.04174616e-07, -2.29491225e-07, -2.53540670e-07, -7.72097590e-06,
       -1.81645563e-05, -1.22329014e-06]), 'test_rmse': array([-0.13440016, -0.09751274, -0.0758194 , -0.14382009, -0.17983384,
       -0.13389539, -0.45821465, -0.15394067, -0.15609444, -0.15594723,
       -0.11540238, -0.15364494, -0.26134341, -0.15358603]), 'test_mae': array([-0.07780716, -0.06898556, -0.05543649, -0.09958049, -0.13333986,
       -0.08974011, -0.1866602 , -0.07156436, -0.10584923, -0.10682396,
       -0.08731723, -0.11627013, -0.13075946, -0.10669787]), 'test_r2': array([0.94769797, 0.97890745, 0.98793905, 0.95492879, 0.88545401,
       0.95584486, 0.54765298, 0.94309982, 0.93961237, 0.9267563 ,
       0.96528225, 0.92864576, 0.79891601, 0.886993  ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1494, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([9.16625643, 9.43137026, 9.09590936, 9.02422833, 9.36439848,
       9.90907907, 8.61414456, 8.70663023, 8.86414933, 9.14538383,
       9.07333589, 9.80879855, 8.58122182, 8.10963726]), 'score_time': array([0.10945058, 0.11209941, 0.11185861, 0.10839653, 0.11311507,
       0.10686517, 0.1065321 , 0.10857964, 0.10553885, 0.10683107,
       0.10864472, 0.10829353, 0.10841298, 0.10705805]), 'test_pearson_r': array([0.97713292, 0.98623117, 0.99252913, 0.98840812, 0.95473502,
       0.69299528, 0.98888722, 0.964651  , 0.97344783, 0.92941333,
       0.99103293, 0.91493219, 0.99186213, 0.94308454]), 'test_pearson_p': array([-7.22599815e-13, -9.99058440e-15, -5.64730105e-17, -2.33057994e-15,
       -2.22066060e-10, -1.00401869e-03, -1.63060716e-15, -1.09709499e-10,
       -1.14305241e-11, -2.47936332e-08, -2.04364069e-15, -1.05310350e-07,
       -9.42778074e-16, -4.62772787e-09]), 'test_spearman_r': array([0.94732221, 0.96094788, 0.98244074, 0.93859649, 0.95041694,
       0.76666667, 0.98947368, 0.9287195 , 0.9127518 , 0.91219057,
       0.98709358, 0.93188854, 0.98348813, 0.88177606]), 'test_spearman_p': array([-7.85799085e-10, -6.46690017e-11, -7.79310290e-14, -2.80606429e-09,
       -4.74698356e-10, -1.28665057e-04, -1.03053958e-15, -2.67521689e-08,
       -1.28040412e-07, -1.34535861e-07, -3.71793251e-14, -1.87828793e-08,
       -2.63828912e-13, -1.31598583e-06]), 'test_kendall_r': array([0.84117647, 0.85630867, 0.93529412, 0.8245614 , 0.84457841,
       0.66081871, 0.94152047, 0.7697535 , 0.76065983, 0.78291168,
       0.93115255, 0.84313725, 0.92156863, 0.76065983]), 'test_kendall_p': array([-5.46983525e-07, -3.20420144e-07, -2.55460982e-08, -1.17067315e-08,
       -4.63085373e-07, -2.38419293e-05, -5.27929196e-13, -9.07720685e-06,
       -1.09773191e-05, -6.36380428e-06, -7.34599652e-08, -1.22726897e-08,
       -2.92550870e-11, -1.09773191e-05]), 'test_rmse': array([-0.10764764, -0.12633203, -0.07789185, -0.09851869, -0.21337537,
       -0.51389636, -0.10391966, -0.1443069 , -0.13797457, -0.23434372,
       -0.09756246, -0.21301516, -0.08462864, -0.22598444]), 'test_mae': array([-0.06324364, -0.099874  , -0.06738993, -0.06751427, -0.1308181 ,
       -0.24730815, -0.07187429, -0.10796446, -0.10707462, -0.1327046 ,
       -0.06485476, -0.14677359, -0.06360521, -0.12769291]), 'test_r2': array([0.9542445 , 0.96329591, 0.98509449, 0.97166526, 0.90921189,
       0.40901502, 0.97628281, 0.91288694, 0.94715818, 0.85483778,
       0.97718416, 0.83494043, 0.98213033, 0.81860263]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 409, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([53.87558079, 53.6912837 , 53.32522225, 51.95899463, 49.95542812,
       53.93804264, 54.16079044, 52.4107163 , 50.72140574, 52.2346642 ,
       53.31992173, 50.87549305, 51.84526944, 53.89879489]), 'score_time': array([0.47544956, 0.48861694, 0.49617147, 0.49114466, 0.49571157,
       0.48647261, 0.47268176, 0.48193622, 0.47081494, 0.47304797,
       0.48274899, 0.48063445, 0.47460842, 0.48524714]), 'test_pearson_r': array([0.94792768, 0.97255145, 0.97648779, 0.96800571, 0.94608968,
       0.97321209, 0.96715165, 0.82566187, 0.986109  , 0.92974607,
       0.99030476, 0.96800969, 0.65887166, 0.99178597]), 'test_pearson_p': array([-7.13737445e-10, -3.35951458e-12, -9.13381912e-13, -1.21694439e-11,
       -9.52472120e-10, -2.73725594e-12, -1.51795444e-11, -2.44409656e-05,
       -6.67397253e-14, -2.38993870e-08, -3.80785124e-15, -4.98857104e-11,
       -2.94205219e-03, -1.01548295e-15]), 'test_spearman_r': array([0.94164116, 0.95041694, 0.97894737, 0.95964912, 0.9319878 ,
       0.96445819, 0.97674428, 0.78328173, 0.97004184, 0.91124871,
       0.98915862, 0.91615349, 0.66357069, 0.98140548]), 'test_spearman_p': array([-1.84039565e-09, -4.74698356e-10, -3.60064188e-13, -8.50242512e-11,
       -6.53956231e-09, -2.93899065e-11, -8.32796316e-13, -1.20764516e-04,
       -2.96982597e-11, -1.46078368e-07, -9.27540331e-15, -9.41755501e-08,
       -2.67798397e-03, -6.77950044e-13]), 'test_kendall_r': array([0.8211179 , 0.84457841, 0.90643275, 0.88304094, 0.80938764,
       0.89149943, 0.90322969, 0.64705882, 0.9013353 , 0.77777778,
       0.94426737, 0.81074309, 0.62091503, 0.92765165]), 'test_kendall_p': array([-9.53596222e-07, -4.63085373e-07, -2.27996852e-11, -1.79983887e-10,
       -1.35872010e-06, -1.03161918e-07, -7.00361385e-08, -6.99211859e-05,
       -2.02850566e-07, -4.36097754e-07, -4.80698932e-08, -3.48443378e-06,
       -1.54908277e-04, -8.87180979e-08]), 'test_rmse': array([-0.20730164, -0.16189532, -0.1669125 , -0.16778887, -0.16338988,
       -0.16978776, -0.13224478, -0.25350719, -0.11592787, -0.21448305,
       -0.09990953, -0.17778021, -0.53647292, -0.08786482]), 'test_mae': array([-0.12309122, -0.10671958, -0.11250822, -0.09900664, -0.11196351,
       -0.12052573, -0.08206754, -0.17482045, -0.07798838, -0.14337054,
       -0.06597617, -0.09095373, -0.21630909, -0.06927935]), 'test_r2': array([0.89671356, 0.93809239, 0.94696862, 0.93527204, 0.87133266,
       0.93675434, 0.9353145 , 0.66385609, 0.96943189, 0.85533161,
       0.97919336, 0.92744478, 0.34257026, 0.98022794]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([52.67685795, 50.05790257, 50.44547486, 51.49449396, 51.91736031,
       50.44807816, 52.20119762, 51.69639587, 51.8076756 , 51.7256918 ,
       54.26032519, 51.14845347, 52.29633331, 52.07286215]), 'score_time': array([0.48282552, 0.5455792 , 0.48556614, 0.47924829, 0.48699546,
       0.47810698, 0.47167325, 0.47378492, 0.47342467, 0.49193811,
       0.47368217, 0.46931243, 0.46629   , 0.4752996 ]), 'test_pearson_r': array([0.99396453, 0.98814941, 0.97946787, 0.74450354, 0.93544872,
       0.97704083, 0.98268488, 0.9830097 , 0.60335581, 0.97106005,
       0.96837602, 0.96158669, 0.97143684, 0.96648622]), 'test_pearson_p': array([-9.25391637e-18, -2.80909796e-15, -2.91561449e-13, -2.56183783e-04,
       -4.24558303e-09, -7.47479268e-13, -6.92441302e-14, -3.31063101e-13,
       -8.02586250e-03, -2.25935554e-11, -4.55472953e-11, -2.11288906e-10,
       -2.03689262e-11, -7.20326278e-11]), 'test_spearman_r': array([0.98902546, 0.98596491, 0.97323397, 0.81631927, 0.94561404,
       0.94912281, 0.97498912, 0.95971126, 0.66907598, 0.92982456,
       0.92927219, 0.88854489, 0.95252838, 0.9628483 ]), 'test_spearman_p': array([-1.46670481e-15, -1.17464029e-14, -2.71850932e-12, -2.01980330e-05,
       -1.02463740e-09, -5.88308946e-10, -1.53655411e-12, -3.07551300e-10,
       -2.39372581e-03, -2.36925600e-08, -2.51816334e-08, -8.39466355e-07,
       -1.11695903e-09, -1.62399435e-10]), 'test_kendall_r': array([0.93529412, 0.91812865, 0.91495995, 0.68907652, 0.88304094,
       0.83625731, 0.90322969, 0.86186076, 0.60328193, 0.83006536,
       0.83934877, 0.80392157, 0.84313725, 0.88235294]), 'test_kendall_p': array([-2.55460982e-08, -7.20796807e-12, -4.73213851e-08, -5.52943981e-05,
       -1.79983887e-10, -5.55516932e-09, -7.00361385e-08, -6.72597856e-07,
       -4.88013116e-04, -2.71335027e-08, -1.22329014e-06, -1.16879681e-07,
       -1.22726897e-08, -8.28241250e-10]), 'test_rmse': array([-0.08431263, -0.08511785, -0.12622059, -0.39316858, -0.20648756,
       -0.16641238, -0.12712928, -0.10342675, -0.50390412, -0.14593881,
       -0.11950009, -0.20523713, -0.13865188, -0.18770847]), 'test_mae': array([-0.06317673, -0.06057252, -0.07986942, -0.17244182, -0.11895242,
       -0.10674427, -0.09795996, -0.07957876, -0.22224604, -0.1103891 ,
       -0.07683715, -0.11652446, -0.10475995, -0.13390171]), 'test_r2': array([0.98294867, 0.97427954, 0.95616535, 0.41492392, 0.87213869,
       0.94858182, 0.96331882, 0.96521181, 0.27347034, 0.93775432,
       0.93706147, 0.91788222, 0.94195853, 0.9329211 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([50.95174837, 52.82162833, 52.00184894, 48.70270562, 52.23022056,
       50.89015603, 49.50522089, 48.89769387, 56.02806282, 52.33433628,
       50.52703381, 51.25210714, 51.25576186, 52.51531529]), 'score_time': array([0.47578025, 0.48503661, 0.47161007, 0.47835779, 0.47692084,
       0.47102594, 0.48401761, 0.47281146, 0.46756673, 0.47294712,
       0.45970297, 0.46845555, 0.46353006, 0.5008595 ]), 'test_pearson_r': array([0.96040278, 0.98124978, 0.9722908 , 0.98169494, 0.96596336,
       0.97000439, 0.96129426, 0.6480195 , 0.96666658, 0.98999252,
       0.94917648, 0.96181983, 0.73745604, 0.98890976]), 'test_pearson_p': array([-7.26204161e-11, -1.35585070e-13, -3.63731500e-12, -1.10704762e-13,
       -2.04495667e-11, -7.08100393e-12, -6.00233916e-11, -3.63432513e-03,
       -6.90285574e-11, -4.90214407e-15, -1.90748218e-09, -2.01393868e-10,
       -4.78429666e-04, -1.11134177e-14]), 'test_spearman_r': array([0.88070175, 0.92970267, 0.84057979, 0.97849944, 0.95614035,
       0.96491228, 0.94912281, 0.47830579, 0.9411157 , 0.93959744,
       0.94731456, 0.96904025, 0.7997936 , 0.96697626]), 'test_spearman_p': array([-6.48949749e-07, -8.59237765e-09, -6.61329686e-06, -4.29972653e-13,
       -1.70664316e-10, -2.63877371e-11, -5.88308946e-10, -4.46599234e-02,
       -6.03666450e-09, -7.36446168e-09, -2.52870260e-09, -3.85140601e-11,
       -6.77596194e-05, -6.41243926e-11]), 'test_kendall_r': array([0.74269006, 0.82599105, 0.67846903, 0.90322969, 0.83625731,
       0.87134503, 0.87134503, 0.42763158, 0.82236842, 0.81311912,
       0.87501894, 0.86928105, 0.76470588, 0.86928105]), 'test_kendall_p': array([-9.02457620e-07, -9.15381916e-07, -5.56065009e-05, -7.00361385e-08,
       -5.55516932e-09, -4.58322529e-10, -4.58322529e-10, -1.36792029e-02,
       -2.12143788e-06, -2.59896801e-06, -4.53574602e-07, -2.15825858e-09,
       -8.04176944e-07, -2.15825858e-09]), 'test_rmse': array([-0.16629542, -0.12238559, -0.1166925 , -0.1127924 , -0.16835161,
       -0.17781893, -0.15802285, -0.41615457, -0.20801075, -0.09600409,
       -0.15631746, -0.17635207, -0.4428838 , -0.09600236]), 'test_mae': array([-0.09672466, -0.08073492, -0.09443496, -0.07964645, -0.11307188,
       -0.1100471 , -0.09919041, -0.23088016, -0.12398124, -0.06312298,
       -0.09083724, -0.1180036 , -0.16762618, -0.07104893]), 'test_r2': array([0.92208686, 0.96075875, 0.94408498, 0.95879775, 0.92700983,
       0.93452594, 0.9190498 , 0.17091911, 0.92174346, 0.98007547,
       0.89747638, 0.91347181, 0.49102992, 0.97762289]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1998, 'regressor__learning_rate': 0.09985994890140112, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([49.22875905, 53.28241563, 49.97860003, 48.88973403, 47.04556084,
       50.30279875, 50.43200183, 49.88857627, 46.44926929, 50.54220462,
       51.47684193, 49.18809485, 50.33266211, 49.4471221 ]), 'score_time': array([0.48632646, 0.51418686, 0.4739387 , 0.48389649, 0.47843933,
       0.48717022, 0.48277211, 0.47102118, 0.48512626, 0.46807384,
       0.46939659, 0.47802496, 0.45874453, 0.4790225 ]), 'test_pearson_r': array([0.89516054, 0.86037352, 0.99392977, 0.99214672, 0.94020099,
       0.98833108, 0.99057902, 0.96336025, 0.94018095, 0.98255146,
       0.98388614, 0.73019498, 0.98264685, 0.95505177]), 'test_pearson_p': array([-2.27704350e-07, -2.30015989e-06, -9.71578018e-18, -8.62099846e-17,
       -2.25295524e-09, -2.46492431e-15, -4.02856465e-16, -1.45571776e-10,
       -6.82688921e-09, -4.09026752e-13, -2.17315089e-13, -5.80241235e-04,
       -3.91593628e-13, -7.27346193e-10]), 'test_spearman_r': array([0.87017544, 0.81965782, 0.99209871, 0.99121418, 0.97894737,
       0.96491228, 0.98245614, 0.81775953, 0.94427245, 0.94166249,
       0.99587203, 0.79917409, 0.96590961, 0.94014448]), 'test_spearman_p': array([-1.28288236e-06, -1.74925476e-05, -9.07791577e-17, -2.23053668e-16,
       -3.60064188e-13, -2.63877371e-11, -7.73558991e-14, -3.39332786e-05,
       -3.92399721e-09, -5.61230323e-09, -4.18452439e-18, -6.93097096e-05,
       -8.24154170e-11, -6.85945810e-09]), 'test_kendall_r': array([0.74269006, 0.63343381, 0.95884012, 0.95578964, 0.90643275,
       0.87134503, 0.91812865, 0.6426264 , 0.84313725, 0.8524636 ,
       0.97385621, 0.76065983, 0.87501894, 0.84313725]), 'test_kendall_p': array([-9.02457620e-07, -1.56352712e-04, -1.13214749e-08, -1.34361501e-08,
       -2.27996852e-11, -4.58322529e-10, -7.20796807e-12, -2.03460668e-04,
       -1.22726897e-08, -8.32299419e-07, -5.31053037e-14, -1.09773191e-05,
       -4.53574602e-07, -1.22726897e-08]), 'test_rmse': array([-0.22123525, -0.24624096, -0.09195537, -0.07600102, -0.189828  ,
       -0.11053413, -0.08983411, -0.11856813, -0.20712256, -0.13186216,
       -0.11824936, -0.49821714, -0.14731373, -0.21710795]), 'test_mae': array([-0.12207013, -0.16560159, -0.06838354, -0.05251969, -0.09954114,
       -0.07582262, -0.0629509 , -0.07999776, -0.12408048, -0.10017656,
       -0.07196833, -0.19743586, -0.12004907, -0.16408867]), 'test_r2': array([0.78806703, 0.7141103 , 0.98491473, 0.98272872, 0.86543084,
       0.97640458, 0.98121927, 0.91279996, 0.86910176, 0.96360214,
       0.96345331, 0.47823153, 0.94429623, 0.91028272]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05932341559594269, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([47.52436185, 45.9797287 , 44.81805539, 40.48183155, 43.68758631,
       41.26408768, 48.35596132, 49.26082158, 46.61692309, 50.10744882,
       46.4563024 , 49.9141171 , 49.49476099, 44.6286459 ]), 'score_time': array([0.49329114, 0.45654297, 0.46975493, 0.47186732, 0.47430539,
       0.46360064, 0.46107006, 0.44904041, 0.47147202, 0.47556543,
       0.47850037, 0.47379756, 0.46908712, 0.47800684]), 'test_pearson_r': array([0.97542369, 0.71195663, 0.97690317, 0.95669059, 0.92058907,
       0.99021116, 0.95202505, 0.94873143, 0.93722136, 0.98480093,
       0.97044396, 0.92692938, 0.97000695, 0.99537061]), 'test_pearson_p': array([-1.32581841e-12, -6.27821038e-04, -7.86075736e-13, -1.53586976e-10,
       -2.34645241e-08, -5.57197747e-16, -3.60661226e-10, -2.04238818e-09,
       -9.95175818e-09, -1.36544348e-13, -2.66888431e-11, -3.24371765e-08,
       -2.99727951e-11, -1.04535854e-17]), 'test_spearman_r': array([0.9082932 , 0.7205635 , 0.97935966, 0.95041694, 0.89951742,
       0.98947368, 0.90478289, 0.86983517, 0.88797121, 0.98243854,
       0.96231298, 0.9380805 , 0.9628483 , 0.97729618]), 'test_spearman_p': array([-7.64309346e-08, -5.01222852e-04, -3.04772396e-13, -4.74698356e-10,
       -1.61180294e-07, -1.03053958e-15, -1.03899466e-07, -2.73250847e-06,
       -8.73028662e-07, -4.30535934e-13, -1.81783414e-10, -8.93749440e-09,
       -1.62399435e-10, -3.30605345e-12]), 'test_kendall_r': array([0.79765739, 0.63719309, 0.9321899 , 0.84457841, 0.79765739,
       0.94152047, 0.78592713, 0.75659532, 0.747545  , 0.92765165,
       0.87869325, 0.81699346, 0.86928105, 0.90849673]), 'test_kendall_p': array([-1.92681603e-06, -1.52508316e-04, -3.06124963e-08, -4.63085373e-07,
       -1.92681603e-06, -5.27929196e-13, -2.71955004e-06, -1.28761880e-05,
       -1.55211882e-05, -8.87180979e-08, -3.78914056e-07, -5.74338967e-08,
       -2.15825858e-09, -9.76656516e-11]), 'test_rmse': array([-0.14788386, -0.50588738, -0.14603995, -0.16010057, -0.18715368,
       -0.09582032, -0.15781728, -0.20980243, -0.19918069, -0.13924453,
       -0.16619368, -0.25549397, -0.13302522, -0.08843409]), 'test_mae': array([-0.09786647, -0.19938624, -0.09782415, -0.10227376, -0.12210563,
       -0.05129981, -0.12295509, -0.16045497, -0.13322105, -0.1187883 ,
       -0.1137423 , -0.17685403, -0.09475658, -0.07250622]), 'test_r2': array([0.94443234, 0.45235904, 0.95307541, 0.91328527, 0.84543497,
       0.97857453, 0.9043227 , 0.8829628 , 0.8590478 , 0.94890588,
       0.93670504, 0.85824285, 0.93652971, 0.98389407]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.027574212264484355, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 29, 6: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7230613520519458, 'test_rmse': 0.8669553241400096, 'test_r2': -0.8817502530944668, 'test_pearson_r': array([-0.27694365]), 'test_pearson_p_value': array([0.01690693]), 'test_spearman_r': -0.41568723703909666, 'test_spearman_p_value': 0.00023036244119795763, 'test_kendall_r': -0.27907964276482955, 'test_kendall_p_value': 0.0004556507991608584, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 268, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.758042722290203, 'test_rmse': 0.9001347104892062, 'test_r2': -1.0285399501844084, 'test_pearson_r': array([-0.42375345]), 'test_pearson_p_value': array([0.00016849]), 'test_spearman_r': -0.4521471308471928, 'test_spearman_p_value': 5.251729495427765e-05, 'test_kendall_r': -0.3191394992229013, 'test_kendall_p_value': 6.192493494350749e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1396, 'regressor__learning_rate': 0.01193405847955489, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.6998664301433423, 'test_rmse': 0.8185111906278415, 'test_r2': -0.6773272009576032, 'test_pearson_r': array([-0.12573359]), 'test_pearson_p_value': array([0.2857776]), 'test_spearman_r': -0.09074481489853821, 'test_spearman_p_value': 0.4419437643579288, 'test_kendall_r': -0.049424224351161554, 'test_kendall_p_value': 0.5347150605663431, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 161, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7166461963569885, 'test_rmse': 0.8482076116370586, 'test_r2': -0.8012453715804686, 'test_pearson_r': array([-0.23302814]), 'test_pearson_p_value': array([0.04571069]), 'test_spearman_r': -0.37224683062055164, 'test_spearman_p_value': 0.0010912033076261516, 'test_kendall_r': -0.2285405862854463, 'test_kendall_p_value': 0.004094979911426186, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1931, 'regressor__learning_rate': 0.09817924415010872, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.668744610108477, 'test_rmse': 0.7902589555204476, 'test_r2': -0.563534250727129, 'test_pearson_r': array([-0.07382589]), 'test_pearson_p_value': array([0.53189473]), 'test_spearman_r': -0.08988173303004124, 'test_spearman_p_value': 0.44631556612406664, 'test_kendall_r': -0.05902014619532624, 'test_kendall_p_value': 0.458002342064607, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 617, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7004811989247129, 'test_rmse': 0.8298354197852633, 'test_r2': -0.7240604241764348, 'test_pearson_r': array([-0.21727742]), 'test_pearson_p_value': array([0.06294881]), 'test_spearman_r': -0.28953468852186004, 'test_spearman_p_value': 0.012345499631619204, 'test_kendall_r': -0.17354220129317627, 'test_kendall_p_value': 0.029265783357108204, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 232, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7900788815436626, 'test_rmse': 0.911920125848622, 'test_r2': -1.082006822098744, 'test_pearson_r': array([-0.27177171]), 'test_pearson_p_value': array([0.01916328]), 'test_spearman_r': -0.38933655871227896, 'test_spearman_p_value': 0.0006068669839566149, 'test_kendall_r': -0.22746814874313806, 'test_kendall_p_value': 0.004278805832621167, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06443420611682987, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 25, 6: {'fit_time': array([5.47853875, 5.38280177, 5.12640572, 5.48445487]), 'score_time': array([0.11004567, 0.11422157, 0.1173234 , 0.11164761]), 'test_pearson_r': array([0.94493822, 0.89105615, 0.9568329 , 0.95108992]), 'test_pearson_p': array([-2.89509013e-32, -2.73526479e-23, -1.62313090e-35, -2.48315548e-33]), 'test_spearman_r': array([0.90387455, 0.92567258, 0.95749589, 0.92804068]), 'test_spearman_p': array([-6.47097958e-25, -2.74487660e-28, -1.00683023e-35, -2.77740827e-28]), 'test_kendall_r': array([0.79759026, 0.83898978, 0.83872877, 0.80239173]), 'test_kendall_p': array([-7.85985316e-21, -5.69025395e-23, -7.78577989e-23, -9.44999328e-21]), 'test_rmse': array([-0.21965888, -0.29656894, -0.18170474, -0.17660147]), 'test_mae': array([-0.11398864, -0.12815599, -0.11650739, -0.11166021]), 'test_r2': array([0.88866354, 0.79288184, 0.91546435, 0.90409311]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 301, 'regressor__learning_rate': 0.07310868238543344, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([24.14839864, 25.55514026, 27.42272902, 24.97963929]), 'score_time': array([0.41109753, 0.38254595, 0.41958427, 0.38441825]), 'test_pearson_r': array([0.8744036 , 0.90261479, 0.93140696, 0.92276256]), 'test_pearson_p': array([-1.86110095e-21, -9.56353618e-25, -2.38911927e-29, -2.30189818e-27]), 'test_spearman_r': array([0.83828415, 0.92337115, 0.92014433, 0.90846022]), 'test_spearman_p': array([-3.01353512e-18, -6.92416927e-28, -2.41622468e-27, -3.59206436e-25]), 'test_kendall_r': array([0.71107895, 0.832692  , 0.78030674, 0.78827125]), 'test_kendall_p': array([-7.31953225e-17, -1.38162087e-22, -5.55728618e-20, -3.92389080e-20]), 'test_rmse': array([-0.33889093, -0.29444136, -0.2226961 , -0.22594499]), 'test_mae': array([-0.16936023, -0.12602764, -0.13487403, -0.12919885]), 'test_r2': array([0.70238998, 0.81022543, 0.86632478, 0.847046  ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1166, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([43.40581703, 43.18982029, 45.28119707, 44.22578144]), 'score_time': array([0.6530273 , 0.6486032 , 0.62066269, 0.66091967]), 'test_pearson_r': array([0.97346284, 0.95879455, 0.91166298, 0.90489879]), 'test_pearson_p': array([-4.60239563e-42, -3.86329273e-36, -5.09703330e-26, -1.11096424e-24]), 'test_spearman_r': array([0.96467992, 0.94950555, 0.89092877, 0.91939449]), 'test_spearman_p': array([-3.28883534e-38, -2.02823956e-33, -2.83219793e-23, -8.21592351e-27]), 'test_kendall_r': array([0.84915751, 0.82936243, 0.78390933, 0.83234787]), 'test_kendall_p': array([-1.91445799e-23, -1.74999340e-22, -3.18321178e-20, -4.04230735e-22]), 'test_rmse': array([-0.15928818, -0.17803523, -0.23847858, -0.28955205]), 'test_mae': array([-0.11010386, -0.12195354, -0.13039291, -0.11941391]), 'test_r2': array([0.94154404, 0.91063735, 0.82465639, 0.81640139]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([6.12753963, 6.95243239, 6.14724851, 5.76014709]), 'score_time': array([0.13339305, 0.12913895, 0.13334203, 0.12840557]), 'test_pearson_r': array([0.97844745, 0.90448807, 0.85159949, 0.92928956]), 'test_pearson_p': array([-7.06549722e-45, -5.33948780e-25, -2.48748710e-19, -1.64469739e-28]), 'test_spearman_r': array([0.97161437, 0.89825489, 0.88612272, 0.92131925]), 'test_spearman_p': array([-3.73382839e-41, -3.55144786e-24, -1.02203204e-22, -3.99845131e-27]), 'test_kendall_r': array([0.87556214, 0.78449316, 0.76923348, 0.79582752]), 'test_kendall_p': array([-1.25077565e-24, -2.87744317e-20, -1.68142278e-19, -1.65670624e-20]), 'test_rmse': array([-0.1250727 , -0.28750997, -0.32063312, -0.24495866]), 'test_mae': array([-0.07986514, -0.15937831, -0.14693333, -0.13870913]), 'test_r2': array([0.95572583, 0.81065103, 0.70865511, 0.85842807]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 360, 'regressor__learning_rate': 0.05923025185902813, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([4.52511597, 4.95515203, 4.16765404, 4.46065259]), 'score_time': array([0.09944677, 0.09670305, 0.10547018, 0.09763193]), 'test_pearson_r': array([0.95935539, 0.96148224, 0.88102863, 0.84435536]), 'test_pearson_p': array([-2.53016966e-36, -4.80607251e-37, -3.74578622e-22, -1.87118762e-18]), 'test_spearman_r': array([0.9085047 , 0.96562275, 0.83680745, 0.87523039]), 'test_spearman_p': array([-1.46796299e-25, -1.42250423e-38, -3.91895184e-18, -3.19071864e-21]), 'test_kendall_r': array([0.77595943, 0.8570053 , 0.74885675, 0.8014913 ]), 'test_kendall_p': array([-8.90594253e-20, -6.89542669e-24, -1.72962104e-18, -9.08445582e-21]), 'test_rmse': array([-0.1742868 , -0.17948623, -0.31412136, -0.34358464]), 'test_mae': array([-0.1088296 , -0.12785573, -0.14894097, -0.1396926 ]), 'test_r2': array([0.92019616, 0.92053026, 0.75393356, 0.69488175]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 262, 'regressor__learning_rate': 0.0790796301548218, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([43.54049969, 40.91869903, 39.23277593, 39.44070005]), 'score_time': array([0.62613106, 0.66144657, 0.66763401, 0.64496422]), 'test_pearson_r': array([0.92041251, 0.98236112, 0.96918993, 0.88720067]), 'test_pearson_p': array([-2.18225723e-27, -1.35870029e-47, -4.75975305e-40, -1.68274220e-22]), 'test_spearman_r': array([0.91982385, 0.97333567, 0.96842796, 0.91066915]), 'test_spearman_p': array([-2.72766809e-27, -5.34024337e-42, -1.01586515e-39, -1.74197532e-25]), 'test_kendall_r': array([0.76715736, 0.86141361, 0.86526937, 0.80728904]), 'test_kendall_p': array([-1.88448095e-19, -4.56037042e-24, -2.85844647e-24, -6.32508514e-21]), 'test_rmse': array([-0.23957499, -0.1220005 , -0.15359628, -0.32368998]), 'test_mae': array([-0.15254767, -0.08898041, -0.09933394, -0.16624562]), 'test_r2': array([0.82873009, 0.96420585, 0.9321355 , 0.77651156]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03770556603158898, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([45.2959156 , 42.36599469, 47.47780704, 45.37745929]), 'score_time': array([0.67424393, 0.69046092, 0.69294024, 0.66747022]), 'test_pearson_r': array([0.87902283, 0.95316753, 0.96423609, 0.96645324]), 'test_pearson_p': array([-6.14637341e-22, -2.00093444e-34, -4.84146824e-38, -2.61635403e-38]), 'test_spearman_r': array([0.87026992, 0.94324118, 0.95362592, 0.96469699]), 'test_spearman_p': array([-4.83663892e-21, -7.34076496e-32, -1.47802813e-34, -1.24000415e-37]), 'test_kendall_r': array([0.77891975, 0.8503987 , 0.82859305, 0.85558313]), 'test_kendall_p': array([-7.37212053e-20, -1.62088858e-23, -2.51537858e-22, -1.71083210e-23]), 'test_rmse': array([-0.32009203, -0.17419733, -0.16789335, -0.16438536]), 'test_mae': array([-0.14193823, -0.09660328, -0.11739866, -0.10370927]), 'test_r2': array([0.7647052 , 0.90546471, 0.92423932, 0.93390388]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06979765609527952, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c015n03>
Subject: Job 347497: <NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311> was submitted from host <c025n03> by user <sdehgha2> in cluster <Hazel> at Sun Mar 16 14:44:13 2025
Job was executed on host(s) <8*c015n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Mar 16 14:44:13 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Mar 16 14:44:13 2025
Terminated at Tue Mar 18 12:58:48 2025
Results reported at Tue Mar 18 12:58:48 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 80:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM3 Mordred cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   744513.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.97 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   166500 sec.
    Turnaround time :                            166475 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.err> for stderr output of this job.

