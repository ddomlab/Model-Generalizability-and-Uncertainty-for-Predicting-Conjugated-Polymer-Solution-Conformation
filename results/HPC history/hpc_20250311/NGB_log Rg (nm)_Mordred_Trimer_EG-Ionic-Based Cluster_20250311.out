


-------------------------------------------------- 
OOD TEST ON ionic-EG



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06514900817932563), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2919870619261817e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06885354575356016), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 334), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1598), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09468464993183168), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 195), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008352584648170093), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 223), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06104673190303065), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1390), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06875069920455323), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09803447664035368), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1069), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.575543641704289e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030362057026641638), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020823697092110016), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1172), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 351), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0974547592526122), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 964), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.580962700615092e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 672), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05818368119157078), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 228), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2467514100036812e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05384231293674097), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 650), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009383110033357793), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.053711488979236895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1985), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.7791912014733428e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06177959093703227), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 547), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0071504288836015e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015550790441708956), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1985), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4144081237995499e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 551), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09899263009675877), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1892), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004749905899576313), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02328655868348132), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07393707811947135), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 423), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 581), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 491), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023304757027629287), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 818), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054584107726858525), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1020), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.035607657159265525), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 450), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 486), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030820944874992214), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 408), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 410), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059876514165529186), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05197078300421611), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 937), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09791587206580206), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1945), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.713062990843532e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1498), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03232568013229602), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 583), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0995745213196144), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1917), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3842542767070137e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03665926811366013), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 843), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09318702357165692), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1964), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3019158463515384e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 574), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09867973998653726), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 613), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00048110542849172383), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06722043757338259), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1267), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009644160953761407), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890

------------------------------------------------------------
Sender: LSF System <lsfadmin@c022n04>
Subject: Job 295219: <NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311> in cluster <Hazel> Exited

Job <NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:09:32 2025
Job was executed on host(s) <8*c022n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 16:55:05 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 16:55:05 2025
Terminated at Thu Mar 13 07:41:44 2025
Results reported at Thu Mar 13 07:41:44 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "EG-Ionic-Based Cluster" 



------------------------------------------------------------

Exited with exit code 120.

Resource usage summary:

    CPU time :                                   196417.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.91 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   1 GB
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   53207 sec.
    Turnaround time :                            131532 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.err> for stderr output of this job.




-------------------------------------------------- 
OOD TEST ON ionic-EG



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04995520208773885), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05157504620085619), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1331), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3900466188463921e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04582388454432044), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1067), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1153), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08048031960848072), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09877445171327477), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1226), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4961368645301707e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1529), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048207480809556835), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04175081010123656), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 239), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0992185443052862), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 103), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00046128688728811114), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1403), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06430442839010547), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02406951785151759), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 159), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09486274050192783), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1055), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008458895120312811), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012878944014693859), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05167371868990495), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 390), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06336398800448209), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1358), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09689486881984544), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1957), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.6106263485928743e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013563572839199496), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.045793673569347465), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 488), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 696), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05183932188740328), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 213), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06601444620370252), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1367), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024589190572197116), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 919), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 641), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09350887205765879), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1952), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007802466483851686), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014366969078200766), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1395), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1347), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09925958743426211), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1986), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00022273131179038045), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030699079433017463), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1204), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028102920589186533), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 702), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030948500166188216), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 622), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03826499712826945), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09960125279788684), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 87), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004575083998227558), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08017250991875782), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 494), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 722), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09847107164037083), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 963), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004122234989432807), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013310267274249778), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1681), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07025042830348534), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 415), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037729414244790496), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04916458738733214), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.1698736584307127e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.035657125530389217), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1172), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055269191890733975), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 457), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03899570487780932), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1226), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3250517877038663e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09786906595339098), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1889), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004572076274244886), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 496), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04493189306809422), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1096), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0693703968517926), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 444), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07862015129504231), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 801), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])


{'CO_ionic-EG': {'cluster size (%)': 6, 6: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.912622393685655, 'test_rmse': 1.1542261235701903, 'test_r2': -0.6103723834560482, 'test_pearson_r': array([0.57616065]), 'test_pearson_p_value': array([0.0194958]), 'test_spearman_r': 0.5575856929476972, 'test_spearman_p_value': 0.02482287336190031, 'test_kendall_r': 0.34889639074744044, 'test_kendall_p_value': 0.07025149017221251, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.9441813393669463, 'test_rmse': 1.18469414468782, 'test_r2': -0.6965122472107694, 'test_pearson_r': array([0.39879215]), 'test_pearson_p_value': array([0.12599908]), 'test_spearman_r': 0.545497114238804, 'test_spearman_p_value': 0.028847250700541786, 'test_kendall_r': 0.31311214554257477, 'test_kendall_p_value': 0.10424453561934134, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04175081010123656, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.9242929366304982, 'test_rmse': 1.16180666161175, 'test_r2': -0.6315945270924417, 'test_pearson_r': array([0.3893108]), 'test_pearson_p_value': array([0.13610165]), 'test_spearman_r': 0.5625551683993687, 'test_spearman_p_value': 0.023299669699713126, 'test_kendall_r': 0.35955873264830984, 'test_kendall_p_value': 0.06307108623779366, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 390, 'regressor__learning_rate': 0.05167371868990495, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.9277114842222169, 'test_rmse': 1.1489988696093112, 'test_r2': -0.5958193180837179, 'test_pearson_r': array([0.47908036]), 'test_pearson_p_value': array([0.06044238]), 'test_spearman_r': 0.5575856929476972, 'test_spearman_p_value': 0.02482287336190031, 'test_kendall_r': 0.34889639074744044, 'test_kendall_p_value': 0.07025149017221251, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.022421137220043, 'test_rmse': 1.2638392105345235, 'test_r2': -0.9307594343659547, 'test_pearson_r': array([-0.1600184]), 'test_pearson_p_value': array([0.5538587]), 'test_spearman_r': -0.545497114238804, 'test_spearman_p_value': 0.028847250700541786, 'test_kendall_r': -0.5099254941693361, 'test_kendall_p_value': 0.008149745363348716, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1204, 'regressor__learning_rate': 0.030699079433017463, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.9144020859289201, 'test_rmse': 1.1745824457265566, 'test_r2': -0.6676754179962971, 'test_pearson_r': array([0.62428457]), 'test_pearson_p_value': array([0.00974072]), 'test_spearman_r': 0.5575856929476972, 'test_spearman_p_value': 0.02482287336190031, 'test_kendall_r': 0.34889639074744044, 'test_kendall_p_value': 0.07025149017221251, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.997555346885088, 'test_rmse': 1.264825202344249, 'test_r2': -0.9337731968280878, 'test_pearson_r': array([0.37629039]), 'test_pearson_p_value': array([0.15085945]), 'test_spearman_r': 0.5489449627122872, 'test_spearman_p_value': 0.027652032440411513, 'test_kendall_r': 0.3236028593834788, 'test_kendall_p_value': 0.09436253263444551, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04916458738733214, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_ionic-EG': {'cluster size (%)': 6, 6: {'fit_time': array([46.49849892, 43.19380951, 46.81876993, 46.08856559, 47.79307365,
       41.46685481, 40.92022014, 39.33289862, 49.20832324, 46.3940177 ,
       49.09220743, 49.62461925, 41.39294028, 45.27813101, 45.37579155,
       46.96249366]), 'score_time': array([0.32887578, 0.33022404, 0.32495737, 0.33234143, 0.3259511 ,
       0.32835245, 0.32002521, 0.33794856, 0.33237314, 0.35021257,
       0.36843204, 0.34457541, 0.33558583, 0.35172534, 0.33364797,
       0.33156753]), 'test_pearson_r': array([0.97186388, 0.97736669, 0.99164153, 0.98713718, 0.93701089,
       0.98045315, 0.97624609, 0.70613509, 0.96290853, 0.9629781 ,
       0.96253458, 0.95491121, 0.98662185, 0.96179276, 0.90820839,
       0.95916743]), 'test_pearson_p': array([-7.91818240e-11, -1.57281781e-11, -9.33056835e-15, -1.51004234e-12,
       -8.92199870e-08, -2.77653132e-11, -1.07466517e-10, -2.23410223e-03,
       -2.34774968e-09, -2.31752998e-09, -2.51602481e-09, -9.01453341e-09,
       -1.98525525e-12, -2.88046004e-09, -1.15169391e-06, -4.55457423e-09]), 'test_spearman_r': array([0.91666667, 0.9564686 , 0.98712465, 0.93823529, 0.82647059,
       0.95      , 0.92352941, 0.72647059, 0.93823529, 0.94334095,
       0.961001  , 0.95805765, 0.97277436, 0.90588235, 0.83652521,
       0.93235294]), 'test_spearman_p': array([-2.31711656e-07, -1.99851046e-09, -2.35235248e-13, -7.80221977e-08,
       -7.92354858e-05, -1.83461727e-08, -3.34390001e-07, -1.43618264e-03,
       -7.80221977e-08, -4.32397330e-08, -3.31817876e-09, -5.47877174e-09,
       -2.76678019e-10, -1.36351336e-06, -5.36724919e-05, -1.45175444e-07]), 'test_kendall_r': array([0.83823529, 0.86347451, 0.93727575, 0.83333333, 0.7       ,
       0.83333333, 0.83333333, 0.75      , 0.8       , 0.82845913,
       0.87866878, 0.87866878, 0.89540533, 0.76666667, 0.73952191,
       0.81666667]), 'test_kendall_p': array([-5.63431609e-08, -1.40967662e-06, -1.64175866e-07, -2.44193725e-07,
       -4.94106357e-05, -2.44193725e-07, -2.44193725e-07, -8.91848950e-06,
       -1.17934846e-06, -8.12917002e-06, -2.22140114e-06, -2.22140114e-06,
       -1.41912826e-06, -4.72451181e-06, -7.18614621e-05, -5.50848432e-07]), 'test_rmse': array([-0.14016314, -0.14577468, -0.11365455, -0.10898134, -0.1733174 ,
       -0.13946545, -0.13167316, -0.52932809, -0.18878572, -0.16360289,
       -0.15862734, -0.18505778, -0.12082085, -0.15044389, -0.24832377,
       -0.14479981]), 'test_mae': array([-0.08445422, -0.08387734, -0.07719094, -0.08425283, -0.10922351,
       -0.11021506, -0.0849406 , -0.19589877, -0.10220025, -0.1034095 ,
       -0.10073269, -0.12887954, -0.09281905, -0.11537832, -0.11410179,
       -0.09811482]), 'test_r2': array([0.94159634, 0.94388627, 0.97661225, 0.97258511, 0.85972872,
       0.95631356, 0.94749701, 0.43133326, 0.92563321, 0.92193692,
       0.92621164, 0.90977266, 0.96681092, 0.90448229, 0.78046932,
       0.9105458 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1226, 'regressor__learning_rate': 0.09877445171327477, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([44.47652674, 47.89085817, 48.16368032, 46.38664079, 43.46739292,
       50.54754758, 44.93395591, 47.30910444, 46.72917199, 48.86295342,
       47.31126904, 44.73402786, 49.04852819, 50.812042  , 47.53853989,
       51.43266702]), 'score_time': array([0.42136812, 0.35511112, 0.35918355, 0.35363793, 0.44037819,
       0.34756303, 0.35635281, 0.35403085, 0.34488535, 0.36478448,
       0.34261346, 0.34842944, 0.35097766, 0.34449339, 0.34350848,
       0.34780097]), 'test_pearson_r': array([0.9863695 , 0.99081858, 0.96793562, 0.99057926, 0.99280324,
       0.95746293, 0.6711086 , 0.99034622, 0.96029908, 0.96858073,
       0.86033258, 0.99374376, 0.96247618, 0.9641654 , 0.98975624,
       0.91221496]), 'test_pearson_p': array([-3.59916182e-13, -1.88259045e-14, -2.08623059e-10, -1.72255623e-13,
       -2.63076440e-14, -6.03667113e-09, -4.42498423e-03, -2.04263780e-13,
       -3.75245916e-09, -7.45869208e-10, -1.90612311e-05, -9.89441487e-15,
       -2.54321271e-09, -1.85057054e-09, -3.08923976e-13, -8.51918294e-07]), 'test_spearman_r': array([0.94543243, 0.94297994, 0.98034694, 0.93451092, 0.97352941,
       0.94922763, 0.76764706, 0.98529412, 0.90802085, 0.93303925,
       0.83149397, 0.99705882, 0.96764706, 0.95      , 0.98969179,
       0.86470588]), 'test_spearman_p': array([-1.05359308e-08, -1.45460594e-08, -5.50222786e-12, -1.16375217e-07,
       -2.27689766e-10, -2.03820935e-08, -5.16883524e-04, -3.83671954e-12,
       -1.16766988e-06, -1.35424405e-07, -6.54277487e-05, -5.06558834e-17,
       -9.13289481e-10, -1.83461727e-08, -3.22732424e-13, -1.54423405e-05]), 'test_kendall_r': array([0.83395402, 0.81919377, 0.92942583, 0.84519568, 0.9       ,
       0.86193223, 0.7       , 0.93333333, 0.72803985, 0.82845913,
       0.6443571 , 0.98333333, 0.91666667, 0.83333333, 0.9412097 ,
       0.71666667]), 'test_kendall_p': array([-3.18179868e-06, -4.73348832e-06, -2.40218359e-07, -5.31661458e-06,
       -4.72556483e-09, -3.45008795e-06, -4.94106357e-05, -3.55879882e-10,
       -8.82060896e-05, -8.12917002e-06, -5.19968854e-04, -1.52943275e-12,
       -1.38948965e-09, -2.44193725e-07, -4.35438108e-07, -2.87624658e-05]), 'test_rmse': array([-0.08684918, -0.09869107, -0.1552953 , -0.11767918, -0.07797305,
       -0.20300329, -0.54331957, -0.1014188 , -0.14750664, -0.15579123,
       -0.31611887, -0.08201076, -0.1581675 , -0.16815744, -0.0940405 ,
       -0.25705214]), 'test_mae': array([-0.05797588, -0.07652147, -0.09624588, -0.0815174 , -0.04922233,
       -0.13948157, -0.22898031, -0.06938749, -0.10951166, -0.11570121,
       -0.20168724, -0.05932982, -0.08912253, -0.11393303, -0.07065225,
       -0.16031114]), 'test_r2': array([0.97159423, 0.97670614, 0.92894406, 0.9707937 , 0.98361682,
       0.91276016, 0.38497076, 0.98023829, 0.90397689, 0.92145027,
       0.72514928, 0.9854396 , 0.92259429, 0.91984533, 0.97745847,
       0.73700885]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1403, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([69.95661354, 74.62587714, 64.77361012, 66.62811971, 81.34052706,
       72.72096992, 72.57353616, 53.99579787, 66.06031251, 56.83953762,
       69.76685143, 73.75276399, 68.3311491 , 66.83054066, 68.21064329,
       67.45894837]), 'score_time': array([0.50286603, 0.49647665, 0.50599718, 0.49576163, 0.50680065,
       0.51706219, 0.49155235, 0.51526356, 0.49419618, 0.506989  ,
       0.4896903 , 0.50460958, 0.50414133, 0.50070834, 0.49930954,
       0.49356174]), 'test_pearson_r': array([0.96127032, 0.9875799 , 0.95149537, 0.95525809, 0.98062725,
       0.97520885, 0.94729247, 0.98293038, 0.91761725, 0.93984302,
       0.97844001, 0.96544297, 0.9826031 , 0.98180113, 0.58795457,
       0.98096877]), 'test_pearson_p': array([-8.43524731e-10, -1.79811081e-13, -4.43352722e-09, -8.54805908e-09,
       -2.60917943e-11, -1.44547111e-10, -2.63458616e-08, -1.08237341e-11,
       -5.54222892e-07, -6.51503295e-08, -5.48518125e-11, -1.44019000e-09,
       -1.23520366e-11, -1.68975738e-11, -1.66042254e-02, -2.30582551e-11]), 'test_spearman_r': array([0.96014733, 0.96014733, 0.93627451, 0.92352941, 0.95882353,
       0.95588235, 0.94039761, 0.98454773, 0.88823529, 0.92273756,
       0.96176471, 0.96470588, 0.97277436, 0.90332718, 0.67352941,
       0.98527353]), 'test_spearman_p': array([-1.04178502e-09, -1.04178502e-09, -3.28341879e-08, -3.34390001e-07,
       -4.82554077e-09, -7.76027446e-09, -6.11516412e-08, -5.41517846e-12,
       -4.32625087e-06, -3.58624443e-07, -2.89508013e-09, -1.66620775e-09,
       -2.76678019e-10, -1.63329218e-06, -4.23273925e-03, -3.87426958e-12]), 'test_kendall_r': array([0.84871427, 0.86347451, 0.79411765, 0.81666667, 0.88333333,
       0.85      , 0.87866878, 0.92887842, 0.78333333, 0.82845913,
       0.86666667, 0.86666667, 0.89540533, 0.79672462, 0.68333333,
       0.9412097 ]), 'test_kendall_p': array([-2.12480839e-06, -1.40967662e-06, -5.45407093e-07, -5.50848432e-07,
       -1.43717927e-08, -1.02027025e-07, -2.22140114e-06, -5.65704076e-07,
       -2.41022656e-06, -8.12917002e-06, -3.98309214e-08, -3.98309214e-08,
       -1.41912826e-06, -2.11608369e-05, -8.26619198e-05, -4.35438108e-07]), 'test_rmse': array([-0.19024896, -0.10670479, -0.21084537, -0.17428696, -0.13280492,
       -0.14482486, -0.19921875, -0.09717082, -0.21620782, -0.21636783,
       -0.13776148, -0.15742344, -0.13781562, -0.12704248, -0.54586883,
       -0.13772024]), 'test_mae': array([-0.11388552, -0.0788909 , -0.14599697, -0.10834793, -0.08205903,
       -0.10861657, -0.14169958, -0.06310093, -0.14013661, -0.13094748,
       -0.09918866, -0.08948514, -0.07712924, -0.0805696 , -0.20109653,
       -0.08704217]), 'test_r2': array([0.91561435, 0.97465098, 0.88983943, 0.90616259, 0.96144235,
       0.94764738, 0.86388188, 0.96084122, 0.81225921, 0.85261867,
       0.95043917, 0.92347504, 0.96084063, 0.96263365, 0.23864639,
       0.95608462]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([18.42416048, 21.73657084, 22.73025298, 24.33223104, 21.32968664,
       25.22809362, 21.59207869, 23.28821158, 21.06268597, 17.58451056,
       24.27165151, 21.63959718, 21.53695774, 20.55000496, 24.88423467,
       19.04969144]), 'score_time': array([0.16844559, 0.17126775, 0.16883707, 0.16970706, 0.17054749,
       0.16774058, 0.1723032 , 0.17600274, 0.17234325, 0.18496203,
       0.16906142, 0.17059112, 0.17137742, 0.16319394, 0.16579533,
       0.17280269]), 'test_pearson_r': array([0.98661026, 0.96335328, 0.97083698, 0.99526089, 0.67747924,
       0.89318318, 0.98776335, 0.97755393, 0.9813918 , 0.52752659,
       0.96094433, 0.98577192, 0.97492343, 0.98909083, 0.98479015,
       0.96321108]), 'test_pearson_p': array([-3.15105581e-13, -5.60616670e-10, -1.03298479e-10, -1.42168736e-15,
       -3.93350809e-03, -3.19415019e-06, -1.06657230e-12, -7.25460374e-11,
       -1.97230854e-11, -3.57268445e-02, -3.35156892e-09, -3.04855889e-12,
       -1.56487960e-10, -4.79086934e-13, -4.85086147e-12, -2.21872241e-09]), 'test_spearman_r': array([0.96257669, 0.95098039, 0.96750478, 0.99261983, 0.75405007,
       0.89117647, 0.97352941, 0.95217097, 0.95434566, 0.63429009,
       0.93451092, 0.95294118, 0.98749107, 0.96176471, 0.94705882,
       0.95294118]), 'test_spearman_p': array([-6.54617936e-10, -4.79175685e-09, -2.30299590e-10, -3.13601186e-14,
       -7.39871592e-04, -3.61864891e-06, -2.27689766e-10, -1.35244908e-08,
       -9.82157565e-09, -8.31542258e-03, -1.16375217e-07, -1.20965793e-08,
       -1.24331763e-12, -2.89508013e-09, -2.71573117e-08, -1.20965793e-08]), 'test_kendall_r': array([0.87407407, 0.85294118, 0.87823476, 0.97467943, 0.68907563,
       0.8       , 0.9       , 0.84519568, 0.84036581, 0.59414746,
       0.84519568, 0.85      , 0.92887842, 0.88333333, 0.88333333,
       0.85      ]), 'test_kendall_p': array([-1.12182291e-06, -2.39403120e-08, -9.29113866e-07, -2.23973215e-07,
       -2.16176774e-04, -1.17934846e-06, -4.72556483e-09, -5.31661458e-06,
       -6.43994073e-06, -1.37502262e-03, -5.31661458e-06, -1.02027025e-07,
       -5.65704076e-07, -1.43717927e-08, -1.43717927e-08, -1.02027025e-07]), 'test_rmse': array([-0.11801931, -0.12745013, -0.16445862, -0.05794285, -0.46936733,
       -0.28921929, -0.16454214, -0.12873639, -0.10708982, -0.54915173,
       -0.14509485, -0.11605683, -0.11742575, -0.10435236, -0.10659758,
       -0.19851588]), 'test_mae': array([-0.08297435, -0.08626636, -0.11050281, -0.04278059, -0.23915744,
       -0.1580068 , -0.11903498, -0.09168223, -0.08493326, -0.2254543 ,
       -0.10899622, -0.07885672, -0.08139891, -0.07413447, -0.08833142,
       -0.12750951]), 'test_r2': array([0.96668614, 0.92744018, 0.92504209, 0.98858019, 0.08521183,
       0.78877594, 0.9565124 , 0.95253467, 0.96029372, 0.00537057,
       0.92282167, 0.96944233, 0.948443  , 0.97681602, 0.96325587,
       0.92767866]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 641, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([68.71684098, 73.66295147, 58.37524652, 60.63962817, 71.77310514,
       63.52495313, 65.24082994, 67.69921088, 52.56641579, 63.54765129,
       64.984339  , 67.30505896, 68.02930117, 74.02834916, 81.11910295,
       66.58545494]), 'score_time': array([0.50199556, 0.50221801, 0.50808692, 0.51583433, 0.49283099,
       0.53422856, 0.49020791, 0.49933004, 0.51638651, 0.56408262,
       0.49982238, 0.49561667, 0.50466347, 0.48817897, 0.49217415,
       0.50740528]), 'test_pearson_r': array([0.9757121 , 0.98490224, 0.99077402, 0.96949983, 0.94235414,
       0.97559161, 0.97172002, 0.99075766, 0.64815053, 0.95854071,
       0.98848608, 0.99146568, 0.93493501, 0.96623151, 0.6021534 ,
       0.99410417]), 'test_pearson_p': array([-2.65712664e-11, -7.71560478e-13, -1.95195630e-14, -6.07389116e-10,
       -4.86657269e-08, -1.29761995e-10, -3.59970246e-10, -1.50748960e-13,
       -6.61942842e-03, -5.05856092e-09, -6.97818359e-13, -8.64517571e-14,
       -1.11328482e-07, -1.22788719e-09, -1.35783795e-02, -6.53764398e-15]), 'test_spearman_r': array([0.92581256, 0.84835151, 0.95582822, 0.91390753, 0.93303925,
       0.95294118, 0.97352941, 0.98235294, 0.52058824, 0.95876289,
       0.95217097, 0.97647059, 0.90265879, 0.92862424, 0.70882353,
       0.97352941]), 'test_spearman_p': array([-9.95522543e-08, -1.68176001e-05, -2.22567457e-09, -7.46809230e-07,
       -1.35424405e-07, -1.20965793e-08, -2.27689766e-10, -1.36412383e-11,
       -3.86909071e-02, -4.87471983e-09, -1.35244908e-08, -1.00615044e-10,
       -1.71087205e-06, -2.09234458e-07, -2.11168124e-03, -2.27689766e-10]), 'test_kendall_r': array([0.80443352, 0.69190536, 0.85185185, 0.81172259, 0.81172259,
       0.85      , 0.88333333, 0.93333333, 0.46666667, 0.84033613,
       0.89540533, 0.9       , 0.801752  , 0.79498604, 0.68333333,
       0.9       ]), 'test_kendall_p': array([-6.99598360e-06, -1.34593270e-04, -2.08319812e-06, -1.23329686e-05,
       -1.23329686e-05, -1.02027025e-07, -1.43717927e-08, -3.55879882e-10,
       -1.14805971e-02, -6.44110257e-06, -1.41912826e-06, -4.72556483e-09,
       -1.76177315e-05, -1.85653874e-05, -8.26619198e-05, -4.72556483e-09]), 'test_rmse': array([-0.14358886, -0.10361537, -0.0897653 , -0.14796386, -0.26541622,
       -0.11769013, -0.17132851, -0.1208598 , -0.41895558, -0.22307076,
       -0.10998712, -0.0785683 , -0.18582693, -0.16723549, -0.53206147,
       -0.06653891]), 'test_mae': array([-0.10508514, -0.07466171, -0.07154666, -0.09864946, -0.18693281,
       -0.09028813, -0.11999238, -0.09116471, -0.23654033, -0.15159555,
       -0.06374177, -0.05279459, -0.11107022, -0.13024287, -0.2327235 ,
       -0.05180228]), 'test_r2': array([0.94420347, 0.96959269, 0.97782909, 0.93497099, 0.85611878,
       0.95072444, 0.94226359, 0.95776951, 0.10078017, 0.90956289,
       0.9763805 , 0.98249488, 0.85426784, 0.92483863, 0.17507424,
       0.98765752]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.030948500166188216, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([55.01038313, 60.25308919, 55.26474643, 55.39353395, 54.63244939,
       60.47965717, 56.72208142, 55.88632059, 55.85671496, 56.47567225,
       59.67952681, 54.45130968, 61.40869284, 52.45848298, 51.77989626,
       59.28316927]), 'score_time': array([0.50386786, 0.54649305, 0.50937772, 0.50301218, 0.5021646 ,
       0.54726505, 0.50114822, 0.51882458, 0.49718142, 0.51055861,
       0.52390671, 0.49652791, 0.50115299, 0.48962927, 0.48998618,
       0.48950696]), 'test_pearson_r': array([0.979651  , 0.83838894, 0.99062991, 0.9935239 , 0.99543921,
       0.93790085, 0.98401888, 0.9774452 , 0.99281286, 0.90862968,
       0.96687924, 0.98773867, 0.97910035, 0.66329996, 0.98446756,
       0.96449805]), 'test_pearson_p': array([-7.12871613e-12, -2.62885866e-05, -2.19165524e-14, -1.25932847e-14,
       -1.08745413e-15, -8.09550797e-08, -6.84401312e-12, -7.50204966e-11,
       -2.60631124e-14, -1.11647964e-06, -1.07405602e-09, -1.08165184e-12,
       -4.41960949e-11, -5.09332445e-03, -5.61374636e-12, -1.73515291e-09]), 'test_spearman_r': array([0.95588235, 0.77866354, 0.97177987, 0.99632109, 0.99337775,
       0.97058824, 0.94628429, 0.97647059, 0.97941176, 0.91096419,
       0.95      , 0.99115475, 0.99558282, 0.77262714, 0.96460597,
       0.95294118]), 'test_spearman_p': array([-2.20564790e-09, -2.30959463e-04, -8.09524658e-11, -2.42198312e-16,
       -1.47168758e-14, -4.72340113e-10, -3.00012032e-08, -1.00615044e-10,
       -3.98200979e-11, -9.37408818e-07, -1.83461727e-08, -1.10969762e-13,
       -8.69589913e-16, -4.50581583e-04, -1.69905595e-09, -1.20965793e-08]), 'test_kendall_r': array([0.86764706, 0.5830298 , 0.91854372, 0.97908807, 0.96235152,
       0.86666667, 0.82845913, 0.91666667, 0.9       , 0.79498604,
       0.86666667, 0.9536629 , 0.97482434, 0.69456675, 0.86926796,
       0.88333333]), 'test_kendall_p': array([-9.57597523e-09, -1.12603557e-03, -3.11133291e-07, -1.34225153e-07,
       -2.18526649e-07, -3.98309214e-08, -8.12917002e-06, -1.38948965e-09,
       -4.72556483e-09, -1.85653874e-05, -3.98309214e-08, -3.28081900e-07,
       -1.66572686e-07, -1.83536177e-04, -3.24532792e-06, -1.43717927e-08]), 'test_rmse': array([-0.10466007, -0.25426667, -0.11710916, -0.10289352, -0.06142503,
       -0.20651547, -0.12859032, -0.13284913, -0.06433704, -0.26490264,
       -0.14277879, -0.11567246, -0.14286152, -0.56287398, -0.12278723,
       -0.23296298]), 'test_mae': array([-0.07392257, -0.20678605, -0.07445585, -0.08354725, -0.04624172,
       -0.11693692, -0.09284633, -0.08879356, -0.04988501, -0.17632381,
       -0.09924291, -0.08655529, -0.0908336 , -0.24509617, -0.0970448 ,
       -0.17906153]), 'test_r2': array([0.95397586, 0.66309707, 0.97336499, 0.97186566, 0.9900612 ,
       0.85123895, 0.96793338, 0.95529375, 0.98345708, 0.75182593,
       0.9224596 , 0.97408413, 0.95229122, 0.38437923, 0.95840318,
       0.89871886]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.037729414244790496, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([26.5027926 , 26.88715911, 25.97844315, 26.81928039, 27.46181536,
       27.99351096, 26.21369338, 25.91714334, 26.81722498, 30.01057053,
       29.70488381, 27.504287  , 29.47361422, 27.89808989, 29.69499731,
       27.43161726]), 'score_time': array([0.28224158, 0.2741735 , 0.2837646 , 0.27760577, 0.2772572 ,
       0.28638744, 0.28628588, 0.27333951, 0.27051711, 0.27327514,
       0.27174211, 0.26866341, 0.27369547, 0.27363396, 0.27304435,
       0.27277136]), 'test_pearson_r': array([0.97265384, 0.74905374, 0.97465728, 0.95018608, 0.94878571,
       0.98215965, 0.98420329, 0.97371895, 0.93726347, 0.9560819 ,
       0.98362241, 0.98133476, 0.85379254, 0.97394095, 0.97422574,
       0.99493333]), 'test_pearson_p': array([-6.41004849e-11, -5.39211149e-04, -3.64384232e-11, -1.78824476e-08,
       -2.16311819e-08, -1.47146247e-11, -6.31302355e-12, -2.16628719e-10,
       -8.68046243e-08, -7.52189526e-09, -8.11622170e-12, -2.01471447e-11,
       -2.57848560e-05, -2.04259409e-10, -1.89279763e-10, -2.26783917e-15]), 'test_spearman_r': array([0.87185792, 0.79852821, 0.93742402, 0.95217097, 0.93451092,
       0.96541601, 0.98235294, 0.94411765, 0.84094347, 0.94411765,
       0.97935529, 0.96170944, 0.85      , 0.95294118, 0.97352941,
       0.97058824]), 'test_spearman_p': array([-5.10733748e-06, -1.21417688e-04, -2.87411513e-08, -1.35244908e-08,
       -1.16375217e-07, -1.44797070e-09, -1.36412383e-11, -3.93392920e-08,
       -4.48579983e-05, -3.93392920e-08, -4.05849059e-11, -2.92406998e-09,
       -3.05226007e-05, -1.20965793e-08, -2.27689766e-10, -4.72340113e-10]), 'test_kendall_r': array([0.76015278, 0.7807177 , 0.81483717, 0.84519568, 0.87866878,
       0.89540533, 0.91666667, 0.85      , 0.68909996, 0.83333333,
       0.93678391, 0.89078776, 0.71666667, 0.83333333, 0.9       ,
       0.9       ]), 'test_kendall_p': array([-2.17189123e-05, -1.43299199e-05, -5.65491557e-06, -5.31661458e-06,
       -2.22140114e-06, -1.41912826e-06, -1.38948965e-09, -1.02027025e-07,
       -2.16150057e-04, -2.44193725e-07, -5.27102297e-07, -1.73481918e-06,
       -2.87624658e-05, -2.44193725e-07, -4.72556483e-09, -4.72556483e-09]), 'test_rmse': array([-0.16436828, -0.51510815, -0.15096837, -0.19619427, -0.17776836,
       -0.09746283, -0.11534459, -0.12367296, -0.21167198, -0.16273207,
       -0.14255717, -0.12615232, -0.34599659, -0.15740779, -0.13285099,
       -0.07992619]), 'test_mae': array([-0.10126921, -0.18155264, -0.11014116, -0.13979334, -0.1069915 ,
       -0.07090889, -0.07059494, -0.08743173, -0.16210346, -0.12484225,
       -0.11070959, -0.09081029, -0.21348574, -0.11616698, -0.08918937,
       -0.06479954]), 'test_r2': array([0.92901731, 0.51240367, 0.94511603, 0.89376368, 0.89997034,
       0.96404469, 0.96598121, 0.94373373, 0.87096141, 0.9087271 ,
       0.95199515, 0.95980843, 0.71373261, 0.91356564, 0.94814625,
       0.98663048]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1096, 'regressor__learning_rate': 0.04493189306809422, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/EG-Ionic-Based Cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/EG-Ionic-Based Cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/EG-Ionic-Based Cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c037n02>
Subject: Job 347499: <NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311> was submitted from host <c025n03> by user <sdehgha2> in cluster <Hazel> at Sun Mar 16 14:44:13 2025
Job was executed on host(s) <8*c037n02>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Mar 16 14:44:14 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Mar 16 14:44:14 2025
Terminated at Mon Mar 17 08:17:02 2025
Results reported at Mon Mar 17 08:17:02 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 80:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "EG-Ionic-Based Cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   289248.03 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.93 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   63168 sec.
    Turnaround time :                            63169 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.err> for stderr output of this job.

