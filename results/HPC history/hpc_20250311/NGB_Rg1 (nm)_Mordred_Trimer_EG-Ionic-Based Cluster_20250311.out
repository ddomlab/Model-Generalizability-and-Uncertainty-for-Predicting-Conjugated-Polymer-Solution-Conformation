


-------------------------------------------------- 
OOD TEST ON ionic-EG



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027867578503954975), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07115628666346728), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 159), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1636), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00013011304986506307), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 737), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09348180760041602), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 510), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005673127324222246), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 644), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061484361931886555), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 95), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04486466431910496), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 414), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025153014182369215), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 392), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 288), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04730226900620175), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 342), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.353451792018577e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 103), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0938305486434041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 499), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009155840273741895), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08709142662314559), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04850256122989678), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 319), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08369107458936693), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04443924997333803), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07721565785662393), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 134), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004278077818884185), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 524), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03286299897955186), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 478), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030455771614429337), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1110), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048274546274024985), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03880914382676198), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 253), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 138), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 496), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09385978325646772), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 578), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.7231500076110447e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09428005475263121), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1978), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.001912120838334e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014348584053633508), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 993), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04415753324785705), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023344344390407896), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04026176856410124), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008543090870036359), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1365), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006883932198023217), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01394599545919542), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1214), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 225), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.018408824931061028), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1327), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09390325206888854), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 135), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007311986230371783), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0947697522180148), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 372), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07903688597225085), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 417), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05051390042206637), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07256495210747549), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08455224697069162), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 149), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07397854397498262), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 407), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07206633329931482), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 969), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059274399928968366), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 805), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])


{'CO_ionic-EG': {'cluster size (%)': 6, 6: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 136.81808002592123, 'test_rmse': 173.68019995245095, 'test_r2': -0.7396172150572276, 'test_pearson_r': array([-0.80895866]), 'test_pearson_p_value': array([0.0001478]), 'test_spearman_r': -0.8174901351889001, 'test_spearman_p_value': 0.00010997470760343784, 'test_kendall_r': -0.7067388427960973, 'test_kendall_p_value': 0.00024542332421053986, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 135.80062605905093, 'test_rmse': 173.15158675384714, 'test_r2': -0.7290439292549575, 'test_pearson_r': array([-0.74318194]), 'test_pearson_p_value': array([0.00097017]), 'test_spearman_r': -0.8114458458344536, 'test_spearman_p_value': 0.0001358002934813661, 'test_kendall_r': -0.6888467201936646, 'test_kendall_p_value': 0.000351362284640241, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 137.85826757179365, 'test_rmse': 177.61334277095594, 'test_r2': -0.8192997165208302, 'test_pearson_r': array([-0.83664019]), 'test_pearson_p_value': array([5.34260357e-05]), 'test_spearman_r': -0.8114458458344536, 'test_spearman_p_value': 0.0001358002934813661, 'test_kendall_r': -0.6888467201936646, 'test_kendall_p_value': 0.000351362284640241, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 103, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 143.4370053772558, 'test_rmse': 186.38714539837292, 'test_r2': -1.0034799004754347, 'test_pearson_r': array([-0.8378532]), 'test_pearson_p_value': array([5.08831461e-05]), 'test_spearman_r': -0.8235344245433469, 'test_spearman_p_value': 8.8375070220131e-05, 'test_kendall_r': -0.7246309653985301, 'test_kendall_p_value': 0.0001700328068103163, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 161, 'regressor__learning_rate': 0.09939793013929618, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 128.4968258276411, 'test_rmse': 164.47161037723492, 'test_r2': -0.5600372388548684, 'test_pearson_r': array([-0.64969645]), 'test_pearson_p_value': array([0.0064488]), 'test_spearman_r': -0.5394528248843574, 'test_spearman_p_value': 0.031037200486925508, 'test_kendall_r': -0.5099254941693361, 'test_kendall_p_value': 0.008149745363348716, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1123, 'regressor__learning_rate': 0.05913781436124809, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 139.91853333363036, 'test_rmse': 177.8374707312964, 'test_r2': -0.8238941146588739, 'test_pearson_r': array([-0.85854663]), 'test_pearson_p_value': array([2.07310419e-05]), 'test_spearman_r': -0.8114458458344536, 'test_spearman_p_value': 0.0001358002934813661, 'test_kendall_r': -0.6888467201936646, 'test_kendall_p_value': 0.000351362284640241, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1365, 'regressor__learning_rate': 0.008543090870036359, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 130.78001609123191, 'test_rmse': 166.6747668178576, 'test_r2': -0.602111686226213, 'test_pearson_r': array([-0.68761584]), 'test_pearson_p_value': array([0.00324272]), 'test_spearman_r': -0.8295787138977935, 'test_spearman_p_value': 7.043346761256325e-05, 'test_kendall_r': -0.7067388427960973, 'test_kendall_p_value': 0.00024542332421053986, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07903688597225085, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_ionic-EG': {'cluster size (%)': 6, 6: {'fit_time': array([ 43.76574683, 101.83635592,  42.92838526,  84.91077018,
       109.01135945, 109.77027845, 106.85026836, 104.40058756,
       100.2297833 ,  86.1128788 , 106.36008334, 107.60518122,
        92.41237307, 103.13396239,  44.86700034,  77.70961213]), 'score_time': array([0.46505189, 0.47143865, 0.47157931, 0.4668746 , 0.48644876,
       0.38927507, 0.40170836, 0.47334695, 0.57776141, 0.45544553,
       0.4261322 , 0.46695948, 0.72285128, 0.45433569, 0.44464564,
       0.44165707]), 'test_pearson_r': array([0.97696699, 0.99377346, 0.99624017, 0.96303299, 0.9965173 ,
       0.97230436, 0.98194162, 0.77572   , 0.98507577, 0.98809905,
       0.97401292, 0.9508798 , 0.94747879, 0.85809542, 0.99394015,
       0.83901218]), 'test_pearson_p': array([-1.79141514e-11, -1.03150897e-15, -2.36299015e-17, -2.29391966e-09,
       -1.65110051e-16, -3.11506178e-10, -1.60112726e-11, -4.13057286e-04,
       -4.25123622e-12, -8.78637204e-13, -2.00381413e-10, -1.62405147e-08,
       -2.57136411e-08, -2.11717964e-05, -7.91865934e-15, -4.85488290e-05]), 'test_spearman_r': array([0.63887198, 0.97237587, 0.92826504, 0.93823529, 0.85588235,
       0.86470588, 0.96983102, 0.61470588, 0.7       , 0.92941176,
       0.84032399, 0.79911721, 0.86431055, 0.62647059, 0.94845464,
       0.9       ]), 'test_spearman_p': array([-5.76809455e-03, -6.90959687e-11, -7.79295097e-08, -7.80221977e-08,
       -2.34491569e-05, -1.54423405e-05, -5.63193822e-10, -1.12794741e-02,
       -2.53509460e-03, -1.94011895e-07, -4.60153666e-05, -2.04273128e-04,
       -1.57437039e-05, -9.41397731e-03, -2.26091507e-08, -2.05108986e-06]), 'test_kendall_r': array([0.52398881, 0.92193946, 0.81919377, 0.8       , 0.73333333,
       0.71666667, 0.89540533, 0.56666667, 0.6       , 0.85      ,
       0.7113033 , 0.6443571 , 0.76799402, 0.45      , 0.85717312,
       0.76666667]), 'test_kendall_p': array([-3.42071669e-03, -3.04125538e-07, -4.73348832e-06, -1.17934846e-06,
       -1.62687222e-05, -2.87624658e-05, -1.41912826e-06, -1.65935081e-03,
       -7.73831095e-04, -1.02027025e-07, -1.27728091e-04, -5.19968854e-04,
       -3.91635038e-05, -1.51553436e-02, -4.19189674e-06, -4.72451181e-06]), 'test_rmse': array([-18.04555524, -11.8561904 , -25.10390473, -21.74224581,
       -16.64154084, -18.9091029 , -11.76857158, -43.2510844 ,
       -16.78189793, -29.72396313, -14.46179109, -29.34435283,
       -33.83334453, -21.01442602,  -9.0046811 , -35.22147802]), 'test_mae': array([-11.15035631,  -8.24570252, -12.36346374, -15.26781403,
       -11.90201994, -14.83672089,  -7.56507722, -19.53330324,
       -10.19470318, -16.44680964,  -9.30305254, -16.44456228,
       -19.68718682, -14.27237549,  -5.48797527, -20.84641134]), 'test_r2': array([0.93101996, 0.96632053, 0.99072774, 0.92389979, 0.99292775,
       0.94441813, 0.95086066, 0.58610961, 0.95450116, 0.97582704,
       0.94221144, 0.89255456, 0.8957941 , 0.55110573, 0.98463604,
       0.64504767]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1636, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([16.48597193, 11.27370501, 15.15382886, 15.37453961, 12.0779438 ,
       14.91568089,  8.20772076,  8.07249689, 15.68992496, 16.62092018,
       13.28666663, 16.106143  , 13.64048195, 15.68086982,  6.56946659,
       13.41172385]), 'score_time': array([0.09086227, 0.19187856, 0.09136915, 0.09487414, 0.10987353,
       0.09252739, 0.09455347, 0.0923605 , 0.10537934, 0.09172702,
       0.09809184, 0.0971961 , 0.08856082, 0.10143161, 0.09163952,
       0.08653712]), 'test_pearson_r': array([0.95267754, 0.98226246, 0.9256647 , 0.9984799 , 0.98955888,
       0.98984923, 0.92650927, 0.99471839, 0.94918727, 0.81038016,
       0.69592238, 0.99757439, 0.98990911, 0.96579604, 0.96039685,
       0.96162179]), 'test_pearson_p': array([-3.69727260e-09, -2.56399102e-12, -1.01005807e-07, -5.00846189e-19,
       -3.52889518e-13, -2.89889857e-13, -2.55224769e-07, -3.03161030e-15,
       -2.04935624e-08, -1.40838217e-04, -2.75269781e-03, -1.31619210e-17,
       -2.78173803e-13, -1.34155352e-09, -3.68921181e-09, -2.97055206e-09]), 'test_spearman_r': array([0.70508904, 0.80931959, 0.746931  , 0.68579857, 0.90588235,
       0.89919082, 0.66666685, 0.96176471, 0.8600893 , 0.85588235,
       0.82474316, 0.97647059, 0.97941176, 0.92058824, 0.87481685,
       0.86176471]), 'test_spearman_p': array([-1.57079456e-03, -8.30923874e-05, -5.70499036e-04, -3.35876296e-03,
       -1.36351336e-06, -2.16532951e-06, -4.79590355e-03, -2.89508013e-09,
       -1.92818221e-05, -2.34491569e-05, -8.45116225e-05, -1.00615044e-10,
       -3.98200979e-11, -4.32041043e-07, -9.22022553e-06, -1.78051844e-05]), 'test_kendall_r': array([0.5535093 , 0.65683104, 0.63200956, 0.51046472, 0.8       ,
       0.76151294, 0.61088401, 0.88333333, 0.72271459, 0.71666667,
       0.60506338, 0.91666667, 0.93333333, 0.8       , 0.77313654,
       0.76666667]), 'test_kendall_p': array([-1.98764929e-03, -2.43255252e-04, -4.44218260e-04, -5.97479842e-03,
       -1.17934846e-06, -4.10999309e-05, -1.00194553e-03, -1.43717927e-08,
       -1.04538557e-04, -2.87624658e-05, -1.16132660e-03, -1.38948965e-09,
       -3.55879882e-10, -1.17934846e-06, -3.31759538e-05, -4.72451181e-06]), 'test_rmse': array([-12.24281069, -23.58413865, -24.46056625, -12.31008994,
       -15.54420121, -27.5738049 , -31.73424565, -19.95963487,
        -8.57352574, -31.46772304, -45.05115261, -24.75033956,
       -17.06444081, -22.6436729 , -23.43302689, -20.80818938]), 'test_mae': array([ -8.30632381, -16.65169827, -12.84184108,  -7.56404889,
       -10.70353087, -15.55565521, -15.46856473, -13.59374955,
        -6.52889354, -19.29964441, -28.74783858, -12.3654992 ,
        -8.78004546, -15.9763511 , -16.58564034, -13.23522836]), 'test_r2': array([0.89518051, 0.91858259, 0.82873839, 0.99656551, 0.97214957,
       0.9795566 , 0.8349677 , 0.98914798, 0.88784629, 0.49277851,
       0.017513  , 0.9863962 , 0.93274748, 0.92837386, 0.90435767,
       0.91971646]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 288, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([121.31132817, 124.38178635, 120.60164642,  56.48174405,
       125.09476852,  55.66324186,  94.32798982, 125.99689031,
       119.7776041 , 118.99403429,  96.03230739, 112.50224352,
        99.35567927, 121.81729579,  58.35188794, 119.76914096]), 'score_time': array([0.59701991, 0.57747412, 0.56016541, 0.5612483 , 0.4945507 ,
       0.5481894 , 0.54532409, 0.48645544, 0.85319638, 0.52772212,
       0.53627706, 0.54412532, 0.54812264, 0.57027221, 0.53255248,
       0.52619886]), 'test_pearson_r': array([0.93773056, 0.99709263, 0.91691865, 0.99795972, 0.9976182 ,
       0.99721174, 0.96369258, 0.93587137, 0.64578471, 0.97409284,
       0.99307348, 0.93097943, 0.97902596, 0.95421586, 0.71099035,
       0.99000124]), 'test_pearson_p': array([-2.77268371e-08, -3.44364044e-18, -2.26677649e-07, -3.92496084e-18,
       -1.15865262e-17, -3.48734257e-17, -2.02585436e-09, -1.00840420e-07,
       -6.88749827e-03, -1.96148894e-10, -2.01388441e-14, -1.66490924e-07,
       -4.53000899e-11, -1.00152402e-08, -2.01702341e-03, -2.60938085e-13]), 'test_spearman_r': array([0.89393027, 0.89883524, 0.89460784, 0.97058824, 0.92352941,
       0.91470588, 0.94039761, 0.87564409, 0.55      , 0.63723343,
       0.92647059, 0.79117647, 0.89624748, 0.71734806, 0.52352941,
       0.95876393]), 'test_spearman_p': array([-1.32220197e-06, -9.40713499e-07, -1.26271592e-06, -4.72340113e-10,
       -3.34390001e-07, -7.01180219e-07, -6.11516412e-08, -8.82222352e-06,
       -2.72939727e-02, -7.92927989e-03, -2.56139707e-07, -2.61946448e-04,
       -2.62733392e-06, -1.75897541e-03, -3.74126481e-02, -4.87387302e-09]), 'test_kendall_r': array([0.74539253, 0.77491302, 0.76470588, 0.9       , 0.83333333,
       0.75      , 0.82845913, 0.74477639, 0.45      , 0.52720127,
       0.81666667, 0.65      , 0.79498604, 0.55940239, 0.48333333,
       0.89078776]), 'test_kendall_p': array([-3.12734232e-05, -1.49855832e-05, -2.02700778e-06, -4.72556483e-09,
       -2.44193725e-07, -8.91848950e-06, -8.12917002e-06, -6.04438410e-05,
       -1.51553436e-02, -4.52129550e-03, -5.50848432e-07, -2.15302431e-04,
       -1.85653874e-05, -2.82984697e-03, -8.59466759e-03, -1.73481918e-06]), 'test_rmse': array([-25.33767449, -14.22494605, -28.12119156, -20.28488319,
       -16.12696489, -14.92531221, -25.52481161, -27.16492955,
       -53.41813196, -21.61031271, -11.73027667, -16.60626762,
       -18.58543783, -20.12304038, -36.38826958, -13.7680356 ]), 'test_mae': array([-16.95983687, -10.96373358, -17.6300715 , -11.96576248,
       -10.7388188 , -10.63019385, -15.75530679, -10.66996514,
       -31.50360197, -13.88473122,  -7.77497282,  -9.97767667,
       -13.63211344, -10.24467992, -16.87181446,  -7.85784978]), 'test_r2': array([ 0.87381324,  0.99386721,  0.83061684,  0.99095223,  0.99377836,
        0.99383107,  0.90949943,  0.83041342, -0.40250945,  0.94030144,
        0.98471039,  0.85411457,  0.95451366,  0.89842102,  0.42082131,
        0.96780732]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.08369107458936693, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([50.89207053, 51.27255082, 48.68642926, 50.78163886, 50.18317056,
       52.48194551, 48.23537993, 51.5940907 , 49.76865387, 52.67037988,
       52.35120177, 53.25616789, 47.38436699, 51.41724658, 49.24554968,
       51.22217417]), 'score_time': array([0.45202565, 0.43444872, 0.44590664, 0.44459128, 0.46298814,
       0.45150495, 0.45545363, 0.43235064, 0.41641927, 0.46550417,
       0.45999718, 0.41600966, 0.47475719, 0.43165779, 0.42594481,
       0.43890142]), 'test_pearson_r': array([0.96022736, 0.95405545, 0.98982302, 0.99412605, 0.03838309,
       0.97579974, 0.99507219, 0.96219088, 0.92112824, 0.59111565,
       0.89669699, 0.98801794, 0.9394245 , 0.99879967, 0.96492214,
       0.99379688]), 'test_pearson_p': array([-1.02643655e-09, -2.97427489e-09, -4.06280611e-14, -6.37010385e-15,
       -8.87768014e-01, -1.22279344e-10, -1.86762717e-15, -2.67965747e-09,
       -4.12493872e-07, -1.58890990e-02, -2.55182072e-06, -9.21220658e-13,
       -6.83131313e-08, -9.59551333e-20, -1.59696113e-09, -9.32239152e-15]), 'test_spearman_r': array([0.69754601, 0.84068627, 0.96750478, 0.94521112, 0.37702504,
       0.90588235, 0.91764706, 0.81089058, 0.92194504, 0.46063294,
       0.76674046, 0.78529412, 0.77851382, 0.95588235, 0.90882353,
       0.91764706]), 'test_spearman_p': array([-1.85232185e-03, -2.37789243e-05, -2.30299590e-10, -3.43578335e-08,
       -1.49999143e-01, -1.36351336e-06, -5.52865496e-07, -1.38406226e-04,
       -3.84354536e-07, -7.25588006e-02, -5.29776409e-04, -3.12853918e-04,
       -3.81414500e-04, -7.76027446e-09, -1.10058522e-06, -5.52865496e-07]), 'test_kendall_r': array([0.59259259, 0.76470588, 0.86347451, 0.8720816 , 0.33613445,
       0.78333333, 0.83333333, 0.61088401, 0.78994386, 0.34309924,
       0.59414746, 0.61666667, 0.66109365, 0.86666667, 0.78333333,
       0.81666667]), 'test_kendall_p': array([-9.63423977e-04, -2.02700778e-06, -1.40967662e-06, -3.60101900e-06,
       -7.11456006e-02, -2.41022656e-06, -2.44193725e-07, -1.00194553e-03,
       -2.22802570e-05, -6.46317282e-02, -1.37502262e-03, -5.14926454e-04,
       -3.70305584e-04, -3.98309214e-08, -2.41022656e-06, -5.50848432e-07]), 'test_rmse': array([ -23.26305108,  -17.87931363,  -14.43883459,   -6.71945816,
       -141.33809806,  -17.58610805,  -30.31320351,  -23.59939055,
        -27.11670593,  -45.30276715,  -28.96254833,  -13.31010289,
        -24.26532803,  -11.15944749,  -21.83317138,  -24.40206946]), 'test_mae': array([-12.26755081, -11.53669152,  -9.33207912,  -4.57536801,
       -61.80816486, -11.03569442, -20.6871862 , -17.63873743,
       -15.96455774, -21.03945231, -16.8688598 , -10.37255396,
       -16.31877349,  -6.3779954 , -14.28155434, -17.42718467]), 'test_r2': array([  0.88790894,   0.90784512,   0.97626063,   0.97404655,
       -14.43167553,   0.95009614,   0.98706432,   0.91771966,
         0.84681414,  -0.56158157,   0.79327751,   0.96972105,
         0.86179337,   0.99674795,   0.92736878,   0.98594617]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.048274546274024985, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([65.98106718, 70.69971776, 67.34147811, 67.92171931, 63.73558903,
       71.48728466, 71.07806206, 74.97850919, 70.99945045, 67.58298802,
       75.22994208, 67.29798532, 71.75399017, 69.64351964, 74.75528526,
       73.05028582]), 'score_time': array([0.5465517 , 0.470999  , 0.47082973, 0.51250362, 1.24860549,
       0.45823336, 0.4716959 , 0.47214651, 0.48460484, 0.48238897,
       0.43721151, 0.46796489, 0.49966216, 0.47911835, 0.48236132,
       0.48956776]), 'test_pearson_r': array([0.98731574, 0.96590649, 0.99374712, 0.99302769, 0.96769518,
       0.97618615, 0.97876087, 0.98738729, 0.78551316, 0.99410309,
       0.98913137, 0.96740266, 0.82443232, 0.96052823, 0.70082154,
       0.99906569]), 'test_pearson_p': array([-2.10395602e-13, -3.28599542e-10, -1.06460239e-15, -2.10869082e-14,
       -9.03939572e-10, -1.09361843e-10, -4.94285004e-11, -1.31698725e-12,
       -3.10821836e-04, -6.54606431e-15, -4.66813434e-13, -9.62066857e-10,
       -8.54914455e-05, -3.60565464e-09, -2.49298661e-03, -1.66235677e-20]), 'test_spearman_r': array([0.8007359 , 0.75217213, 0.79631902, 0.83443731, 0.83443731,
       0.95882353, 0.94411765, 0.93823529, 0.84117647, 0.83063328,
       0.83149397, 0.83823529, 0.6740252 , 0.94628429, 0.55      ,
       0.96764706]), 'test_spearman_p': array([-1.12559868e-04, -4.95843269e-04, -1.30860440e-04, -5.83157783e-05,
       -5.83157783e-05, -4.82554077e-09, -3.93392920e-08, -7.80221977e-08,
       -4.44290429e-05, -6.76391672e-05, -6.54277487e-05, -5.01034210e-05,
       -4.19420702e-03, -3.00012032e-08, -2.72939727e-02, -9.13289481e-10]), 'test_kendall_r': array([0.64207079, 0.61669826, 0.61481481, 0.69456675, 0.7113033 ,
       0.85      , 0.83333333, 0.83333333, 0.7       , 0.72268908,
       0.6778302 , 0.7       , 0.57741091, 0.84519568, 0.48333333,
       0.88333333]), 'test_kendall_p': array([-3.34757024e-04, -6.66723508e-04, -6.15290831e-04, -1.83536177e-04,
       -1.27728091e-04, -1.02027025e-07, -2.44193725e-07, -2.44193725e-07,
       -4.94106357e-05, -1.04552698e-04, -2.61704221e-04, -4.94106357e-05,
       -1.87273015e-03, -5.31661458e-06, -8.59466759e-03, -1.43717927e-08]), 'test_rmse': array([-11.92115893, -16.90483602,  -8.96022181, -24.09448739,
       -33.32928933, -10.14820699, -21.15658687, -15.82195109,
       -27.91952038, -36.96549126, -11.38879567, -23.97075934,
       -39.29351471, -20.518208  , -30.52164058,  -8.28995638]), 'test_mae': array([ -7.86076122, -10.45234628,  -6.35579076, -17.13735614,
       -23.07472529,  -7.81663067, -13.63073864,  -8.80100695,
       -16.33141964, -24.95633438,  -8.03085206, -15.23627105,
       -19.84192396, -14.78516997, -14.67539192,  -6.03225019]), 'test_r2': array([0.97430464, 0.91600923, 0.98543766, 0.98565258, 0.87921571,
       0.95111533, 0.95606426, 0.96781076, 0.41534404, 0.981083  ,
       0.97832324, 0.93058941, 0.55982517, 0.90630582, 0.38106969,
       0.99808863]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1978, 'regressor__learning_rate': 0.09428005475263121, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([30.61511922, 31.02140808, 32.80873585, 30.51495719, 35.32360053,
       27.71232462, 33.46183991, 28.12940931, 33.30423522, 37.40868068,
       33.83758426, 33.04303622, 32.31071496, 32.81540418, 35.63871431,
       28.49865603]), 'score_time': array([0.31955814, 0.31282902, 0.30944133, 0.37136531, 0.29304743,
       0.30222821, 0.30385756, 0.34960032, 0.30923176, 0.26641059,
       0.3105092 , 0.2855947 , 0.29282713, 0.29031229, 0.28298903,
       0.30527306]), 'test_pearson_r': array([0.98411775, 0.77904492, 0.993639  , 0.96295799, 0.99796603,
       0.95216288, 0.98855621, 0.99010018, 0.98690067, 0.95869262,
       0.97146119, 0.99596593, 0.99042724, 0.81704682, 0.98882721,
       0.9944546 ]), 'test_pearson_p': array([-1.12559667e-12, -2.28265270e-04, -1.21030658e-15, -2.32622850e-09,
       -3.84090771e-18, -1.35402161e-08, -6.68728755e-13, -2.43456203e-13,
       -1.71438229e-12, -4.93223879e-09, -3.83411647e-10, -4.61250856e-16,
       -1.92603551e-13, -1.11717980e-04, -5.65853513e-13, -4.26124750e-15]), 'test_spearman_r': array([0.86519608, 0.66421569, 0.89816019, 0.91390753, 0.89919082,
       0.71470588, 0.89330414, 0.82941176, 0.93823529, 0.73877871,
       0.94039761, 0.96460597, 0.98674628, 0.58425329, 0.83395402,
       0.82352941]), 'test_spearman_p': array([-7.32003455e-06, -3.63634896e-03, -9.86831968e-07, -7.46809230e-07,
       -2.16532951e-06, -1.86274110e-03, -3.16996646e-06, -7.08845406e-05,
       -7.80221977e-08, -1.07878350e-03, -6.11516412e-08, -1.69905595e-09,
       -1.86016303e-12, -1.74731145e-02, -5.94370746e-05, -8.83913936e-05]), 'test_kendall_r': array([0.76470588, 0.44117647, 0.80002195, 0.79498604, 0.79498604,
       0.58333333, 0.7113033 , 0.68333333, 0.81666667, 0.62762056,
       0.82845913, 0.86926796, 0.9412097 , 0.47699162, 0.72891827,
       0.7       ]), 'test_kendall_p': array([-2.02700778e-06, -1.33675143e-02, -8.33583580e-06, -1.85653874e-05,
       -1.85653874e-05, -1.14261804e-03, -1.27728091e-04, -8.26619198e-05,
       -5.50848432e-07, -7.24551643e-04, -8.12917002e-06, -3.24532792e-06,
       -4.35438108e-07, -1.02025312e-02, -1.00087106e-04, -4.94106357e-05]), 'test_rmse': array([-12.72055593, -42.91025119, -10.57933191, -23.82442818,
        -4.70563049, -21.61965509, -36.25862   , -12.22897877,
       -15.26149955, -18.81539343, -19.50374801, -17.20083617,
       -14.45889466, -36.62662382, -19.15085623, -31.73253905]), 'test_mae': array([ -9.45666647, -28.98553884,  -7.8093398 , -13.63957218,
        -3.71485154, -11.68136231, -25.99299686,  -9.26372171,
       -10.03132762, -13.12475976, -12.84443164, -11.19489924,
       -10.49588077, -25.12116455, -11.40083917, -20.15098069]), 'test_r2': array([0.96754384, 0.44123811, 0.984908  , 0.88846122, 0.99558848,
       0.80783462, 0.97107881, 0.96286847, 0.95231397, 0.84516511,
       0.90384493, 0.99131921, 0.97708961, 0.65691187, 0.93502875,
       0.98598285]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1214, 'regressor__learning_rate': 0.01394599545919542, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([18.12296009, 18.39784122, 17.40431023, 19.57744241, 18.76849532,
       19.80838108, 20.76469493, 19.1243844 , 20.8353641 , 20.33283544,
       19.91459727, 19.78122663, 18.49467659, 18.85708737, 20.29737091,
       20.15679526]), 'score_time': array([0.20184922, 0.20088959, 0.20241046, 0.19867373, 0.19553614,
       0.20239139, 0.18438601, 0.19081259, 0.17937374, 0.20069098,
       0.2098031 , 0.19517541, 0.19896364, 0.21667695, 0.19587588,
       0.19724083]), 'test_pearson_r': array([0.9954338 , 0.9831398 , 0.99839355, 0.91270234, 0.84222071,
       0.98174563, 0.97765485, 0.90398599, 0.98160808, 0.9277038 ,
       0.97460403, 0.9681605 , 0.98045712, 0.96782916, 0.97419899,
       0.99810756]), 'test_pearson_p': array([-1.01241187e-16, -1.75705834e-12, -4.04003949e-20, -8.20442972e-07,
       -4.25484453e-05, -1.72590631e-11, -7.03122413e-11, -1.55975658e-06,
       -1.81836528e-11, -2.28300026e-07, -1.70840076e-10, -8.17651718e-10,
       -2.77261206e-11, -8.78333431e-10, -1.90645399e-10, -2.31917466e-18]), 'test_spearman_r': array([0.65358688, 0.65602164, 0.91043013, 0.84326734, 0.80794724,
       0.75055208, 0.92647059, 0.77058824, 0.81737938, 0.93823529,
       0.94690677, 0.96760046, 0.87941176, 0.95294118, 0.94705882,
       0.95      ]), 'test_spearman_p': array([-4.43460215e-03, -4.24028798e-03, -3.90816396e-07, -4.07308471e-05,
       -1.52924260e-04, -8.08474925e-04, -2.56139707e-07, -4.76822395e-04,
       -1.10408083e-04, -7.80221977e-08, -2.76967181e-08, -9.22423035e-10,
       -7.18727304e-06, -1.20965793e-08, -2.71573117e-08, -1.83461727e-08]), 'test_kendall_r': array([0.5830298 , 0.60226794, 0.81483717, 0.6778302 , 0.6778302 ,
       0.66109365, 0.8       , 0.61666667, 0.65548533, 0.8       ,
       0.85238897, 0.89078776, 0.75      , 0.85      , 0.85      ,
       0.86666667]), 'test_kendall_p': array([-1.12603557e-03, -8.16820057e-04, -5.65491557e-06, -2.61704221e-04,
       -2.61704221e-04, -3.70305584e-04, -1.17934846e-06, -5.14926454e-04,
       -4.33345797e-04, -1.17934846e-06, -5.01240995e-06, -1.73481918e-06,
       -8.91848950e-06, -1.02027025e-07, -1.02027025e-07, -3.98309214e-08]), 'test_rmse': array([-20.03099984, -37.71640519, -11.96071285, -25.49459558,
       -24.65749429, -16.81766456, -19.33341385, -24.35265318,
       -12.42508288, -32.35466464, -19.07006421, -25.20404173,
       -17.70450775, -23.66434062, -17.5494346 , -23.54435992]), 'test_mae': array([-12.41395106, -13.76921341,  -9.52707748, -13.00841882,
       -11.36186296, -11.90689388, -12.29174716, -15.31712111,
        -9.54286308, -19.0264137 , -13.05819164, -16.2192567 ,
       -12.58151822, -14.70025893, -11.16411633, -12.80519754]), 'test_r2': array([0.98762702, 0.96406131, 0.99580288, 0.80479592, 0.68211321,
       0.95191748, 0.95093743, 0.77241735, 0.95788994, 0.85644241,
       0.94234977, 0.9314343 , 0.93924878, 0.92985962, 0.9100293 ,
       0.98814911]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 805, 'regressor__learning_rate': 0.059274399928968366, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/EG-Ionic-Based Cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/EG-Ionic-Based Cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/EG-Ionic-Based Cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c035n03>
Subject: Job 294649: <NGB_Rg1 (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311> in cluster <Hazel> Done

Job <NGB_Rg1 (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311> was submitted from host <c040n04> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 18:17:47 2025
Job was executed on host(s) <6*c035n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 06:36:07 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 06:36:07 2025
Terminated at Wed Mar 12 23:23:22 2025
Results reported at Wed Mar 12 23:23:22 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_Rg1 (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "Rg1 (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "EG-Ionic-Based Cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   274673.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.94 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   60450 sec.
    Turnaround time :                            104735 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.err> for stderr output of this job.

