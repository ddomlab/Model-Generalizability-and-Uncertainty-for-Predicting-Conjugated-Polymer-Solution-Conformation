


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.067190742295384), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 577), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0818482831998474), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037584240628099834), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 764), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07425438437114894), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09141153220672509), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1164), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00017548746472794438), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 291), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06197921283090404), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 610), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0269790443454185), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1116), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014143034359021525), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 673), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05511492370809849), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02742490399819219), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1193), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.089943607666765e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007160322144798901), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 601), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008135432206808207), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 377), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030949980978462358), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 262), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 85), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07855902104992601), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1342), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.197803065616356e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 121), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.714122507180712e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029630774100805373), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06246095772373046), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 983), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04976633660364874), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 970), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020283105109469318), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1457), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014716951281073417), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1427), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057260130976752664), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1336), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06492698947634697), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 531), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07704544918531486), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034312050587145995), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 147), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08451699571754497), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1150), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05089776716929989), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 156), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06043405799752181), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022301923369872117), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09468413628448631), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1793), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007445610148082558), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06086366244697064), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1248), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07121678924527418), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 385), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057423333441885036), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 404), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041049653201270526), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1021), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06839569787692482), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 131), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.018411516473778772), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1227), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0917326829604189), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08392606568682615), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 496), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1714), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.1116930432520015e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05377985973849288), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 761), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 140), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05473391150647856), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 631), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1107), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 88), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016053798071810652), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03593617341673624), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06291228938097028), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027397375016434456), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04430075548194925), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 443), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04624888639108821), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 952), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04908098291472159), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06323034279811518), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09101447437951296), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1154), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002138022118563695), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1853), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 101), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1367), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022599453516885724), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 139), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 838), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05729285482446553), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 299), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 183), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01594647887230661), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 909), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07831207162150348), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1325), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3106790581501423e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036569065864329744), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 513), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 297), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07931032892740943), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 980), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06826859114620117), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.049931670518647726), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01934231377432868), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 937), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02263624014135126), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0992840743026196), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 154), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.5615623131153844e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1364), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 573), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 96), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 130), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 245), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037430622548408475), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 403), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 541), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013506576103225245), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1245), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026007044737854583), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 460), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08475912870893465), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1303), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 377), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6662799425789036e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07037972404747496), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05283900860921915), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1134), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.049522183679198445), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 565), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005799133763206445), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027761505517981344), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 696), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07104307623844297), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 301), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03584249112382867), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07239936086524634), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07224230937698113), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07330768328841182), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.060591617795745054), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 513), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 180), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 913), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0613601663755776), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07384549687339442), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028877458732354942), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05245248963419713), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 208), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 143), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.010746372833297e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08313743920419432), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1084), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 971), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1317), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 131), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 81), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 337), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01215251210925047), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 701), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04399932242968457), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 334), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1294), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038441580468985236), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 739), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1220), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 75), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 232), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08912791622990779), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03414252375113429), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 613), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015473038481045065), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02972094967078464), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 53), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1880563101899798e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010369970407250172), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 340), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 381), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.611570715458463e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04864090841749544), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1618), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04521856851588778), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1294), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1235), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07326800289260611), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 581), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02162460962415076), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 462), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06865876836796285), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009782752241175832), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04795633660594157), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021150253592171292), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.046518013053454654), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06449854041502759), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4103076091788285e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06396031439954479), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.520107533066256e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06449854041502759), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4103076091788285e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 333), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014044590250285796), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.5871897255499115e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 475), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07600447252537623), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 248), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 317), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1045), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0727880237480246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 56), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0374514253812812e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 172), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014020803546959967), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 844), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038472913065761956), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 194), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.869008256504128e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 247), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.94970161642406e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07404643018832631), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07322952376001607), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07782910470396087), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 64, 6: {'test_mad': 69.48759226157642, 'test_ystd': 136.34831400977086, 'test_mae': 76.5612166656268, 'test_rmse': 159.72173387152773, 'test_r2': -0.3722349864496599, 'test_pearson_r': array([-0.09767024]), 'test_pearson_p_value': array([0.21061375]), 'test_spearman_r': 0.008033572379455303, 'test_spearman_p_value': 0.9181813317792826, 'test_kendall_r': 0.017086921760620655, 'test_kendall_p_value': 0.7467310143254311, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 847, 'regressor__learning_rate': 0.08646479880356304, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 69.48759226157642, 'test_ystd': 136.34831400977086, 'test_mae': 76.46739140801685, 'test_rmse': 158.35107189957463, 'test_r2': -0.34878420283423384, 'test_pearson_r': array([-0.09855159]), 'test_pearson_p_value': array([0.20650607]), 'test_spearman_r': 0.06083896961846853, 'test_spearman_p_value': 0.4361836407456795, 'test_kendall_r': 0.05847569196781483, 'test_kendall_p_value': 0.2698321698617213, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1116, 'regressor__learning_rate': 0.0269790443454185, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 69.48759226157642, 'test_ystd': 136.34831400977086, 'test_mae': 76.61284642574535, 'test_rmse': 158.54977253237521, 'test_r2': -0.3521712644906494, 'test_pearson_r': array([-0.0881419]), 'test_pearson_p_value': array([0.25879361]), 'test_spearman_r': 0.14556973300957637, 'test_spearman_p_value': 0.06129750734808552, 'test_kendall_r': 0.10684975240869136, 'test_kendall_p_value': 0.04338225595642286, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 85, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 69.48759226157642, 'test_ystd': 136.34831400977086, 'test_mae': 76.38794387761165, 'test_rmse': 157.6133928617374, 'test_r2': -0.33624684156706164, 'test_pearson_r': array([-0.07776294]), 'test_pearson_p_value': array([0.31932616]), 'test_spearman_r': 0.1422519128308694, 'test_spearman_p_value': 0.06751244194569501, 'test_kendall_r': 0.0968720268601267, 'test_kendall_p_value': 0.06648762279618613, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 983, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 69.48759226157642, 'test_ystd': 136.34831400977086, 'test_mae': 77.4460040004836, 'test_rmse': 159.32482056000967, 'test_r2': -0.3654233701054128, 'test_pearson_r': array([-0.0965205]), 'test_pearson_p_value': array([0.21605988]), 'test_spearman_r': 0.053002447002253664, 'test_spearman_p_value': 0.49764137445956413, 'test_kendall_r': 0.020292288118829906, 'test_kendall_p_value': 0.7007132581991096, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 531, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 69.48759226157642, 'test_ystd': 136.34831400977086, 'test_mae': 77.32087543558607, 'test_rmse': 158.3843826830265, 'test_r2': -0.349351723895009, 'test_pearson_r': array([-0.07941678]), 'test_pearson_p_value': array([0.30911092]), 'test_spearman_r': 0.1499613285938912, 'test_spearman_p_value': 0.053800895052618744, 'test_kendall_r': 0.12172857304617589, 'test_kendall_p_value': 0.02123981031848132, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 385, 'regressor__learning_rate': 0.07121678924527418, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 69.48759226157642, 'test_ystd': 136.34831400977086, 'test_mae': 77.72183600918473, 'test_rmse': 159.32720276063952, 'test_r2': -0.36546420161826676, 'test_pearson_r': array([-0.09054096]), 'test_pearson_p_value': array([0.24600471]), 'test_spearman_r': 0.11339904197106913, 'test_spearman_p_value': 0.14575207169547105, 'test_kendall_r': 0.07827968050159516, 'test_kendall_p_value': 0.13809760466542176, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1107, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 50, 6: {'fit_time': array([25.99605918, 27.54705262]), 'score_time': array([0.69261909, 0.70268798]), 'test_pearson_r': array([0.91172176, 0.96447203]), 'test_pearson_p': array([-2.70871576e-51, -2.79878496e-75]), 'test_spearman_r': array([0.69601995, 0.80793225]), 'test_spearman_p': array([-3.86407063e-20, -5.89466338e-31]), 'test_kendall_r': array([0.59036954, 0.66232943]), 'test_kendall_p': array([-3.01620215e-23, -1.54737764e-28]), 'test_rmse': array([-60.25806988, -26.6130239 ]), 'test_mae': array([-27.91335041, -16.07025108]), 'test_r2': array([0.80499633, 0.92712558]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1164, 'regressor__learning_rate': 0.09141153220672509, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([46.38946867, 47.69997811]), 'score_time': array([1.16099787, 1.19554543]), 'test_pearson_r': array([0.95911979, 0.92868734]), 'test_pearson_p': array([-4.94384566e-72, -1.48247166e-56]), 'test_spearman_r': array([0.75981403, 0.77921522]), 'test_spearman_p': array([-1.0697655e-25, -1.5378823e-27]), 'test_kendall_r': array([0.61267796, 0.62668138]), 'test_kendall_p': array([-7.38533865e-25, -8.69918820e-26]), 'test_rmse': array([-41.52570533, -37.03418385]), 'test_mae': array([-21.39610247, -22.17708777]), 'test_r2': array([0.90699104, 0.86125702]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([42.58850169, 47.25926948]), 'score_time': array([1.15505171, 1.16299939]), 'test_pearson_r': array([0.32040189, 0.90503682]), 'test_pearson_p': array([-2.02140813e-04, -5.50047195e-49]), 'test_spearman_r': array([0.80401572, 0.72066621]), 'test_spearman_p': array([-1.10141929e-30, -6.08082903e-22]), 'test_kendall_r': array([0.65411378, 0.56731547]), 'test_kendall_p': array([-3.34545300e-28, -2.02719082e-21]), 'test_rmse': array([-145.87994859,  -31.48013447]), 'test_mae': array([-40.37575708, -19.64918481]), 'test_r2': array([0.0668337 , 0.81367248]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([28.44200659, 28.31218171]), 'score_time': array([0.81647658, 0.83103609]), 'test_pearson_r': array([0.87807841, 0.92827867]), 'test_pearson_p': array([-8.50757156e-43, -2.10337587e-56]), 'test_spearman_r': array([0.66857979, 0.79135171]), 'test_spearman_p': array([-3.57071271e-18, -6.43655468e-29]), 'test_kendall_r': array([0.5365759 , 0.66209228]), 'test_kendall_p': array([-1.83899395e-19, -1.31857513e-28]), 'test_rmse': array([-61.15145786, -46.24123381]), 'test_mae': array([-27.57914703, -21.47193697]), 'test_r2': array([0.74129347, 0.84744984]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1427, 'regressor__learning_rate': 0.014716951281073417, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([46.54184008, 47.7846806 ]), 'score_time': array([1.21272063, 1.13688016]), 'test_pearson_r': array([0.97161807, 0.96463578]), 'test_pearson_p': array([-5.28613127e-82, -2.09795960e-75]), 'test_spearman_r': array([0.76637804, 0.77956033]), 'test_spearman_p': array([-2.28536292e-26, -1.40910288e-27]), 'test_kendall_r': array([0.62846342, 0.64932139]), 'test_kendall_p': array([-3.95075519e-26, -1.53082417e-27]), 'test_rmse': array([-24.64562537, -35.31150188]), 'test_mae': array([-15.42715973, -19.32876086]), 'test_r2': array([0.9438631 , 0.92933401]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([10.30808568, 11.10269094]), 'score_time': array([0.31320691, 0.29445696]), 'test_pearson_r': array([0.89565687, 0.91787528]), 'test_pearson_p': array([-7.12581080e-47, -8.20271967e-53]), 'test_spearman_r': array([0.73205641, 0.74894325]), 'test_spearman_p': array([-4.39381121e-23, -1.87893342e-24]), 'test_kendall_r': array([0.58094295, 0.62679555]), 'test_kendall_p': array([-1.37050825e-22, -8.68919088e-26]), 'test_rmse': array([-49.57587033, -54.916593  ]), 'test_mae': array([-24.1047411 , -25.09885591]), 'test_r2': array([0.76293716, 0.83326097]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 496, 'regressor__learning_rate': 0.08392606568682615, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([41.32345843, 46.10801554]), 'score_time': array([1.16879034, 1.20255399]), 'test_pearson_r': array([0.94823153, 0.93476167]), 'test_pearson_p': array([-1.28048659e-65, -6.30627521e-59]), 'test_spearman_r': array([0.68584048, 0.85600913]), 'test_spearman_p': array([-2.19506824e-19, -3.34651436e-38]), 'test_kendall_r': array([0.522908  , 0.67638058]), 'test_kendall_p': array([-1.50155347e-18, -8.00965915e-30]), 'test_rmse': array([-45.73479732, -38.62361788]), 'test_mae': array([-23.00332738, -20.44660372]), 'test_r2': array([0.87554356, 0.87082141]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.027397375016434456, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 7, 6: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 36.61814083283429, 'test_rmse': 69.14057239791133, 'test_r2': -8.120227547387548, 'test_pearson_r': array([-0.15326491]), 'test_pearson_p_value': array([0.53103258]), 'test_spearman_r': 0.19700975077905986, 'test_spearman_p_value': 0.4188514052051028, 'test_kendall_r': 0.19047956493147986, 'test_kendall_p_value': 0.26116596186988394, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04908098291472159, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 62.693330687455365, 'test_rmse': 120.36201163208095, 'test_r2': -26.63876338213712, 'test_pearson_r': array([-0.2268486]), 'test_pearson_p_value': array([0.35033669]), 'test_spearman_r': 0.06332456275041211, 'test_spearman_p_value': 0.7967586169659386, 'test_kendall_r': 0.023809945616434982, 'test_kendall_p_value': 0.8883005471633357, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.022599453516885724, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 46.530899852932805, 'test_rmse': 69.39609532599684, 'test_r2': -8.187763393524323, 'test_pearson_r': array([-0.01898082]), 'test_pearson_p_value': array([0.93852402]), 'test_spearman_r': -0.01759015631955892, 'test_spearman_p_value': 0.9430209325771459, 'test_kendall_r': 0.0, 'test_kendall_p_value': 1.0, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 299, 'regressor__learning_rate': 0.05729285482446553, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 57.41736751037814, 'test_rmse': 100.39709190304646, 'test_r2': -18.230120215505575, 'test_pearson_r': array([-0.14718215]), 'test_pearson_p_value': array([0.54764862]), 'test_spearman_r': 0.19700975077905986, 'test_spearman_p_value': 0.4188514052051028, 'test_kendall_r': 0.15476464650682736, 'test_kendall_p_value': 0.3612650777126736, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 161, 'regressor__learning_rate': 0.09939793013929618, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 51.57994845834293, 'test_rmse': 80.87345400198531, 'test_r2': -11.478193502555309, 'test_pearson_r': array([-0.12314731]), 'test_pearson_p_value': array([0.61548204]), 'test_spearman_r': 0.16534746940385386, 'test_spearman_p_value': 0.49873399895718007, 'test_kendall_r': 0.1190497280821749, 'test_kendall_p_value': 0.48250784824955384, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 130, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 59.86344321127196, 'test_rmse': 119.84635642074434, 'test_r2': -26.402450565506943, 'test_pearson_r': array([-0.19327298]), 'test_pearson_p_value': array([0.42790492]), 'test_spearman_r': 0.2005277820429717, 'test_spearman_p_value': 0.4104223432474159, 'test_kendall_r': 0.17857459212326232, 'test_kendall_p_value': 0.29215216207042904, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07037972404747496, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 38.26799198267198, 'test_rmse': 67.4756676576337, 'test_r2': -7.686285782396203, 'test_pearson_r': array([-0.0551641]), 'test_pearson_p_value': array([0.82252341]), 'test_spearman_r': 0.08443275033388281, 'test_spearman_p_value': 0.7310998363916107, 'test_kendall_r': 0.05952486404108745, 'test_kendall_p_value': 0.7254852965988312, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07239936086524634, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 7, 6: {'fit_time': array([40.57769537, 46.26531959, 46.17270589, 44.27847934, 40.67218614,
       46.3723166 , 45.93834043, 48.02510405, 38.66593766, 49.5681293 ,
       48.88374901, 44.14935613, 49.37178707, 45.28909349]), 'score_time': array([0.47191429, 0.44791055, 0.4792316 , 0.4377265 , 0.46150255,
       0.46184444, 0.45765758, 0.43937874, 0.50741482, 0.44457245,
       0.44789243, 0.43758392, 0.43471122, 0.47344041]), 'test_pearson_r': array([0.9535487 , 0.99834527, 0.99250566, 0.99068344, 0.94929526,
       0.98064645, 0.83364639, 0.98139986, 0.9731381 , 0.98124258,
       0.98161698, 0.9443806 , 0.97874828, 0.8388134 ]), 'test_pearson_p': array([-2.75564173e-10, -1.56982456e-22, -5.79940623e-17, -3.66569807e-16,
       -5.71910606e-10, -1.77107652e-13, -9.26287074e-06, -6.79581121e-13,
       -1.25295900e-11, -7.26576833e-13, -6.19072658e-13, -3.86481755e-09,
       -1.95727465e-12, -1.36358605e-05]), 'test_spearman_r': array([0.5976306 , 0.9429324 , 0.94210526, 0.80175439, 0.90877193,
       0.95789474, 0.66491228, 0.5588846 , 0.89829645, 0.88235294,
       0.91894695, 0.72896241, 0.90185999, 0.95459236]), 'test_spearman_p': array([-6.88711003e-03, -1.52842515e-09, -1.72238365e-09, -3.66414135e-05,
       -7.32273180e-08, -1.21353119e-10, -1.89583152e-03, -1.59059399e-02,
       -4.16550719e-07, -1.26787153e-06, -7.24634890e-08, -5.99204377e-04,
       -3.16787438e-07, -7.87841526e-10]), 'test_kendall_r': array([0.48094048, 0.82941176, 0.8245614 , 0.66081871, 0.75438596,
       0.85964912, 0.60233918, 0.42764083, 0.78688948, 0.7254902 ,
       0.82623395, 0.60328193, 0.74343714, 0.85620915]), 'test_kendall_p': array([-4.09727060e-03, -7.85254763e-07, -1.17067315e-08, -2.38419293e-05,
       -5.24238695e-07, -1.10425357e-09, -1.58318567e-04, -1.36787602e-02,
       -5.40069919e-06, -4.30436832e-06, -1.78800684e-06, -4.88013116e-04,
       -1.81645563e-05, -5.28843419e-09]), 'test_rmse': array([-20.97196988, -10.05719663, -27.83507375, -27.80336772,
       -17.16411864, -14.57331371, -34.8494162 , -16.57288806,
       -42.70060877, -14.13234359, -20.19391892, -24.70347134,
       -14.52260513, -33.62936681]), 'test_mae': array([-12.53811114,  -8.17987578, -15.55830572, -17.33844455,
       -13.74491869,  -9.15722422, -17.67803767,  -9.19538686,
       -20.54472586, -10.84243899, -11.34921161, -16.24309933,
        -9.33090588, -18.68315284]), 'test_r2': array([0.90096409, 0.99658786, 0.98074631, 0.97883228, 0.89932527,
       0.96162017, 0.68958649, 0.95237428, 0.94563084, 0.96090284,
       0.95962722, 0.88689158, 0.95721719, 0.64161399]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1154, 'regressor__learning_rate': 0.09101447437951296, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([66.21104741, 60.42588639, 60.65927792, 69.13821602, 68.82923079,
       58.84461093, 59.6029253 , 61.9751811 , 66.3512702 , 65.93068814,
       65.59583473, 61.25897598, 59.8038187 , 60.97003102]), 'score_time': array([0.78612185, 0.77245355, 0.76603317, 0.75972676, 0.73687029,
       0.74341059, 0.76531577, 0.77941608, 0.75781775, 0.7546978 ,
       0.75307441, 0.78702259, 0.78273344, 0.76005125]), 'test_pearson_r': array([0.96195125, 0.98457666, 0.99646361, 0.99237336, 0.98506009,
       0.87762917, 0.9952787 , 0.94085694, 0.65397186, 0.9862819 ,
       0.99004246, 0.97702745, 0.96198778, 0.95449607]), 'test_pearson_p': array([-5.20110244e-11, -2.60650570e-14, -9.92406915e-20, -6.72653670e-17,
       -1.99163021e-14, -7.96841572e-07, -1.15272893e-18, -6.24702409e-09,
       -3.23980718e-03, -6.04092891e-14, -4.71058853e-15, -3.62931931e-12,
       -1.94518159e-10, -8.01063072e-10]), 'test_spearman_r': array([0.89025461, 0.89951742, 0.86040386, 0.76491228, 0.86792461,
       0.65555074, 0.90701754, 0.85227318, 0.69040248, 0.9127518 ,
       0.86319062, 0.88648091, 0.91744066, 0.87145081]), 'test_spearman_p': array([-3.30152586e-07, -1.61180294e-07, -2.29616291e-06, -1.36233942e-04,
       -1.47289867e-06, -2.31044950e-03, -8.55720926e-08, -7.09795272e-06,
       -1.51602498e-03, -1.28040412e-07, -3.98148195e-06, -9.65676574e-07,
       -8.35580353e-08, -2.48583141e-06]), 'test_kendall_r': array([0.73529412, 0.75073637, 0.71176471, 0.61403509, 0.76246662,
       0.58651279, 0.80116959, 0.71712078, 0.51633987, 0.77377465,
       0.70820053, 0.80392157, 0.79084967, 0.76065983]), 'test_kendall_p': array([-1.19475196e-05, -7.43302335e-06, -2.25088411e-05, -1.11108349e-04,
       -5.34143245e-06, -4.64037532e-04, -4.67377304e-08, -3.55564627e-05,
       -2.24413905e-03, -7.72097590e-06, -4.24489625e-05, -1.16879681e-07,
       -2.29491225e-07, -1.09773191e-05]), 'test_rmse': array([-11.07968477, -20.15646822, -19.81928714, -11.08870298,
       -34.01097739, -38.58110499, -17.57595996, -14.27231191,
       -41.76101465, -34.49231711,  -9.90819046, -22.49160555,
       -25.30918567, -23.78201245]), 'test_mae': array([ -7.61559751, -13.37232944, -12.30044828,  -6.78380585,
       -21.75905181, -19.24258779, -13.12177375,  -9.98744359,
       -23.60661514, -19.41168347,  -6.79255329, -14.18074247,
       -17.29380338, -14.98791704]), 'test_r2': array([0.90654104, 0.94586884, 0.98888051, 0.98371732, 0.96482218,
       0.7313339 , 0.99014956, 0.78642713, 0.20951262, 0.96992368,
       0.98016306, 0.89550484, 0.91891835, 0.89783753]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([80.05344367, 76.12095618, 79.40923905, 69.47880793, 77.4857862 ,
       79.4539752 , 80.68691754, 70.10675645, 75.89412022, 81.49508619,
       80.82890582, 79.15810251, 82.52600932, 70.94225669]), 'score_time': array([0.75247002, 0.73712683, 0.76144147, 0.80628753, 0.76242924,
       0.75952077, 0.78025699, 0.91095233, 0.77091861, 0.75491285,
       0.73473907, 0.7548883 , 0.77057195, 0.74640012]), 'test_pearson_r': array([0.92999163, 0.9923305 , 0.99693302, 0.99761049, 0.85942399,
       0.99166618, 0.95434186, 0.44221223, 0.9746884 , 0.9554263 ,
       0.98523805, 0.94761786, 0.68868289, 0.98967369]), 'test_pearson_p': array([-8.30503824e-09, -7.05368772e-17, -2.96250581e-20, -3.55820197e-21,
       -2.42833678e-06, -1.42593426e-16, -2.38684263e-10, -6.61325609e-02,
       -7.82559135e-12, -6.81059329e-10, -1.08263836e-13, -2.41689109e-09,
       -1.57505231e-03, -6.29387070e-15]), 'test_spearman_r': array([0.87319008, 0.93023265, 0.94210526, 0.9754386 , 0.83545423,
       0.93988601, 0.85914883, 0.42746521, 0.74896734, 0.77708978,
       0.93133724, 0.75052122, 0.38906089, 0.92768645]), 'test_spearman_p': array([-1.06192496e-06, -8.07183792e-09, -1.72238365e-09, -1.31906436e-12,
       -8.49640510e-06, -2.35329013e-09, -2.46661788e-06, -7.68199953e-02,
       -3.47856107e-04, -1.48125546e-04, -1.99988229e-08, -3.32784304e-04,
       -1.10541947e-01, -2.99166445e-08]), 'test_kendall_r': array([0.7155456 , 0.80938764, 0.83625731, 0.90643275, 0.62170355,
       0.84457841, 0.7155456 , 0.32787061, 0.63817171, 0.62091503,
       0.83934877, 0.61138004, 0.33333333, 0.82238622]), 'test_kendall_p': array([-1.94725637e-05, -1.35872010e-06, -5.55516932e-09, -2.27996852e-11,
       -2.06652455e-04, -4.63085373e-07, -1.94725637e-05, -5.80599365e-02,
       -2.33765259e-04, -1.54908277e-04, -1.22329014e-06, -4.67004659e-04,
       -5.73640516e-02, -2.12120439e-06]), 'test_rmse': array([-25.89669865, -24.86113779, -20.61644425, -13.73369878,
       -21.40657127, -25.06541198, -21.4513424 , -67.5367045 ,
       -26.78198187, -21.40252067, -15.54261191, -23.86910691,
       -39.52110298, -14.24961448]), 'test_mae': array([-16.69305453, -17.18918408, -14.62636438,  -9.21667589,
       -14.79818986, -15.16185713, -10.24343685, -35.23911785,
       -15.19469241, -13.92848849, -10.28677154, -13.37045249,
       -18.682835  ,  -9.11455862]), 'test_r2': array([ 0.86002826,  0.97942625,  0.98958742,  0.99480505,  0.73032163,
        0.98154815,  0.89502293, -2.49878372,  0.93419665,  0.90055438,
        0.96368928,  0.88082551,  0.38750399,  0.96289145]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([66.9573462 , 61.12032151, 72.60483313, 74.20133615, 71.74752522,
       67.82426047, 69.41050315, 69.49632621, 65.82336235, 60.39636946,
       65.63532782, 70.36022782, 67.81723499, 69.6833539 ]), 'score_time': array([0.76347113, 0.76518917, 0.76819968, 0.76058269, 0.75486612,
       0.76248908, 0.78681111, 0.74412179, 0.87281966, 0.84444928,
       1.032372  , 0.74263072, 0.74828172, 0.79691887]), 'test_pearson_r': array([0.96646204, 0.96570741, 0.99300928, 0.17308997, 0.96676161,
       0.99546523, 0.99136791, 0.96599231, 0.73325284, 0.92638741,
       0.97327324, 0.99614426, 0.97449411, 0.99220336]), 'test_pearson_p': array([-1.80690566e-11, -2.17751610e-11, -3.21605472e-17, -4.78549353e-01,
       -1.67593235e-11, -8.18828312e-19, -1.92074823e-16, -8.08505828e-11,
       -5.35353786e-04, -3.43528610e-08, -1.20392087e-11, -2.42652255e-18,
       -8.31416465e-12, -6.69957707e-16]), 'test_spearman_r': array([0.78358209, 0.92280702, 0.97323397, 0.62242131, 0.80526316,
       0.90350877, 0.8924968 , 0.95351291, 0.52658758, 0.71104231,
       0.94785764, 0.82043344, 0.92363261, 0.92982456]), 'test_spearman_p': array([-7.22430671e-05, -1.85857755e-08, -2.71850932e-12, -4.42752077e-03,
       -3.18868438e-05, -1.15810852e-07, -2.79211735e-07, -9.47502560e-10,
       -2.47589337e-02, -9.39104928e-04, -2.33156775e-09, -3.04208053e-05,
       -4.56845669e-08, -2.36925600e-08]), 'test_kendall_r': array([0.64117647, 0.83625731, 0.89149943, 0.51982966, 0.6374269 ,
       0.77777778, 0.75073637, 0.84870258, 0.39344474, 0.52941176,
       0.83934877, 0.64705882, 0.80392157, 0.83006536]), 'test_kendall_p': array([-1.34488990e-04, -5.55516932e-09, -1.03161918e-07, -2.35234046e-03,
       -5.28075820e-05, -1.64978258e-07, -7.43302335e-06, -9.91848331e-07,
       -2.29483078e-02, -1.67031272e-03, -1.22329014e-06, -6.99211859e-05,
       -1.16879681e-07, -2.71335027e-08]), 'test_rmse': array([ -22.30365941,  -18.46568636,  -10.62946247, -120.77479713,
        -18.39365109,  -25.9442563 ,  -23.71125648,  -17.6366749 ,
        -42.21444909,  -22.20975039,  -18.15614718,  -19.28043249,
        -16.20432624,  -26.88186483]), 'test_mae': array([-13.6868063 , -11.14596824,  -5.89306863, -47.31144642,
       -11.54276839, -17.74518592, -18.09883882, -10.78852154,
       -22.92316408, -14.26707631, -11.40209234, -14.41945037,
       -10.9871951 , -19.5558741 ]), 'test_r2': array([ 0.89484391,  0.93106893,  0.98360306, -5.58404514,  0.93406527,
        0.98311534,  0.9824387 ,  0.92823778,  0.49946544,  0.80363425,
        0.92900614,  0.98949953,  0.94769009,  0.98135527]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.02263624014135126, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([6.98229337, 5.48650789, 8.1252315 , 6.83247018, 7.90363383,
       7.7187252 , 8.38657737, 7.50522852, 6.65966964, 7.90809822,
       7.6524992 , 7.53073812, 6.43762398, 9.00571418]), 'score_time': array([0.11207271, 0.10633516, 0.11010265, 0.11689615, 0.11684394,
       0.10990167, 0.11169004, 0.10996532, 0.13520741, 0.10812116,
       0.11083221, 0.10781717, 0.11130452, 0.11241388]), 'test_pearson_r': array([0.98130183, 0.98310412, 0.97955966, 0.98745376, 0.96960247,
       0.98177872, 0.97026221, 0.7704049 , 0.99494547, 0.98409022,
       0.79791149, 0.9432462 , 0.64762912, 0.9987607 ]), 'test_pearson_p': array([-1.32442473e-13, -5.63011007e-14, -2.80752971e-13, -4.55117499e-15,
       -7.91838801e-12, -1.06501457e-13, -6.58580978e-12, -1.83377837e-04,
       -2.10839055e-17, -1.96374901e-13, -7.25623001e-05, -4.52594423e-09,
       -3.66151484e-03, -2.78667383e-22]), 'test_spearman_r': array([0.79420806, 0.88049345, 0.6174792 , 0.87143492, 0.83157895,
       0.93508772, 0.81088204, 0.65392562, 0.93078512, 0.78615744,
       0.84400871, 0.92363261, 0.57688338, 0.96904025]), 'test_spearman_p': array([-4.89659362e-05, -6.58160535e-07, -4.84905842e-03, -1.18614418e-06,
       -1.02118817e-05, -4.44614837e-09, -2.53757022e-05, -3.24273045e-03,
       -2.12844510e-08, -1.09593705e-04, -1.06747592e-05, -4.56845669e-08,
       -1.21954417e-02, -3.85140601e-11]), 'test_kendall_r': array([0.66862458, 0.74339194, 0.45427926, 0.75073637, 0.69590643,
       0.8128655 , 0.72727585, 0.48026316, 0.79605263, 0.59869717,
       0.75659532, 0.80392157, 0.52941176, 0.86928105]), 'test_kendall_p': array([-6.58512835e-05, -9.95689890e-06, -6.95838757e-03, -7.43302335e-06,
       -6.49122200e-06, -2.37852170e-08, -1.41920797e-05, -5.62226276e-03,
       -4.43734615e-06, -5.56805123e-04, -1.28761880e-05, -1.16879681e-07,
       -1.67031272e-03, -2.15825858e-09]), 'test_rmse': array([-14.13311133, -15.12804213, -11.67566084, -29.87228391,
       -20.66327126, -18.73691544, -21.24615549, -28.32948122,
       -41.86092644, -17.3498659 , -33.98139378, -26.45592776,
       -38.3876727 ,  -9.96436656]), 'test_mae': array([ -8.65531077,  -8.74997133,  -9.00854207, -20.22972368,
       -14.38168201, -12.94180787, -10.84519986, -16.83472919,
       -26.17612135, -11.35531886, -16.67434754, -18.225709  ,
       -18.41560921,  -7.02816084]), 'test_r2': array([0.96131793, 0.96198243, 0.93228658, 0.97480017, 0.92392571,
       0.96001337, 0.93272508, 0.3872476 , 0.97200123, 0.96525976,
       0.61107048, 0.880736  , 0.16698372, 0.99697778]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 245, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([57.01353526, 57.90618372, 53.60284352, 56.25817823, 54.49548769,
       59.23537636, 56.44788456, 53.13171363, 54.44419694, 54.79362965,
       52.45458364, 50.2172122 , 55.73707485, 53.07998371]), 'score_time': array([0.76053452, 0.7572701 , 0.78050804, 0.79561615, 0.74973631,
       0.76367211, 0.75763607, 0.73425245, 0.76488853, 0.76396942,
       0.74141216, 0.74540448, 0.72822475, 0.74095988]), 'test_pearson_r': array([0.95163933, 0.83056196, 0.98451961, 0.989274  , 0.95328189,
       0.99006472, 0.98501977, 0.97624534, 0.94996915, 0.99359131,
       0.98094967, 0.90126221, 0.98908568, 0.9936316 ]), 'test_pearson_p': array([-3.85555713e-10, -1.07087058e-05, -2.68907746e-14, -1.20821397e-15,
       -2.89047287e-10, -6.31848194e-16, -2.03750580e-14, -4.73233061e-12,
       -1.68631858e-09, -1.40223215e-16, -8.21708815e-13, -3.31913219e-07,
       -9.78433674e-15, -1.33340730e-16]), 'test_spearman_r': array([0.74035088, 0.7122807 , 0.93415313, 0.88987648, 0.63333333,
       0.88596491, 0.89649123, 0.82438017, 0.66150671, 0.87558091,
       0.9876161 , 0.59431596, 0.92816649, 0.82043344]), 'test_spearman_p': array([-2.89272016e-04, -6.22608763e-04, -5.00443191e-09, -3.39496215e-07,
       -3.60263590e-03, -4.50511072e-07, -2.05230922e-07, -2.58049628e-05,
       -2.79146183e-03, -1.94042647e-06, -2.67561271e-14, -9.29481569e-03,
       -2.84079717e-08, -3.04208053e-05]), 'test_kendall_r': array([0.61403509, 0.53216374, 0.82942611, 0.7679796 , 0.48538012,
       0.70760234, 0.76608187, 0.64473684, 0.56862745, 0.72131535,
       0.94771242, 0.44886689, 0.8449259 , 0.69934641]), 'test_kendall_p': array([-1.11108349e-04, -1.06332219e-03, -7.85183419e-07, -5.69875718e-06,
       -3.15421318e-03, -4.07434860e-06, -2.97692997e-07, -2.01335869e-04,
       -6.46804912e-04, -3.05216065e-05, -1.81026609e-12, -9.84447747e-03,
       -1.18091273e-06, -1.17506977e-05]), 'test_rmse': array([-22.68699189, -35.38623256, -18.19764138, -10.52056631,
       -16.18345868, -32.58894007, -13.6205652 , -11.59064903,
       -16.48524645, -20.56501328, -16.20995488, -34.38370886,
       -22.25000641, -32.1854839 ]), 'test_mae': array([-14.76524584, -23.18554076, -11.12183219,  -6.59418737,
        -9.10024074, -20.7719835 , -10.31013523,  -8.66234784,
        -9.8930018 , -13.01493778, -11.90340561, -17.58858622,
       -15.06421004, -20.17511583]), 'test_r2': array([0.887811  , 0.60641004, 0.96086971, 0.97722947, 0.85077353,
       0.97361163, 0.96541009, 0.94084092, 0.89100197, 0.98676479,
       0.95553836, 0.773997  , 0.92483114, 0.98409174]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.005799133763206445, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([67.60300779, 67.3922801 , 68.50833249, 67.18235898, 62.13305044,
       67.44904757, 61.44052172, 68.72518826, 69.14368153, 67.69616652,
       65.38273716, 66.78388309, 63.80001903, 69.67679429]), 'score_time': array([0.75247002, 0.76350188, 0.73347473, 0.77661562, 0.74006534,
       0.76816034, 0.75490236, 0.74751925, 0.75896263, 0.76651573,
       0.76990986, 0.74889851, 0.78438354, 0.75288606]), 'test_pearson_r': array([0.99519105, 0.98562536, 0.99697029, 0.96817774, 0.79540954,
       0.99057303, 0.90327895, 0.99318939, 0.8242249 , 0.96786921,
       0.97056757, 0.97041669, 0.97566385, 0.99744552]), 'test_pearson_p': array([-1.34741993e-18, -1.43765041e-14, -2.67042639e-20, -1.16311530e-11,
       -4.67939968e-05, -4.05029965e-16, -1.18081614e-07, -2.27831719e-16,
       -2.59745266e-05, -5.16426174e-11, -2.58188933e-11, -2.68841892e-11,
       -5.73201492e-12, -9.04287355e-20]), 'test_spearman_r': array([0.71873636, 0.57996575, 0.8985515 , 0.68889871, 0.69416417,
       0.95964912, 0.78367713, 0.81611614, 0.85699547, 0.96797572,
       0.89003626, 0.96697626, 0.89267286, 0.85139319]), 'test_spearman_p': array([-5.26119133e-04, -9.24261349e-03, -1.74244596e-07, -1.10623477e-03,
       -9.76350002e-04, -8.50242512e-11, -7.19990365e-05, -3.62591093e-05,
       -5.55954336e-06, -5.03056755e-11, -7.57373444e-07, -6.41243926e-11,
       -6.29098066e-07, -7.42168763e-06]), 'test_kendall_r': array([0.65689432, 0.55459399, 0.77879156, 0.55132202, 0.6099733 ,
       0.85964912, 0.6099733 , 0.67764624, 0.70820053, 0.88817712,
       0.76065983, 0.86928105, 0.77777778, 0.7124183 ]), 'test_kendall_p': array([-8.82612635e-05, -9.80551540e-04, -3.71721726e-06, -9.99532821e-04,
       -2.71868003e-04, -1.10425357e-09, -2.71868003e-04, -9.34442457e-05,
       -4.24489625e-05, -3.04174616e-07, -1.09773191e-05, -2.15825858e-09,
       -4.36097754e-07, -7.18615992e-06]), 'test_rmse': array([-18.66722072, -34.09861446, -14.00364109, -12.65824293,
       -36.31704415, -13.4441339 , -24.00099643, -10.50757281,
       -36.36567617, -22.11368318, -27.85996601, -22.9612188 ,
       -17.47061084, -31.79301193]), 'test_mae': array([-12.16187076, -16.56001968,  -9.36294861,  -7.92401927,
       -19.07073052,  -8.93363506, -15.66300773,  -7.63029936,
       -21.99512212, -15.67075066, -16.71653552, -15.22560767,
       -11.04773914, -15.914793  ]), 'test_r2': array([0.98807632, 0.96780074, 0.99366496, 0.93130135, 0.54397778,
       0.97983731, 0.75660184, 0.98387122, 0.65334109, 0.92664286,
       0.92090665, 0.93487174, 0.90366603, 0.97603854]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.028877458732354942, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 29, 6: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 102.56004627806797, 'test_rmse': 125.77720656560277, 'test_r2': -1.2912918295666942, 'test_pearson_r': array([-0.44283951]), 'test_pearson_p_value': array([7.78409552e-05]), 'test_spearman_r': -0.5981127921915372, 'test_spearman_p_value': 1.830722824316209e-08, 'test_kendall_r': -0.43295848146323673, 'test_kendall_p_value': 5.509441323035196e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 143, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 104.11968039111045, 'test_rmse': 128.68224380311798, 'test_r2': -1.3983566529054112, 'test_pearson_r': array([-0.42297006]), 'test_pearson_p_value': array([0.00017374]), 'test_spearman_r': -0.510784081184137, 'test_spearman_p_value': 3.3229940263211724e-06, 'test_kendall_r': -0.35812817372853933, 'test_kendall_p_value': 6.9363313738453145e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 337, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 149.8075552281474, 'test_rmse': 212.93751825165458, 'test_r2': -5.5672098277563276, 'test_pearson_r': array([-0.37464734]), 'test_pearson_p_value': array([0.00100679]), 'test_spearman_r': -0.5761106417462368, 'test_spearman_p_value': 7.84065223190901e-08, 'test_kendall_r': -0.41168005017392845, 'test_kendall_p_value': 2.367679286899544e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 118.70113415806198, 'test_rmse': 157.78440577456635, 'test_r2': -2.6058252326129003, 'test_pearson_r': array([-0.37720949]), 'test_pearson_p_value': array([0.00092325]), 'test_spearman_r': -0.47163551682499383, 'test_spearman_p_value': 2.2182536363152076e-05, 'test_kendall_r': -0.3312915874740585, 'test_kendall_p_value': 3.13199917509605e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.015473038481045065, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 100.69068248913327, 'test_rmse': 125.76943997197692, 'test_r2': -1.2910088691865456, 'test_pearson_r': array([-0.38215855]), 'test_pearson_p_value': array([0.00077946]), 'test_spearman_r': -0.46556086007830405, 'test_spearman_p_value': 2.9182826670228137e-05, 'test_kendall_r': -0.33079184266920053, 'test_kendall_p_value': 3.5096316421612366e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 50, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 134.30842484466118, 'test_rmse': 175.94112770102194, 'test_r2': -3.4834389334632565, 'test_pearson_r': array([-0.43269325]), 'test_pearson_p_value': array([0.00011802]), 'test_spearman_r': -0.5656556827988858, 'test_spearman_p_value': 1.5087045954960262e-07, 'test_kendall_r': -0.41808018313116674, 'test_kendall_p_value': 1.5441134924414445e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 82, 'regressor__learning_rate': 0.06396031439954479, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 126.13775263043283, 'test_rmse': 172.53629000549003, 'test_r2': -3.3115897113460386, 'test_pearson_r': array([-0.35132627]), 'test_pearson_p_value': array([0.00214598]), 'test_spearman_r': -0.4864606770020581, 'test_spearman_p_value': 1.1108169530938532e-05, 'test_kendall_r': -0.3454839806789336, 'test_kendall_p_value': 1.445006806968225e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 25, 6: {'fit_time': array([34.99068546, 34.60110474, 35.22559786, 32.30259156]), 'score_time': array([0.63624287, 0.60667515, 0.61747003, 0.62443709]), 'test_pearson_r': array([0.98951882, 0.98542199, 0.98261052, 0.95648803]), 'test_pearson_p': array([-1.14409574e-54, -3.51225330e-50, -8.70827818e-48, -7.16716746e-35]), 'test_spearman_r': array([0.78513885, 0.89500311, 0.81885944, 0.85012308]), 'test_spearman_p': array([-9.82147057e-15, -9.09593136e-24, -7.85741133e-17, -6.35244524e-19]), 'test_kendall_r': array([0.64925931, 0.78085178, 0.66522079, 0.68590007]), 'test_kendall_p': array([-2.88027119e-14, -3.96989937e-20, -6.00086760e-15, -1.33591523e-15]), 'test_rmse': array([-22.87320479, -20.48345429, -22.30460528, -22.33918196]), 'test_mae': array([-12.70350298, -12.45549488, -14.26760793, -13.45666836]), 'test_r2': array([0.97741311, 0.97018856, 0.963323  , 0.913654  ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1317, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([33.54913998, 33.29852796, 32.21517444, 33.6765337 ]), 'score_time': array([0.61233616, 0.6055305 , 0.58770776, 0.59487081]), 'test_pearson_r': array([0.92056238, 0.98379083, 0.97451993, 0.91931226]), 'test_pearson_p': array([-2.06119505e-27, -9.68287584e-49, -1.29944966e-42, -8.46923277e-27]), 'test_spearman_r': array([0.69814641, 0.84832591, 0.86328218, 0.86405111]), 'test_spearman_p': array([-1.01772478e-10, -4.69516207e-19, -2.26155164e-20, -3.83722275e-20]), 'test_kendall_r': array([0.53755146, 0.74221452, 0.68210712, 0.72930759]), 'test_kendall_p': array([-2.91488771e-10, -3.29919869e-18, -1.16648767e-15, -1.88422346e-17]), 'test_rmse': array([-50.40125901, -27.48397104, -27.50686299, -30.53888222]), 'test_mae': array([-22.94794393, -14.29921142, -17.15281635, -18.68832863]), 'test_r2': array([0.82283388, 0.9660842 , 0.94586663, 0.83713719]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1294, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([52.82788444, 50.71022487, 52.3220067 , 53.51570845]), 'score_time': array([0.9389081 , 0.92243052, 0.92497635, 0.94395447]), 'test_pearson_r': array([0.98663828, 0.98833871, 0.89710116, 0.92146655]), 'test_pearson_p': array([-2.29941749e-51, -3.23926375e-53, -4.97598420e-24, -3.78119045e-27]), 'test_spearman_r': array([0.89353704, 0.85888498, 0.77233483, 0.80543795]), 'test_spearman_p': array([-1.37607161e-23, -5.71843985e-20, -4.92452196e-14, -1.02145836e-15]), 'test_kendall_r': array([0.75951887, 0.71064068, 0.62099321, 0.67266482]), 'test_kendall_p': array([-4.49120087e-19, -6.43290555e-17, -3.12700286e-13, -5.50179213e-15]), 'test_rmse': array([-26.53867234, -22.95211421, -33.6021798 , -28.56061668]), 'test_mae': array([-17.34820076, -13.65969291, -17.53334925, -14.0123405 ]), 'test_r2': array([0.9696037 , 0.9764195 , 0.78610889, 0.84641829]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([32.50092888, 32.5604248 , 32.56167746, 31.64173651]), 'score_time': array([0.58959556, 0.59096622, 0.61050773, 0.60516524]), 'test_pearson_r': array([0.97650552, 0.95014585, 0.90629058, 0.97697611]), 'test_pearson_p': array([-1.03934154e-43, -1.37007892e-33, -3.01277146e-25, -2.61438319e-43]), 'test_spearman_r': array([0.89604405, 0.71523483, 0.77967696, 0.85124894]), 'test_spearman_p': array([-6.75416973e-24, -2.17500216e-11, -1.97949887e-14, -5.11758582e-19]), 'test_kendall_r': array([0.75098627, 0.58064516, 0.62647918, 0.73652864]), 'test_kendall_p': array([-1.59130555e-18, -8.59347548e-12, -1.89411698e-13, -8.49057564e-18]), 'test_rmse': array([-15.97566358, -48.88945825, -28.1822271 , -33.18848363]), 'test_mae': array([ -9.65347106, -24.93545099, -14.75426049, -19.32640217]), 'test_r2': array([0.95039441, 0.89838686, 0.81037641, 0.95266797]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1294, 'regressor__learning_rate': 0.04521856851588778, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([51.45250392, 51.49905586, 51.88652635, 54.03479743]), 'score_time': array([0.89429617, 0.92461419, 0.89913177, 0.91761804]), 'test_pearson_r': array([0.98530628, 0.97206114, 0.98194547, 0.96328371]), 'test_pearson_p': array([-4.49770363e-50, -2.28050583e-41, -2.81233864e-47, -4.10026029e-37]), 'test_spearman_r': array([0.73006091, 0.89849751, 0.72001925, 0.84266203]), 'test_spearman_p': array([-5.19180282e-12, -3.30658748e-24, -1.38367223e-11, -2.54839254e-18]), 'test_kendall_r': array([0.58764321, 0.76871242, 0.59584915, 0.73464496]), 'test_kendall_p': array([-5.47418067e-12, -1.53892690e-19, -2.77030961e-12, -1.13899053e-17]), 'test_rmse': array([-20.80659787, -22.87494721, -29.07902383, -30.15403745]), 'test_mae': array([-12.49058064, -14.62196423, -17.24083666, -15.30282272]), 'test_r2': array([0.96957798, 0.92926789, 0.96318564, 0.92531897]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([16.5799458 , 16.74464202, 17.78122807, 16.78657079]), 'score_time': array([0.42128801, 0.40442801, 0.41728783, 0.40132499]), 'test_pearson_r': array([0.9141651 , 0.97879443, 0.98760951, 0.92113652]), 'test_pearson_p': array([-2.14280172e-26, -4.25951463e-45, -2.16526730e-52, -4.28473548e-27]), 'test_spearman_r': array([0.86223815, 0.76567332, 0.88464145, 0.74786389]), 'test_spearman_p': array([-2.82692242e-20, -1.09387064e-13, -1.50042968e-22, -1.23992733e-12]), 'test_kendall_r': array([0.70293766, 0.56000059, 0.71710877, 0.6187058 ]), 'test_kendall_p': array([-1.37942620e-16, -4.71545615e-11, -3.58139767e-17, -7.05484423e-13]), 'test_rmse': array([-31.01972477, -26.14367965, -17.27100223, -61.97019797]), 'test_mae': array([-20.03520869, -15.24254337, -12.35253795, -29.85142314]), 'test_r2': array([0.81794329, 0.95575862, 0.97437037, 0.84136481]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 849, 'regressor__learning_rate': 0.014044590250285796, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([52.51614761, 53.12523603, 54.31147647, 55.93522692]), 'score_time': array([0.92749763, 0.94501996, 0.91389394, 0.91623473]), 'test_pearson_r': array([0.97991262, 0.93552875, 0.95989583, 0.97012569]), 'test_pearson_p': array([-7.86168419e-46, -3.61212306e-30, -1.67325612e-36, -7.59082530e-40]), 'test_spearman_r': array([0.68733078, 0.8309673 , 0.90238814, 0.89496881]), 'test_spearman_p': array([-2.55973463e-10, -1.08027027e-17, -1.02540618e-24, -2.07513287e-23]), 'test_kendall_r': array([0.58044169, 0.66924013, 0.74457487, 0.74081439]), 'test_kendall_p': array([-1.12221933e-11, -3.84337197e-15, -2.47942006e-18, -5.39179530e-18]), 'test_rmse': array([-37.30006538, -25.28909472, -23.34673887, -32.78256773]), 'test_mae': array([-16.15977387, -15.48373735, -14.41597636, -18.94204395]), 'test_r2': array([0.95183257, 0.86128523, 0.91880809, 0.93455244]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07782910470396087, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c207n09>
Subject: Job 294646: <NGB_Rg1 (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311> in cluster <Hazel> Done

Job <NGB_Rg1 (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311> was submitted from host <c040n04> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 18:17:47 2025
Job was executed on host(s) <6*c207n09>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 05:18:13 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 05:18:13 2025
Terminated at Fri Mar 14 09:05:25 2025
Results reported at Fri Mar 14 09:05:25 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_Rg1 (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "Rg1 (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM3 Mordred cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   832520.50 sec.
    Max Memory :                                 3 GB
    Average Memory :                             2.81 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              26
    Max Threads :                                29
    Run time :                                   186456 sec.
    Turnaround time :                            226058 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.err> for stderr output of this job.

