


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006301638159165984), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004169700989747704), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 478), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04126891837544144), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 192), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004866083656078861), ('regressor__regressor__max_depth', 26), ('regressor__regressor__n_estimators', 1446), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09900421675060596), ('regressor__regressor__max_depth', 2249), ('regressor__regressor__n_estimators', 216), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014154037319374844), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 438), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022402656615481322), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 238), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 132), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0244693981586138), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 174), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01141485645552615), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054611118933333466), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044142961484786865), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 163), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09964956943278974), ('regressor__regressor__max_depth', 37), ('regressor__regressor__n_estimators', 263), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08122210979569741), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 160), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 248), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__max_depth', 1264), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0028232750440390217), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1400), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09912783197084506), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 122), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06220680952458128), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 103), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06430422638335676), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 348), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002861049879148768), ('regressor__regressor__max_depth', 3169), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001478872624030459), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006678371951094242), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1408), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00937399114130574), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0636380275390342), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 270), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0023878802071886857), ('regressor__regressor__max_depth', 6612), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07144648941556735), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 257), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0056446688924867835), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0011576315747220398), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022006462310923288), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 454), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021515897686158574), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.033495160933628365), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027906399073897938), ('regressor__regressor__max_depth', 9624), ('regressor__regressor__n_estimators', 156), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__max_depth', 41), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06932966365817923), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025454649768777), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004553430532180703), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04439146658673526), ('regressor__regressor__max_depth', 7163), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004631387991743574), ('regressor__regressor__max_depth', 9841), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001916957482922611), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1464), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0015237409737781564), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1359), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06206624433108791), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1378), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0018906632583248512), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03437207373023222), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1048), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04043514983864281), ('regressor__regressor__max_depth', 7159), ('regressor__regressor__n_estimators', 1084), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 523), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02666301886779036), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0017655051991186724), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1017), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0784835810284033), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0015686118408646352), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024879940935139965), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 145), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0016782628487438305), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08722595424697485), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 549), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009658578773779758), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06719393641583839), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 139), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 67), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06327641003329663), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 706), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09416152933479918), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 203), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009459303338773827), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09900421675060596), ('regressor__regressor__max_depth', 2249), ('regressor__regressor__n_estimators', 216), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__max_depth', 269), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05458867333174918), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__max_depth', 269), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08053109864671743), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 90), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0787583827314452), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1361), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054611118933333466), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044142961484786865), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 163), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09964956943278974), ('regressor__regressor__max_depth', 37), ('regressor__regressor__n_estimators', 263), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08122210979569741), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 160), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 248), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004977466279669213), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1339), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 46), ('regressor__regressor__n_estimators', 245), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 99), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050897072548123666), ('regressor__regressor__max_depth', 9922), ('regressor__regressor__n_estimators', 516), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03806035710485996), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 239), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06430422638335676), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 348), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002861049879148768), ('regressor__regressor__max_depth', 3169), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06505303920727358), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 491), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007762305292477814), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1231), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020639613318847706), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 283), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0636380275390342), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 270), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0023878802071886857), ('regressor__regressor__max_depth', 6612), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07144648941556735), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 257), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0056446688924867835), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03666856895913019), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03673169668606278), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 885), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004036711594297163), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03695225866928964), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__max_depth', 41), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06932966365817923), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025454649768777), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004553430532180703), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08574959694891862), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04287985967279729), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 195), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1356), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06686701732971839), ('regressor__regressor__max_depth', 30), ('regressor__regressor__n_estimators', 798), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.040412532330339944), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0018906632583248512), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03437207373023222), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1048), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04043514983864281), ('regressor__regressor__max_depth', 7159), ('regressor__regressor__n_estimators', 1084), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 523), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02666301886779036), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1340), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01877909265010411), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 407), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09141221012425982), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 68), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04771138520324938), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 754), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07922430773878078), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0016782628487438305), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08722595424697485), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 549), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009658578773779758), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06719393641583839), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 139), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 67), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 227), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 183), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025543831590648474), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 525), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09900421675060596), ('regressor__regressor__max_depth', 2249), ('regressor__regressor__n_estimators', 216), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06949628048756905), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 192), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09998330098504066), ('regressor__regressor__max_depth', 42), ('regressor__regressor__n_estimators', 204), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022525607611167706), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1256), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 116), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03510113763135458), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054611118933333466), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044142961484786865), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 163), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09964956943278974), ('regressor__regressor__max_depth', 37), ('regressor__regressor__n_estimators', 263), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08122210979569741), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 160), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 248), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05247360515883869), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 234), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002827896933349552), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1654), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 241), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 360), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06128115665546578), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 189), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06430422638335676), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 348), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002861049879148768), ('regressor__regressor__max_depth', 3169), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010392797628932474), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03277362270743542), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 91), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022195450383425935), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1120), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06700466939122199), ('regressor__regressor__max_depth', 13), ('regressor__regressor__n_estimators', 1200), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0636380275390342), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 270), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0023878802071886857), ('regressor__regressor__max_depth', 6612), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07144648941556735), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 257), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0056446688924867835), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03492110916300736), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 144), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026357505901111303), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1107), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__max_depth', 41), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06932966365817923), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025454649768777), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004553430532180703), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055773557496576434), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 129), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015288939798700194), ('regressor__regressor__max_depth', 1112), ('regressor__regressor__n_estimators', 375), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004844454681994379), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07313513565443447), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 447), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 72), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0018906632583248512), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03437207373023222), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1048), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04043514983864281), ('regressor__regressor__max_depth', 7159), ('regressor__regressor__n_estimators', 1084), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 523), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02666301886779036), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09799824055869462), ('regressor__regressor__max_depth', 9337), ('regressor__regressor__n_estimators', 1290), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07346665090234836), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 69), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059998010285027915), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 354), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061490925545115954), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 367), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06126267509265128), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 432), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0016782628487438305), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08722595424697485), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 549), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009658578773779758), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06719393641583839), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 139), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 67), ('regressor__regressor__n_jobs', -2)])


{'CO_0': {'cluster size (%)': 64, 6: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5060936354695397, 'test_rmse': 0.6446029972361816, 'test_r2': -0.09827662826880879, 'test_pearson_r': array([0.41489875]), 'test_pearson_p_value': array([2.73243085e-08]), 'test_spearman_r': 0.4132077873417339, 'test_spearman_p_value': 3.1506414372625104e-08, 'test_kendall_r': 0.31999499103929835, 'test_kendall_p_value': 1.5297388680453874e-09, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.04126891837544144, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 192, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5108822040495467, 'test_rmse': 0.6465052974328017, 'test_r2': -0.10476848347379741, 'test_pearson_r': array([0.41799387]), 'test_pearson_p_value': array([2.10112623e-08]), 'test_spearman_r': 0.40538198206423515, 'test_spearman_p_value': 6.028782236283462e-08, 'test_kendall_r': 0.3001985461638709, 'test_kendall_p_value': 1.2804829237672185e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 132, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5158287856200455, 'test_rmse': 0.6547496170740513, 'test_r2': -0.13312444020101366, 'test_pearson_r': array([0.40954047]), 'test_pearson_p_value': array([4.27926265e-08]), 'test_spearman_r': 0.4085014594776589, 'test_spearman_p_value': 4.663933247253166e-08, 'test_kendall_r': 0.31342132071478307, 'test_kendall_p_value': 2.8072979535746856e-09, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.07352481813242628, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 1264, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1246, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.51748712386059, 'test_rmse': 0.6570127368384905, 'test_r2': -0.1409711899309527, 'test_pearson_r': array([0.40564381]), 'test_pearson_p_value': array([5.90087832e-08]), 'test_spearman_r': 0.40798918119308947, 'test_spearman_p_value': 4.865610055920371e-08, 'test_kendall_r': 0.3098032636322949, 'test_kendall_p_value': 4.3868393585464035e-09, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.006678371951094242, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.47780590474436213, 'test_rmse': 0.6250180669114509, 'test_r2': -0.0325527396991363, 'test_pearson_r': array([0.39240648]), 'test_pearson_p_value': array([1.70552025e-07]), 'test_spearman_r': 0.40347961825691747, 'test_spearman_p_value': 7.041331571907314e-08, 'test_kendall_r': 0.30981356411491445, 'test_kendall_p_value': 6.0510693317365854e-09, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.021515897686158574, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 178, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5157842631047831, 'test_rmse': 0.6553937050866518, 'test_r2': -0.13535488317801936, 'test_pearson_r': array([0.40434628]), 'test_pearson_p_value': array([6.56130266e-08]), 'test_spearman_r': 0.40562032664701053, 'test_spearman_p_value': 5.912243226440439e-08, 'test_kendall_r': 0.3098416355181986, 'test_kendall_p_value': 4.814125237675154e-09, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.004631387991743574, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 9841, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.5367222089541186, 'test_ystd': 0.6150868604248626, 'test_mae': 0.5150368770927647, 'test_rmse': 0.6532390973743136, 'test_r2': -0.1279021922147794, 'test_pearson_r': array([0.40887407]), 'test_pearson_p_value': array([4.52231022e-08]), 'test_spearman_r': 0.4089817275524044, 'test_spearman_p_value': 4.4821679951254716e-08, 'test_kendall_r': 0.3131149172430366, 'test_kendall_p_value': 2.9053692061516144e-09, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.0784835810284033, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 50, 6: {'fit_time': array([2.45084071, 2.47507358]), 'score_time': array([0.11269283, 0.1125083 ]), 'test_pearson_r': array([0.85992496, 0.8967973 ]), 'test_pearson_p': array([-3.36242337e-39, -8.30583711e-47]), 'test_spearman_r': array([0.85526754, 0.8870296 ]), 'test_spearman_p': array([-2.33563735e-38, -1.88600428e-44]), 'test_kendall_r': array([0.74671251, 0.77470646]), 'test_kendall_p': array([-3.16863182e-36, -1.76787727e-38]), 'test_rmse': array([-0.34489928, -0.27622273]), 'test_mae': array([-0.1615249 , -0.13249668]), 'test_r2': array([0.72427018, 0.78712452]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([1.82558227, 1.67887211]), 'score_time': array([0.11156988, 0.1043396 ]), 'test_pearson_r': array([0.88073753, 0.82157445]), 'test_pearson_p': array([-2.26425908e-43, -8.68625416e-33]), 'test_spearman_r': array([0.87387393, 0.81092162]), 'test_spearman_p': array([-6.48493347e-42, -2.40910050e-31]), 'test_kendall_r': array([0.77301017, 0.68501519]), 'test_kendall_p': array([-1.33357551e-38, -1.65023556e-30]), 'test_rmse': array([-0.32810931, -0.35603204]), 'test_mae': array([-0.14575123, -0.19584787]), 'test_r2': array([0.7512091 , 0.64062396]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.044142961484786865, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 163, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([17.01225019, 22.21182823]), 'score_time': array([0.11579704, 0.10918593]), 'test_pearson_r': array([0.75627692, 0.89169061]), 'test_pearson_p': array([-2.40811812e-25, -1.51142381e-45]), 'test_spearman_r': array([0.82266612, 0.90633205]), 'test_spearman_p': array([-3.45627285e-33, -2.39774952e-49]), 'test_kendall_r': array([0.73703887, 0.81477574]), 'test_kendall_p': array([-2.51557060e-35, -2.38486036e-42]), 'test_rmse': array([-0.42558416, -0.29289983]), 'test_mae': array([-0.17589227, -0.1272046 ]), 'test_r2': array([0.5424504 , 0.78005357]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.002861049879148768, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 3169, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([1.36412382, 1.46632504]), 'score_time': array([0.10781813, 0.15214014]), 'test_pearson_r': array([0.87564224, 0.88259763]), 'test_pearson_p': array([-2.78493111e-42, -1.87954228e-43]), 'test_spearman_r': array([0.90120947, 0.88906982]), 'test_spearman_p': array([-2.57981787e-48, -6.33527052e-45]), 'test_kendall_r': array([0.79085894, 0.78812369]), 'test_kendall_p': array([-2.25157795e-40, -7.41104472e-40]), 'test_rmse': array([-0.32483629, -0.30798178]), 'test_mae': array([-0.1487296 , -0.13753879]), 'test_r2': array([0.73286596, 0.75974694]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.09939793013929618, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 4800, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 161, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([7.16814041, 8.25427604]), 'score_time': array([0.12167263, 0.17891836]), 'test_pearson_r': array([0.8971027 , 0.84188082]), 'test_pearson_p': array([-3.05848660e-47, -7.98335882e-36]), 'test_spearman_r': array([0.90024707, 0.85377657]), 'test_spearman_p': array([-4.64980222e-48, -8.25690323e-38]), 'test_kendall_r': array([0.78320354, 0.77517301]), 'test_kendall_p': array([-1.20213978e-39, -1.55932186e-38]), 'test_rmse': array([-0.28906733, -0.34747046]), 'test_mae': array([-0.14747088, -0.15076571]), 'test_r2': array([0.78843747, 0.69364525]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.014798641065097335, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 41, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 720, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([2.74602604, 2.99640036]), 'score_time': array([0.10430551, 0.10025859]), 'test_pearson_r': array([0.91108896, 0.88793165]), 'test_pearson_p': array([-4.19166966e-51, -1.16734928e-44]), 'test_spearman_r': array([0.89100805, 0.88997055]), 'test_spearman_p': array([-9.96235256e-46, -3.88723832e-45]), 'test_kendall_r': array([0.74502246, 0.79513877]), 'test_kendall_p': array([-4.74643993e-36, -2.02240006e-40]), 'test_rmse': array([-0.27268086, -0.30087486]), 'test_mae': array([-0.15541746, -0.1368771 ]), 'test_r2': array([0.80499333, 0.77885513]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.02666301886779036, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 289, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([1.65879965, 2.04470229]), 'score_time': array([0.10144639, 0.09675527]), 'test_pearson_r': array([0.88058438, 0.92097787]), 'test_pearson_p': array([-2.44571766e-43, -7.85322865e-54]), 'test_spearman_r': array([0.8897701 , 0.91200577]), 'test_spearman_p': array([-1.97093360e-45, -5.44392495e-51]), 'test_kendall_r': array([0.80838686, 0.78103154]), 'test_kendall_p': array([-4.66047675e-42, -3.54037679e-39]), 'test_rmse': array([-0.31308016, -0.24422289]), 'test_mae': array([-0.1333686 , -0.13503827]), 'test_r2': array([0.74466524, 0.84718619]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08722595424697485, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 549, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 7, 6: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5224047318233058, 'test_rmse': 0.7809066011732751, 'test_r2': -3.326993284341796, 'test_pearson_r': array([-0.31980943]), 'test_pearson_p_value': array([0.18195716]), 'test_spearman_r': -0.2688927943760985, 'test_spearman_p_value': 0.2656379446083682, 'test_kendall_r': -0.18934911242603553, 'test_kendall_p_value': 0.2617464448954574, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 50, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5279447368518868, 'test_rmse': 0.7857211830088827, 'test_r2': -3.3805128315608073, 'test_pearson_r': array([-0.33041853]), 'test_pearson_p_value': array([0.16707707]), 'test_spearman_r': -0.24253075571177504, 'test_spearman_p_value': 0.31709863077026473, 'test_kendall_r': -0.20118343195266272, 'test_kendall_p_value': 0.2330985982447037, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.0787583827314452, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1361, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5388333059587348, 'test_rmse': 0.7926612192616023, 'test_r2': -3.4582380591548736, 'test_pearson_r': array([-0.33925555]), 'test_pearson_p_value': array([0.15533418]), 'test_spearman_r': -0.2987697715289983, 'test_spearman_p_value': 0.21404628824496755, 'test_kendall_r': -0.2366863905325444, 'test_kendall_p_value': 0.16066423799712393, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 46, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 245, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.536601253180792, 'test_rmse': 0.7888039528531776, 'test_r2': -3.4149540679272476, 'test_pearson_r': array([-0.34974538]), 'test_pearson_p_value': array([0.14214932]), 'test_spearman_r': -0.2987697715289983, 'test_spearman_p_value': 0.21404628824496755, 'test_kendall_r': -0.2366863905325444, 'test_kendall_p_value': 0.16066423799712393, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.09939793013929618, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 4800, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 161, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5277482035260823, 'test_rmse': 0.777854294104697, 'test_r2': -3.293233803635874, 'test_pearson_r': array([-0.33304639]), 'test_pearson_p_value': array([0.16352369]), 'test_spearman_r': -0.22495606326889284, 'test_spearman_p_value': 0.35447870831789496, 'test_kendall_r': -0.20118343195266272, 'test_kendall_p_value': 0.2330985982447037, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.03695225866928964, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5364421746580595, 'test_rmse': 0.7870743960125113, 'test_r2': -3.3956145536997457, 'test_pearson_r': array([-0.35058264]), 'test_pearson_p_value': array([0.14113173]), 'test_spearman_r': -0.2987697715289983, 'test_spearman_p_value': 0.21404628824496755, 'test_kendall_r': -0.2366863905325444, 'test_kendall_p_value': 0.16066423799712393, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1356, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.5364421746580595, 'test_rmse': 0.7870743960125113, 'test_r2': -3.3956145536997457, 'test_pearson_r': array([-0.35058264]), 'test_pearson_p_value': array([0.14113173]), 'test_spearman_r': -0.2987697715289983, 'test_spearman_p_value': 0.21404628824496755, 'test_kendall_r': -0.2366863905325444, 'test_kendall_p_value': 0.16066423799712393, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1340, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 7, 6: {'fit_time': array([5.64159536, 3.72870183, 5.81797838, 5.7376678 , 5.03467345,
       5.53879952, 4.14661455, 5.0277288 , 3.84596848, 5.69901609,
       4.82635212, 5.55529022, 4.82951784, 5.44140363]), 'score_time': array([0.10587454, 0.11349177, 0.10049725, 0.10406208, 0.18338418,
       0.11027789, 0.11262751, 0.11415148, 0.18259621, 0.10531402,
       0.12737799, 0.11176586, 0.11294699, 0.1583302 ]), 'test_pearson_r': array([0.89321584, 0.99347567, 0.98771321, 0.96940596, 0.60176723,
       0.99333874, 0.86759658, 0.96932315, 0.93551679, 0.96418532,
       0.9930846 , 0.95125865, 0.98440768, 0.98271928]), 'test_pearson_p': array([-2.64396665e-07, -1.79111387e-17, -3.81386947e-15, -8.35863122e-12,
       -6.41323748e-03, -2.13597417e-17, -1.50253419e-06, -3.58189330e-11,
       -1.22634672e-08, -1.21640289e-10, -2.57348764e-16, -1.37402708e-09,
       -1.67297452e-13, -3.78792520e-13]), 'test_spearman_r': array([0.85263158, 0.97805092, 0.94736842, 0.94210526, 0.71929825,
       0.98245614, 0.86491228, 0.94883835, 0.94166249, 0.93188854,
       0.99122367, 0.95405279, 0.97830631, 0.96491228]), 'test_spearman_p': array([-3.53981453e-06, -5.11677137e-13, -7.80082922e-10, -1.72238365e-09,
       -5.18354290e-04, -7.73558991e-14, -1.76513030e-06, -2.00924333e-09,
       -5.61230323e-09, -1.87828793e-08, -1.72171485e-15, -8.64446630e-10,
       -2.30443206e-12, -1.03472876e-10]), 'test_kendall_r': array([0.75438596, 0.9       , 0.87134503, 0.83625731, 0.67251462,
       0.91812865, 0.77777778, 0.87132984, 0.86557842, 0.83006536,
       0.94426737, 0.8524636 , 0.91449348, 0.86928105]), 'test_kendall_p': array([-5.24238695e-07, -8.35279080e-08, -4.58322529e-10, -5.55516932e-09,
       -1.56889756e-05, -7.20796807e-12, -1.64978258e-07, -5.42460793e-07,
       -5.63141283e-07, -2.71335027e-08, -4.80698932e-08, -8.32299419e-07,
       -1.34526112e-07, -2.15825858e-09]), 'test_rmse': array([-0.27791933, -0.08149525, -0.12804959, -0.17467355, -0.50319335,
       -0.07946063, -0.35853806, -0.16235008, -0.23354297, -0.15732878,
       -0.07454196, -0.18497365, -0.11070071, -0.08832024]), 'test_mae': array([-0.12842832, -0.04874483, -0.07770959, -0.0906649 , -0.19667492,
       -0.05553965, -0.14834443, -0.06740453, -0.09355605, -0.09598152,
       -0.05389875, -0.12885822, -0.06212148, -0.06363387]), 'test_r2': array([0.77635641, 0.98526768, 0.9655985 , 0.93351643, 0.10317679,
       0.98444915, 0.72304812, 0.93671339, 0.86482177, 0.92545281,
       0.98551483, 0.89658037, 0.96392094, 0.96263006]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([2.85976219, 4.05990243, 3.62021375, 3.99216747, 3.2835691 ,
       2.66169906, 4.27392769, 4.84481382, 4.82202744, 4.38245416,
       3.21589899, 4.71320248, 4.42925906, 4.64962387]), 'score_time': array([0.19659758, 0.12311912, 0.11635876, 0.12459755, 0.16709304,
       0.11233974, 0.11038542, 0.12042952, 0.11625552, 0.11033392,
       0.13709903, 0.11676192, 0.10965061, 0.11884761]), 'test_pearson_r': array([0.98305392, 0.91799418, 0.98975064, 0.9820831 , 0.73583617,
       0.84050307, 0.9940664 , 0.97471688, 0.97753425, 0.98794419,
       0.99207055, 0.95679165, 0.98913694, 0.93727222]), 'test_pearson_p': array([-5.77293157e-14, -3.05630909e-08, -8.22323245e-16, -9.23881750e-14,
       -3.29287971e-04, -6.63856812e-06, -8.01007431e-18, -7.75610775e-12,
       -3.04096370e-12, -2.16063485e-14, -7.66566934e-16, -5.33304770e-10,
       -9.42425931e-15, -9.88905219e-09]), 'test_spearman_r': array([0.92361721, 0.89552273, 0.97366111, 0.93157895, 0.74275709,
       0.91754386, 0.99122807, 0.95611784, 0.94785764, 0.95611784,
       0.98657077, 0.9504644 , 0.98555212, 0.87764596]), 'test_spearman_p': array([-1.70392493e-08, -2.21384800e-07, -2.37451687e-12, -6.87164496e-09,
       -2.69684992e-04, -3.19693619e-08, -2.20085178e-16, -6.02298234e-10,
       -2.33156775e-09, -6.02298234e-10, -5.09977899e-14, -1.55976502e-09,
       -9.12417033e-14, -1.70877825e-06]), 'test_kendall_r': array([0.81764706, 0.78236648, 0.91176471, 0.8245614 , 0.71177702,
       0.8128655 , 0.95321637, 0.8524636 , 0.8524636 , 0.86557842,
       0.94080983, 0.85620915, 0.93464052, 0.73443018]), 'test_kendall_p': array([-1.12198370e-06, -3.18078416e-06, -5.65458167e-08, -1.17067315e-08,
       -2.25073168e-05, -2.37852170e-08, -1.16815227e-13, -8.32299419e-07,
       -8.32299419e-07, -5.63141283e-07, -5.81823612e-08, -5.28843419e-09,
       -7.81116540e-12, -2.18253405e-05]), 'test_rmse': array([-0.0928169 , -0.2668494 , -0.09446777, -0.12547602, -0.5347441 ,
       -0.38135979, -0.07420631, -0.11569061, -0.12813003, -0.10286422,
       -0.09747179, -0.15473571, -0.09577486, -0.22624995]), 'test_mae': array([-0.05142505, -0.11677759, -0.06742052, -0.07873519, -0.20900592,
       -0.1717062 , -0.0489592 , -0.08663428, -0.09294601, -0.06301398,
       -0.06732512, -0.10501236, -0.0605942 , -0.12740253]), 'test_r2': array([0.9659836 , 0.83623543, 0.97807548, 0.95403752, 0.42979317,
       0.67454184, 0.98790657, 0.94401067, 0.95442974, 0.97203108,
       0.97722654, 0.91290347, 0.97711322, 0.81817614]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.044142961484786865, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 163, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([50.63183832, 45.45047879, 52.45886302, 57.66603041, 37.03365636,
       55.6968658 , 57.74206543, 39.74853086, 37.999259  , 56.15585256,
       57.15156698, 54.19240475, 56.54977202, 58.56879997]), 'score_time': array([0.11838341, 0.27918839, 0.12224555, 0.10211492, 0.12599111,
       0.12295938, 0.10228825, 0.12172127, 0.12504792, 0.11576605,
       0.10697651, 0.19432378, 0.10865617, 0.10655713]), 'test_pearson_r': array([0.91849236, 0.97584097, 0.99152982, 0.98876352, 0.96667203,
       0.98920727, 0.98354599, 0.44288021, 0.98270341, 0.96965277,
       0.99081023, 0.91401004, 0.84132753, 0.99343564]), 'test_pearson_p': array([-2.90706499e-08, -1.14784091e-12, -1.63610624e-16, -1.79074272e-15,
       -1.71419371e-11, -1.27332835e-15, -4.50130039e-14, -6.56761522e-02,
       -3.81566202e-13, -3.28874523e-11, -2.48505364e-15, -1.14456330e-07,
       -1.21254381e-05, -1.69823466e-16]), 'test_spearman_r': array([0.89951742, 0.96445819, 0.9877193 , 0.97368421, 0.93549812,
       0.98727522, 0.9837649 , 0.59266915, 0.96384349, 0.94427245,
       0.98915862, 0.90580147, 0.86171311, 0.98553772]), 'test_spearman_p': array([-1.61180294e-07, -2.93899065e-11, -3.79790244e-15, -2.35705500e-12,
       -4.21876611e-09, -5.12890798e-15, -4.01991254e-14, -9.54244177e-03,
       -1.31102802e-10, -3.92399721e-09, -9.27540331e-15, -2.31150851e-07,
       -4.31768401e-06, -9.19675963e-14]), 'test_kendall_r': array([0.8211179 , 0.89149943, 0.92982456, 0.91812865, 0.80938764,
       0.93842046, 0.9266902 , 0.57705228, 0.87501894, 0.83006536,
       0.94426737, 0.82403396, 0.77777778, 0.92765165]), 'test_kendall_p': array([-9.53596222e-07, -1.03161918e-07, -2.06767062e-12, -7.20796807e-12,
       -1.35872010e-06, -2.12970819e-08, -3.18217344e-08, -8.51059259e-04,
       -4.53574602e-07, -2.71335027e-08, -4.80698932e-08, -2.40473321e-06,
       -4.36097754e-07, -8.87180979e-08]), 'test_rmse': array([-0.26205169, -0.14800182, -0.09913501, -0.10229006, -0.13109444,
       -0.10637335, -0.09916489, -0.53836354, -0.12849809, -0.14282576,
       -0.09516102, -0.28504606, -0.36669418, -0.07406901]), 'test_mae': array([-0.11365561, -0.07222114, -0.07602207, -0.06185123, -0.08870113,
       -0.07445755, -0.06714267, -0.22740318, -0.08488617, -0.09534008,
       -0.05718214, -0.12303857, -0.14416745, -0.05368168]), 'test_r2': array([ 0.83495142,  0.94826201,  0.98129278,  0.9759435 ,  0.91717021,
        0.97517532,  0.96362812, -0.5159886 ,  0.96244341,  0.93584939,
        0.98112415,  0.8134772 ,  0.69284204,  0.9859494 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.002861049879148768, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 3169, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([3.58066082, 2.47501063, 3.48787665, 2.36243296, 3.39133644,
       3.05453801, 2.58273673, 3.72328568, 2.65737009, 2.58916402,
       4.06683517, 3.71899462, 3.50790834, 3.19512486]), 'score_time': array([0.10565734, 0.21690178, 0.11130929, 0.17104793, 0.1252296 ,
       0.11658454, 0.12236571, 0.10737944, 0.2073319 , 0.12797141,
       0.09607267, 0.10434604, 0.15603566, 0.12383437]), 'test_pearson_r': array([0.99132286, 0.98924085, 0.98112898, 0.43694362, 0.98987213,
       0.96551168, 0.98974033, 0.96529064, 0.75814962, 0.98536716,
       0.98797742, 0.9185152 , 0.98009569, 0.98014481]), 'test_pearson_p': array([-2.00735229e-16, -1.24018925e-15, -1.43133366e-13, -6.14018349e-02,
       -7.43364734e-16, -2.28392753e-11, -8.29352252e-16, -9.49898001e-11,
       -2.66509852e-04, -1.00957307e-13, -2.11366435e-14, -7.55046562e-08,
       -1.16388683e-12, -1.14128305e-12]), 'test_spearman_r': array([0.98463565, 0.9877193 , 0.97323397, 0.68439782, 0.99122807,
       0.93157895, 0.97715441, 0.95971126, 0.80949933, 0.95872033,
       0.98968008, 0.85758514, 0.9504644 , 0.97936017]), 'test_spearman_p': array([-2.52347607e-14, -3.79790244e-15, -2.71850932e-12, -1.22844681e-03,
       -2.20085178e-16, -6.87164496e-09, -7.16901319e-13, -3.07551300e-10,
       -4.70504360e-05, -3.72370945e-10, -6.26289422e-15, -5.38925995e-06,
       -1.55976502e-09, -1.55232323e-12]), 'test_kendall_r': array([0.92352941, 0.92982456, 0.91495995, 0.62863121, 0.94152047,
       0.83625731, 0.89679028, 0.86186076, 0.72131535, 0.89542484,
       0.94771242, 0.76470588, 0.86928105, 0.92156863]), 'test_kendall_p': array([-3.80976840e-08, -2.06767062e-12, -4.73213851e-08, -2.34744248e-04,
       -5.27929196e-13, -5.55516932e-09, -9.83316810e-08, -6.72597856e-07,
       -3.05216065e-05, -2.96242626e-10, -1.81026609e-12, -8.04176944e-07,
       -2.15825858e-09, -2.92550870e-11]), 'test_rmse': array([-0.08612298, -0.0794163 , -0.11937705, -0.69638629, -0.08484177,
       -0.19339801, -0.09849364, -0.15696219, -0.42556529, -0.10216098,
       -0.08472351, -0.32211775, -0.11642568, -0.14627241]), 'test_mae': array([-0.06925258, -0.05077806, -0.07941518, -0.26307924, -0.06091187,
       -0.11268993, -0.06899153, -0.08511326, -0.19412242, -0.06472354,
       -0.05536728, -0.17364233, -0.07656098, -0.08671362]), 'test_r2': array([ 0.98220857,  0.97760986,  0.96078983, -0.83550324,  0.97841407,
        0.93055365,  0.97798248,  0.91987721,  0.48180892,  0.96949734,
        0.96836353,  0.79771921,  0.9590754 ,  0.95926732]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.09939793013929618, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 4800, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 161, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([21.00733066, 20.76737785, 22.22276926, 20.23207426, 13.65019989,
       15.58495307, 21.68380523, 20.82805371, 20.78485227, 22.20227075,
       14.49051857, 15.42700338, 21.28886127, 20.05261445]), 'score_time': array([0.10751534, 0.10975528, 0.10929251, 0.12166142, 0.20115447,
       0.13330936, 0.18303394, 0.11175227, 0.11160898, 0.17047906,
       0.11082888, 0.13134336, 0.10993361, 0.12192798]), 'test_pearson_r': array([0.97057619, 0.88424051, 0.98865177, 0.97803168, 0.96035122,
       0.97380731, 0.62133873, 0.91680562, 0.99576991, 0.98823842,
       0.90305279, 0.98188679, 0.85865543, 0.99132074]), 'test_pearson_p': array([-6.02405266e-12, -5.08711852e-07, -1.94716132e-15, -5.15469091e-13,
       -7.34152188e-11, -2.26590865e-12, -4.51718224e-03, -8.86589166e-08,
       -5.08642290e-18, -1.77473959e-14, -2.88376623e-07, -5.50475241e-13,
       -5.09160238e-06, -1.57562071e-15]), 'test_spearman_r': array([0.91754386, 0.89279575, 0.9793589 , 0.95480483, 0.96842105,
       0.97368421, 0.71578947, 0.92561983, 0.94834711, 0.94166249,
       0.85493042, 0.98142415, 0.89473684, 0.98968008]), 'test_spearman_p': array([-3.19693619e-08, -2.72966487e-07, -3.04866461e-13, -2.19224178e-10,
       -1.09055587e-11, -2.35705500e-12, -5.68469114e-04, -3.72334764e-08,
       -2.16548572e-09, -5.61230323e-09, -6.19280424e-06, -6.72563970e-13,
       -5.42211053e-07, -6.26289422e-15]), 'test_kendall_r': array([0.8245614 , 0.77879156, 0.90265879, 0.86803892, 0.88304094,
       0.89473684, 0.66081871, 0.79605263, 0.82236842, 0.82623395,
       0.81311912, 0.90849673, 0.81699346, 0.94771242]), 'test_kendall_p': array([-1.17067315e-08, -3.68335665e-06, -8.20285757e-08, -2.20656528e-07,
       -1.79983887e-10, -6.63913300e-11, -2.38419293e-05, -4.43734615e-06,
       -2.12143788e-06, -1.78800684e-06, -2.59896801e-06, -9.76656516e-11,
       -5.74338967e-08, -1.81026609e-12]), 'test_rmse': array([-0.1459091 , -0.30634985, -0.07442169, -0.13398035, -0.17761544,
       -0.16768635, -0.51593188, -0.19354472, -0.06926879, -0.10497915,
       -0.2295005 , -0.11670879, -0.33527099, -0.09076987]), 'test_mae': array([-0.07807132, -0.15134459, -0.06088726, -0.09242822, -0.08331516,
       -0.08918802, -0.19740619, -0.12290902, -0.04845466, -0.06845406,
       -0.09265031, -0.08746052, -0.13209626, -0.057648  ]), 'test_r2': array([0.94001883, 0.75412317, 0.97725732, 0.94186423, 0.91875601,
       0.94177511, 0.13709517, 0.82067112, 0.99132191, 0.97617599,
       0.77900815, 0.9621031 , 0.70832137, 0.97999569]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.014798641065097335, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 41, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 720, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([6.57802224, 6.8868134 , 7.12901831, 7.43035984, 6.96734548,
       6.4849236 , 7.13193917, 7.37010884, 6.28464198, 6.37408018,
       6.81746221, 6.0482142 , 6.67613626, 6.13582945]), 'score_time': array([0.18331265, 0.10680246, 0.1011405 , 0.1047287 , 0.1082592 ,
       0.26164079, 0.10441041, 0.10239577, 0.1229372 , 0.12056041,
       0.11667085, 0.11837983, 0.11408973, 0.12397122]), 'test_pearson_r': array([0.83276799, 0.94209428, 0.99845123, 0.99266633, 0.98605514,
       0.9683719 , 0.99760959, 0.90311739, 0.94613206, 0.99404242,
       0.99443107, 0.89081178, 0.99197511, 0.77190483]), 'test_pearson_p': array([-9.65633931e-06, -1.72509692e-09, -8.94788369e-23, -4.82630330e-17,
       -1.11231681e-14, -1.10488468e-11, -3.56956178e-21, -2.86903089e-07,
       -3.00872274e-09, -7.83133876e-17, -4.57069519e-17, -7.17492437e-07,
       -8.43313419e-16, -1.74907471e-04]), 'test_spearman_r': array([0.84358654, 0.91531382, 0.99209871, 0.9841843 , 0.98947368,
       0.97368421, 0.98947368, 0.79183884, 0.97110423, 0.96644308,
       0.99948387, 0.9127518 , 0.98037242, 0.78121775]), 'test_spearman_p': array([-5.68610425e-06, -3.97996537e-08, -9.07791577e-17, -3.22268444e-14,
       -1.03053958e-15, -2.35705500e-12, -1.03053958e-15, -9.00793632e-05,
       -2.23221965e-11, -7.27678973e-11, -2.52759617e-25, -1.28040412e-07,
       -1.04146544e-12, -1.29363860e-04]), 'test_kendall_r': array([0.74339194, 0.75073637, 0.95884012, 0.94398977, 0.94152047,
       0.90643275, 0.92982456, 0.58552632, 0.88235294, 0.87869325,
       0.99672667, 0.82623395, 0.91449348, 0.73856209]), 'test_kendall_p': array([-9.95689890e-06, -7.43302335e-06, -1.13214749e-08, -2.01982025e-08,
       -5.27929196e-13, -2.27996852e-11, -2.06767062e-12, -7.35622083e-04,
       -8.28241250e-10, -3.78914056e-07, -8.33473697e-09, -1.78800684e-06,
       -1.34526112e-07, -2.52158005e-06]), 'test_rmse': array([-0.26984218, -0.17553712, -0.04866855, -0.07124317, -0.09808816,
       -0.18163801, -0.05548024, -0.18626768, -0.21115362, -0.07536492,
       -0.07332368, -0.32236214, -0.09653903, -0.51100506]), 'test_mae': array([-0.11623792, -0.1241929 , -0.03826261, -0.04692011, -0.0647675 ,
       -0.08121953, -0.0392642 , -0.11722954, -0.12634369, -0.05382464,
       -0.0559679 , -0.13534515, -0.07588976, -0.19088338]), 'test_r2': array([0.68471047, 0.85471665, 0.99577433, 0.98482348, 0.96406992,
       0.93628402, 0.99283681, 0.78479332, 0.86395704, 0.98811022,
       0.98594797, 0.78156181, 0.97607764, 0.50297867]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.02666301886779036, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 289, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([2.83474207, 2.75380325, 2.82092309, 2.60294962, 2.8246491 ,
       3.06382442, 2.63103771, 2.89496374, 2.82339025, 2.83150315,
       3.03727365, 3.02302957, 2.99669719, 2.926754  ]), 'score_time': array([0.14442945, 0.10242343, 0.10195947, 0.10780549, 0.1094439 ,
       0.09850025, 0.10471368, 0.09633803, 0.10586262, 0.13990712,
       0.09602714, 0.12050366, 0.09882307, 0.09512115]), 'test_pearson_r': array([0.99222958, 0.65609926, 0.99470665, 0.94092757, 0.47895137,
       0.99585511, 0.93430685, 0.88081501, 0.97966653, 0.99272716,
       0.99039885, 0.98226252, 0.96357387, 0.99638082]), 'test_pearson_p': array([-7.87995420e-17, -2.28424182e-03, -3.04141163e-18, -2.03568192e-09,
       -3.80153007e-02, -3.81856663e-19, -4.90859043e-09, -1.39963778e-06,
       -1.37860908e-12, -3.84705019e-16, -3.52310286e-15, -4.66036819e-13,
       -1.39012581e-10, -1.46328693e-18]), 'test_spearman_r': array([0.97147881, 0.62917496, 0.98287305, 0.9240896 , 0.57368421,
       0.99298246, 0.89776226, 0.80578555, 0.94372754, 0.98913937,
       0.98089843, 0.98142415, 0.94014448, 0.98348813]), 'test_spearman_p': array([-4.63665082e-12, -3.90057676e-03, -6.31424104e-14, -1.61904890e-08,
       -1.02225810e-02, -3.32215984e-17, -1.85595135e-07, -5.42251287e-05,
       -4.23430894e-09, -9.40746531e-15, -8.39423191e-13, -6.72563970e-13,
       -6.85945810e-09, -2.63828912e-13]), 'test_kendall_r': array([0.90322969, 0.66079284, 0.9321899 , 0.8211179 , 0.62573099,
       0.95321637, 0.76246662, 0.71712078, 0.81311912, 0.94710295,
       0.93115255, 0.92156863, 0.81699346, 0.93464052]), 'test_kendall_p': array([-7.00361385e-08, -8.59381967e-05, -3.06124963e-08, -9.53596222e-07,
       -7.70690079e-05, -1.16815227e-13, -5.34143245e-06, -3.55564627e-05,
       -2.59896801e-06, -5.48777592e-08, -7.34599652e-08, -2.92550870e-11,
       -5.74338967e-08, -7.81116540e-12]), 'test_rmse': array([-0.08100578, -0.5735106 , -0.07435804, -0.19649379, -0.54290551,
       -0.0599937 , -0.19782125, -0.2942498 , -0.11182584, -0.08053291,
       -0.09638837, -0.13474448, -0.15505925, -0.06149473]), 'test_mae': array([-0.05790026, -0.19916626, -0.04957301, -0.10064888, -0.20776129,
       -0.04281262, -0.13781589, -0.14101109, -0.07709222, -0.05585942,
       -0.07750277, -0.06898156, -0.11792877, -0.04280758]), 'test_r2': array([ 0.98332705,  0.29616457,  0.98783497,  0.86938148, -0.3006576 ,
        0.99160102,  0.84967001,  0.76978413,  0.95557149,  0.98290924,
        0.97870933,  0.96057192,  0.91376216,  0.99221207]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08722595424697485, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 549, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 29, 6: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5945414491064762, 'test_rmse': 0.6945814706720485, 'test_r2': -0.20785536866895482, 'test_pearson_r': array([0.20435782]), 'test_pearson_p_value': array([0.08072299]), 'test_spearman_r': 0.03371227591226209, 'test_spearman_p_value': 0.7755309227299789, 'test_kendall_r': 0.02861402462435669, 'test_kendall_p_value': 0.7192734596712986, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5921656055493246, 'test_rmse': 0.6901151591202968, 'test_r2': -0.19237175963733844, 'test_pearson_r': array([0.21566381]), 'test_pearson_p_value': array([0.06497835]), 'test_spearman_r': 0.025411363416184756, 'test_spearman_p_value': 0.8298375331521166, 'test_kendall_r': 0.02089997499002257, 'test_kendall_p_value': 0.7936970775068343, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.03510113763135458, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 161, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.590575357654058, 'test_rmse': 0.689380078028869, 'test_r2': -0.18983298585986885, 'test_pearson_r': array([0.21409062]), 'test_pearson_p_value': array([0.06700761]), 'test_spearman_r': 0.02931048533950499, 'test_spearman_p_value': 0.8042125611996658, 'test_kendall_r': 0.0037112688608928524, 'test_kendall_p_value': 0.9627730806609149, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.05247360515883869, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 234, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5878708710004465, 'test_rmse': 0.6859248278841821, 'test_r2': -0.1779357236570469, 'test_pearson_r': array([0.22621447]), 'test_pearson_p_value': array([0.05261785]), 'test_spearman_r': 0.034987002022425544, 'test_spearman_p_value': 0.7672787562371866, 'test_kendall_r': -0.0022359232682599497, 'test_kendall_p_value': 0.9776497367668098, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.022195450383425935, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1120, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5899911105095651, 'test_rmse': 0.6882535900539817, 'test_r2': -0.18594764741770198, 'test_pearson_r': array([0.2199302]), 'test_pearson_p_value': array([0.05972399]), 'test_spearman_r': 0.02594825164878749, 'test_spearman_p_value': 0.8262979286373993, 'test_kendall_r': -0.008534332220348322, 'test_kendall_p_value': 0.9145121515512462, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.026357505901111303, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1107, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5890885383159039, 'test_rmse': 0.6875280803593751, 'test_r2': -0.18344867601556758, 'test_pearson_r': array([0.22160431]), 'test_pearson_p_value': array([0.05775885]), 'test_spearman_r': 0.028195823363824105, 'test_spearman_p_value': 0.8115183671495827, 'test_kendall_r': -0.005574160641108447, 'test_kendall_p_value': 0.944176652357763, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.07313513565443447, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 447, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.5900893091618326, 'test_rmse': 0.6894317672279713, 'test_r2': -0.19001141811149114, 'test_pearson_r': array([0.21586951]), 'test_pearson_p_value': array([0.06471673]), 'test_spearman_r': 0.01346746581617619, 'test_spearman_p_value': 0.9093294964855395, 'test_kendall_r': -0.004845408559742177, 'test_kendall_p_value': 0.9515972934290431, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.061490925545115954, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 367, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 25, 6: {'fit_time': array([2.98291564, 3.02075553, 2.97419214, 2.90846062]), 'score_time': array([0.10462594, 0.15173221, 0.09863806, 0.10294437]), 'test_pearson_r': array([0.94151261, 0.79691984, 0.95829645, 0.97857395]), 'test_pearson_p': array([-1.83969427e-31, -2.01628428e-15, -5.59854598e-36, -2.87890638e-44]), 'test_spearman_r': array([0.91742721, 0.83548786, 0.94412084, 0.96758683]), 'test_spearman_p': array([-6.64869503e-27, -4.94503701e-18, -4.54843441e-32, -9.16558641e-39]), 'test_kendall_r': array([0.82943597, 0.77708314, 0.85018294, 0.8651097 ]), 'test_kendall_p': array([-2.13187585e-22, -6.33526143e-20, -1.89911936e-23, -7.32867076e-24]), 'test_rmse': array([-0.22734612, -0.41897382, -0.18344083, -0.11860017]), 'test_mae': array([-0.10454682, -0.14584004, -0.0905846 , -0.08157614]), 'test_r2': array([0.88073445, 0.58662841, 0.91384125, 0.95674544]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([2.22954845, 2.25412369, 2.17605948, 2.04943919]), 'score_time': array([0.1021347 , 0.10125065, 0.10176611, 0.14710498]), 'test_pearson_r': array([0.92592284, 0.82654993, 0.97028046, 0.92626634]), 'test_pearson_p': array([-2.47769628e-28, -2.26788126e-17, -1.55487165e-40, -5.75422122e-28]), 'test_spearman_r': array([0.91022853, 0.86853697, 0.95345307, 0.92271234]), 'test_spearman_p': array([-8.28074370e-26, -7.14868832e-21, -1.65746197e-34, -2.34697381e-27]), 'test_kendall_r': array([0.79092235, 0.82094939, 0.83634905, 0.78896465]), 'test_kendall_p': array([-1.75438339e-20, -5.81275255e-22, -8.76254770e-23, -3.71271278e-20]), 'test_rmse': array([-0.25899063, -0.40196658, -0.15109707, -0.22250422]), 'test_mae': array([-0.1320039 , -0.13681976, -0.09445745, -0.12693412]), 'test_r2': array([0.82618159, 0.64631203, 0.93846279, 0.851669  ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.044142961484786865, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 163, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([26.5470922 , 24.49116015, 28.61158991, 27.55346656]), 'score_time': array([0.10232544, 0.10387421, 0.09745669, 0.10074353]), 'test_pearson_r': array([0.97618895, 0.97988407, 0.85917834, 0.92997592]), 'test_pearson_p': array([-1.57690553e-43, -8.21795797e-46, -5.38052614e-20, -1.22813578e-28]), 'test_spearman_r': array([0.97568334, 0.96760023, 0.89493586, 0.94476207]), 'test_spearman_p': array([-3.03369057e-43, -2.26713488e-39, -9.27155964e-24, -9.81921353e-32]), 'test_kendall_r': array([0.89216237, 0.86925177, 0.80810367, 0.86599879]), 'test_kendall_p': array([-1.17565003e-25, -1.61430294e-24, -2.29907434e-21, -8.41604714e-24]), 'test_rmse': array([-0.14863042, -0.12017525, -0.31169271, -0.25304183]), 'test_mae': array([-0.08288604, -0.08009321, -0.13734273, -0.10297796]), 'test_r2': array([0.94910477, 0.95928315, 0.70046713, 0.85978298]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.002861049879148768, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 3169, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([1.82979608, 1.65469646, 1.95191646, 1.83348894]), 'score_time': array([0.09655595, 0.14621353, 0.09555435, 0.10076022]), 'test_pearson_r': array([0.98184939, 0.84552173, 0.83720103, 0.92010209]), 'test_pearson_p': array([-3.31933130e-47, -7.99598623e-19, -3.65486831e-18, -6.31812436e-27]), 'test_spearman_r': array([0.97532141, 0.86181687, 0.86538653, 0.91543508]), 'test_spearman_p': array([-4.80546932e-43, -3.09167299e-20, -1.43426819e-20, -3.42178037e-26]), 'test_kendall_r': array([0.87970626, 0.78698832, 0.80598916, 0.80178877]), 'test_kendall_p': array([-7.38496802e-25, -2.31701088e-20, -3.15566035e-21, -8.60446310e-21]), 'test_rmse': array([-0.11279368, -0.38237338, -0.34994003, -0.26600236]), 'test_mae': array([-0.07545509, -0.14909604, -0.12381459, -0.14128619]), 'test_r2': array([0.96399234, 0.66508667, 0.65296131, 0.83305918]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.09939793013929618, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 4800, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 161, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([10.6949389 ,  9.7472837 , 10.63078165, 11.09404445]), 'score_time': array([0.10199666, 0.10094929, 0.10181475, 0.14036131]), 'test_pearson_r': array([0.95099788, 0.88711439, 0.86887542, 0.87390484]), 'test_pearson_p': array([-8.06346411e-34, -7.88016409e-23, -6.62638433e-21, -4.33787958e-21]), 'test_spearman_r': array([0.92613566, 0.91385923, 0.82881192, 0.88316238]), 'test_spearman_p': array([-2.27041070e-28, -2.38559971e-26, -1.55537937e-17, -4.70590222e-22]), 'test_kendall_r': array([0.82356321, 0.84228271, 0.74493067, 0.7925472 ]), 'test_kendall_p': array([-4.36857046e-22, -4.04486258e-23, -2.46725753e-18, -2.41895553e-20]), 'test_rmse': array([-0.19242228, -0.30417709, -0.33243441, -0.31556253]), 'test_mae': array([-0.10483629, -0.1240846 , -0.13797149, -0.12819837]), 'test_r2': array([0.90272404, 0.77175958, 0.72440623, 0.74262192]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.014798641065097335, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 41, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 720, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([3.75557637, 3.74563527, 3.69894838, 3.69214082]), 'score_time': array([0.09436131, 0.10530329, 0.09629893, 0.0958209 ]), 'test_pearson_r': array([0.91118907, 0.98137829, 0.96846691, 0.7586868 ]), 'test_pearson_p': array([-5.98879316e-26, -7.38832159e-47, -9.77694316e-40, -3.80116064e-13]), 'test_spearman_r': array([0.92377978, 0.97368536, 0.97241651, 0.77543172]), 'test_spearman_p': array([-5.88764869e-28, -3.54187975e-42, -1.53185103e-41, -5.37379696e-14]), 'test_kendall_r': array([0.80502531, 0.87201859, 0.87271065, 0.7181724 ]), 'test_kendall_p': array([-3.51292613e-21, -1.26756651e-24, -1.18939588e-24, -6.70522422e-17]), 'test_rmse': array([-0.25642333, -0.127977  , -0.16304512, -0.48181419]), 'test_mae': array([-0.13962519, -0.07521469, -0.09677246, -0.19247771]), 'test_r2': array([0.8037936 , 0.96061302, 0.92352898, 0.5048284 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.02666301886779036, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 289, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([2.32445908, 2.1144402 , 2.40434408, 2.44857502]), 'score_time': array([0.09744644, 0.09632754, 0.09941602, 0.09815025]), 'test_pearson_r': array([0.86187944, 0.84273262, 0.95099159, 0.96744058]), 'test_pearson_p': array([-3.05089729e-20, -1.34385113e-18, -8.09534901e-34, -1.05155330e-38]), 'test_spearman_r': array([0.88138837, 0.86220387, 0.93559214, 0.95693583]), 'test_spearman_p': array([-3.42421165e-22, -2.84762727e-20, -3.50528370e-30, -5.23553927e-35]), 'test_kendall_r': array([0.82536466, 0.76811999, 0.83149023, 0.86352357]), 'test_kendall_p': array([-4.20207181e-22, -1.70081211e-19, -1.80071840e-22, -6.68761271e-24]), 'test_rmse': array([-0.361321  , -0.33835729, -0.18948749, -0.16184024]), 'test_mae': array([-0.12467606, -0.14286933, -0.09976398, -0.08996335]), 'test_r2': array([0.700188  , 0.64333373, 0.90349763, 0.93593473]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08722595424697485, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 549, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM3 Mordred cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c021n02>
Subject: Job 295210: <XGBR_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311> in cluster <Hazel> Done

Job <XGBR_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:09:31 2025
Job was executed on host(s) <8*c021n02>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 06:36:09 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 06:36:09 2025
Terminated at Wed Mar 12 22:51:02 2025
Results reported at Wed Mar 12 22:51:02 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "XGBR_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "XGBR"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM3 Mordred cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   247029.28 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.55 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   58498 sec.
    Turnaround time :                            99691 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_KM3 Mordred cluster_20250311.err> for stderr output of this job.

