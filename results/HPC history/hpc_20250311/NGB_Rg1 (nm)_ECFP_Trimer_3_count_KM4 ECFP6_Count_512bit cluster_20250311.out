


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04944206016171295), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06307787491322728), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1275), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04794032715765093), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 303), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00891267731041659), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004283088049254542), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1589), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037736106842149966), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 385), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025504779799688626), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1554), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04094738593013935), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 644), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03480917361156129), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 718), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03680348637818551), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 858), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04846759885834948), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 247), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 190), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.254824055612424e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057416873719639515), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 291), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011956601504126113), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1230), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026556304338705566), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06671193090645183), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1096), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06167856440016272), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 190), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004108012610557833), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022577617055907016), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024840543414210388), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04996795325759121), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1504), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1204), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007125210627757752), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 750), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 738), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03264607443512054), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1067), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1403), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025485498202665217), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 827), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1255), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 264), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005485775279388133), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 480), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03824739501535732), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04063191183060575), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05967606951131341), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08324234214559709), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1392), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02852176915437698), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 685), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07634474153285327), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 294), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06580033519066433), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03790174134937625), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1060), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.6655636260588595e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06167001655401576), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 193), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010168024497933185), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034476355528463225), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 238), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 97), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04884621081888591), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1271), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03609676529215934), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 143), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03365349800977816), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 169), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02118122722952225), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1328), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07120635202013034), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08842177819690229), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1823), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.755241400446261e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0953934485189103), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 495), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05144022665197365), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055856154611242013), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05174744264381779), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05600820733795671), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 386), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04041544009906841), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 754), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 864), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023574556713596147), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 485), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.550497344604454e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0277858472497166), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09772491728532073), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 179), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1722), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041442692755461294), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 117), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02702798302440461), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 248), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1546), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1748), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06455892781355685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03255028828276502), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 909), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08799424674962322), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 177), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.72723551334611e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026325907641586977), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020334690302755514), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1173), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05019316648344017), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 205), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022619171597252435), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 500), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026253391593059595), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06539913146602089), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 464), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041685861147612975), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 480), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 107), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 115), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050000779632546184), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 801), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022694972699912275), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1639), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 525), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09899062710675335), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 727), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.64098064535111e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06415280853292406), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028585478692451774), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04779014697287311), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02973337991951265), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 690), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002720933747051432), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 320), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 96), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09943918033867566), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 58), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1899704593967207e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 187), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 878), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06690059299760139), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1011), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 529), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06963014098270069), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 764), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007412510826772921), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06533315512027897), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 254), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01257410451667759), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04349134766869181), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006541038586801542), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06551812252509889), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1143), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 134), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 209), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021141260932420154), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05137669516944196), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022514827943306788), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02228601350963572), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 400), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 77), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007376452627593222), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04379608766828155), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1233), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 237), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04567248215306239), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 434), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07027496318490156), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1095), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04353513861609985), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 969), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04491526391886512), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021535087739455883), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 805), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03407529255766042), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1038), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1328), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09912345366282874), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 554), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.0638769963193355e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04984898941919724), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 337), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06511279994810486), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05250057502641658), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1129), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 269), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1251), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0237595076238225), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 437), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009999999999999979), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06449854041502759), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4103076091788285e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 162), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010286035943507758), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07003381841860765), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 463), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08862903357341881), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 475), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.1559463044407513e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04559141300314112), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 243), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 239), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0660281476940842), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1296), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036048976428640724), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 966), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056501757824578024), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 915), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 686), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0643561536901134), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 979), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02662050914821215), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 266), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1027), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 185), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08417861327802498), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1460), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05215246065041876), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 470), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.089827507813213), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 842), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003669795684475611), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08875061829714202), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 830), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004090382713953225), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025685024582121442), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 407), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008078888669761919), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 80), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007021691586920108), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04580563736126872), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002946173212797351), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1021), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.47641443704636e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 840), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0520389733736373), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1028), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 485), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0785232371180938), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 203), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.000578700290936379), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1508), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005492140286034877), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 99), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008017999872877052), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008050242221640873), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02240258781005214), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 676), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1150), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 160), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.449567415024959e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05695196620890069), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.005636894873468e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05224574044840058), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 380), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06063945680589586), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1175), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023783583412805648), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 752), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03227169704512834), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 584), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06113838755587169), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.043675567481525394), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 279), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 351), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023913372967386038), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 681), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1436), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1329), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1139), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 350), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02576369280120469), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1150), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 89), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0575773904413585), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07575367469439097), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07516561892988287), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1430), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08510179895168286), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 227), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02323744104742811), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 776), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.071725185027089e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1090), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 75), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 175), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05329411734685925), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 796), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1018), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06468645699963006), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07601110109000085), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 55, 6: {'test_mad': 59.70019501884546, 'test_ystd': 138.37116490639434, 'test_mae': 73.6528552825339, 'test_rmse': 156.87255951328743, 'test_r2': -0.28529485980304914, 'test_pearson_r': array([-0.07374936]), 'test_pearson_p_value': array([0.38307422]), 'test_spearman_r': 0.037673305968896405, 'test_spearman_p_value': 0.6562334786711123, 'test_kendall_r': 0.023509870364255454, 'test_kendall_p_value': 0.6819800803841691, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 59.70019501884546, 'test_ystd': 138.37116490639434, 'test_mae': 80.80676814585495, 'test_rmse': 158.20673909922914, 'test_r2': -0.3072503413576315, 'test_pearson_r': array([-0.07242064]), 'test_pearson_p_value': array([0.39172724]), 'test_spearman_r': -0.05090732564741657, 'test_spearman_p_value': 0.5474009524788186, 'test_kendall_r': -0.08642982745509199, 'test_kendall_p_value': 0.13149153161622418, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 718, 'regressor__learning_rate': 0.03480917361156129, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 59.70019501884546, 'test_ystd': 138.37116490639434, 'test_mae': 81.59222232765246, 'test_rmse': 158.95067195187977, 'test_r2': -0.3195733685742561, 'test_pearson_r': array([-0.06875546]), 'test_pearson_p_value': array([0.41619686]), 'test_spearman_r': -0.14035117927758486, 'test_spearman_p_value': 0.09572307641320886, 'test_kendall_r': -0.12616935694983908, 'test_kendall_p_value': 0.027872393074941985, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 291, 'regressor__learning_rate': 0.057416873719639515, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 59.70019501884546, 'test_ystd': 138.37116490639434, 'test_mae': 76.07129635023419, 'test_rmse': 156.13590473523038, 'test_r2': -0.27325202032668905, 'test_pearson_r': array([-0.05783588]), 'test_pearson_p_value': array([0.49418038]), 'test_spearman_r': -0.04346753920200302, 'test_spearman_p_value': 0.6075035906564508, 'test_kendall_r': -0.06173575818141411, 'test_kendall_p_value': 0.2827732741544401, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1096, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 59.70019501884546, 'test_ystd': 138.37116490639434, 'test_mae': 75.59699018078793, 'test_rmse': 155.94268000665244, 'test_r2': -0.27010256480476014, 'test_pearson_r': array([-0.06842436]), 'test_pearson_p_value': array([0.41845045]), 'test_spearman_r': -0.060166710964110394, 'test_spearman_p_value': 0.4769127293716505, 'test_kendall_r': -0.07113762498149712, 'test_kendall_p_value': 0.21501785661627937, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1403, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 59.70019501884546, 'test_ystd': 138.37116490639434, 'test_mae': 82.14237875080637, 'test_rmse': 159.6236316905919, 'test_r2': -0.3307705478213596, 'test_pearson_r': array([-0.0580198]), 'test_pearson_p_value': array([0.4928059]), 'test_spearman_r': -0.08705266159445947, 'test_spearman_p_value': 0.3029440747786882, 'test_kendall_r': -0.1133538771891541, 'test_kendall_p_value': 0.04810027066838194, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04063191183060575, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 59.70019501884546, 'test_ystd': 138.37116490639434, 'test_mae': 81.11110686430263, 'test_rmse': 163.10476285066397, 'test_r2': -0.3894473409023431, 'test_pearson_r': array([-0.07672457]), 'test_pearson_p_value': array([0.36412318]), 'test_spearman_r': -0.05859757776811689, 'test_spearman_p_value': 0.48850130391501534, 'test_kendall_r': -0.07976343613165653, 'test_kendall_p_value': 0.16452141148757016, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 50, 6: {'fit_time': array([12.53164721, 15.32024837]), 'score_time': array([0.50339103, 0.50476122]), 'test_pearson_r': array([0.92848906, 0.9674501 ]), 'test_pearson_p': array([-6.50001088e-57, -1.18334795e-77]), 'test_spearman_r': array([0.71658775, 0.83957585]), 'test_spearman_p': array([-9.17324297e-22, -1.85322380e-35]), 'test_kendall_r': array([0.59196053, 0.70918951]), 'test_kendall_p': array([-2.31858495e-23, -1.57595784e-32]), 'test_rmse': array([-54.99947427, -25.66520702]), 'test_mae': array([-26.86673711, -15.27145822]), 'test_r2': array([0.83754637, 0.93222396]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 847, 'regressor__learning_rate': 0.08646479880356304, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([34.7184267 , 35.14042997]), 'score_time': array([1.19170976, 1.16897035]), 'test_pearson_r': array([0.95382465, 0.9346408 ]), 'test_pearson_p': array([-1.01535815e-68, -7.06565511e-59]), 'test_spearman_r': array([0.74585251, 0.74936992]), 'test_spearman_p': array([-2.43323756e-24, -1.71194278e-24]), 'test_kendall_r': array([0.60329407, 0.59673193]), 'test_kendall_p': array([-3.55745544e-24, -1.67338510e-23]), 'test_rmse': array([-43.52254402, -35.60507492]), 'test_mae': array([-22.32565737, -22.85030092]), 'test_r2': array([0.89783097, 0.8717583 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([33.71473813, 31.85966802]), 'score_time': array([1.0694778, 1.0730381]), 'test_pearson_r': array([0.26931163, 0.90105892]), 'test_pearson_p': array([-1.94553051e-03, -6.55074996e-48]), 'test_spearman_r': array([0.73388884, 0.73352801]), 'test_spearman_p': array([-3.02299522e-23, -4.80735262e-23]), 'test_kendall_r': array([0.6245011 , 0.59341446]), 'test_kendall_p': array([-8.34409654e-26, -2.74900117e-23]), 'test_rmse': array([-149.45428091,  -32.32523268]), 'test_mae': array([-43.47614223, -19.1942517 ]), 'test_r2': array([0.02054483, 0.80353411]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([25.61323905, 22.14676642]), 'score_time': array([0.82594872, 0.82487392]), 'test_pearson_r': array([0.80948178, 0.93889898]), 'test_pearson_p': array([-2.17243056e-31, -1.12187896e-60]), 'test_spearman_r': array([0.71742172, 0.79556033]), 'test_spearman_p': array([-7.82750119e-22, -2.03782707e-29]), 'test_kendall_r': array([0.57714144, 0.65703642]), 'test_kendall_p': array([-2.81985991e-22, -3.07501010e-28]), 'test_rmse': array([-78.42403773, -42.20664858]), 'test_mae': array([-28.43214023, -20.78286046]), 'test_r2': array([0.57450726, 0.87290877]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1504, 'regressor__learning_rate': 0.04996795325759121, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([33.53651738, 32.75025678]), 'score_time': array([1.0976007 , 1.13976264]), 'test_pearson_r': array([0.96957353, 0.97688952]), 'test_pearson_p': array([-4.25220730e-80, -5.70072509e-87]), 'test_spearman_r': array([0.77596012, 0.81830533]), 'test_spearman_p': array([-2.18782672e-27, -2.46429819e-32]), 'test_kendall_r': array([0.61801779, 0.68480942]), 'test_kendall_p': array([-2.51963099e-25, -1.69733725e-30]), 'test_rmse': array([-25.52892093, -29.0711039 ]), 'test_mae': array([-16.45688102, -16.66585889]), 'test_r2': array([0.93976712, 0.9521038 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([24.71451712, 24.2080636 ]), 'score_time': array([0.80091977, 0.81819034]), 'test_pearson_r': array([0.89622907, 0.91578223]), 'test_pearson_p': array([-5.10633746e-47, -3.79195842e-52]), 'test_spearman_r': array([0.76582431, 0.76397615]), 'test_spearman_p': array([-2.60824434e-26, -6.29100897e-26]), 'test_kendall_r': array([0.60493832, 0.64689998]), 'test_kendall_p': array([-2.32219311e-24, -2.23968521e-27]), 'test_rmse': array([-48.02124498, -58.09625432]), 'test_mae': array([-23.11470921, -25.99876013]), 'test_r2': array([0.77757192, 0.81339367]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1392, 'regressor__learning_rate': 0.08324234214559709, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([34.33420348, 35.44732881]), 'score_time': array([1.17774487, 1.16319275]), 'test_pearson_r': array([0.9626977 , 0.94114044]), 'test_pearson_p': array([-1.57554106e-74, -1.12225477e-61]), 'test_spearman_r': array([0.7802831 , 0.85464177]), 'test_spearman_p': array([-7.30593163e-28, -5.82899403e-38]), 'test_kendall_r': array([0.61101104, 0.67634143]), 'test_kendall_p': array([-9.69350883e-25, -8.19383705e-30]), 'test_rmse': array([-37.53976272, -37.03434891]), 'test_mae': array([-19.68865328, -19.99412779]), 'test_r2': array([0.91614926, 0.88123347]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03609676529215934, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 7, 6: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 78.95855939740973, 'test_rmse': 166.5710648062955, 'test_r2': -51.93450505012033, 'test_pearson_r': array([-0.252506]), 'test_pearson_p_value': array([0.29697196]), 'test_spearman_r': 0.05101145332672086, 'test_spearman_p_value': 0.8357032071355762, 'test_kendall_r': 0.047619891232869964, 'test_kendall_p_value': 0.7787795127934056, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 143, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 91.30131436093343, 'test_rmse': 179.47352013034273, 'test_r2': -60.452632901887064, 'test_pearson_r': array([-0.21172769]), 'test_pearson_p_value': array([0.3842067]), 'test_spearman_r': 0.2409851415779572, 'test_spearman_p_value': 0.3202881010993202, 'test_kendall_r': 0.19047956493147986, 'test_kendall_p_value': 0.26116596186988394, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05174744264381779, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 82.76355359844499, 'test_rmse': 172.18230284286244, 'test_r2': -55.560957994302875, 'test_pearson_r': array([-0.22526799]), 'test_pearson_p_value': array([0.35379411]), 'test_spearman_r': 0.21811793836253057, 'test_spearman_p_value': 0.3696771358106289, 'test_kendall_r': 0.20238453773969733, 'test_kendall_p_value': 0.2325299808266238, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0277858472497166, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 88.18217553832899, 'test_rmse': 187.86698353154515, 'test_r2': -66.33496785985278, 'test_pearson_r': array([-0.22744331]), 'test_pearson_p_value': array([0.34904089]), 'test_spearman_r': 0.19876876641101576, 'test_spearman_p_value': 0.41462536800206584, 'test_kendall_r': 0.13095470089039238, 'test_kendall_p_value': 0.43981704152643053, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 909, 'regressor__learning_rate': 0.03255028828276502, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 80.7648459361279, 'test_rmse': 160.02196246943717, 'test_r2': -47.853863776779086, 'test_pearson_r': array([-0.23282441]), 'test_pearson_p_value': array([0.33744223]), 'test_spearman_r': 0.13192617239669188, 'test_spearman_p_value': 0.5903176262980565, 'test_kendall_r': 0.1071447552739574, 'test_kendall_p_value': 0.5273559970445866, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.026253391593059595, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 73.00509578708913, 'test_rmse': 153.62634478905903, 'test_r2': -44.026804621859235, 'test_pearson_r': array([-0.29648902]), 'test_pearson_p_value': array([0.21773383]), 'test_spearman_r': 0.0017590156319558918, 'test_spearman_p_value': 0.9942977290925472, 'test_kendall_r': 0.0, 'test_kendall_p_value': 1.0, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 801, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 84.24627900740586, 'test_rmse': 168.41336345573592, 'test_r2': -53.111906010702334, 'test_pearson_r': array([-0.24331575]), 'test_pearson_p_value': array([0.31548602]), 'test_spearman_r': 0.056288500222588536, 'test_spearman_p_value': 0.818962401385591, 'test_kendall_r': 0.03571491842465247, 'test_kendall_p_value': 0.8331350939013934, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 96, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 7, 6: {'fit_time': array([42.20504165, 46.33284354, 44.08055758, 44.70480204, 44.5715251 ,
       43.1691258 , 42.3465364 , 44.11234474, 44.76529241, 44.47003531,
       44.16430378, 44.11451745, 46.17138076, 45.20433092]), 'score_time': array([0.75375795, 0.70190907, 0.77441025, 0.74923539, 0.75089526,
       0.78895617, 0.74487185, 0.73147702, 0.73849988, 0.74393773,
       0.77369428, 0.7367425 , 0.73551059, 0.76667023]), 'test_pearson_r': array([0.93622146, 0.99850589, 0.99067146, 0.99214336, 0.92739067,
       0.97729421, 0.87422307, 0.99443289, 0.98683713, 0.97862537,
       0.98020327, 0.9571398 , 0.98130366, 0.83917602]), 'test_pearson_p': array([-3.84270113e-09, -6.59437145e-23, -3.70581770e-16, -8.65234869e-17,
       -1.12227001e-08, -6.80777978e-13, -9.94231540e-07, -4.55874091e-17,
       -4.34819815e-14, -2.04889721e-12, -1.11488272e-12, -5.00433743e-10,
       -7.07998755e-13, -1.34085549e-05]), 'test_spearman_r': array([0.61578947, 0.9429324 , 0.92280702, 0.84912281, 0.8486179 ,
       0.98245614, 0.65964912, 0.65185985, 0.93746883, 0.89886481,
       0.92307705, 0.84873527, 0.88981156, 0.94014448]), 'test_spearman_p': array([-5.00051699e-03, -1.52842515e-09, -1.85857755e-08, -4.26969176e-06,
       -4.38475191e-06, -7.73558991e-14, -2.12053115e-03, -3.37555356e-03,
       -9.64984935e-09, -3.99023672e-07, -4.83257537e-08, -8.47753187e-06,
       -7.69279588e-07, -6.85945810e-09]), 'test_kendall_r': array([0.49707602, 0.84117647, 0.80116959, 0.73099415, 0.69208509,
       0.91812865, 0.59064327, 0.50658991, 0.8449259 , 0.73856209,
       0.82623395, 0.70820053, 0.74841002, 0.84313725]), 'test_kendall_p': array([-2.43311842e-03, -5.46983525e-07, -4.67377304e-08, -1.52091530e-06,
       -3.61461714e-05, -7.20796807e-12, -2.23075840e-04, -3.49160233e-03,
       -1.18091273e-06, -2.52158005e-06, -1.78800684e-06, -4.24489625e-05,
       -1.75023384e-05, -1.22726897e-08]), 'test_rmse': array([-24.20759118, -11.39231157, -33.52269204, -27.1077851 ,
       -20.54759942, -15.84739664, -30.95330041, -10.02239087,
       -30.3055404 , -15.04325455, -21.01174097, -21.29935207,
       -14.50320821, -32.46059256]), 'test_mae': array([-13.77258815,  -7.99121937, -18.03807479, -18.01321097,
       -15.10592129,  -9.16321584, -16.13210012,  -6.72815036,
       -15.09130148, -10.99665651, -12.67663405, -13.48300961,
        -9.37015584, -17.28195909]), 'test_r2': array([0.86804756, 0.99562179, 0.97207411, 0.97987817, 0.85572215,
       0.95461605, 0.75511425, 0.98258242, 0.972614  , 0.95570034,
       0.95629094, 0.91591631, 0.9573314 , 0.66609221]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([19.31803632, 18.83309054, 17.27717805, 18.25907087, 17.70657325,
       17.56982923, 19.6346314 , 17.77104449, 18.14649534, 17.73175478,
       18.42334533, 18.97457218, 16.5942595 , 17.79584908]), 'score_time': array([0.33588481, 0.34378958, 0.33720899, 0.34638596, 0.34175086,
       0.33826089, 0.34075665, 0.38710809, 0.34293222, 0.33054233,
       0.32378721, 0.33192396, 0.35447288, 0.32662511]), 'test_pearson_r': array([0.9693652 , 0.9704522 , 0.99173151, 0.99317087, 0.9860817 ,
       0.90651922, 0.99543792, 0.95597724, 0.75446747, 0.99021806,
       0.99008173, 0.96280504, 0.95798509, 0.97097971]), 'test_pearson_p': array([-8.45259259e-12, -6.24065097e-12, -1.33396057e-16, -2.63770910e-17,
       -1.09453329e-14, -8.93939530e-08, -8.61620043e-19, -6.17634610e-10,
       -2.96955785e-04, -4.08784329e-15, -4.56456002e-15, -1.63896070e-10,
       -4.27861020e-10, -2.30944066e-11]), 'test_spearman_r': array([0.82967515, 0.85388336, 0.809482  , 0.74736842, 0.87670039,
       0.67719298, 0.94912281, 0.88946328, 0.78328173, 0.94372754,
       0.9168819 , 0.83014983, 0.89886481, 0.9003615 ]), 'test_spearman_p': array([-1.11588151e-05, -3.30697729e-06, -2.68802515e-05, -2.35278711e-04,
       -8.46951763e-07, -1.44750248e-03, -5.88308946e-10, -7.88053542e-07,
       -1.20764516e-04, -4.23430894e-09, -8.80322942e-08, -2.01385238e-05,
       -3.99023672e-07, -3.55882285e-07]), 'test_kendall_r': array([0.67647059, 0.68035483, 0.62941176, 0.60233918, 0.75073637,
       0.61403509, 0.83625731, 0.75659532, 0.56862745, 0.81311912,
       0.81311912, 0.76065983, 0.76470588, 0.8000043 ]), 'test_kendall_p': array([-5.61912181e-05, -4.89022874e-05, -1.78226753e-04, -1.58318567e-04,
       -7.43302335e-06, -1.11108349e-04, -5.55516932e-09, -1.28761880e-05,
       -6.46804912e-04, -2.59896801e-06, -2.59896801e-06, -1.09773191e-05,
       -8.04176944e-07, -3.75687779e-06]), 'test_rmse': array([ -9.31603314, -27.44566383, -25.46149847, -10.40978186,
       -30.71710641, -33.17257044, -18.09341159, -13.78859628,
       -32.40153695, -30.64863806,  -9.92071563, -25.88428562,
       -25.99022682, -20.88851022]), 'test_mae': array([ -6.569168  , -18.56500292, -14.42892877,  -6.49139849,
       -19.60423348, -16.07769195, -12.68129986, -10.15782677,
       -20.81879424, -17.22781609,  -6.02815155, -15.77059884,
       -17.83706227, -12.94243619]), 'test_r2': array([0.93392637, 0.89963879, 0.98164828, 0.98565014, 0.97130599,
       0.80138054, 0.98956101, 0.80065859, 0.52413465, 0.97625335,
       0.98011288, 0.8616027 , 0.91449601, 0.92118496]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 864, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([35.05741024, 39.4436605 , 38.47520304, 36.92909932, 35.52390337,
       36.65929079, 37.03598738, 37.33577776, 37.93280816, 37.33189917,
       37.12730646, 37.19141269, 36.26716828, 36.24841666]), 'score_time': array([0.64942956, 0.67974615, 0.66284442, 0.64729881, 0.65534854,
       0.65946674, 0.65890455, 0.64727783, 0.66282415, 0.64021659,
       0.65405083, 0.64384055, 0.67424273, 0.66586542]), 'test_pearson_r': array([0.94806453, 0.98753868, 0.99329961, 0.99643991, 0.86103525,
       0.99542445, 0.9289899 , 0.41948356, 0.97634235, 0.96157972,
       0.98256723, 0.96669154, 0.74243966, 0.98782219]), 'test_pearson_p': array([-6.98277437e-10, -4.29711153e-15, -2.24470447e-17, -1.05029749e-19,
       -2.21433950e-06, -8.83454162e-19, -9.33865360e-09, -8.31081177e-02,
       -4.58130968e-12, -2.11591563e-10, -4.06098225e-13, -6.86215519e-11,
       -4.17598199e-04, -2.34096970e-14]), 'test_spearman_r': array([0.90302773, 0.9161914 , 0.92280702, 0.96315789, 0.87757797,
       0.93813085, 0.91882413, 0.31682147, 0.72210782, 0.73581011,
       0.93133724, 0.81677413, 0.5995872 , 0.9462815 ]), 'test_spearman_p': array([-1.20608197e-07, -3.65384910e-08, -1.85857755e-08, -3.97114834e-11,
       -7.99535237e-07, -2.98737373e-09, -2.81124154e-08, -2.00204994e-01,
       -7.14386210e-04, -5.00083414e-04, -1.99988229e-08, -3.53120855e-05,
       -8.53669877e-03, -2.94399351e-09]), 'test_kendall_r': array([0.76246662, 0.78592713, 0.8245614 , 0.87134503, 0.7155456 ,
       0.83284816, 0.77419688, 0.29411765, 0.59869717, 0.60784314,
       0.83934877, 0.67783439, 0.51633987, 0.84870258]), 'test_kendall_p': array([-5.34143245e-06, -2.71955004e-06, -1.17067315e-08, -4.58322529e-10,
       -1.94725637e-05, -6.66104086e-07, -3.82034206e-06, -9.58749442e-02,
       -5.56805123e-04, -2.25736469e-04, -1.22329014e-06, -1.04745736e-04,
       -2.24413905e-03, -9.91848331e-07]), 'test_rmse': array([-22.16837879, -29.65747162, -30.12439561, -16.70245726,
       -21.56181116, -19.68835242, -26.96846163, -68.46942004,
       -25.65499032, -19.028081  , -17.3401049 , -18.5754034 ,
       -35.3451072 , -14.90444522]), 'test_mae': array([-14.87373906, -18.40870289, -19.90838072, -11.11152258,
       -13.03405571, -11.88081148, -11.72902655, -38.71499315,
       -16.45019277, -12.70666726, -12.52919965, -11.56778121,
       -18.74639855,  -8.17193336]), 'test_r2': array([ 0.89743022,  0.97072212,  0.97776856,  0.99231636,  0.72639605,
        0.98861563,  0.83408034, -2.59609093,  0.93961817,  0.92139579,
        0.95480501,  0.92782489,  0.51010415,  0.95940249]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1748, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([3.56549716, 3.25178862, 3.27896762, 3.50052047, 3.94756126,
       4.00799894, 3.64201212, 3.95412374, 3.12690353, 3.1006608 ,
       3.1972146 , 3.64590311, 3.47688341, 3.66601849]), 'score_time': array([0.09973764, 0.09857845, 0.09421682, 0.1001029 , 0.09476089,
       0.09917235, 0.10125661, 0.0972333 , 0.09852028, 0.09646106,
       0.10006142, 0.09834146, 0.09691453, 0.09628654]), 'test_pearson_r': array([0.94380743, 0.98264812, 0.99174374, 0.06322698, 0.95172007,
       0.99296998, 0.9946466 , 0.96033368, 0.6705618 , 0.93600208,
       0.97867968, 0.99457211, 0.95775886, 0.98368308]), 'test_pearson_p': array([-1.34433879e-09, -7.04946507e-14, -1.31732596e-16, -7.97065569e-01,
       -3.80223841e-10, -3.37254118e-17, -3.34682497e-18, -2.72068439e-10,
       -2.32142482e-03, -1.15621955e-08, -2.00795692e-12, -3.72429653e-17,
       -4.46323123e-10, -2.40061735e-13]), 'test_spearman_r': array([0.72859032, 0.95087719, 0.94164116, 0.61710903, 0.73333333,
       0.9       , 0.88547617, 0.95764514, 0.51112432, 0.70691434,
       0.96694266, 0.73993808, 0.87203302, 0.866736  ]), 'test_spearman_p': array([-4.03287671e-04, -4.39213996e-10, -1.84039565e-09, -4.88191196e-03,
       -3.53424638e-04, -1.54979345e-07, -4.66386138e-07, -4.55862708e-10,
       -3.01707745e-02, -1.03675770e-03, -6.46413433e-11, -4.47265775e-04,
       -2.40176415e-06, -3.26505089e-06]), 'test_kendall_r': array([0.60177253, 0.85964912, 0.85630867, 0.50774059, 0.60233918,
       0.75438596, 0.72727585, 0.84870258, 0.35102417, 0.51633987,
       0.88817712, 0.55555556, 0.7254902 , 0.7697535 ]), 'test_kendall_p': array([-3.50130903e-04, -1.10425357e-09, -3.20420144e-07, -2.96853031e-03,
       -1.58318567e-04, -5.24238695e-07, -1.41920797e-05, -9.91848331e-07,
       -4.39809193e-02, -2.24413905e-03, -3.04174616e-07, -8.97111025e-04,
       -4.30436832e-06, -9.07720685e-06]), 'test_rmse': array([ -26.00634553,  -14.16419887,  -11.06367496, -162.72506792,
        -22.14897624,  -34.41773595,  -18.92420137,  -18.96524753,
        -47.45702941,  -20.60859205,  -15.74959602,  -20.76667386,
        -20.49946096,  -40.23856045]), 'test_mae': array([-14.64215456,  -9.39662766,  -7.36354443, -62.0084488 ,
       -12.95407645, -22.91704908, -15.67019664, -11.80320546,
       -27.23050107, -13.91579412,  -9.49193462, -14.25119332,
       -13.84502443, -28.34395965]), 'test_r2': array([  0.85703134,   0.95944279,   0.98223608, -10.95223406,
         0.90439389,   0.97028508,   0.9888138 ,   0.91701885,
         0.36742369,   0.8309267 ,   0.94657898,   0.98781826,
         0.91628431,   0.95822444]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 205, 'regressor__learning_rate': 0.05019316648344017, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([50.32513118, 48.96322203, 45.19965363, 46.35038972, 46.04383016,
       46.28080344, 45.08124661, 44.76130748, 43.84681058, 47.49742413,
       46.96838045, 46.54239559, 45.28701782, 48.44972444]), 'score_time': array([0.75516748, 0.74274278, 0.9853003 , 0.73383164, 0.73795009,
       0.78499651, 0.75616026, 0.76204133, 0.85430741, 0.7596612 ,
       0.74686623, 0.73415375, 0.76879358, 0.74073839]), 'test_pearson_r': array([0.95878182, 0.96492488, 0.98458979, 0.98948228, 0.96425173,
       0.98346104, 0.97153205, 0.65326857, 0.9967696 , 0.99248759,
       0.7213375 , 0.93658277, 0.81175188, 0.99758145]), 'test_pearson_p': array([-1.01569066e-10, -2.63084232e-11, -2.58781723e-14, -1.02344004e-15,
       -3.08513287e-11, -4.70137119e-14, -4.56442166e-12, -3.28450359e-03,
       -5.90230529e-19, -4.98201610e-16, -7.28413715e-04, -1.07690409e-08,
       -4.31056380e-05, -5.84134565e-20]), 'test_spearman_r': array([0.66374038, 0.85413137, 0.58058855, 0.94164116, 0.89122807,
       0.94561404, 0.84210526, 0.67665289, 0.94214876, 0.70418182,
       0.85168061, 0.90505676, 0.6119711 , 0.87409701]), 'test_spearman_p': array([-1.94406485e-03, -3.26245615e-06, -9.14974842e-03, -1.84039565e-09,
       -3.07121159e-07, -1.02463740e-09, -6.12776801e-06, -2.04356491e-03,
       -5.25693272e-09, -1.10593642e-03, -7.31458597e-06, -2.45588595e-07,
       -6.95027471e-03, -2.12313009e-06]), 'test_kendall_r': array([0.53530338, 0.70799233, 0.43068034, 0.83284816, 0.71929825,
       0.83625731, 0.73099415, 0.53289474, 0.79605263, 0.47213369,
       0.79211803, 0.79084967, 0.52941176, 0.80392157]), 'test_kendall_p': array([-1.43463321e-03, -2.57958804e-05, -1.05085432e-02, -6.66104086e-07,
       -2.51270610e-06, -5.55516932e-09, -1.52091530e-06, -2.12280461e-03,
       -4.43734615e-06, -6.34972443e-03, -5.23512710e-06, -2.29491225e-07,
       -1.67031272e-03, -1.16879681e-07]), 'test_rmse': array([-20.75773553, -20.7349741 ,  -9.97958612, -27.93665254,
       -22.08018771, -17.9885924 , -19.93793959, -36.8482224 ,
       -27.44738499, -11.50096097, -40.70785397, -28.02291119,
       -26.68438879, -12.81907474]), 'test_mae': array([-11.13548353, -11.1153086 ,  -7.2051143 , -19.44889873,
       -14.35675309, -12.5870755 , -11.75490308, -23.09782378,
       -18.70236488,  -7.55121187, -18.37632712, -18.75415552,
       -15.22170566,  -7.95663547]), 'test_r2': array([ 0.91655619,  0.92857901,  0.95053058,  0.97796011,  0.91313491,
        0.9631436 ,  0.94075482, -0.03667079,  0.98796286,  0.98473458,
        0.44185769,  0.86618959,  0.5974828 ,  0.99499804]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([36.41258383, 38.52602839, 38.73515558, 38.7760005 , 37.72531986,
       37.58679461, 38.49130368, 40.03440309, 37.19192863, 37.71048617,
       37.99398446, 37.15152001, 37.16632867, 35.44452047]), 'score_time': array([0.70431113, 0.61146736, 0.62561154, 0.62657619, 0.69295168,
       0.62708044, 0.62510729, 0.62585115, 0.60864115, 0.63720298,
       0.61935902, 0.61792541, 0.61411738, 0.60762286]), 'test_pearson_r': array([0.95280098, 0.7520614 , 0.98597164, 0.9928811 , 0.94547824,
       0.98614112, 0.98045946, 0.95329299, 0.97207166, 0.9943328 ,
       0.98481557, 0.90933575, 0.98268668, 0.99335671]), 'test_pearson_p': array([-3.14817967e-10, -2.04164303e-04, -1.16989183e-14, -3.75153603e-17,
       -1.04610004e-09, -1.05566082e-14, -1.92069452e-13, -9.83274010e-10,
       -1.70508828e-11, -5.25555026e-17, -1.35501908e-13, -1.72184433e-07,
       -3.84508119e-13, -1.86816194e-16]), 'test_spearman_r': array([0.79473684, 0.65789474, 0.9323972 , 0.91983271, 0.83333333,
       0.88245614, 0.89425195, 0.86732071, 0.84313725, 0.83221488,
       0.97936017, 0.68527214, 0.866736  , 0.76057792]), 'test_spearman_p': array([-4.79996363e-05, -2.20017561e-03, -6.22120518e-09, -2.53667961e-08,
       -9.40148143e-06, -5.75716533e-07, -2.44254136e-07, -3.15825744e-06,
       -1.11290038e-05, -1.83875271e-05, -1.55232323e-12, -1.69777276e-03,
       -3.26505089e-06, -2.47906545e-04]), 'test_kendall_r': array([0.66081871, 0.50877193, 0.85295593, 0.81560624, 0.64912281,
       0.73099415, 0.77419688, 0.70820053, 0.69934641, 0.6950857 ,
       0.90849673, 0.59408853, 0.74343714, 0.62091503]), 'test_kendall_p': array([-2.38419293e-05, -1.86192384e-03, -3.79170253e-07, -1.44533322e-06,
       -3.57225177e-05, -1.52091530e-06, -3.82034206e-06, -4.24489625e-05,
       -1.17506977e-05, -5.87142144e-05, -9.76656516e-11, -6.34658531e-04,
       -1.81645563e-05, -1.54908277e-04]), 'test_rmse': array([-21.64374712, -49.03778326, -16.906162  ,  -8.39725776,
       -19.88972329, -40.51903435, -15.16157603, -15.48590159,
       -12.07741798, -19.393562  , -14.44036125, -33.71708407,
       -20.05455196, -31.60899537]), 'test_mae': array([-15.53618182, -30.75023387, -10.94493878,  -5.02834239,
        -9.56227043, -26.74517328, -11.99537999, -11.60316285,
        -8.26419697, -12.53377895, -10.90547097, -16.46162491,
       -13.72671159, -19.61611118]), 'test_r2': array([0.89789163, 0.24414757, 0.96622675, 0.98549326, 0.77459649,
       0.95920656, 0.95714042, 0.89439636, 0.94149729, 0.98822969,
       0.96471598, 0.78267545, 0.93893342, 0.98465652]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1639, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([25.88765216, 21.37239814, 22.11465144, 21.01213312, 22.06717968,
       20.01355529, 20.60751724, 25.33834147, 27.26816511, 21.75343037,
       20.7176621 , 22.39619994, 25.47254682, 26.60796666]), 'score_time': array([0.40115905, 0.3853631 , 0.38731289, 0.38949013, 0.39989281,
       0.40767026, 0.4324367 , 0.41707563, 0.39552283, 0.37860918,
       0.39320731, 0.36334872, 0.3911469 , 0.3924911 ]), 'test_pearson_r': array([0.99395679, 0.98270108, 0.99583228, 0.9786701 , 0.88003507,
       0.98918154, 0.88591321, 0.99251032, 0.8532699 , 0.9682849 ,
       0.97455092, 0.95171931, 0.9676192 , 0.99803802]), 'test_pearson_p': array([-9.35500067e-18, -6.86990923e-14, -4.00081687e-19, -4.02043406e-13,
       -6.78830276e-07, -1.29925180e-15, -4.52167804e-07, -4.86306464e-16,
       -6.74597358e-06, -4.65944413e-11, -8.16863582e-12, -1.27537329e-09,
       -5.49028418e-11, -1.09709399e-20]), 'test_spearman_r': array([0.72049151, 0.57820827, 0.95652257, 0.80122869, 0.66783683,
       0.96140351, 0.84159727, 0.76446322, 0.86319062, 0.97004184,
       0.86525567, 0.9380805 , 0.95872033, 0.82662539]), 'test_spearman_p': array([-5.02184595e-04, -9.50878701e-03, -1.58635009e-10, -3.74036828e-05,
       -1.77978857e-03, -5.86202817e-11, -6.28590971e-06, -2.20420772e-04,
       -3.98148195e-06, -2.96982597e-11, -3.54940465e-06, -8.93749440e-09,
       -3.72370945e-10, -2.34565531e-05]), 'test_kendall_r': array([0.62170355, 0.53099424, 0.89679028, 0.6099733 , 0.59824304,
       0.85964912, 0.66862458, 0.59869717, 0.68197088, 0.9013353 ,
       0.70820053, 0.81699346, 0.85620915, 0.69934641]), 'test_kendall_p': array([-2.06652455e-04, -1.60063548e-03, -9.95204999e-08, -2.71868003e-04,
       -3.56009163e-04, -1.10425357e-09, -6.58512835e-05, -5.56805123e-04,
       -8.07679747e-05, -2.02850566e-07, -4.24489625e-05, -5.74338967e-08,
       -5.28843419e-09, -1.17506977e-05]), 'test_rmse': array([-21.29869673, -36.5045058 , -16.23630518, -10.44670557,
       -26.62060317, -14.65949698, -27.60718747, -11.32366611,
       -33.13670525, -21.44180849, -25.32332721, -28.87251025,
       -17.2393972 , -29.06416393]), 'test_mae': array([-11.7076139 , -16.07165212,  -9.59792326,  -7.31009474,
       -17.50274217,  -8.43835955, -19.92925778,  -8.57757231,
       -20.79656393, -15.20843265, -15.36026334, -17.77787638,
       -11.05616108, -15.29707798]), 'test_r2': array([0.98447767, 0.96309668, 0.99148388, 0.95320924, 0.75498041,
       0.97602708, 0.677965  , 0.98126858, 0.71216892, 0.93103273,
       0.9346538 , 0.897021  , 0.90619901, 0.97997532]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1011, 'regressor__learning_rate': 0.06690059299760139, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 10, 6: {'test_mad': 77.669408, 'test_ystd': 96.78734890552586, 'test_mae': 105.76302017048901, 'test_rmse': 138.81535188473006, 'test_r2': -1.0570166550254854, 'test_pearson_r': array([-0.34006282]), 'test_pearson_p_value': array([0.09626072]), 'test_spearman_r': -0.30495450892553283, 'test_spearman_p_value': 0.13826538737801758, 'test_kendall_r': -0.2188344431608368, 'test_kendall_p_value': 0.13708283797869386, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.007412510826772921, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 77.669408, 'test_ystd': 96.78734890552586, 'test_mae': 115.59834715411671, 'test_rmse': 150.71360327013898, 'test_r2': -1.4247541852031365, 'test_pearson_r': array([-0.40713013]), 'test_pearson_p_value': array([0.04339356]), 'test_spearman_r': -0.3011335244421163, 'test_spearman_p_value': 0.14352546755932166, 'test_kendall_r': -0.22966561493131388, 'test_kendall_p_value': 0.11924087030940068, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 209, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 77.669408, 'test_ystd': 96.78734890552586, 'test_mae': 103.6220338830094, 'test_rmse': 133.76917903376037, 'test_r2': -0.9101828205600899, 'test_pearson_r': array([-0.03805197]), 'test_pearson_p_value': array([0.85669394]), 'test_spearman_r': -0.09969211197435607, 'test_spearman_p_value': 0.6354105239509047, 'test_kendall_r': -0.04160851637805926, 'test_kendall_p_value': 0.7770915416837916, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04379608766828155, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 77.669408, 'test_ystd': 96.78734890552586, 'test_mae': 114.22781889307058, 'test_rmse': 148.69503908199474, 'test_r2': -1.3602378473601928, 'test_pearson_r': array([-0.39803739]), 'test_pearson_p_value': array([0.04877057]), 'test_spearman_r': -0.3011335244421163, 'test_spearman_p_value': 0.14352546755932166, 'test_kendall_r': -0.22966561493131388, 'test_kendall_p_value': 0.11924087030940068, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 77.669408, 'test_ystd': 96.78734890552586, 'test_mae': 101.83723586347354, 'test_rmse': 132.75234552516588, 'test_r2': -0.8812530526361348, 'test_pearson_r': array([0.13568056]), 'test_pearson_p_value': array([0.51784416]), 'test_spearman_r': 0.005430698706774261, 'test_spearman_p_value': 0.9794460283988908, 'test_kendall_r': 0.006934752729676544, 'test_kendall_p_value': 0.9623656136044043, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06511279994810486, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 77.669408, 'test_ystd': 96.78734890552586, 'test_mae': 104.68441715264763, 'test_rmse': 135.97834601048473, 'test_r2': -0.9737962519681069, 'test_pearson_r': array([-0.06216736]), 'test_pearson_p_value': array([0.76783449]), 'test_spearman_r': -0.12257862795290474, 'test_spearman_p_value': 0.5594062180439012, 'test_kendall_r': -0.09015178548579507, 'test_kendall_p_value': 0.5396067599695071, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 475, 'regressor__learning_rate': 0.08862903357341881, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 77.669408, 'test_ystd': 96.78734890552586, 'test_mae': 108.10949587187132, 'test_rmse': 138.68747574552756, 'test_r2': -1.0532285698127568, 'test_pearson_r': array([-0.16698114]), 'test_pearson_p_value': array([0.42499441]), 'test_spearman_r': -0.22537399633113184, 'test_spearman_p_value': 0.2787239433820986, 'test_kendall_r': -0.15256456005288396, 'test_kendall_p_value': 0.2992352970587707, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.02662050914821215, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 10, 6: {'fit_time': array([15.60392189, 16.03964329, 17.90303349, 17.1585052 , 18.6542325 ,
       17.49175549, 17.66396427, 17.60517192, 18.34423542, 17.16459107]), 'score_time': array([0.3485415 , 0.34010839, 0.32779813, 0.34054375, 0.33777928,
       0.3280642 , 0.337744  , 0.33720112, 0.34925151, 0.33391619]), 'test_pearson_r': array([0.96804265, 0.99666409, 0.99035936, 0.97946057, 0.84184345,
       0.95419124, 0.99253308, 0.95425673, 0.96852744, 0.91288963]), 'test_pearson_p': array([-6.36158441e-16, -1.23277346e-27, -4.05172512e-22, -3.35153296e-18,
       -7.03925197e-08, -4.45692904e-14, -1.90932330e-23, -4.38254569e-14,
       -5.30866316e-16, -2.00800143e-10]), 'test_spearman_r': array([0.74204602, 0.9374145 , 0.94119658, 0.93896394, 0.7799624 ,
       0.86403295, 0.91229271, 0.82523945, 0.86696306, 0.90440471]), 'test_spearman_p': array([-1.43001173e-05, -1.72765843e-12, -8.34003988e-13, -1.28920330e-12,
       -2.62984329e-06, -1.29395298e-08, -8.68860078e-11, -2.12993919e-07,
       -1.01213719e-08, -5.60343597e-10]), 'test_kendall_r': array([0.59351488, 0.83024691, 0.82153846, 0.81972362, 0.73343693,
       0.7418936 , 0.77041694, 0.7253121 , 0.73148148, 0.75793094]), 'test_kendall_p': array([-2.27787915e-05, -2.99165662e-09, -4.25603707e-12, -4.50549884e-09,
       -1.54458522e-07, -1.19779847e-07, -3.55330310e-08, -2.19186604e-07,
       -1.72857768e-07, -1.13899761e-07]), 'test_rmse': array([-18.8786969 , -20.31615476, -24.97422573, -14.58758885,
       -33.76600592, -21.9451667 , -19.27679423, -30.8665233 ,
       -18.99180524, -26.37710395]), 'test_mae': array([-12.38812503, -10.51607756, -17.96557448, -10.93152344,
       -15.01297754,  -9.63635437, -13.09867773, -18.07747919,
       -10.97247055, -14.53268398]), 'test_r2': array([0.92936165, 0.99145228, 0.97757243, 0.95782135, 0.70316301,
       0.88636347, 0.98453342, 0.90144681, 0.93286317, 0.82222366]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 847, 'regressor__learning_rate': 0.08646479880356304, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([41.41864657, 55.31177998, 51.22256374, 41.33750057, 42.37764812,
       39.69625354, 39.59099507, 39.7300241 , 40.52564979, 39.99380732]), 'score_time': array([0.77895689, 0.81242633, 0.81669521, 0.79633117, 0.76127338,
       0.73887777, 0.76412082, 0.78676343, 0.74669981, 0.77056909]), 'test_pearson_r': array([0.97693249, 0.98834986, 0.98865356, 0.98224206, 0.98442188,
       0.93046455, 0.97506646, 0.97486277, 0.95262588, 0.96795448]), 'test_pearson_p': array([-1.33217957e-17, -3.88949832e-21, -2.83732369e-21, -5.93029265e-19,
       -1.24562852e-19, -5.89486125e-12, -3.35586648e-17, -3.69616654e-17,
       -6.61643971e-14, -2.67200750e-15]), 'test_spearman_r': array([0.85127514, 0.78562903, 0.81860148, 0.86095435, 0.73038127,
       0.84722016, 0.83159516, 0.91484273, 0.78803419, 0.91594539]), 'test_spearman_p': array([-3.54282616e-08, -1.98488925e-06, -3.21219381e-07, -1.66489881e-08,
       -2.27428707e-05, -4.78606256e-08, -1.41394108e-07, -6.18048920e-11,
       -1.75699784e-06, -1.35229956e-10]), 'test_kendall_r': array([0.71118355, 0.60991881, 0.67180357, 0.75116009, 0.62249689,
       0.69041571, 0.64715023, 0.77469505, 0.67384615, 0.80467558]), 'test_kendall_p': array([-4.28862573e-07, -1.37939151e-05, -1.53806251e-06, -8.32236524e-08,
       -8.44914717e-06, -8.61703561e-07, -3.65929913e-06, -3.11017083e-08,
       -1.44157463e-07, -1.80122866e-08]), 'test_rmse': array([-17.63314611, -27.86629142, -12.1781111 , -31.98550743,
       -27.68209092, -19.64201128, -38.78983413, -17.40183331,
       -22.55394342, -22.43131787]), 'test_mae': array([-10.49798897, -16.75875652,  -7.42598707, -19.95179313,
       -14.16051195, -13.5789268 , -23.94784761, -10.90620476,
       -14.58529933, -14.70925346]), 'test_r2': array([0.93094558, 0.9719788 , 0.97609579, 0.96173029, 0.96840903,
       0.81175444, 0.94817331, 0.94573668, 0.9019137 , 0.91894171]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([40.84783149, 40.96165228, 41.11583447, 41.34537196, 42.37841916,
       40.7606225 , 42.6758244 , 39.4618907 , 41.99593472, 41.8335464 ]), 'score_time': array([0.75935626, 0.79972601, 0.78303432, 0.7751677 , 0.76460934,
       0.77329087, 0.77042556, 0.87630606, 0.83554339, 0.76265621]), 'test_pearson_r': array([0.95516892, 0.98476328, 0.99462097, 0.99538677, 0.94183599,
       0.70776307, 0.99004052, 0.98014349, 0.94821927, 0.91603711]), 'test_pearson_p': array([-3.45781939e-14, -9.56454714e-20, -3.76913529e-25, -5.99174160e-26,
       -7.33897717e-13, -5.24805498e-05, -5.97731593e-22, -2.24148378e-18,
       -1.88026401e-13, -1.33604067e-10]), 'test_spearman_r': array([0.9110505 , 0.89929904, 0.90477006, 0.9034023 , 0.91913149,
       0.52863738, 0.90196782, 0.93536257, 0.72138659, 0.79453642]), 'test_spearman_p': array([-1.02187080e-10, -4.25657355e-10, -2.24147977e-10, -2.64063140e-10,
       -3.40035209e-11, -5.49659291e-03, -3.12772582e-10, -2.51726962e-12,
       -3.20189135e-05, -2.10616420e-06]), 'test_kendall_r': array([0.76044094, 0.7642536 , 0.80739695, 0.75809027, 0.75809027,
       0.44992349, 0.7523364 , 0.83025087, 0.58664129, 0.73579007]), 'test_kendall_p': array([-5.72906903e-08, -4.56085181e-08, -7.63658832e-09, -5.84304254e-08,
       -5.84304254e-08, -1.28706506e-03, -8.22240608e-08, -2.99157573e-09,
       -3.23468145e-05, -2.73428581e-07]), 'test_rmse': array([-21.95922955, -27.80652557, -34.7544847 , -15.76347465,
       -21.19329786, -48.30088023, -14.15973485, -16.20051978,
       -19.19456532, -27.16780073]), 'test_mae': array([-15.89118728, -17.03120551, -18.39251954, -10.32240647,
       -10.80321857, -27.63885932,  -9.87184357, -10.58767611,
       -13.0158765 , -12.16268602]), 'test_r2': array([0.90941841, 0.96805605, 0.9765611 , 0.99050428, 0.88524884,
       0.29947171, 0.97667181, 0.95672525, 0.89805676, 0.83156808]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([19.15321064, 20.69842553, 19.11091566, 20.3928628 , 17.25745535,
       20.41823959, 21.07056284, 18.3111937 , 18.97847748, 17.4552834 ]), 'score_time': array([0.41384315, 0.4252913 , 0.40640092, 0.41732883, 0.40614915,
       0.41329145, 0.43157554, 0.40251422, 0.40397358, 0.4052062 ]), 'test_pearson_r': array([0.96512592, 0.98428591, 0.13651372, 0.99356438, 0.99195335,
       0.84527183, 0.81944395, 0.96882777, 0.99458184, 0.98390283]), 'test_pearson_p': array([-1.78740959e-15, -1.38157575e-19, -5.06065982e-01, -3.22513807e-24,
       -4.66957667e-23, -5.51337992e-08, -3.05179688e-07, -4.73899732e-16,
       -4.11084298e-25, -1.05181309e-18]), 'test_spearman_r': array([0.84602235, 0.90613781, 0.75990291, 0.84683761, 0.85895026,
       0.88158842, 0.68650591, 0.88406298, 0.83945975, 0.86648717]), 'test_spearman_p': array([-5.22215823e-08, -1.89794996e-10, -6.69181465e-06, -4.92162364e-08,
       -1.95552694e-08, -2.70644164e-09, -1.07674387e-04, -2.12853473e-09,
       -8.31466457e-08, -2.15425098e-08]), 'test_kendall_r': array([0.72558924, 0.78890695, 0.70364161, 0.66153846, 0.68413024,
       0.73800667, 0.53786772, 0.73148497, 0.67796691, 0.73579007]), 'test_kendall_p': array([-2.41749305e-07, -1.66136182e-08, -7.39804238e-07, -2.76031729e-07,
       -9.85994134e-07, -1.49539902e-07, -1.24029348e-04, -1.72854114e-07,
       -1.23262746e-06, -2.73428581e-07]), 'test_rmse': array([ -20.8377742 ,  -15.31462319, -125.19010165,  -27.00839889,
        -21.28872332,  -34.70411373,  -34.11315493,  -18.62071838,
        -18.22893095,  -33.95505759]), 'test_mae': array([-12.12081683, -10.2779598 , -41.98923169, -17.09664698,
       -16.44224182, -16.40220236, -19.81648252, -11.11143928,
       -13.47225317, -24.31863323]), 'test_r2': array([ 0.910262  ,  0.9661246 , -7.9581066 ,  0.9764801 ,  0.98233041,
        0.68818921,  0.64558944,  0.92201768,  0.98779161,  0.9601108 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1038, 'regressor__learning_rate': 0.03407529255766042, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([27.99801826, 25.63958812, 26.62600064, 27.2042892 , 26.35555434,
       25.72678375, 25.50294805, 26.63056684, 27.24337316, 27.26371527]), 'score_time': array([0.44532609, 0.5943141 , 0.47325683, 0.48961401, 0.48776698,
       0.58963203, 0.493325  , 0.51216125, 0.47811198, 0.49316573]), 'test_pearson_r': array([0.97848667, 0.97287157, 0.98774689, 0.98156047, 0.98186182,
       0.69604616, 0.99711621, 0.92027035, 0.90070849, 0.9821872 ]), 'test_pearson_p': array([-5.81441370e-18, -9.13268664e-17, -7.10460211e-21, -9.28641880e-19,
       -7.63213044e-19, -7.85728627e-05, -2.15213770e-28, -2.88542869e-11,
       -3.62118124e-10, -3.34281287e-18]), 'test_spearman_r': array([0.64852875, 0.80492832, 0.78454172, 0.96444444, 0.93299145,
       0.62925586, 0.92236668, 0.86090707, 0.88015047, 0.71362608]), 'test_spearman_p': array([-3.39244096e-04, -7.12405354e-07, -2.09634122e-06, -2.24675205e-15,
       -3.83091081e-12, -5.73513927e-04, -2.11901998e-11, -1.67127752e-08,
       -3.10429069e-09, -6.19712269e-05]), 'test_kendall_r': array([0.4899372 , 0.67907711, 0.62037037, 0.85846154, 0.79076923,
       0.46130252, 0.79321365, 0.72756813, 0.7642536 , 0.61307307]), 'test_kendall_p': array([-4.87798276e-04, -1.33989231e-06, -9.31456860e-06, -9.72056644e-14,
       -6.26737297e-11, -1.00933031e-03, -1.44953027e-08, -2.15267104e-07,
       -4.56085181e-08, -1.88377205e-05]), 'test_rmse': array([-14.9635899 , -15.63219082, -26.18544976, -15.9381595 ,
       -20.45915037, -29.64021784, -22.16545   , -26.54690116,
       -28.81124347, -31.05646968]), 'test_mae': array([-10.20999978,  -8.85694399, -19.21857677,  -9.32385953,
       -12.98131817, -17.1066452 , -13.17590558, -15.63809774,
       -18.74061238, -12.73333483]), 'test_r2': array([0.9572181 , 0.94331107, 0.97535834, 0.94545082, 0.95959176,
       0.17226442, 0.98974824, 0.84199031, 0.80494356, 0.96165009]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1251, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([41.77455544, 41.82099366, 44.6101675 , 45.18012714, 43.82597065,
       41.74105716, 42.73409724, 42.15851855, 41.24286389, 42.77888322]), 'score_time': array([1.00727272, 0.76992679, 0.79298544, 0.77003884, 0.75248361,
       0.75665832, 0.7740736 , 0.77221656, 0.80310464, 0.75804448]), 'test_pearson_r': array([0.92081713, 0.94410047, 0.98098258, 0.9364038 , 0.98988807,
       0.98151094, 0.96564142, 0.99504119, 0.87096135, 0.91914896]), 'test_pearson_p': array([-2.66437594e-11, -4.61106362e-13, -1.34086570e-18, -2.08284100e-12,
       -7.16701399e-22, -9.58781755e-19, -1.49888281e-15, -1.42316864e-25,
       -7.17057404e-09, -8.78955043e-11]), 'test_spearman_r': array([0.73401709, 0.84590399, 0.95774179, 0.76752137, 0.87980853,
       0.90405337, 0.90557667, 0.99025476, 0.71538619, 0.7379762 ]), 'test_spearman_p': array([-1.97306730e-05, -5.26714128e-08, -1.72411911e-14, -4.74446098e-06,
       -3.20637983e-09, -2.44321051e-10, -2.03263134e-10, -4.60946181e-22,
       -3.99407094e-05, -2.54792798e-05]), 'test_kendall_r': array([0.56307692, 0.68006913, 0.85758925, 0.58769231, 0.69645691,
       0.75425129, 0.77898828, 0.936827  , 0.59317914, 0.61538806]), 'test_kendall_p': array([-2.28599951e-05, -1.21804870e-06, -9.81260687e-10, -8.50495587e-06,
       -6.27352373e-07, -7.36407027e-08, -2.70665323e-08, -2.05220877e-11,
       -2.47843323e-05, -1.71060278e-05]), 'test_rmse': array([-23.49051125, -28.90637639, -15.82504551, -19.90415764,
       -28.2746891 , -14.17846174, -16.8605102 , -16.51170354,
       -36.29445294, -93.65325794]), 'test_mae': array([-17.19160682, -15.57759989,  -9.47361032,  -9.59810963,
       -18.34101626, -10.33969223,  -9.22167578, -11.24556841,
       -21.98538754, -37.96795915]), 'test_r2': array([0.84689617, 0.87369498, 0.95584925, 0.76446591, 0.97420641,
       0.95365114, 0.90651823, 0.98925936, 0.75342866, 0.82393538]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([7.87216163, 8.21541095, 9.06798792, 9.19813848, 7.3279283 ,
       7.76011682, 7.44206572, 8.01789999, 8.30426645, 9.08455825]), 'score_time': array([0.2026186 , 0.20568061, 0.2057631 , 0.1983037 , 0.19749808,
       0.19832373, 0.1928792 , 0.20213246, 0.19820571, 0.19700289]), 'test_pearson_r': array([0.99427527, 0.97640387, 0.89989189, 0.95298393, 0.97164282,
       0.94511818, 0.96845275, 0.98078614, 0.93412733, 0.99721662]), 'test_pearson_p': array([-7.94494314e-25, -1.74367630e-17, -3.97790541e-10, -6.05190491e-14,
       -1.54424672e-16, -3.71829777e-13, -5.45973108e-16, -1.51532840e-18,
       -3.13892695e-12, -1.92727778e-27]), 'test_spearman_r': array([0.73334562, 0.63917902, 0.64280916, 0.76890186, 0.87057618,
       0.77017788, 0.94863153, 0.9442545 , 0.9042735 , 0.91153846]), 'test_spearman_p': array([-2.02586792e-05, -4.39592290e-04, -3.97919094e-04, -4.45171357e-06,
       -7.41630175e-09, -4.19559288e-06, -1.71194833e-13, -4.46445682e-13,
       -2.37955994e-10, -2.38062885e-10]), 'test_kendall_r': array([0.62210279, 0.56038226, 0.45654155, 0.64706192, 0.69029358,
       0.58950898, 0.81680564, 0.84259661, 0.77230769, 0.79333333]), 'test_kendall_p': array([-9.93063156e-06, -6.49539034e-05, -1.16648529e-03, -4.00435087e-06,
       -7.87228920e-07, -2.53138601e-05, -6.27830961e-09, -1.74127560e-09,
       -2.68418627e-10, -1.43773539e-10]), 'test_rmse': array([-19.08095802, -48.07191798, -23.1841544 , -21.05088643,
       -18.39738943, -24.67564407, -21.62502008, -19.46805474,
       -29.42285933, -26.70704957]), 'test_mae': array([-11.99557957, -23.19473978, -13.62936818, -14.12612094,
       -13.60004671, -15.07312634, -14.58904592, -11.82320203,
       -18.53072601, -12.86927686]), 'test_r2': array([0.98332371, 0.95052435, 0.78374961, 0.90145343, 0.9426502 ,
       0.88811688, 0.9294303 , 0.94939474, 0.86659451, 0.97750647]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 470, 'regressor__learning_rate': 0.05215246065041876, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 28, 6: {'test_mad': 74.12939575905423, 'test_ystd': 83.65967404707361, 'test_mae': 171.08687182121048, 'test_rmse': 268.5353133755112, 'test_r2': -9.303160705935984, 'test_pearson_r': array([-0.3478969]), 'test_pearson_p_value': array([0.0025618]), 'test_spearman_r': -0.43700287175994956, 'test_spearman_p_value': 0.00011082681460837969, 'test_kendall_r': -0.30722382672096404, 'test_kendall_p_value': 0.00012807328477513862, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 830, 'regressor__learning_rate': 0.08875061829714202, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 74.12939575905423, 'test_ystd': 83.65967404707361, 'test_mae': 99.9713834464886, 'test_rmse': 120.59100120077706, 'test_r2': -1.0777699715549987, 'test_pearson_r': array([-0.46831768]), 'test_pearson_p_value': array([2.93692638e-05]), 'test_spearman_r': -0.5039658874392993, 'test_spearman_p_value': 5.482281495060589e-06, 'test_kendall_r': -0.36297922370826535, 'test_kendall_p_value': 6.144531955037493e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 50, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 74.12939575905423, 'test_ystd': 83.65967404707361, 'test_mae': 162.07900213307312, 'test_rmse': 248.9367923965919, 'test_r2': -7.854128940754791, 'test_pearson_r': array([-0.34270906]), 'test_pearson_p_value': array([0.00299733]), 'test_spearman_r': -0.4619568183116005, 'test_spearman_p_value': 3.8871945626837686e-05, 'test_kendall_r': -0.3395656693813736, 'test_kendall_p_value': 2.2420525439410595e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 74.12939575905423, 'test_ystd': 83.65967404707361, 'test_mae': 145.39779837691404, 'test_rmse': 207.04179934921862, 'test_r2': -5.124684620158695, 'test_pearson_r': array([-0.35270848]), 'test_pearson_p_value': array([0.00220942]), 'test_spearman_r': -0.4757826940755197, 'test_spearman_p_value': 2.0984796723367253e-05, 'test_kendall_r': -0.34193112478287596, 'test_kendall_p_value': 2.011627433395474e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 160, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 74.12939575905423, 'test_ystd': 83.65967404707361, 'test_mae': 119.11378597375402, 'test_rmse': 154.59846031716663, 'test_r2': -2.414900014426028, 'test_pearson_r': array([-0.38680331]), 'test_pearson_p_value': array([0.00072377]), 'test_spearman_r': -0.3735803489582934, 'test_spearman_p_value': 0.0011318879187906987, 'test_kendall_r': -0.2542555376721428, 'test_kendall_p_value': 0.0015338015429111021, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 351, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 74.12939575905423, 'test_ystd': 83.65967404707361, 'test_mae': 112.56334708255642, 'test_rmse': 144.1016016984776, 'test_r2': -1.9669161990533865, 'test_pearson_r': array([-0.39643886]), 'test_pearson_p_value': array([0.00051632]), 'test_spearman_r': -0.4965552981981895, 'test_spearman_p_value': 7.89357192997542e-06, 'test_kendall_r': -0.3682217344579557, 'test_kendall_p_value': 4.385008938506501e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0575773904413585, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 74.12939575905423, 'test_ystd': 83.65967404707361, 'test_mae': 131.0798261742949, 'test_rmse': 179.62584212343927, 'test_r2': -3.6100464162060053, 'test_pearson_r': array([-0.36810033]), 'test_pearson_p_value': array([0.00135501]), 'test_spearman_r': -0.5082479672634639, 'test_spearman_p_value': 4.4236729265714685e-06, 'test_kendall_r': -0.3819568152398055, 'test_kendall_p_value': 1.941088463968403e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 175, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 25, 6: {'fit_time': array([14.93573666, 15.96014357, 15.10950756, 16.14083529]), 'score_time': array([0.39757609, 0.43252826, 0.40281487, 0.39820075]), 'test_pearson_r': array([0.98615554, 0.97899664, 0.96731931, 0.95632719]), 'test_pearson_p': array([-6.98276804e-51, -3.15929518e-45, -2.96312247e-39, -8.01652499e-35]), 'test_spearman_r': array([0.79323237, 0.87278449, 0.80630426, 0.88739038]), 'test_spearman_p': array([-3.34613887e-15, -2.71613211e-21, -5.29318205e-16, -1.60183865e-22]), 'test_kendall_r': array([0.65540815, 0.76004869, 0.65362693, 0.74987652]), 'test_kendall_p': array([-1.46042358e-14, -3.88680833e-19, -1.81924063e-14, -2.35935505e-18]), 'test_rmse': array([-27.19926385, -24.27362499, -30.64773965, -22.52413729]), 'test_mae': array([-15.431986  , -13.99697403, -16.58273166, -12.79958809]), 'test_r2': array([0.96806134, 0.9581355 , 0.9307529 , 0.91221829]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 847, 'regressor__learning_rate': 0.08646479880356304, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([39.10451269, 40.82094216, 37.807482  , 37.41451645]), 'score_time': array([0.92387748, 0.91506767, 0.9337039 , 0.90368605]), 'test_pearson_r': array([0.91605043, 0.98086903, 0.96277514, 0.92213869]), 'test_pearson_p': array([-1.09586224e-26, -1.71530533e-46, -1.67171300e-37, -2.92624050e-27]), 'test_spearman_r': array([0.70973136, 0.87806442, 0.86040923, 0.86874492]), 'test_spearman_p': array([-3.61848400e-11, -7.76329121e-22, -4.16083954e-20, -1.38858321e-20]), 'test_kendall_r': array([0.54431311, 0.77136447, 0.67470792, 0.7352733 ]), 'test_kendall_p': array([-1.74191485e-10, -1.69284265e-19, -2.32108914e-15, -1.03257879e-17]), 'test_rmse': array([-50.60637411, -29.34150264, -33.08622271, -29.67454672]), 'test_mae': array([-23.85909167, -14.25321518, -19.81381962, -17.07315173]), 'test_r2': array([0.82138894, 0.96134482, 0.92167916, 0.84622567]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0785232371180938, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([38.00407577, 37.94223356, 38.89466834, 38.2785933 ]), 'score_time': array([0.9046576 , 0.89604807, 0.98698401, 0.90043354]), 'test_pearson_r': array([0.9840003 , 0.98852609, 0.91423352, 0.92759454]), 'test_pearson_p': array([-6.44789310e-49, -1.95008233e-53, -2.09184581e-26, -3.34147662e-28]), 'test_spearman_r': array([0.90741591, 0.90792565, 0.72530571, 0.82582414]), 'test_spearman_p': array([-2.09528692e-25, -1.77474773e-25, -8.30308582e-12, -4.56929294e-17]), 'test_kendall_r': array([0.77301286, 0.76426735, 0.58058436, 0.71258559]), 'test_kendall_p': array([-1.05909765e-19, -2.57265760e-19, -8.90971357e-12, -1.24563789e-16]), 'test_rmse': array([-28.34194246, -22.9961691 , -30.80942348, -27.35921046]), 'test_mae': array([-17.31038356, -13.5182577 , -18.17114157, -13.62921011]), 'test_r2': array([0.96533257, 0.9763289 , 0.82018539, 0.8590674 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([15.65623736, 15.30354548, 14.19978929, 14.93047571]), 'score_time': array([0.50174356, 0.46510077, 0.46157432, 0.46118426]), 'test_pearson_r': array([0.96952206, 0.83309476, 0.89866478, 0.91295452]), 'test_pearson_p': array([-3.39998481e-40, -7.50036046e-18, -3.14734987e-24, -8.07559816e-26]), 'test_spearman_r': array([0.88945162, 0.79015233, 0.81060525, 0.76188568]), 'test_spearman_p': array([-4.22818182e-23, -5.06894022e-15, -2.79804350e-16, -2.64841529e-13]), 'test_kendall_r': array([0.740631  , 0.66538276, 0.66120319, 0.6597122 ]), 'test_kendall_p': array([-4.55917872e-18, -5.08520460e-15, -8.24278147e-15, -1.41725716e-14]), 'test_rmse': array([-18.72916278, -92.9842117 , -29.15315194, -64.53295269]), 'test_mae': array([-11.79729621, -28.42245496, -15.09376419, -28.06497568]), 'test_r2': array([0.93182117, 0.63243188, 0.79708564, 0.8210452 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 988, 'regressor__learning_rate': 0.023783583412805648, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([26.06529331, 27.17297959, 26.71195912, 28.46103597]), 'score_time': array([0.67782688, 0.67025399, 0.64932299, 0.65335965]), 'test_pearson_r': array([0.98879898, 0.97665745, 0.9842636 , 0.96037909]), 'test_pearson_p': array([-9.17292562e-54, -8.49168184e-44, -3.83810575e-49, -4.16081973e-36]), 'test_spearman_r': array([0.71373924, 0.91727039, 0.81045339, 0.82319405]), 'test_spearman_p': array([-2.50060288e-11, -7.04116527e-27, -2.86252261e-16, -6.97495954e-17]), 'test_kendall_r': array([0.55542608, 0.78892902, 0.69724974, 0.70146763]), 'test_kendall_p': array([-7.34972478e-11, -1.69871157e-20, -2.87947608e-16, -2.93113229e-16]), 'test_rmse': array([-18.27343112, -20.14219176, -27.82744162, -31.41430851]), 'test_mae': array([-11.08331013, -13.21500514, -16.51483274, -16.85283921]), 'test_r2': array([0.9765347 , 0.94515843, 0.96628647, 0.91894601]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1436, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([3.29062223, 3.71685958, 3.33565426, 3.55990887]), 'score_time': array([0.13747478, 0.11405087, 0.11503386, 0.14647222]), 'test_pearson_r': array([0.8930232 , 0.96792217, 0.99022554, 0.94255458]), 'test_pearson_p': array([-1.58868261e-23, -1.66327537e-39, -1.28242223e-55, -3.20130449e-31]), 'test_spearman_r': array([0.82191991, 0.78211741, 0.91070239, 0.73506177]), 'test_spearman_p': array([-4.82636454e-17, -1.45088261e-14, -7.06060480e-26, -4.65926193e-12]), 'test_kendall_r': array([0.65640069, 0.58182777, 0.75283445, 0.62843674]), 'test_kendall_p': array([-1.13884805e-14, -8.22519954e-12, -9.60276501e-19, -2.80083245e-13]), 'test_rmse': array([-34.52597288, -32.58070062, -15.32755328, -52.73729789]), 'test_mae': array([-22.77761105, -18.9314829 , -10.93104014, -27.18498334]), 'test_r2': array([0.77446048, 0.93129061, 0.97981388, 0.88511336]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 217, 'regressor__learning_rate': 0.07575367469439097, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([37.89735746, 39.105165  , 39.38865376, 39.4987731 ]), 'score_time': array([0.9056828 , 0.96878362, 0.9047904 , 0.9318459 ]), 'test_pearson_r': array([0.9821413 , 0.93201294, 0.95942823, 0.97111479]), 'test_pearson_p': array([-2.00048791e-47, -1.82332407e-29, -2.39380022e-36, -2.71221749e-40]), 'test_spearman_r': array([0.70024834, 0.86260668, 0.91081775, 0.91199029]), 'test_spearman_p': array([-8.46699047e-11, -2.61334897e-20, -6.79094534e-26, -1.11980976e-25]), 'test_kendall_r': array([0.59701054, 0.71483697, 0.76158869, 0.76036773]), 'test_kendall_p': array([-2.71618209e-12, -4.36468657e-17, -4.01580195e-19, -7.25707988e-19]), 'test_rmse': array([-35.83849419, -25.57878716, -23.45674424, -32.19198752]), 'test_mae': array([-17.11451327, -14.25763177, -14.80962119, -18.49696732]), 'test_r2': array([0.95553341, 0.85808901, 0.91804117, 0.93688929]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07601110109000085, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 522)}}
Trimer_scaler
Filename: (ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 ECFP6_Count_512bit cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 ECFP6_Count_512bit cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 ECFP6_Count_512bit cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n07>
Subject: Job 294631: <NGB_Rg1 (nm)_ECFP_Trimer_KM4 ECFP6_Count_512bit cluster_20250311> in cluster <Hazel> Done

Job <NGB_Rg1 (nm)_ECFP_Trimer_KM4 ECFP6_Count_512bit cluster_20250311> was submitted from host <c040n04> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 18:16:47 2025
Job was executed on host(s) <6*c205n07>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 00:08:00 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 00:08:00 2025
Terminated at Fri Mar 14 08:50:40 2025
Results reported at Fri Mar 14 08:50:40 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_Rg1 (nm)_ECFP_Trimer_KM4 ECFP6_Count_512bit cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_KM4 ECFP6_Count_512bit cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_KM4 ECFP6_Count_512bit cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "Rg1 (nm)"                                       --representation "ECFP"                                       --regressor_type "NGB"                                       --radius "3"                                       --vector "count"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 ECFP6_Count_512bit cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   881193.12 sec.
    Max Memory :                                 3 GB
    Average Memory :                             3.00 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   204187 sec.
    Turnaround time :                            225233 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_KM4 ECFP6_Count_512bit cluster_20250311.err> for stderr output of this job.

