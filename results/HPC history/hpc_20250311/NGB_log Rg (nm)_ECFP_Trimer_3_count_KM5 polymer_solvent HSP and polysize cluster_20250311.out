


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028738296890209375), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003595895550174238), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.040771793173616656), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06319919230753808), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1166), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 978), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5969237865014107e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 708), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 81), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07106382336670804), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1268), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.035388095882628465), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1135), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029839888361035963), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1992), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.6781108959438575e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06451414380027143), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 209), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 891), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038855100339121935), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07805683974706816), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026728424810982428), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1087), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09756333367517175), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1866), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.0302392924892563e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.018004002321051007), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1968), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6938325182117983e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01467397050909521), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1980), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0763365974809274e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017255363403121043), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0532370808580391), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 327), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 347), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0988728761562561), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1353), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006375325414494458), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939659181184061), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 861), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.204880003633577e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02173671287549819), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1942), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008848438210611293), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09816077935230821), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1931), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.7754211930210059e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06405341973392371), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1138), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09791644148144611), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1054), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.9331226171333433e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061998039787854065), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1086), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04097569297374507), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 634), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010349589985453255), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007998776456387104), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05433392274693707), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06687380053969458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 132), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009584276191430081), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047619164745341565), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016578813289610587), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04569768983768096), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05377445504330152), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04175203961187146), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1132), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05585734699622827), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09936328768694518), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 111), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1421517661462271e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.043497380527799966), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1266), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1111), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3222814141364262e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.052551940263935115), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 302), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08025411273754049), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 262), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.037595534626774e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1151), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03256604017101052), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 543), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0557997559659454), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 343), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.039769298536697244), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1166), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0994031119010002), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 660), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005190625065642268), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03071670571540489), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1949), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.0561172920657638e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 164), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1211), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056183393394920414), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 608), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.060578576103271324), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09723454246900423), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1376), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.6426149904614157e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051283795103864944), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06546818324633638), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1090), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023125116191890477), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 335), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 81), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06113082462062136), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 627), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019103901899560734), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07211268828610243), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 788), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05962869803321048), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06038513955098077), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1172), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 783), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0498088860264745), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047474315880468715), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1984), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.2000897749259433e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1367), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.046880058576535384), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1128), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09796194510567587), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1117), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5698737126789288e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 455), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057369620030032806), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06594159982294345), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1833), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.128349141430652e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02269967405618449), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 171), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 905), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 733), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09782337498512109), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1903), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1065480874924181e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0963634366655202), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1003), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004905538357899311), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03798828070750238), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1228), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05557340785951244), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 411), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07067898737532446), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 412), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1372), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02272089106542431), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09804697500837978), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1972), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003818371276154087), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.018554894006213258), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1353), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09791644148144611), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1054), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.9331226171333433e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09852459682729166), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 376), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.0402944950903007e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06016918538647339), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 840), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03372643953187902), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 485), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019944900797517536), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 175), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05064185819086697), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 806), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021614304547210465), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0995150538327643), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 127), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.240027349109668e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.033670958680860646), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 933), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02085850985018988), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1230), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.196821955019868e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09382818839155137), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1018), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3812365198025787e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09878127568409924), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 927), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.164106499974509e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013585615955551193), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04055311590381425), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 186), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03416587715179171), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06789019653896285), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02014441047502138), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1502), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 226), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1591), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01078726538523185), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1966), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4010145123452578e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09981690742218503), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1848), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010731548050205648), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02117015373515153), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.949586905965286e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06851820609840353), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1386), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 313), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03868134049486075), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.204403024239257e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06862054429750516), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09564331995300249), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1924), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00042335910759550634), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04000134847186992), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09696669482942233), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1986), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0172152203029321e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 230), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09926265250590843), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00045294272110524725), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09772364923259078), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1404), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3754122985584748e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 81), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08036081804865126), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 215), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05209076304471149), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09878251076677698), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1961), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000896269323784464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06304602308314093), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1322), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007825936674525617), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09998095470593356), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 503), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000679008957299703), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1426), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07972888169180409), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1193), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06286091575566202), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038521691900725984), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 496), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04130172840986146), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 614), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009706696714581295), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09892578834826635), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1293), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.997494921799687e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06124115786663045), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 218), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06522568056426338), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 403), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 110), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04713191264958604), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 754), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09984160850557258), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1016), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6680932085388465e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09936292732825111), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 212), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008684215684182255), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 345), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09683239179026333), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 774), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3642992583349537e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09868712715992688), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1863), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.84949415333334e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.7286090997187063e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.065162041544302), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 109), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2579271696121406e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03973822377539788), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02273689339067506), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09669248870356785), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 447), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009312530349495845), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06034827948872465), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 594), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008449128945691097), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06116809673944254), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06425736793157873), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06039959807896775), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030349232343277563), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 763), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1298), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 202), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02485869160337663), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038382535710827156), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09984275777683262), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 227), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007113738183161378), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07449608162242116), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029005700740593242), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03656289462488771), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 533), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09861621135307413), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1339), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.510384627796408e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06535854670979427), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 690), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0874523465769735e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09392122159680542), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1971), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0820030721981228e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010699491539346436), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 599), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03877368351565206), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 176), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009594097091844468), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09795891892540581), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 293), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.099259697839958e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09986786358800742), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 239), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6539570747694552e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06613073903002288), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 332), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000984075157591256), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07703476083875631), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 214), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05372134344382997), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1990), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00044405958588139024), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05215320222678827), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.501352567238128e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07002666101659609), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 224), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.090938425019779e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 145), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09522777460772093), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1969), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.557674690101985e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1087), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06447317366253336), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1489), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006873633727139311), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09808150130649956), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1920), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004873464846543368), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022974503718792203), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04825763513554655), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 424), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07146897943662334), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011267536937259496), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1284), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0669283544278206), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05143969231757074), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0422088576612476), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1197), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07263448184329876), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 761), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09718912956443351), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1968), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008725657932082626), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.098486949312515), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1990), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003238107399272306), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05980811753090278), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 722), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09914384602110755), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 541), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4092396349245396e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09968365979675184), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 309), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002948346619184901), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05780668753374178), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1214), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0387751397220086), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 502), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09701762666231041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003180614538446503), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09806186736791338), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1124), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.834736093352418e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09909580368412618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 118), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3392143673322585e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057844373159793926), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 570), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05995620449276328), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1974), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00033219855748031876), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 171), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09645437238156156), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1132), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3455800791511491e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 527), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08966708114854255), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000572705306615825), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09870327124749789), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 476), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007906833667141689), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047304638415135374), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 673), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04839499203359974), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1120), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1155), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06450540965890757), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05341474644517371), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1287), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05914133953531246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 803), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.052840322166548256), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04928728889403082), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 427), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025222835531145193), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1223), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6450987186264498e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09905734503565382), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 116), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006141884257600994), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010988226591084737), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06178298487318822), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04481515446346335), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022030824717881644), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 636), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02560689064397697), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028351999600480054), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04258715716226726), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 494), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017990448059144477), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1993), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005607762532631308), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047158962923616043), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 179), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019505392169701447), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09958309505878782), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 97), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.632778238680962e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02757859055770928), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1182), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 287), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09956564371289756), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 856), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0673857804456996e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.052557384553558247), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1278), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09738378901277296), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4733072463880757e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020166842694318843), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 440), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.033444548235960145), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 343), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09922182729618462), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1970), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.036506877285126e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057094929832405585), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 290), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004499654414154686), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029902564888935352), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.042866234730278265), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1271), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 445), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037544395232970394), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 893), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 4



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 463), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05863943587737683), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 730), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05747424763692935), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 672), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1211355632582446e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03859780412934728), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0706580133591674e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036660796373716685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1124), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08369906695357923), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1772), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 101), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 9.42166992861476e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06192836110027857), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 409), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05422380867262376), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1411), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 231), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07105507839143352), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1963), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4942893733538835e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06042272448318699), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1990), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.062669576220958e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1563), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04132066231238722), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 871), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09934562181249962), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 210), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004136253316681634), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05593520554222124), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 477), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009424770583404006), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09036663202439614), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1994), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.820495206856014e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03906622847358617), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031139779066153235), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1158), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 330), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0992850654252746), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 245), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4223444162347582e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 193), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09519991703670388), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1980), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00042950047384347474), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.099543325869263), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 575), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.339062739181403e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1084), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04881927443657466), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1243), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061502832052996025), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.053957806470951844), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09804697500837978), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1972), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003818371276154087), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06101073732424363), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1272), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09804697500837978), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1972), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003818371276154087), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04628920648960295), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09960635312247378), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 457), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4590107245325822e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.039832531537674666), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00016456367256344735), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031772635278624395), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05731820355590265), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 99), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 118), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09565058335506543), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1148), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1743494908704632e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09866233765561166), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 130), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006300337690885356), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0268036096766342), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04876716516860041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 605), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03304484234251019), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0315170047818033), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07470507494297844), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1491), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 146), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050755508291787495), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007292293194507906), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1954), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2923830475782333e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037687998445776395), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 715), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1695), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09798460844890435), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 818), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00037049802895294635), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 460), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 63), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051286343603930994), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03644360306830401), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1151), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0452673785254148e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06854371348910131), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1984), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.220112247652097e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026776515762238138), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1438), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09703102956642813), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 590), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003889890930137188), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0639974167558691), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1955), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.938809673506687e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06491164079860441), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01699810000177632), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1155), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.0577873164918506e-06), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 34, 6: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.48746955158656197, 'test_rmse': 0.7100500879886603, 'test_r2': -0.5591144880890426, 'test_pearson_r': array([-0.15451354]), 'test_pearson_p_value': array([0.14824187]), 'test_spearman_r': -0.24667714504304497, 'test_spearman_p_value': 0.019785800574744446, 'test_kendall_r': -0.1831987898073873, 'test_kendall_p_value': 0.012485281934631299, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.4387694553222274, 'test_rmse': 0.6175582914576989, 'test_r2': -0.17938595105653388, 'test_pearson_r': array([0.03892309]), 'test_pearson_p_value': array([0.71724289]), 'test_spearman_r': -0.1592748137041571, 'test_spearman_p_value': 0.13599057199610504, 'test_kendall_r': -0.10502007438460467, 'test_kendall_p_value': 0.15212443590732214, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 586, 'regressor__learning_rate': 0.06991692945397764, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.5241726217417632, 'test_rmse': 0.6405679759256921, 'test_r2': -0.2689090132388221, 'test_pearson_r': array([-0.08217868]), 'test_pearson_p_value': array([0.44390916]), 'test_spearman_r': -0.29791711377193514, 'test_spearman_p_value': 0.0045753817365642565, 'test_kendall_r': -0.19935572432809573, 'test_kendall_p_value': 0.006559030411168858, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1968, 'regressor__learning_rate': 0.018004002321051007, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.5020699094338847, 'test_rmse': 0.7122172368322215, 'test_r2': -0.5686461802816201, 'test_pearson_r': array([-0.19986993]), 'test_pearson_p_value': array([0.06039354]), 'test_spearman_r': -0.27822321738121436, 'test_spearman_p_value': 0.008290838047537994, 'test_kendall_r': -0.2165550417211079, 'test_kendall_p_value': 0.0031472905268247996, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.5702804983976877, 'test_rmse': 0.7539868880230943, 'test_r2': -0.7580354291654667, 'test_pearson_r': array([-0.28635564]), 'test_pearson_p_value': array([0.00651824]), 'test_spearman_r': -0.25745445305210973, 'test_spearman_p_value': 0.014863219670405405, 'test_kendall_r': -0.17130233572614678, 'test_kendall_p_value': 0.019555990210055295, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 132, 'regressor__learning_rate': 0.06687380053969458, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.4658706371486653, 'test_rmse': 0.606134432907206, 'test_r2': -0.1361559515042292, 'test_pearson_r': array([0.04876915]), 'test_pearson_p_value': array([0.64993432]), 'test_spearman_r': -0.026872149970191456, 'test_spearman_p_value': 0.8026084536137017, 'test_kendall_r': -0.02209208283850984, 'test_kendall_p_value': 0.7626785695028533, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05585734699622827, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.4624078181205592, 'test_ystd': 0.568656466299265, 'test_mae': 0.5104111171211119, 'test_rmse': 0.6913876751660987, 'test_r2': -0.4782343947206922, 'test_pearson_r': array([-0.17620296]), 'test_pearson_p_value': array([0.09858611]), 'test_spearman_r': -0.2648267465955167, 'test_spearman_p_value': 0.012141552159417418, 'test_kendall_r': -0.15250685379370202, 'test_kendall_p_value': 0.03733743816333144, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 660, 'regressor__learning_rate': 0.0994031119010002, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 33, 6: {'fit_time': array([19.36812949, 20.75281763, 17.70082426]), 'score_time': array([0.52038169, 0.51904345, 0.50711584]), 'test_pearson_r': array([0.93658455, 0.89617176, 0.86263342]), 'test_pearson_p': array([-1.80323343e-40, -2.19280594e-31, -1.37188705e-26]), 'test_spearman_r': array([0.91797452, 0.90563742, 0.85050644]), 'test_spearman_p': array([-6.85233638e-36, -4.82766314e-33, -3.69205869e-25]), 'test_kendall_r': array([0.79769664, 0.801209  , 0.75541612]), 'test_kendall_p': array([-9.69767709e-28, -1.24134645e-27, -8.93691632e-25]), 'test_rmse': array([-0.22995253, -0.29266477, -0.30430638]), 'test_mae': array([-0.12774123, -0.13172552, -0.15032578]), 'test_r2': array([0.87297349, 0.80096698, 0.72340977]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1268, 'regressor__learning_rate': 0.07106382336670804, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([31.63400912, 35.12128282, 32.01906109]), 'score_time': array([0.84825754, 0.80535197, 0.80733633]), 'test_pearson_r': array([0.88290078, 0.88841654, 0.87664587]), 'test_pearson_p': array([-1.20879159e-29, -3.83577645e-30, -2.01692085e-28]), 'test_spearman_r': array([0.83276447, 0.89629242, 0.86567082]), 'test_spearman_p': array([-1.53726006e-23, -2.09360354e-31, -5.72411593e-27]), 'test_kendall_r': array([0.69320482, 0.78892618, 0.72550427]), 'test_kendall_p': array([-2.49332741e-21, -6.91240476e-27, -6.16015990e-23]), 'test_rmse': array([-0.32192077, -0.29851168, -0.29579718]), 'test_mae': array([-0.16741749, -0.14298789, -0.17058194]), 'test_r2': array([0.73224336, 0.78466638, 0.75861811]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07805683974706816, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([21.02380967, 21.73023248, 22.22829127]), 'score_time': array([0.54090977, 0.58929467, 0.55835342]), 'test_pearson_r': array([0.96366606, 0.89180354, 0.92290271]), 'test_pearson_p': array([-1.66073294e-50, -1.12898933e-30, -1.42667988e-36]), 'test_spearman_r': array([0.95873869, 0.86787913, 0.93347306]), 'test_spearman_p': array([-3.33727843e-48, -2.99127834e-27, -3.62878370e-39]), 'test_kendall_r': array([0.84455788, 0.75967181, 0.83173652]), 'test_kendall_p': array([-6.27139019e-31, -5.17654046e-25, -1.50927443e-29]), 'test_rmse': array([-0.17547029, -0.26896567, -0.25173433]), 'test_mae': array([-0.12197826, -0.1427927 , -0.11979764]), 'test_r2': array([0.92708704, 0.78345782, 0.85035966]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1353, 'regressor__learning_rate': 0.0988728761562561, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([18.28156376, 16.60757113, 15.40929794]), 'score_time': array([0.44184494, 0.43920445, 0.45038509]), 'test_pearson_r': array([0.91221185, 0.84087802, 0.93265747]), 'test_pearson_p': array([-1.08683217e-34, -4.12500231e-24, -5.95242832e-39]), 'test_spearman_r': array([0.91952162, 0.84791101, 0.92699817]), 'test_spearman_p': array([-3.15176378e-36, -7.19309793e-25, -1.56905089e-37]), 'test_kendall_r': array([0.82390598, 0.7360491 , 0.80827198]), 'test_kendall_p': array([-2.79240652e-29, -1.34555633e-23, -3.51860744e-28]), 'test_rmse': array([-0.24263318, -0.36548162, -0.2412499 ]), 'test_mae': array([-0.11852757, -0.18192818, -0.13408997]), 'test_r2': array([0.82772101, 0.67271867, 0.86467438]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1086, 'regressor__learning_rate': 0.061998039787854065, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([22.44048309, 22.8011477 , 29.22801304]), 'score_time': array([0.81000829, 0.81057978, 0.80374718]), 'test_pearson_r': array([0.95030399, 0.86381629, 0.89257261]), 'test_pearson_p': array([-7.59570078e-45, -9.78524041e-27, -8.50398380e-31]), 'test_spearman_r': array([0.92996698, 0.83721281, 0.91273294]), 'test_spearman_p': array([-1.06647662e-38, -9.91492470e-24, -2.10065872e-34]), 'test_kendall_r': array([0.78862945, 0.73694312, 0.83274002]), 'test_kendall_p': array([-4.22587236e-27, -1.15864590e-23, -9.42605538e-30]), 'test_rmse': array([-0.19538933, -0.3324911 , -0.28694174]), 'test_mae': array([-0.12391374, -0.1599803 , -0.12223311]), 'test_r2': array([0.90304755, 0.72004698, 0.79152569]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.016578813289610587, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([8.37804437, 8.45801091, 8.06874084]), 'score_time': array([0.23648667, 0.23848629, 0.24585772]), 'test_pearson_r': array([0.92355567, 0.87802378, 0.88163273]), 'test_pearson_p': array([-3.85710310e-37, -1.29573554e-28, -3.96256905e-29]), 'test_spearman_r': array([0.91624173, 0.8511367 , 0.89354298]), 'test_spearman_p': array([-1.60623287e-35, -3.13404517e-25, -5.92930247e-31]), 'test_kendall_r': array([0.76574821, 0.69865685, 0.79181283]), 'test_kendall_p': array([-1.11485270e-25, -2.00530332e-21, -6.37190352e-27]), 'test_rmse': array([-0.24096966, -0.29998242, -0.32497847]), 'test_mae': array([-0.15072271, -0.18800368, -0.16405433]), 'test_r2': array([0.83598544, 0.75369548, 0.77330917]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 543, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([9.0535624 , 9.14950132, 8.54357886]), 'score_time': array([0.30610681, 0.2896564 , 0.28902507]), 'test_pearson_r': array([0.8931438 , 0.85665496, 0.9592805 ]), 'test_pearson_p': array([-3.07656988e-31, -7.22222813e-26, -6.85305727e-48]), 'test_spearman_r': array([0.89449271, 0.8512387 , 0.9545892 ]), 'test_spearman_p': array([-1.84541184e-31, -3.05181161e-25, -6.07038072e-46]), 'test_kendall_r': array([0.79527539, 0.73209029, 0.82899502]), 'test_kendall_p': array([-2.11828451e-27, -2.53263421e-23, -1.57723945e-29]), 'test_rmse': array([-0.2883728 , -0.31226813, -0.18204923]), 'test_mae': array([-0.13489848, -0.17016849, -0.11976917]), 'test_r2': array([0.78978924, 0.71364695, 0.91859245]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 608, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 6, 6: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.0266991979281066, 'test_rmse': 1.2926692962715893, 'test_r2': -1.0198512257276096, 'test_pearson_r': array([0.47129193]), 'test_pearson_p_value': array([0.06536108]), 'test_spearman_r': 0.5847849950427069, 'test_spearman_p_value': 0.017346167865612452, 'test_kendall_r': 0.38468063595230617, 'test_kendall_p_value': 0.04593870671167488, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.051283795103864944, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.1985139313818103, 'test_rmse': 1.5279662210305083, 'test_r2': -1.82209755126207, 'test_pearson_r': array([-0.37751794]), 'test_pearson_p_value': array([0.1494238]), 'test_spearman_r': -0.5545635482704739, 'test_spearman_p_value': 0.025785866009988112, 'test_kendall_r': -0.527817616771769, 'test_kendall_p_value': 0.006169437999132793, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05962869803321048, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.0608205010329772, 'test_rmse': 1.3585425683715695, 'test_r2': -1.2309560637376311, 'test_pearson_r': array([-0.0863606]), 'test_pearson_p_value': array([0.7504732]), 'test_spearman_r': -0.025688229756397972, 'test_spearman_p_value': 0.924765580787638, 'test_kendall_r': -0.008946061301216422, 'test_kendall_p_value': 0.9629774227312178, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.02269967405618449, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.1894222792645814, 'test_rmse': 1.4775730923822896, 'test_r2': -1.6390186697259153, 'test_pearson_r': array([-0.11162052]), 'test_pearson_p_value': array([0.68066585]), 'test_spearman_r': -0.01964394040195139, 'test_spearman_p_value': 0.9424362771994955, 'test_kendall_r': 0.008946061301216422, 'test_kendall_p_value': 0.9629774227312178, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1372, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.213197539513146, 'test_rmse': 1.4889039892250895, 'test_r2': -1.6796489481481167, 'test_pearson_r': array([0.09520247]), 'test_pearson_p_value': array([0.72580032]), 'test_spearman_r': 0.336969131510397, 'test_spearman_p_value': 0.201862029240849, 'test_kendall_r': 0.2057594099279777, 'test_kendall_p_value': 0.2856989981519855, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 806, 'regressor__learning_rate': 0.05064185819086697, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.0820691057912333, 'test_rmse': 1.3843915200471786, 'test_r2': -1.3166604050943307, 'test_pearson_r': array([-0.04893492]), 'test_pearson_p_value': array([0.85717744]), 'test_spearman_r': -0.0015110723386116457, 'test_spearman_p_value': 0.9955686235249297, 'test_kendall_r': 0.04473030650608211, 'test_kendall_p_value': 0.8164697326366623, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.013585615955551193, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 1.083120554168953, 'test_rmse': 1.3831636286755242, 'test_r2': -1.3125526859070864, 'test_pearson_r': array([-0.13061947]), 'test_pearson_p_value': array([0.62968497]), 'test_spearman_r': -0.021171431068793448, 'test_spearman_p_value': 0.937967919036605, 'test_kendall_r': 0.0, 'test_kendall_p_value': 1.0, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.02117015373515153, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 6, 6: {'fit_time': array([10.61406398, 10.57993388,  8.74261284, 10.40122771, 10.5748148 ,
       10.2551074 , 10.95089674, 11.17801952, 11.10477948, 12.98546934,
        9.69357634,  9.66029549, 10.18209219, 10.30731487, 10.74030519,
        9.93725252]), 'score_time': array([0.17654133, 0.17370605, 0.16977119, 0.17157197, 0.17063212,
       0.17049909, 0.17098784, 0.18377423, 0.18036318, 0.17260122,
       0.17317843, 0.17602158, 0.17687678, 0.17323256, 0.17147923,
       0.17810178]), 'test_pearson_r': array([0.97824693, 0.97947522, 0.9940526 , 0.98033291, 0.93892654,
       0.96880316, 0.97958801, 0.7008897 , 0.96859375, 0.94464487,
       0.98332482, 0.9611694 , 0.97640371, 0.95465221, 0.89406512,
       0.97314314]), 'test_pearson_p': array([-1.17105695e-11, -7.59987429e-12, -7.31855612e-16, -2.89739738e-11,
       -7.22455274e-08, -7.10102377e-10, -3.75117913e-11, -2.48951843e-03,
       -7.43734172e-10, -3.68657956e-08, -9.19934683e-12, -3.22061638e-09,
       -1.02616018e-10, -9.37681167e-09, -3.02134729e-06, -2.51732996e-10]), 'test_spearman_r': array([0.96323529, 0.94911115, 0.98957713, 0.92352941, 0.83235294,
       0.94117647, 0.96688768, 0.68529412, 0.96470588, 0.92273756,
       0.95511431, 0.9256809 , 0.96688768, 0.90882353, 0.73637782,
       0.95588235]), 'test_spearman_p': array([-5.74099506e-10, -6.30978333e-09, -4.85604035e-14, -3.34390001e-07,
       -6.32812457e-05, -5.58893763e-08, -1.07216639e-09, -3.39156175e-03,
       -1.66620775e-09, -3.58624443e-07, -8.73885027e-09, -2.75438509e-07,
       -1.07216639e-09, -1.10058522e-06, -1.14207169e-03, -7.76027446e-09]), 'test_kendall_r': array([0.88235294, 0.84871427, 0.952036  , 0.81666667, 0.71666667,
       0.8       , 0.89540533, 0.73333333, 0.86666667, 0.81172259,
       0.86193223, 0.82845913, 0.87866878, 0.78333333, 0.67229265,
       0.86666667]), 'test_kendall_p': array([-3.57438554e-09, -2.12480839e-06, -1.04704970e-07, -5.50848432e-07,
       -2.87624658e-05, -1.17934846e-06, -1.41912826e-06, -1.62687222e-05,
       -3.98309214e-08, -1.23329686e-05, -3.45008795e-06, -8.12917002e-06,
       -2.22140114e-06, -2.41022656e-06, -3.07232055e-04, -3.98309214e-08]), 'test_rmse': array([-0.12663864, -0.14220957, -0.08378484, -0.13942288, -0.16640767,
       -0.17470154, -0.12243058, -0.53048178, -0.17527901, -0.19705719,
       -0.10699294, -0.17719515, -0.15812433, -0.17224641, -0.26249656,
       -0.11573707]), 'test_mae': array([-0.08392261, -0.0834182 , -0.05838345, -0.10385571, -0.10070714,
       -0.12906466, -0.08425894, -0.20914437, -0.09921338, -0.12714639,
       -0.0790474 , -0.13657018, -0.1089448 , -0.12156873, -0.11479094,
       -0.07510409]), 'test_r2': array([0.95232344, 0.94659738, 0.98729   , 0.9551306 , 0.87069029,
       0.93145009, 0.95460905, 0.42885171, 0.93589372, 0.88674737,
       0.96643072, 0.91727684, 0.94315283, 0.87479111, 0.75469531,
       0.94285086]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 627, 'regressor__learning_rate': 0.06113082462062136, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([26.84897423, 26.22511339, 25.25269532, 24.77960134, 25.03751612,
       25.65721989, 25.59170628, 25.8430438 , 26.27028012, 25.85762262,
       24.3221097 , 27.1804235 , 23.45850182, 25.62050748, 24.48012209,
       25.90249944]), 'score_time': array([0.36494923, 0.35411763, 0.35204744, 0.34729695, 0.34384274,
       0.349962  , 0.37008739, 0.34966207, 0.35138345, 0.35222149,
       0.34045219, 0.34060979, 0.35001659, 0.3439436 , 0.3453455 ,
       0.35221863]), 'test_pearson_r': array([0.98116464, 0.9891751 , 0.99006161, 0.99257878, 0.98758941,
       0.96029285, 0.68726778, 0.9816833 , 0.95801648, 0.97713362,
       0.83567845, 0.99496339, 0.98907836, 0.95764917, 0.97713673,
       0.90201034]), 'test_pearson_p': array([-4.00998039e-12, -6.44248900e-14, -3.40293073e-14, -3.25979074e-14,
       -1.17679644e-12, -3.75652225e-09, -3.26468989e-03, -1.76729532e-11,
       -5.51592401e-09, -8.25144686e-11, -5.55168672e-05, -2.17549858e-15,
       -4.82919897e-13, -5.85698402e-09, -8.24367661e-11, -1.78909340e-06]), 'test_spearman_r': array([0.92090759, 0.94052746, 0.96560488, 0.96983102, 0.94411765,
       0.961001  , 0.76764706, 0.98529412, 0.87858743, 0.93598259,
       0.76674046, 0.99705882, 0.98823529, 0.95      , 0.98085526,
       0.85588235]), 'test_spearman_p': array([-1.58591399e-07, -1.98053909e-08, -3.50731305e-10, -5.63193822e-10,
       -3.93392920e-08, -3.31817876e-09, -5.16883524e-04, -3.83671954e-12,
       -7.52120583e-06, -9.96523255e-08, -5.29776409e-04, -5.06558834e-17,
       -8.10888105e-13, -1.83461727e-08, -2.40310904e-11, -2.34491569e-05]), 'test_kendall_r': array([0.77491302, 0.80443352, 0.86994258, 0.89540533, 0.83333333,
       0.87866878, 0.7       , 0.93333333, 0.6778302 , 0.84519568,
       0.57741091, 0.98333333, 0.95      , 0.83333333, 0.90759507,
       0.7       ]), 'test_kendall_p': array([-1.49855832e-05, -6.99598360e-06, -1.33413173e-06, -1.41912826e-06,
       -2.44193725e-07, -2.22140114e-06, -4.94106357e-05, -3.55879882e-10,
       -2.61704221e-04, -5.31661458e-06, -1.87273015e-03, -1.52943275e-12,
       -7.63760478e-11, -2.44193725e-07, -1.10296350e-06, -4.94106357e-05]), 'test_rmse': array([-0.10103968, -0.10510002, -0.08805022, -0.10717923, -0.09842171,
       -0.19672435, -0.53474867, -0.14540679, -0.15574317, -0.12841902,
       -0.34072947, -0.07480694, -0.08568739, -0.18845276, -0.14285121,
       -0.26217161]), 'test_mae': array([-0.06516948, -0.0814555 , -0.07222921, -0.07839088, -0.06126571,
       -0.13476964, -0.22685133, -0.0959011 , -0.12215139, -0.10007425,
       -0.21672538, -0.05120738, -0.05781268, -0.12512009, -0.0889922 ,
       -0.1693823 ]), 'test_r2': array([0.9615533 , 0.97358253, 0.97715745, 0.97577306, 0.97389696,
       0.9180734 , 0.40422197, 0.9593784 , 0.89295396, 0.94662752,
       0.68068787, 0.98788522, 0.97728188, 0.89932963, 0.94798587,
       0.72642903]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1367, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([18.7419641 , 19.40417075, 18.74536133, 18.47652292, 18.67646742,
       19.1822443 , 19.58953261, 19.68922186, 18.78341913, 18.84201384,
       19.94279981, 20.12127876, 19.23410606, 19.571244  , 19.22239852,
       18.75927281]), 'score_time': array([0.26731658, 0.26615477, 0.27269316, 0.26447773, 0.26196623,
       0.27334428, 0.26485157, 0.26551318, 0.26456356, 0.26212859,
       0.27090335, 0.26513505, 0.27923536, 0.25953555, 0.26548314,
       0.26813221]), 'test_pearson_r': array([0.96921196, 0.99016786, 0.95906023, 0.95926973, 0.97716088,
       0.97958575, 0.95227422, 0.98138441, 0.90833009, 0.9453737 ,
       0.98296656, 0.97548769, 0.92068958, 0.98163457, 0.59621647,
       0.99421069]), 'test_pearson_p': array([-1.54406841e-10, -3.14033307e-14, -1.27075266e-09, -4.47651687e-09,
       -8.18341733e-11, -3.75406596e-11, -1.33251183e-08, -1.97775786e-11,
       -1.14142680e-06, -3.36651745e-08, -1.06651885e-11, -1.33642249e-10,
       -4.28313952e-07, -1.80023911e-11, -1.47859952e-02, -5.75595982e-15]), 'test_spearman_r': array([0.98712465, 0.97240975, 0.94607843, 0.93823529, 0.95882353,
       0.95588235, 0.93156758, 0.98160439, 0.89117647, 0.92862424,
       0.96764706, 0.95882353, 0.93745426, 0.89742308, 0.67352941,
       0.97349148]), 'test_spearman_p': array([-2.35235248e-13, -6.84697631e-11, -9.65394243e-09, -7.80221977e-08,
       -4.82554077e-09, -7.76027446e-09, -1.57059247e-07, -1.82090718e-11,
       -3.61864891e-06, -2.09234458e-07, -9.13289481e-10, -4.82554077e-09,
       -8.50171042e-08, -2.43371777e-06, -4.23273925e-03, -2.29960211e-10]), 'test_kendall_r': array([0.93727575, 0.89299501, 0.83823529, 0.85      , 0.86666667,
       0.85      , 0.86193223, 0.91214188, 0.76666667, 0.81172259,
       0.88333333, 0.86666667, 0.84519568, 0.77977303, 0.68333333,
       0.90759507]), 'test_kendall_p': array([-1.64175866e-07, -6.08366508e-07, -5.63431609e-08, -1.02027025e-07,
       -3.98309214e-08, -1.02027025e-07, -3.45008795e-06, -8.99518934e-07,
       -4.72451181e-06, -1.23329686e-05, -1.43717927e-08, -3.98309214e-08,
       -5.31661458e-06, -3.15745343e-05, -8.26619198e-05, -1.10296350e-06]), 'test_rmse': array([-0.17277841, -0.09549774, -0.1988905 , -0.1625489 , -0.14409204,
       -0.13562978, -0.18853057, -0.09972973, -0.22031692, -0.19707965,
       -0.12824916, -0.1325601 , -0.27925564, -0.12840151, -0.54992432,
       -0.08066653]), 'test_mae': array([-0.10691946, -0.077704  , -0.1268305 , -0.09383101, -0.09360223,
       -0.10293222, -0.13903685, -0.06396516, -0.13985625, -0.12774432,
       -0.0933913 , -0.08934363, -0.12749236, -0.07545701, -0.21259407,
       -0.06188947]), 'test_r2': array([0.93040101, 0.9796961 , 0.90197742, 0.91837667, 0.95460979,
       0.95408418, 0.87809568, 0.95875165, 0.80505525, 0.87772416,
       0.95704714, 0.94573873, 0.83921605, 0.96182992, 0.22729156,
       0.98493365]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1003, 'regressor__learning_rate': 0.0963634366655202, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([2.34107566, 2.30969357, 2.86404443, 2.36497045, 2.45653987,
       2.32926297, 2.27464461, 2.32005882, 2.29060984, 2.19690418,
       2.75325251, 2.36524343, 2.33358788, 3.12218451, 2.45833969,
       2.34931946]), 'score_time': array([0.05695415, 0.05690169, 0.05674195, 0.05589104, 0.05707955,
       0.05645394, 0.05940199, 0.0562067 , 0.05938888, 0.05685759,
       0.05881739, 0.05723691, 0.05582404, 0.05772758, 0.05657482,
       0.06167769]), 'test_pearson_r': array([0.99221435, 0.978339  , 0.97556092, 0.99600561, 0.71095134,
       0.89013093, 0.98244281, 0.97703877, 0.98181694, 0.5113355 ,
       0.94558039, 0.97761364, 0.97670232, 0.98803209, 0.96314731,
       0.96857079]), 'test_pearson_p': array([-5.48766249e-15, -1.13469611e-11, -2.78249035e-11, -4.30460260e-16,
       -2.01869648e-03, -3.85805582e-06, -1.31654616e-11, -8.49190005e-11,
       -1.67958098e-11, -4.29273305e-02, -3.28017631e-08, -7.12172643e-11,
       -9.39378439e-11, -9.13669248e-13, -2.24540094e-09, -7.47503000e-10]), 'test_spearman_r': array([0.98711656, 0.9754902 , 0.94052746, 0.98965678, 0.73490427,
       0.88235294, 0.97352941, 0.96394434, 0.94473333, 0.63429009,
       0.88153078, 0.95588235, 0.98749107, 0.95882353, 0.86764706,
       0.96176471]), 'test_spearman_p': array([-2.36339814e-13, -2.84287327e-11, -1.98053909e-08, -3.30454141e-13,
       -1.18239496e-03, -6.09561957e-06, -2.27689766e-10, -1.93084048e-09,
       -3.64640235e-08, -8.31542258e-03, -6.38565422e-06, -7.76027446e-09,
       -1.24331763e-12, -4.82554077e-09, -1.33486813e-05, -2.89508013e-09]), 'test_kendall_r': array([0.93333333, 0.89705882, 0.81919377, 0.9575798 , 0.62184874,
       0.81666667, 0.9       , 0.89540533, 0.83550998, 0.59414746,
       0.76151294, 0.88333333, 0.92887842, 0.86666667, 0.76666667,
       0.86666667]), 'test_kendall_p': array([-2.00290194e-07, -1.23139016e-09, -4.73348832e-06, -3.62993104e-07,
       -8.42587387e-04, -5.50848432e-07, -4.72556483e-09, -1.41912826e-06,
       -7.79116309e-06, -1.37502262e-03, -4.10999309e-05, -1.43717927e-08,
       -5.65704076e-07, -3.98309214e-08, -4.72451181e-06, -3.98309214e-08]), 'test_rmse': array([-0.10386819, -0.09935435, -0.15368296, -0.05928068, -0.4306492 ,
       -0.29685853, -0.19327088, -0.13230424, -0.1054709 , -0.55877024,
       -0.17146493, -0.14293969, -0.11817886, -0.11040691, -0.15644413,
       -0.184921  ]), 'test_mae': array([-0.06911351, -0.06725393, -0.11118967, -0.04273118, -0.23883102,
       -0.1496829 , -0.1263907 , -0.11174811, -0.07695005, -0.23863437,
       -0.12317481, -0.08526243, -0.08047034, -0.07911963, -0.11914022,
       -0.12229921]), 'test_r2': array([ 0.97419618,  0.955905  ,  0.93454307,  0.98804677,  0.22990888,
        0.77747032,  0.94000101,  0.94986727,  0.96148516, -0.02977686,
        0.89221906,  0.95364628,  0.94777957,  0.9740477 ,  0.92085713,
        0.93724499]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 161, 'regressor__learning_rate': 0.09939793013929618, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([1.80844855, 1.89559531, 1.95941091, 1.94414115, 1.76063323,
       1.74617267, 1.83877158, 1.94231224, 2.14849162, 1.80225468,
       1.97634077, 1.81087303, 2.22820854, 1.76997828, 1.78627968,
       1.89832067]), 'score_time': array([0.05042696, 0.04976296, 0.04836082, 0.04863405, 0.04708648,
       0.04741549, 0.04782486, 0.05389905, 0.04964519, 0.05522704,
       0.05011868, 0.04974627, 0.04696488, 0.04751229, 0.04716825,
       0.04979944]), 'test_pearson_r': array([0.96405107, 0.97548883, 0.98716622, 0.96082269, 0.95604758,
       0.97300565, 0.96818652, 0.98700069, 0.72724743, 0.96822392,
       0.979727  , 0.98394658, 0.90345003, 0.97021489, 0.56883554,
       0.99476375]), 'test_pearson_p': array([-4.86329086e-10, -2.84404828e-11, -2.29625490e-13, -3.42421299e-09,
       -7.56244450e-09, -2.60798514e-10, -8.13043443e-10, -1.62525460e-12,
       -1.41109534e-03, -8.06455474e-10, -3.57731036e-11, -7.06236741e-12,
       -1.61936241e-06, -5.15431629e-10, -2.14787194e-02, -2.85434790e-15]), 'test_spearman_r': array([0.91109766, 0.82369013, 0.94110429, 0.91390753, 0.96759941,
       0.95588235, 0.96470588, 0.98235294, 0.62647059, 0.93225331,
       0.94628429, 0.97277436, 0.83776176, 0.94039761, 0.66764706,
       0.97647059]), 'test_spearman_p': array([-3.70228511e-07, -4.82686587e-05, -1.84405167e-08, -7.46809230e-07,
       -9.22629610e-10, -7.76027446e-09, -1.66620775e-09, -1.36412383e-11,
       -9.41397731e-03, -1.46639301e-07, -3.00012032e-08, -2.76678019e-10,
       -5.10712482e-05, -6.11516412e-08, -4.71198195e-03, -1.00615044e-10]), 'test_kendall_r': array([0.78967327, 0.69190536, 0.80740741, 0.81172259, 0.85714286,
       0.85      , 0.86666667, 0.93333333, 0.5       , 0.82352941,
       0.87866878, 0.87866878, 0.71735705, 0.84519568, 0.66666667,
       0.91666667]), 'test_kendall_p': array([-1.02725536e-05, -1.34593270e-04, -6.87227427e-06, -1.23329686e-05,
       -4.19268233e-06, -1.02027025e-07, -3.98309214e-08, -3.55879882e-10,
       -6.35528423e-03, -9.81814824e-06, -2.22140114e-06, -2.22140114e-06,
       -1.22426651e-04, -5.31661458e-06, -1.34937165e-04, -1.38948965e-09]), 'test_rmse': array([-0.16445137, -0.13205859, -0.11181129, -0.16564515, -0.22715379,
       -0.12770336, -0.17863595, -0.12854179, -0.35408141, -0.19354422,
       -0.14553286, -0.10642849, -0.21592217, -0.14985579, -0.54280572,
       -0.06459763]), 'test_mae': array([-0.11205582, -0.08685751, -0.07377645, -0.11351384, -0.15595178,
       -0.10030995, -0.12860085, -0.09269945, -0.20425111, -0.13365788,
       -0.08296013, -0.07169145, -0.14117813, -0.11410974, -0.23157497,
       -0.05571944]), 'test_r2': array([0.92681187, 0.95060728, 0.96560164, 0.91850082, 0.89461248,
       0.94198289, 0.93723345, 0.95223045, 0.35770259, 0.93191965,
       0.9586468 , 0.96787921, 0.80324193, 0.93964895, 0.14142135,
       0.9883672 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 127, 'regressor__learning_rate': 0.0995150538327643, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([36.21507335, 34.89855146, 35.70783424, 34.28291392, 35.88674116,
       36.08642149, 36.69277954, 35.66528177, 35.43147087, 37.58768106,
       35.98130322, 37.53340602, 34.60163212, 36.20541883, 34.83896804,
       35.03764892]), 'score_time': array([0.49577427, 0.46786976, 0.4725287 , 0.46311235, 0.46677065,
       0.46977425, 0.49390173, 0.46501589, 0.46480298, 0.46314335,
       0.45814657, 0.47381401, 0.47860003, 0.46651173, 0.45910144,
       0.46982956]), 'test_pearson_r': array([0.97267927, 0.89741358, 0.99616145, 0.98948827, 0.99395982,
       0.89049066, 0.98502539, 0.99161088, 0.9843635 , 0.91592755,
       0.95130933, 0.99064424, 0.98211661, 0.72319872, 0.98454649,
       0.97316628]), 'test_pearson_p': array([-6.36594562e-11, -1.04007681e-06, -2.75964050e-17, -3.69868519e-13,
       -7.74090942e-15, -3.77422045e-06, -4.35213652e-12, -7.66957442e-14,
       -5.88072932e-12, -6.35936319e-07, -1.52896944e-08, -1.64135869e-13,
       -1.49631959e-11, -1.54586774e-03, -5.41819377e-12, -2.50234022e-10]), 'test_spearman_r': array([0.94852941, 0.875     , 0.97668785, 0.99337775, 0.99043441,
       0.81764706, 0.93598259, 0.99117647, 0.95294118, 0.92268041,
       0.92941176, 0.99115475, 0.98085526, 0.79323053, 0.9705057 ,
       0.96176471]), 'test_spearman_p': array([-6.85959526e-09, -4.28011558e-06, -1.95921524e-11, -1.47168758e-14,
       -1.91599035e-13, -1.09363081e-04, -9.96523255e-08, -1.09082915e-13,
       -1.20965793e-08, -3.60429471e-07, -1.94011895e-07, -1.10969762e-13,
       -2.40310904e-11, -2.45874782e-04, -4.81591645e-10, -2.89508013e-09]), 'test_kendall_r': array([0.85294118, 0.72058824, 0.91854372, 0.96235152, 0.94561497,
       0.73333333, 0.81172259, 0.95      , 0.83333333, 0.78991597,
       0.78333333, 0.9536629 , 0.92440239, 0.76151294, 0.88614695,
       0.88333333]), 'test_kendall_p': array([-2.39403120e-08, -1.14878905e-05, -3.11133291e-07, -2.18526649e-07,
       -3.52984089e-07, -1.62687222e-05, -1.23329686e-05, -7.63760478e-11,
       -2.44193725e-07, -2.22838273e-05, -2.41022656e-06, -3.28081900e-07,
       -6.95749778e-07, -4.10999309e-05, -2.08474693e-06, -1.43717927e-08]), 'test_rmse': array([-0.12441426, -0.22430891, -0.06795865, -0.10018539, -0.0695472 ,
       -0.2725391 , -0.12426372, -0.08131499, -0.09713441, -0.26580076,
       -0.16436644, -0.10126399, -0.13528193, -0.50511724, -0.11153474,
       -0.20082942]), 'test_mae': array([-0.0822462 , -0.16817731, -0.04739781, -0.07787368, -0.05140443,
       -0.13063284, -0.09086311, -0.06379298, -0.06790065, -0.18159887,
       -0.11245915, -0.08102609, -0.0774328 , -0.2311068 , -0.08879674,
       -0.14528488]), 'test_r2': array([0.93496248, 0.73780826, 0.99103066, 0.97332714, 0.98725903,
       0.74091533, 0.97005493, 0.98325088, 0.96229178, 0.75014027,
       0.89723933, 0.98013832, 0.95721936, 0.50423565, 0.96567789,
       0.92473217]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1848, 'regressor__learning_rate': 0.09981690742218503, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([39.51124334, 42.28547764, 40.16949534, 46.77027965, 38.75313735,
       45.95903826, 49.44919825, 39.27552247, 39.17634034, 44.96682096,
       43.50632739, 45.2868309 , 44.84191179, 40.38911009, 48.66828275,
       39.83483648]), 'score_time': array([0.52263808, 0.50793242, 0.51057506, 0.50948095, 0.50201941,
       0.50960422, 0.50300837, 0.51260829, 0.49863219, 0.52547956,
       0.5174427 , 0.50015926, 0.50322437, 0.50843215, 0.52897501,
       0.50209093]), 'test_pearson_r': array([0.97832964, 0.76319851, 0.97419532, 0.94831961, 0.9307751 ,
       0.97678942, 0.99137003, 0.96857008, 0.86305159, 0.94902412,
       0.98619336, 0.98326831, 0.93969561, 0.98128411, 0.96144125,
       0.99521564]), 'test_pearson_p': array([-1.13834651e-11, -3.65015698e-04, -4.16695222e-11, -2.30186784e-08,
       -1.69878130e-07, -9.15280691e-11, -9.34427879e-14, -7.47620391e-10,
       -1.67365245e-05, -2.09494608e-08, -2.47268459e-12, -9.41840615e-12,
       -6.62498131e-08, -2.05301747e-11, -3.06828632e-09, -1.51930364e-15]), 'test_spearman_r': array([0.93807498, 0.82555532, 0.92024609, 0.93156758, 0.93156758,
       0.96394434, 0.99117647, 0.97058824, 0.75846916, 0.92352941,
       0.99410462, 0.96170944, 0.96176471, 0.95882353, 0.95      ,
       0.96470588]), 'test_spearman_p': array([-2.66240836e-08, -4.48252862e-05, -1.68483439e-07, -1.57059247e-07,
       -1.57059247e-07, -1.93084048e-09, -1.09082915e-13, -4.72340113e-10,
       -6.60107510e-04, -3.34390001e-07, -6.53417850e-15, -2.92406998e-09,
       -2.89508013e-09, -4.82554077e-09, -1.83461727e-08, -1.66620775e-09]), 'test_kendall_r': array([0.84871427, 0.7807177 , 0.78520673, 0.81172259, 0.84519568,
       0.89540533, 0.95      , 0.9       , 0.6218707 , 0.8       ,
       0.97054189, 0.89078776, 0.86666667, 0.85      , 0.86666667,
       0.9       ]), 'test_kendall_p': array([-2.12480839e-06, -1.43299199e-05, -1.22076214e-05, -1.23329686e-05,
       -5.31661458e-06, -1.41912826e-06, -7.63760478e-11, -4.72556483e-09,
       -8.42501532e-04, -1.17934846e-06, -2.02597451e-07, -1.73481918e-06,
       -3.98309214e-08, -1.02027025e-07, -3.98309214e-08, -4.72556483e-09]), 'test_rmse': array([-0.13675222, -0.50424091, -0.15187731, -0.20106426, -0.20553166,
       -0.11210941, -0.08404999, -0.13050894, -0.30080204, -0.18567529,
       -0.11327997, -0.12219121, -0.22350872, -0.12536415, -0.16217645,
       -0.07424954]), 'test_mae': array([-0.07962466, -0.18098364, -0.1126847 , -0.13055345, -0.09796157,
       -0.07645722, -0.05899345, -0.09902142, -0.18258903, -0.12217362,
       -0.07191512, -0.09566902, -0.1502364 , -0.09258239, -0.11004473,
       -0.05539385]), 'test_r2': array([0.95086565, 0.53276029, 0.94445315, 0.88842418, 0.86628588,
       0.95242607, 0.9819366 , 0.93734162, 0.73941201, 0.88117612,
       0.96968809, 0.96229279, 0.88054146, 0.94517474, 0.92272729,
       0.98846214]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 22, 6: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.7259181786481107, 'test_rmse': 0.8766589836176946, 'test_r2': -0.6578930179787952, 'test_pearson_r': array([0.39235044]), 'test_pearson_p_value': array([0.0023178]), 'test_spearman_r': 0.22222395898793737, 'test_spearman_p_value': 0.09362040190159134, 'test_kendall_r': 0.21485410602555197, 'test_kendall_p_value': 0.017812988796259754, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 217, 'regressor__learning_rate': 0.09926265250590843, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.7829771193967509, 'test_rmse': 0.9354121355879345, 'test_r2': -0.8875615721570327, 'test_pearson_r': array([0.28015098]), 'test_pearson_p_value': array([0.03317361]), 'test_spearman_r': 0.14324615818591918, 'test_spearman_p_value': 0.28339405422136443, 'test_kendall_r': 0.1348322129321091, 'test_kendall_p_value': 0.13629782903182527, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1193, 'regressor__learning_rate': 0.07972888169180409, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.9578016788175, 'test_rmse': 1.115628871527983, 'test_r2': -1.6849401985878374, 'test_pearson_r': array([0.06829418]), 'test_pearson_p_value': array([0.6104816]), 'test_spearman_r': 0.10053245094302297, 'test_spearman_p_value': 0.45273042478162795, 'test_kendall_r': 0.09555834177340414, 'test_kendall_p_value': 0.29195194438649785, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1246, 'regressor__learning_rate': 0.07352481813242628, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.8470418435437649, 'test_rmse': 0.993163218747089, 'test_r2': -1.1278273263797916, 'test_pearson_r': array([0.17059058]), 'test_pearson_p_value': array([0.20043756]), 'test_spearman_r': 0.18209099831758627, 'test_spearman_p_value': 0.17129835598606427, 'test_kendall_r': 0.18320420938722703, 'test_kendall_p_value': 0.043338070156702026, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03973822377539788, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.7125740708825247, 'test_rmse': 0.8441628064866866, 'test_r2': -0.5372608043303744, 'test_pearson_r': array([0.42424979]), 'test_pearson_p_value': array([0.00090363]), 'test_spearman_r': 0.2440717366264514, 'test_spearman_p_value': 0.06483946494518322, 'test_kendall_r': 0.1910582291384837, 'test_kendall_p_value': 0.03506118581141959, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 202, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.7941605783458433, 'test_rmse': 0.9401938343454114, 'test_r2': -0.9069088089121906, 'test_pearson_r': array([0.28610065]), 'test_pearson_p_value': array([0.02946723]), 'test_spearman_r': 0.1933722123400041, 'test_spearman_p_value': 0.14583887548680802, 'test_kendall_r': 0.19015922206098052, 'test_kendall_p_value': 0.035692043648798764, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 690, 'regressor__learning_rate': 0.06535854670979427, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.5651059475372511, 'test_ystd': 0.680851559158884, 'test_mae': 0.7675360997358006, 'test_rmse': 0.8968713769047555, 'test_r2': -0.7352236384447295, 'test_pearson_r': array([0.28505918]), 'test_pearson_p_value': array([0.03008977]), 'test_spearman_r': 0.21660333976727802, 'test_spearman_p_value': 0.1024385322586172, 'test_kendall_r': 0.2168908698906391, 'test_kendall_p_value': 0.016589340665950792, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1990, 'regressor__learning_rate': 0.05372134344382997, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 25, 6: {'fit_time': array([2.52795482, 2.51703191, 2.60977936, 2.50972986]), 'score_time': array([0.09382963, 0.09546256, 0.09534955, 0.0973022 ]), 'test_pearson_r': array([0.95139611, 0.904139  , 0.95396   , 0.95644744]), 'test_pearson_p': array([-6.27344431e-34, -5.95744723e-25, -1.18294737e-34, -7.37293943e-35]), 'test_spearman_r': array([0.90448661, 0.92441841, 0.94410808, 0.93976691]), 'test_spearman_p': array([-5.34195016e-25, -4.56127274e-28, -4.58036936e-32, -1.33415277e-30]), 'test_kendall_r': array([0.79952031, 0.8376235 , 0.80231999, 0.80995185]), 'test_kendall_p': array([-6.34125237e-21, -6.39657204e-23, -4.85458695e-21, -3.93471333e-21]), 'test_rmse': array([-0.20638987, -0.2789266 , -0.18765648, -0.16650584]), 'test_mae': array([-0.1081702 , -0.12261104, -0.12426778, -0.10890868]), 'test_r2': array([0.90170834, 0.81679104, 0.90983572, 0.91474494]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 215, 'regressor__learning_rate': 0.08036081804865126, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([35.07982993, 35.12573981, 36.67886734, 35.59258127]), 'score_time': array([0.74719048, 0.78099561, 0.75125504, 0.74235988]), 'test_pearson_r': array([0.87139092, 0.90852539, 0.9559352 , 0.95946994]), 'test_pearson_p': array([-3.74523145e-21, -1.45800805e-25, -3.06230517e-35, -8.29409987e-36]), 'test_spearman_r': array([0.84028415, 0.92097873, 0.93878358, 0.94397253]), 'test_spearman_p': array([-2.10240739e-18, -1.75794822e-27, -7.42335840e-31, -1.50672400e-31]), 'test_kendall_r': array([0.71880282, 0.81947574, 0.79595244, 0.82405658]), 'test_kendall_p': array([-3.38746232e-17, -6.19452960e-22, -9.23414278e-21, -7.44545490e-22]), 'test_rmse': array([-0.34194237, -0.29034924, -0.18133954, -0.16332447]), 'test_mae': array([-0.17119996, -0.12777165, -0.11668489, -0.10236357]), 'test_r2': array([0.69700637, 0.81546371, 0.91136389, 0.92007954]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([32.54463148, 31.23664546, 33.70983887, 34.49514461]), 'score_time': array([0.71449041, 0.70990634, 0.70756221, 0.69657755]), 'test_pearson_r': array([0.97100287, 0.95907817, 0.90943637, 0.90374747]), 'test_pearson_p': array([-7.24024577e-41, -3.12123597e-36, -1.07881294e-25, -1.58526614e-24]), 'test_spearman_r': array([0.96349967, 0.94774684, 0.89853458, 0.91806595]), 'test_spearman_p': array([-9.09917054e-38, -5.80656466e-33, -3.27064716e-24, -1.33668707e-26]), 'test_kendall_r': array([0.85012137, 0.82290674, 0.78872746, 0.83534193]), 'test_kendall_p': array([-1.70789758e-23, -3.61059791e-22, -1.87507518e-20, -2.87578939e-22]), 'test_rmse': array([-0.16470731, -0.18214642, -0.24225082, -0.29095963]), 'test_mae': array([-0.1133901 , -0.11984293, -0.13366741, -0.12420171]), 'test_r2': array([0.93749893, 0.90646257, 0.81906536, 0.81461203]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1863, 'regressor__learning_rate': 0.09868712715992688, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([37.30121374, 35.73388243, 33.81450677, 33.96412039]), 'score_time': array([0.73797536, 0.73345613, 0.79245377, 0.73825622]), 'test_pearson_r': array([0.98083935, 0.91196834, 0.88932795, 0.94306388]), 'test_pearson_p': array([-1.80034700e-46, -4.59188749e-26, -4.37131042e-23, -2.44757342e-31]), 'test_spearman_r': array([0.9794979 , 0.90817698, 0.91497455, 0.93841152]), 'test_spearman_p': array([-1.48728448e-45, -1.63466827e-25, -1.60980589e-26, -2.60611501e-30]), 'test_kendall_r': array([0.89466674, 0.80086687, 0.81553217, 0.82195205]), 'test_kendall_p': array([-1.24021186e-25, -4.68872478e-21, -1.00965896e-21, -8.86361543e-22]), 'test_rmse': array([-0.11832543, -0.27535578, -0.27892923, -0.21900321]), 'test_mae': array([-0.07759854, -0.14449359, -0.11723401, -0.12981107]), 'test_r2': array([0.96037387, 0.82632171, 0.77951519, 0.88684011]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06039959807896775, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([3.01207542, 2.71809578, 3.38216424, 2.80246949]), 'score_time': array([0.10119653, 0.10915422, 0.09844518, 0.09791422]), 'test_pearson_r': array([0.96946246, 0.97587828, 0.88163702, 0.85719918]), 'test_pearson_p': array([-3.61257111e-40, -2.36114856e-43, -3.21767701e-22, -1.58401494e-19]), 'test_spearman_r': array([0.92352091, 0.97434272, 0.83213102, 0.882788  ]), 'test_spearman_p': array([-6.52534185e-28, -1.61220953e-42, -8.85389696e-18, -5.16670295e-22]), 'test_kendall_r': array([0.78986254, 0.88493019, 0.7462585 , 0.80557096]), 'test_kendall_p': array([-2.03628355e-20, -2.31273804e-25, -2.22636086e-18, -6.13461827e-21]), 'test_rmse': array([-0.15231881, -0.1419247 , -0.31171014, -0.32846183]), 'test_mae': array([-0.10304027, -0.09746027, -0.14985762, -0.14087851]), 'test_r2': array([0.93904604, 0.95031154, 0.75769671, 0.72115008]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 227, 'regressor__learning_rate': 0.09984275777683262, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([3.88727999, 3.18394876, 3.00004888, 3.52481604]), 'score_time': array([0.10063338, 0.10660982, 0.09959769, 0.09679008]), 'test_pearson_r': array([0.9020066 , 0.98202171, 0.96855608, 0.87596385]), 'test_pearson_p': array([-1.15264927e-24, -2.46415524e-47, -8.95451787e-40, -2.68798972e-21]), 'test_spearman_r': array([0.90956582, 0.96440788, 0.96489772, 0.89826633]), 'test_spearman_p': array([-1.03334647e-25, -4.17090842e-38, -2.71546732e-38, -8.11813352e-24]), 'test_kendall_r': array([0.74831557, 0.84144666, 0.85631719, 0.79302732]), 'test_kendall_p': array([-1.51395253e-18, -4.76547947e-23, -8.55816517e-24, -3.06958205e-20]), 'test_rmse': array([-0.26582301, -0.1229659 , -0.15354448, -0.33715653]), 'test_mae': array([-0.17069239, -0.0890408 , -0.10167422, -0.17907407]), 'test_r2': array([0.78914531, 0.96363712, 0.93218127, 0.75752905]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 239, 'regressor__learning_rate': 0.09986786358800742, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([18.14565468, 19.11743498, 18.12505364, 17.56791401]), 'score_time': array([0.41192412, 0.38936973, 0.39668703, 0.38274097]), 'test_pearson_r': array([0.88227379, 0.95202679, 0.96613373, 0.95185178]), 'test_pearson_p': array([-2.74203783e-22, -4.19731795e-34, -8.94367356e-39, -1.54369533e-33]), 'test_spearman_r': array([0.8835121 , 0.94222553, 0.95702548, 0.94944939]), 'test_spearman_p': array([-2.00367109e-22, -1.26378703e-31, -1.41399956e-35, -6.73862461e-33]), 'test_kendall_r': array([0.79952869, 0.82755385, 0.83756438, 0.82580645]), 'test_kendall_p': array([-7.56731053e-21, -2.29930900e-22, -8.70790555e-23, -5.37092655e-22]), 'test_rmse': array([-0.31676962, -0.17459812, -0.16064174, -0.19602241]), 'test_mae': array([-0.1352417 , -0.10675564, -0.11001768, -0.12157085]), 'test_r2': array([0.76956437, 0.9050292 , 0.93064246, 0.90601444]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1087, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 7, 6: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.41016525530217146, 'test_rmse': 0.46262155159527085, 'test_r2': -2.3282834208950187, 'test_pearson_r': array([-0.19597153]), 'test_pearson_p_value': array([0.4213565]), 'test_spearman_r': -0.15597545565072915, 'test_spearman_p_value': 0.5237040163742552, 'test_kendall_r': -0.06508989689553324, 'test_kendall_p_value': 0.6996576230771437, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 424, 'regressor__learning_rate': 0.04825763513554655, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.5106020331259278, 'test_rmse': 0.5810608452197514, 'test_r2': -4.250634682569924, 'test_pearson_r': array([-0.4646378]), 'test_pearson_p_value': array([0.04503954]), 'test_spearman_r': -0.4072936546147209, 'test_spearman_p_value': 0.08348909931813517, 'test_kendall_r': -0.20710421739487847, 'test_kendall_p_value': 0.21963834747154343, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 541, 'regressor__learning_rate': 0.09914384602110755, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.36534696868194366, 'test_rmse': 0.40301762625400905, 'test_r2': -1.5259029573740168, 'test_pearson_r': array([-0.10204642]), 'test_pearson_p_value': array([0.67762921]), 'test_spearman_r': -0.09657594381035997, 'test_spearman_p_value': 0.6940924328985653, 'test_kendall_r': -0.00588235294117647, 'test_kendall_p_value': 0.9720571374725545, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1124, 'regressor__learning_rate': 0.09806186736791338, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.48499646956231784, 'test_rmse': 0.5438007672410403, 'test_r2': -3.5988390659115153, 'test_pearson_r': array([-0.41629533]), 'test_pearson_p_value': array([0.07624636]), 'test_spearman_r': -0.22363804767949613, 'test_spearman_p_value': 0.35737984864929295, 'test_kendall_r': -0.076924423603812, 'test_kendall_p_value': 0.6484439212629403, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 476, 'regressor__learning_rate': 0.09870327124749789, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.40037358069734286, 'test_rmse': 0.44639477843603664, 'test_r2': -2.0988945043471494, 'test_pearson_r': array([-0.2099973]), 'test_pearson_p_value': array([0.38819495]), 'test_spearman_r': -0.13871817383669885, 'test_spearman_p_value': 0.57114990744266, 'test_kendall_r': -0.00588235294117647, 'test_kendall_p_value': 0.9720571374725545, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.010988226591084737, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.4324042441432052, 'test_rmse': 0.48451433648941433, 'test_r2': -2.6507479004472176, 'test_pearson_r': array([-0.24438898]), 'test_pearson_p_value': array([0.31328922]), 'test_spearman_r': -0.19490781387181738, 'test_spearman_p_value': 0.42393135616744637, 'test_kendall_r': -0.08823529411764705, 'test_kendall_p_value': 0.5992876405087626, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1993, 'regressor__learning_rate': 0.017990448059144477, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.21051737654786742, 'test_ystd': 0.2535804160369793, 'test_mae': 0.45828001668969987, 'test_rmse': 0.5252483628437018, 'test_r2': -3.2904020826983436, 'test_pearson_r': array([-0.3051873]), 'test_pearson_p_value': array([0.20389087]), 'test_spearman_r': -0.2352941176470588, 'test_spearman_p_value': 0.3321952406179791, 'test_kendall_r': -0.08823529411764705, 'test_kendall_p_value': 0.5992876405087626, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.020166842694318843, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 7, 6: {'fit_time': array([60.73079467, 51.31866002, 54.01289988, 43.52866173, 60.92847109,
       51.1653111 , 55.48362565, 47.10528803, 48.96973205, 50.41244268,
       46.58884645, 54.69692492, 53.59991002, 53.76124525]), 'score_time': array([0.53841281, 0.5439384 , 0.53410983, 0.58816004, 0.54067874,
       0.53377128, 0.52956939, 0.69866729, 0.93531346, 0.57276368,
       0.51934052, 0.57920265, 0.54577661, 0.54866099]), 'test_pearson_r': array([0.96984489, 0.99356478, 0.99125455, 0.98415698, 0.91458925,
       0.98668956, 0.75717507, 0.9800318 , 0.96408798, 0.95870088,
       0.98144723, 0.97874654, 0.94106341, 0.96119946]), 'test_pearson_p': array([-7.40349570e-12, -1.59398808e-17, -2.14521647e-16, -3.26999480e-14,
       -4.26810529e-08, -7.50365133e-15, -1.74312707e-04, -1.19387293e-12,
       -1.24272271e-10, -3.73753672e-10, -6.65955460e-13, -1.95854493e-12,
       -6.07867541e-09, -2.28661840e-10]), 'test_spearman_r': array([0.90350877, 0.98156277, 0.97719298, 0.95964912, 0.90877193,
       0.98245614, 0.80877193, 0.96590961, 0.94731456, 0.94014448,
       0.98089843, 0.9127518 , 0.93698397, 0.95252838]), 'test_spearman_p': array([-1.15810852e-07, -1.17633358e-13, -7.06769745e-13, -8.50242512e-11,
       -7.32273180e-08, -7.73558991e-14, -2.76721972e-05, -8.24154170e-11,
       -2.52870260e-09, -6.85945810e-09, -8.39423191e-13, -1.28040412e-07,
       -1.02490540e-08, -1.11695903e-09]), 'test_kendall_r': array([0.80116959, 0.91176471, 0.90643275, 0.88304094, 0.77777778,
       0.92982456, 0.80116959, 0.9013353 , 0.84870258, 0.84313725,
       0.91803772, 0.78688948, 0.82238622, 0.85620915]), 'test_kendall_p': array([-4.67377304e-08, -5.65458167e-08, -2.27996852e-11, -1.79983887e-10,
       -1.64978258e-07, -2.06767062e-12, -4.67377304e-08, -2.02850566e-07,
       -9.91848331e-07, -1.22726897e-08, -1.11636054e-07, -5.40069919e-06,
       -2.12120439e-06, -5.28843419e-09]), 'test_rmse': array([-0.1551259 , -0.08511988, -0.09340836, -0.12863671, -0.2190508 ,
       -0.1070824 , -0.46215907, -0.13265589, -0.17426628, -0.16408783,
       -0.12429825, -0.13310067, -0.20259155, -0.13807843]), 'test_mae': array([-0.10244179, -0.06281424, -0.06496428, -0.08467094, -0.16011908,
       -0.07052763, -0.1885411 , -0.06650577, -0.10644242, -0.11428754,
       -0.09293617, -0.10186882, -0.10975189, -0.09557091]), 'test_r2': array([0.9303233 , 0.98392805, 0.98169404, 0.96394297, 0.83004782,
       0.9717586 , 0.53983164, 0.95774677, 0.92473383, 0.91890993,
       0.95972347, 0.94645194, 0.8791638 , 0.90866156]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05143969231757074, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([41.24526143, 34.00241613, 43.17079711, 32.89170742, 44.3215816 ,
       31.73590755, 36.02947164, 38.40345144, 43.13073707, 36.35932112,
       36.65342712, 42.07445073, 38.45383883, 36.9492619 ]), 'score_time': array([0.33073974, 0.36848283, 0.3681922 , 0.76635051, 0.321244  ,
       0.4288156 , 0.49466515, 0.32323098, 0.34125376, 0.32804513,
       0.38901377, 0.37507963, 0.32229519, 0.32700849]), 'test_pearson_r': array([0.97996074, 0.98347741, 0.99287063, 0.98811411, 0.96164963,
       0.70766918, 0.98247233, 0.96315463, 0.96886809, 0.90418002,
       0.99289076, 0.90717799, 0.98204877, 0.93051622]), 'test_pearson_p': array([-2.37552342e-13, -4.66221549e-14, -3.79853997e-17, -2.88066897e-15,
       -5.55644932e-11, -7.00315208e-04, -7.67554931e-14, -1.52138143e-10,
       -4.02392474e-11, -2.63579644e-07, -3.20853456e-16, -2.06387745e-07,
       -5.12564060e-13, -2.19361558e-08]), 'test_spearman_r': array([0.9499561 , 0.95041694, 0.97541703, 0.93157895, 0.95522425,
       0.78245614, 0.98070175, 0.9039261 , 0.93340229, 0.87971101,
       0.98915862, 0.94840041, 0.98142415, 0.91068675]), 'test_spearman_p': array([-5.12723828e-10, -4.74698356e-10, -1.32884345e-12, -6.87164496e-09,
       -2.02811958e-10, -7.51884977e-05, -1.72884140e-13, -2.68998166e-07,
       -1.57680662e-08, -1.50134951e-06, -9.27540331e-15, -2.14803595e-09,
       -6.72563970e-13, -1.53365498e-07]), 'test_kendall_r': array([0.85294118, 0.84457841, 0.91176471, 0.8128655 , 0.86472084,
       0.67251462, 0.91812865, 0.74343714, 0.8000043 , 0.747545  ,
       0.93115255, 0.84313725, 0.90849673, 0.8000043 ]), 'test_kendall_p': array([-3.79206619e-07, -4.63085373e-07, -5.65458167e-08, -2.37852170e-08,
       -2.61620165e-07, -1.56889756e-05, -7.20796807e-12, -1.81645563e-05,
       -3.75687779e-06, -1.55211882e-05, -7.34599652e-08, -1.22726897e-08,
       -9.76656516e-11, -3.75687779e-06]), 'test_rmse': array([-0.10134157, -0.12972843, -0.07732057, -0.1040412 , -0.19849398,
       -0.5058672 , -0.13297161, -0.14698218, -0.15395237, -0.27282252,
       -0.08847308, -0.22927914, -0.12405144, -0.22670531]), 'test_mae': array([-0.06550373, -0.08712155, -0.06577936, -0.07213948, -0.12680649,
       -0.23508151, -0.08062242, -0.11762099, -0.12280682, -0.14481512,
       -0.0608989 , -0.13796849, -0.08077638, -0.14120765]), 'test_r2': array([0.95944826, 0.96129583, 0.98531233, 0.96839959, 0.92143392,
       0.42733796, 0.96116837, 0.90962705, 0.93421113, 0.80325334,
       0.98123738, 0.80877319, 0.96160406, 0.8174435 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1214, 'regressor__learning_rate': 0.05780668753374178, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([78.42009854, 76.98513484, 68.72788835, 81.99152017, 72.40672278,
       67.40267205, 68.62270546, 65.34358478, 75.78527093, 65.01831698,
       68.30109501, 80.81281805, 70.97817445, 65.86824989]), 'score_time': array([0.68869972, 0.67550755, 0.55823398, 0.53946567, 0.61761427,
       0.57197833, 0.5634048 , 1.30204892, 0.61532044, 0.60097027,
       0.55270433, 0.57829428, 0.56565523, 1.28261089]), 'test_pearson_r': array([0.97406696, 0.96280294, 0.96827243, 0.97612639, 0.93060855,
       0.97939146, 0.96888283, 0.78254181, 0.98963216, 0.97358475,
       0.98729727, 0.9682095 , 0.69622266, 0.99060106]), 'test_pearson_p': array([-2.08376346e-12, -4.30314652e-11, -1.13438744e-11, -1.03855626e-12,
       -7.71956986e-09, -3.00835439e-13, -9.63717891e-12, -1.23789849e-04,
       -6.49841538e-15, -1.09721393e-11, -3.27571567e-14, -4.74767396e-11,
       -1.32966450e-03, -2.97334185e-15]), 'test_spearman_r': array([0.97674428, 0.9442739 , 0.97368421, 0.97017544, 0.91268109,
       0.97498912, 0.97674428, 0.70897833, 0.97830631, 0.94633643,
       0.98915862, 0.91408308, 0.75644995, 0.98140548]), 'test_spearman_p': array([-8.32796316e-13, -1.25439008e-09, -2.35705500e-12, -6.74895947e-12,
       -5.11582739e-08, -1.53655411e-12, -8.32796316e-13, -9.86925868e-04,
       -2.30443206e-12, -2.92050558e-09, -9.27540331e-15, -1.13707606e-07,
       -2.80219387e-04, -6.77950044e-13]), 'test_kendall_r': array([0.90322969, 0.83284816, 0.89473684, 0.90643275, 0.76246662,
       0.89149943, 0.89149943, 0.56862745, 0.91449348, 0.84313725,
       0.94426737, 0.79745222, 0.67320261, 0.92765165]), 'test_kendall_p': array([-7.00361385e-08, -6.66104086e-07, -6.63913300e-11, -2.27996852e-11,
       -5.34143245e-06, -1.03161918e-07, -1.03161918e-07, -6.46804912e-04,
       -1.34526112e-07, -1.22726897e-08, -4.80698932e-08, -5.02085393e-06,
       -2.96712369e-05, -8.87180979e-08]), 'test_rmse': array([-0.15359218, -0.18429443, -0.18565014, -0.14652095, -0.1778734 ,
       -0.14013927, -0.13111452, -0.28500183, -0.10387579, -0.13622243,
       -0.11824899, -0.17515958, -0.50273564, -0.09437534]), 'test_mae': array([-0.09483555, -0.11877984, -0.11642331, -0.09573863, -0.12164184,
       -0.09831863, -0.08378319, -0.19151023, -0.07435363, -0.09060793,
       -0.07267901, -0.09009645, -0.21120524, -0.06992695]), 'test_r2': array([0.94330091, 0.91977682, 0.93439366, 0.95064115, 0.84751047,
       0.95691385, 0.93641548, 0.57514577, 0.97545735, 0.94164407,
       0.97085372, 0.92956806, 0.42265809, 0.97718928]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1999, 'regressor__learning_rate': 0.08966708114854255, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([11.65754652, 12.54617476, 11.89199662,  9.41391253,  8.69677854,
       13.19811606, 14.5019486 , 12.48470807, 11.80424023, 12.94393706,
       12.97841167, 13.79519701, 11.76093793, 10.20797038]), 'score_time': array([0.14586139, 0.14811492, 0.13350058, 0.12887454, 0.13403296,
       0.15571189, 0.14712   , 0.16397023, 0.13105083, 0.14048362,
       0.14437079, 0.16617346, 0.13532114, 0.17319179]), 'test_pearson_r': array([0.9913275 , 0.98113524, 0.97666714, 0.75142274, 0.88105751,
       0.97771192, 0.98041698, 0.98431049, 0.62888936, 0.96953902,
       0.98161312, 0.96771027, 0.95711654, 0.97155581]), 'test_pearson_p': array([-1.99826016e-16, -1.42733640e-13, -8.56348372e-13, -2.08180898e-04,
       -6.33477786e-07, -5.82205649e-13, -1.95619924e-13, -1.75770785e-13,
       -5.17692432e-03, -3.38744688e-11, -6.20105713e-13, -5.36950734e-11,
       -5.02573208e-10, -1.97073804e-11]), 'test_spearman_r': array([0.97322212, 0.97192982, 0.96445819, 0.81631927, 0.86967977,
       0.97017544, 0.95919272, 0.97004184, 0.66907598, 0.92363261,
       0.97470328, 0.91950464, 0.92982456, 0.95665635]), 'test_spearman_p': array([-2.72864126e-12, -4.05534963e-12, -2.93899065e-11, -2.01980330e-05,
       -1.32279037e-06, -6.74895947e-12, -9.34084168e-11, -2.96982597e-11,
       -2.39372581e-03, -4.56845669e-08, -7.78922481e-12, -6.86926274e-08,
       -2.36925600e-08, -5.46578066e-10]), 'test_kendall_r': array([0.9       , 0.88304094, 0.89149943, 0.68907652, 0.77419688,
       0.89473684, 0.85630867, 0.88817712, 0.57705228, 0.80392157,
       0.9049229 , 0.83006536, 0.80392157, 0.85620915]), 'test_kendall_p': array([-8.35279080e-08, -1.79983887e-10, -1.03161918e-07, -5.52943981e-05,
       -3.82034206e-06, -6.63913300e-11, -3.20420144e-07, -3.04174616e-07,
       -8.51059259e-04, -1.16879681e-07, -1.68708195e-07, -2.71335027e-08,
       -1.16879681e-07, -5.28843419e-09]), 'test_rmse': array([-0.09996725, -0.10499   , -0.1397518 , -0.38502777, -0.28396698,
       -0.18888456, -0.1376853 , -0.09793807, -0.48247469, -0.15129408,
       -0.09116185, -0.19927595, -0.16775034, -0.17634298]), 'test_mae': array([-0.07388597, -0.06815743, -0.09139616, -0.17611401, -0.16877694,
       -0.12436275, -0.11307667, -0.07387513, -0.21302137, -0.11051498,
       -0.05958978, -0.14084889, -0.12420604, -0.129636  ]), 'test_r2': array([0.97602887, 0.96086789, 0.94626318, 0.43890184, 0.7581829 ,
       0.93375725, 0.95697437, 0.96880614, 0.33395035, 0.93310226,
       0.96337257, 0.92258322, 0.91504017, 0.94079825]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 427, 'regressor__learning_rate': 0.04928728889403082, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([12.19601917, 12.15031981, 10.74065852, 11.83060312, 11.53340745,
       11.64035869, 11.48894906, 11.47734523, 12.05859303, 11.32175303,
       11.88685632, 12.61797309, 11.76072907, 11.37392855]), 'score_time': array([0.1765666 , 0.1838057 , 0.17422223, 0.17778707, 0.16904211,
       0.17588782, 0.17857623, 0.1912024 , 0.18220925, 0.17563629,
       0.17912126, 0.17772412, 0.17439604, 0.17075348]), 'test_pearson_r': array([0.97658439, 0.98273273, 0.96998961, 0.96072258, 0.95523408,
       0.98494226, 0.97506934, 0.7060644 , 0.98407306, 0.98740485,
       0.93935639, 0.96899248, 0.71165326, 0.98857784]), 'test_pearson_p': array([-8.82260484e-13, -6.76452375e-14, -7.11037213e-12, -6.78574946e-11,
       -2.02440494e-10, -2.12831249e-14, -1.49557037e-12, -1.05787824e-03,
       -1.98064816e-13, -3.06129115e-14, -7.59704315e-09, -3.89862012e-11,
       -9.25325906e-04, -1.40557839e-14]), 'test_spearman_r': array([0.89649123, 0.92618772, 0.85639007, 0.95655999, 0.94736842,
       0.97192982, 0.94561404, 0.57954545, 0.95144628, 0.94166249,
       0.91425669, 0.9752322 , 0.79360165, 0.96697626]), 'test_spearman_p': array([-2.05230922e-07, -1.28513050e-08, -2.88029002e-06, -1.57498426e-10,
       -7.80082922e-10, -4.05534963e-12, -1.02463740e-09, -1.17109842e-02,
       -1.33307132e-09, -5.61230323e-09, -1.11945142e-07, -6.58873719e-12,
       -8.46599736e-05, -6.41243926e-11]), 'test_kendall_r': array([0.77777778, 0.8023913 , 0.71386741, 0.86803892, 0.8245614 ,
       0.89473684, 0.85964912, 0.48026316, 0.84868421, 0.82623395,
       0.8355444 , 0.88235294, 0.75163399, 0.86928105]), 'test_kendall_p': array([-1.64978258e-07, -1.85371850e-06, -2.22508947e-05, -2.20656528e-07,
       -1.17067315e-08, -6.63913300e-11, -1.10425357e-09, -5.62226276e-03,
       -9.91964343e-07, -1.78800684e-06, -1.45452173e-06, -8.28241250e-10,
       -1.44239308e-06, -2.15825858e-09]), 'test_rmse': array([-0.13082838, -0.11517243, -0.12148657, -0.17743895, -0.19300237,
       -0.12074638, -0.13007418, -0.36802794, -0.13954665, -0.10819839,
       -0.16868875, -0.15370653, -0.46647755, -0.09716138]), 'test_mae': array([-0.0909718 , -0.08824654, -0.09655375, -0.12055563, -0.12457808,
       -0.09155154, -0.08703458, -0.20717046, -0.08730063, -0.06545818,
       -0.09525677, -0.11242656, -0.1871654 , -0.06907272]), 'test_r2': array([0.95177702, 0.96524804, 0.9393963 , 0.89803312, 0.90406986,
       0.96981011, 0.94515206, 0.35159083, 0.96478012, 0.97469244,
       0.88060636, 0.93426735, 0.43535672, 0.97707932]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 636, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([38.97078919, 42.67265439, 40.84262061, 39.29149818, 39.12708163,
       39.71185303, 38.70046663, 38.60525441, 41.10622978, 41.11779881,
       42.3923707 , 38.09759855, 41.04536557, 40.13358927]), 'score_time': array([0.51750016, 0.50203037, 0.51124001, 0.50867963, 0.51693726,
       0.51552892, 0.53844047, 0.50408959, 0.50793004, 0.50827527,
       0.4973321 , 0.5959537 , 0.49957204, 0.50072742]), 'test_pearson_r': array([0.88260818, 0.88950378, 0.99501761, 0.98500113, 0.91852516,
       0.98776608, 0.98786192, 0.96692367, 0.95282369, 0.98112836,
       0.98958896, 0.7553174 , 0.97413768, 0.97603316]), 'test_pearson_p': array([-5.69722772e-07, -3.48929921e-07, -1.81988059e-18, -2.05901946e-14,
       -2.89746499e-08, -3.67726159e-15, -3.44057015e-15, -6.49351871e-11,
       -1.06356413e-09, -7.62460465e-13, -6.71728964e-15, -2.89680353e-04,
       -9.28000168e-12, -5.07787187e-12]), 'test_spearman_r': array([0.86666667, 0.86303809, 0.98331908, 0.94727739, 0.94912281,
       0.97017544, 0.97719298, 0.87248334, 0.96904025, 0.92720714,
       0.99587203, 0.79297894, 0.95351291, 0.9752322 ]), 'test_spearman_p': array([-1.58937749e-06, -1.97127570e-06, -5.05319699e-14, -7.91379400e-10,
       -5.88308946e-10, -6.74895947e-12, -7.06769745e-13, -2.33843059e-06,
       -3.85140601e-11, -3.14918237e-08, -4.18452439e-18, -8.65418514e-05,
       -9.47502560e-10, -6.58873719e-12]), 'test_kendall_r': array([0.73099415, 0.6882472 , 0.92354539, 0.86139066, 0.85964912,
       0.88304094, 0.91812865, 0.6950857 , 0.89542484, 0.83934877,
       0.97385621, 0.747545  , 0.82238622, 0.92156863]), 'test_kendall_p': array([-1.52091530e-06, -4.16139463e-05, -3.80934215e-08, -3.06518708e-07,
       -1.10425357e-09, -1.79983887e-10, -7.20796807e-12, -5.87142144e-05,
       -2.96242626e-10, -1.22329014e-06, -5.31053037e-14, -1.55211882e-05,
       -2.12120439e-06, -2.92550870e-11]), 'test_rmse': array([-0.23384098, -0.21932137, -0.08248197, -0.10026763, -0.22436794,
       -0.11238513, -0.10277293, -0.11454107, -0.18522683, -0.13721028,
       -0.0936718 , -0.47570545, -0.16144827, -0.17492356]), 'test_mae': array([-0.13512711, -0.1561693 , -0.06370655, -0.06932426, -0.11878073,
       -0.0764897 , -0.06228225, -0.08004112, -0.1165367 , -0.09339508,
       -0.06478859, -0.19587972, -0.12535407, -0.13140551]), 'test_r2': array([0.76322759, 0.77320167, 0.98786284, 0.96993874, 0.81200487,
       0.97560771, 0.97541968, 0.91862271, 0.89531444, 0.96058978,
       0.97706661, 0.52431795, 0.93309403, 0.94176002]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1996, 'regressor__learning_rate': 0.09738378901277296, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([ 7.93110657,  8.67168474,  8.6402688 ,  9.40515018,  7.64772916,
        8.295084  , 10.35832548,  8.93447065,  9.29622865,  8.35363412,
        7.7112596 ,  9.34352231,  8.69462132,  8.38899517]), 'score_time': array([0.13648319, 0.1351738 , 0.12756157, 0.13673115, 0.12752509,
       0.12585092, 0.13192034, 0.12708879, 0.12837911, 0.12713599,
       0.12769842, 0.13166261, 0.1259973 , 0.13341832]), 'test_pearson_r': array([0.98018254, 0.75987896, 0.98255063, 0.96332645, 0.9267882 ,
       0.99549368, 0.95225656, 0.94738511, 0.96003448, 0.98897568,
       0.97410222, 0.94700401, 0.97518737, 0.99330839]), 'test_pearson_p': array([-2.16271491e-13, -1.60090044e-04, -7.39087205e-14, -3.82153625e-11,
       -1.20142172e-08, -7.76249031e-19, -3.46406956e-10, -2.50229840e-09,
       -2.88652496e-10, -1.05979904e-14, -9.38124541e-12, -2.64781470e-09,
       -6.68380934e-12, -1.97938147e-16]), 'test_spearman_r': array([0.95919272, 0.7205635 , 0.98814315, 0.96445819, 0.93859649,
       0.99298246, 0.92010536, 0.89462858, 0.93340229, 0.98450466,
       0.97470328, 0.97110423, 0.9628483 , 0.9752322 ]), 'test_spearman_p': array([-9.34084168e-11, -5.01222852e-04, -2.82167308e-15, -2.93899065e-11,
       -2.80606429e-09, -3.32215984e-17, -2.46661076e-08, -5.46496172e-07,
       -1.57680662e-08, -1.59200608e-13, -7.78922481e-12, -2.23221965e-11,
       -1.62399435e-10, -6.58873719e-12]), 'test_kendall_r': array([0.89149943, 0.63719309, 0.94398977, 0.85630867, 0.8245614 ,
       0.95321637, 0.79411765, 0.78291168, 0.81311912, 0.94080983,
       0.89180807, 0.90849673, 0.86928105, 0.92156863]), 'test_kendall_p': array([-1.03161918e-07, -1.52508316e-04, -2.04681459e-08, -3.20420144e-07,
       -1.17067315e-08, -1.16815227e-13, -2.25820937e-06, -6.36380428e-06,
       -2.59896801e-06, -5.81823612e-08, -2.53540670e-07, -9.76656516e-11,
       -2.15825858e-09, -2.92550870e-11]), 'test_rmse': array([-0.1347361 , -0.46330812, -0.12857907, -0.15330529, -0.18372901,
       -0.06894003, -0.16088624, -0.20431651, -0.15468388, -0.10085421,
       -0.15297894, -0.2198101 , -0.11821034, -0.09116066]), 'test_mae': array([-0.08513065, -0.18296173, -0.09539431, -0.09659374, -0.12247728,
       -0.04718241, -0.12480887, -0.1437551 , -0.10482752, -0.0791522 ,
       -0.10322483, -0.1529171 , -0.09048993, -0.06965525]), 'test_r2': array([0.95387371, 0.54066657, 0.96362544, 0.92049007, 0.85103991,
       0.98890932, 0.90056539, 0.88900336, 0.91499049, 0.97319581,
       0.94637054, 0.895075  , 0.94987972, 0.98288561]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 445, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_4': {'cluster size (%)': 30, 6: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.7016810235687542, 'test_rmse': 0.9273500676870207, 'test_r2': -3.1227061966640903, 'test_pearson_r': array([-0.29611298]), 'test_pearson_p_value': array([0.00892789]), 'test_spearman_r': -0.43803470844721254, 'test_spearman_p_value': 6.771809012430245e-05, 'test_kendall_r': -0.3007264049375812, 'test_kendall_p_value': 0.0001219631787130526, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1124, 'regressor__learning_rate': 0.036660796373716685, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.71642520244711, 'test_rmse': 0.9534785004993372, 'test_r2': -3.3582965720816995, 'test_pearson_r': array([-0.30979312]), 'test_pearson_p_value': array([0.0061111]), 'test_spearman_r': -0.41616257035579585, 'test_spearman_p_value': 0.00016697871934594408, 'test_kendall_r': -0.25374617900116425, 'test_kendall_p_value': 0.0011806880861669241, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 586, 'regressor__learning_rate': 0.06991692945397764, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.7095125641313992, 'test_rmse': 0.9318561897246247, 'test_r2': -3.162869136235966, 'test_pearson_r': array([-0.26898273]), 'test_pearson_p_value': array([0.01800661]), 'test_spearman_r': -0.3837767703371902, 'test_spearman_p_value': 0.0005700352000793659, 'test_kendall_r': -0.23695759458943602, 'test_kendall_p_value': 0.002462461870075818, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1158, 'regressor__learning_rate': 0.031139779066153235, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.7245092922125967, 'test_rmse': 0.9455606820259007, 'test_r2': -3.286213309301729, 'test_pearson_r': array([-0.28994908]), 'test_pearson_p_value': array([0.01053125]), 'test_spearman_r': -0.40044715649657087, 'test_spearman_p_value': 0.0003077469863016673, 'test_kendall_r': -0.24548307412188616, 'test_kendall_p_value': 0.0017017344040400767, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.061502832052996025, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.673954802363073, 'test_rmse': 0.880453367941954, 'test_r2': -2.716273668516785, 'test_pearson_r': array([-0.22585889]), 'test_pearson_p_value': array([0.04825808]), 'test_spearman_r': -0.3712782962959339, 'test_spearman_p_value': 0.0008862775102266001, 'test_kendall_r': -0.24759164554478136, 'test_kendall_p_value': 0.0015545767946868615, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 720, 'regressor__learning_rate': 0.014798641065097335, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.6885689899740329, 'test_rmse': 0.9268683994895321, 'test_r2': -3.118424618815993, 'test_pearson_r': array([-0.36329235]), 'test_pearson_p_value': array([0.00116443]), 'test_spearman_r': -0.5095081833874103, 'test_spearman_p_value': 2.21813326619708e-06, 'test_kendall_r': -0.36116654243177926, 'test_kendall_p_value': 3.900720640967866e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1491, 'regressor__learning_rate': 0.07470507494297844, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.37607391491969017, 'test_ystd': 0.4567226133030462, 'test_mae': 0.6697521679929407, 'test_rmse': 0.891001496704486, 'test_r2': -2.805851487469265, 'test_pearson_r': array([-0.30891131]), 'test_pearson_p_value': array([0.00626556]), 'test_spearman_r': -0.4435852688185561, 'test_spearman_p_value': 5.332224624901738e-05, 'test_kendall_r': -0.2889143123950926, 'test_kendall_p_value': 0.00022211448770691238, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1151, 'regressor__learning_rate': 0.03644360306830401, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_4': {'cluster size (%)': 33, 6: {'fit_time': array([5.01270342, 5.84506226, 4.76039338]), 'score_time': array([0.17773318, 0.17855287, 0.18089843]), 'test_pearson_r': array([0.93727109, 0.89724954, 0.8431134 ]), 'test_pearson_p': array([-1.15178079e-40, -1.44719061e-31, -2.38991649e-24]), 'test_spearman_r': array([0.92104029, 0.90447501, 0.83993962]), 'test_spearman_p': array([-1.44818236e-36, -7.87898230e-33, -5.17425697e-24]), 'test_kendall_r': array([0.80434342, 0.81059814, 0.73529871]), 'test_kendall_p': array([-3.65955464e-28, -3.17711567e-28, -1.45297875e-23]), 'test_rmse': array([-0.22832568, -0.29152369, -0.32580762]), 'test_mae': array([-0.12704859, -0.12764158, -0.16143643]), 'test_r2': array([0.87476449, 0.80251598, 0.68294311]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 409, 'regressor__learning_rate': 0.06192836110027857, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([27.10604906, 28.04570913, 27.60343003]), 'score_time': array([0.68522835, 0.67103195, 0.68147469]), 'test_pearson_r': array([0.88779059, 0.8896942 , 0.87008898]), 'test_pearson_p': array([-2.19074774e-30, -2.42952453e-30, -1.54413557e-27]), 'test_spearman_r': array([0.83474219, 0.90167051, 0.85157262]), 'test_spearman_p': array([-9.68453291e-24, -2.50441221e-32, -2.79700281e-25]), 'test_kendall_r': array([0.69374094, 0.80098759, 0.70958325]), 'test_kendall_p': array([-2.32402135e-21, -1.15352917e-27, -5.19463192e-22]), 'test_rmse': array([-0.31201733, -0.29896753, -0.30353975]), 'test_mae': array([-0.16497249, -0.13431039, -0.17670663]), 'test_r2': array([0.74846427, 0.78400822, 0.74581626]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1563, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([ 9.49707246,  8.77823448, 10.41950274]), 'score_time': array([0.26355052, 0.27103615, 0.2567327 ]), 'test_pearson_r': array([0.96639159, 0.88379539, 0.89608381]), 'test_pearson_p': array([-6.38942670e-52, -1.91227444e-29, -2.26798013e-31]), 'test_spearman_r': array([0.96709105, 0.86018107, 0.90582417]), 'test_spearman_p': array([-2.65169906e-52, -2.73684772e-26, -4.45966814e-33]), 'test_kendall_r': array([0.86154308, 0.73477853, 0.78191076]), 'test_kendall_p': array([-4.13850440e-32, -1.62338290e-23, -2.71431018e-26]), 'test_rmse': array([-0.17034075, -0.27400321, -0.29052989]), 'test_mae': array([-0.11669019, -0.15553624, -0.15018962]), 'test_r2': array([0.93128767, 0.77527049, 0.8006825 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 575, 'regressor__learning_rate': 0.099543325869263, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([36.20454073, 35.51487017, 33.24623227]), 'score_time': array([0.87813067, 0.90149808, 0.89773297]), 'test_pearson_r': array([0.92506623, 0.82939763, 0.92765966]), 'test_pearson_p': array([-1.70483319e-37, -5.99509108e-23, -1.08533169e-37]), 'test_spearman_r': array([0.92833483, 0.84276872, 0.92687552]), 'test_spearman_p': array([-2.74347917e-38, -2.60119727e-24, -1.67939319e-37]), 'test_kendall_r': array([0.82783012, 0.73879146, 0.80881977]), 'test_kendall_p': array([-1.49669597e-29, -9.22162671e-24, -3.23896437e-28]), 'test_rmse': array([-0.22612845, -0.37799292, -0.25019058]), 'test_mae': array([-0.11509083, -0.18681161, -0.13584404]), 'test_r2': array([0.85036184, 0.64992793, 0.85445824]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04628920648960295, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([1.56474018, 1.57306314, 1.66825509]), 'score_time': array([0.07353306, 0.07403708, 0.07225013]), 'test_pearson_r': array([0.9490314 , 0.85927608, 0.88895882]), 'test_pearson_p': array([-2.16664695e-44, -3.51964805e-26, -3.16207206e-30]), 'test_spearman_r': array([0.9305126 , 0.84088711, 0.91084849]), 'test_spearman_p': array([-7.73672015e-39, -4.11593043e-24, -4.95379959e-34]), 'test_kendall_r': array([0.79764235, 0.73841516, 0.84033077]), 'test_kendall_p': array([-1.16806814e-27, -9.58415009e-24, -3.08738147e-30]), 'test_rmse': array([-0.1996682 , -0.33638205, -0.29175185]), 'test_mae': array([-0.12330253, -0.16882506, -0.12130055]), 'test_r2': array([0.89875469, 0.71345639, 0.78447764]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 130, 'regressor__learning_rate': 0.09866233765561166, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([7.24155712, 7.37115717, 7.25697756]), 'score_time': array([0.23024321, 0.23206997, 0.2261548 ]), 'test_pearson_r': array([0.91625679, 0.89495037, 0.88791391]), 'test_pearson_p': array([-1.59451083e-35, -3.49253894e-31, -4.58369759e-30]), 'test_spearman_r': array([0.90714589, 0.87248617, 0.90514241]), 'test_spearman_p': array([-1.05943089e-33, -7.43306446e-28, -5.95201064e-33]), 'test_kendall_r': array([0.7550272 , 0.71837758, 0.79676338]), 'test_kendall_p': array([-5.19820247e-25, -1.41602598e-22, -3.07066874e-27]), 'test_rmse': array([-0.25181121, -0.28073617, -0.31701254]), 'test_mae': array([-0.15555936, -0.1795568 , -0.16183071]), 'test_r2': array([0.82089496, 0.7842864 , 0.78428634]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 460, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([34.4814589 , 34.74638486, 34.35825562]), 'score_time': array([0.86210394, 0.83232069, 0.86249948]), 'test_pearson_r': array([0.88790607, 0.87492677, 0.95976285]), 'test_pearson_p': array([-2.10214099e-30, -3.47733595e-28, -4.19569706e-48]), 'test_spearman_r': array([0.88172311, 0.87451701, 0.95605655]), 'test_spearman_p': array([-1.80329341e-29, -3.95474525e-28, -1.57442581e-46]), 'test_kendall_r': array([0.76638474, 0.74471727, 0.83353947]), 'test_kendall_p': array([-1.43664840e-25, -4.45002501e-24, -7.66058693e-30]), 'test_rmse': array([-0.29496812, -0.28984959, -0.18058718]), 'test_mae': array([-0.13885137, -0.16180051, -0.11939649]), 'test_r2': array([0.7800639 , 0.75328709, 0.91989477]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 522)}}
Trimer_scaler
Filename: (ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM5 polymer_solvent HSP and polysize cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM5 polymer_solvent HSP and polysize cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM5 polymer_solvent HSP and polysize cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c037n02>
Subject: Job 295238: <NGB_log Rg (nm)_ECFP_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250311> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_ECFP_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:12:46 2025
Job was executed on host(s) <8*c037n02>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Thu Mar 13 10:42:01 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Thu Mar 13 10:42:01 2025
Terminated at Sun Mar 16 07:56:27 2025
Results reported at Sun Mar 16 07:56:27 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_ECFP_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_KM5 polymer_solvent HSP and polysize cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_KM5 polymer_solvent HSP and polysize cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "ECFP"                                       --regressor_type "NGB"                                       --radius "3"                                       --vector "count"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM5 polymer_solvent HSP and polysize cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   1093192.25 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.98 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   249278 sec.
    Turnaround time :                            391421 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_KM5 polymer_solvent HSP and polysize cluster_20250311.err> for stderr output of this job.

