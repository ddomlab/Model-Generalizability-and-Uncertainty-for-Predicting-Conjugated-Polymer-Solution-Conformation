


-------------------------------------------------- 
OOD TEST ON ionic-EG



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1765), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 245), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06011535543612345), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 749), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4982034279273399e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038015641467389824), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09245009280743517), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 818), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00030307655517100075), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06686748773874555), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 216), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 976), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 188), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04573005560242321), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 110), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017841602721398193), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1188), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07629561065267537), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 268), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.11847859391492e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 125), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09335546765172036), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 736), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0995623119698446e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08265634816438122), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08242596959713983), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 208), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01387552512363939), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.14436803414418e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02455198425197637), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 137), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00018671006570774803), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0651647010855506), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 803), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 443), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04143246763667364), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 981), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02769675838875059), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06301862595414566), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1393), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00825544661086504), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.033509021578579594), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 676), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08107986630637594), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 535), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 173), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 612), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00016456367256344735), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 98), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 831), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009999999999999979), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013934680607078958), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1452), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.559437717015661e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0346665875067981), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1130), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1084), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1216), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04340286448356031), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 465), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03739745289998725), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03670892196983293), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 499), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1597), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04940239862771216), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008467024827417477), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 235), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0756990703274499), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07516595277142786), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])


{'CO_ionic-EG': {'cluster size (%)': 6, 6: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 152.5568914040714, 'test_rmse': 189.23413317861056, 'test_r2': -1.0651520187573098, 'test_pearson_r': array([-0.84292954]), 'test_pearson_p_value': array([4.13102258e-05]), 'test_spearman_r': -0.7842465437394441, 'test_spearman_p_value': 0.00032272480603742976, 'test_kendall_r': -0.635170352386366, 'test_kendall_p_value': 0.0009819483841946098, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 151.5107742885609, 'test_rmse': 187.54523107980265, 'test_r2': -1.0284538274537192, 'test_pearson_r': array([-0.83833492]), 'test_pearson_p_value': array([4.99017631e-05]), 'test_spearman_r': -0.7993572671255604, 'test_spearman_p_value': 0.00020270928700180966, 'test_kendall_r': -0.6530624749887988, 'test_kendall_p_value': 0.000702802496032528, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 976, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 152.57009223500003, 'test_rmse': 189.01293579597254, 'test_r2': -1.060326893064628, 'test_pearson_r': array([-0.84544006]), 'test_pearson_p_value': array([3.7164347e-05]), 'test_spearman_r': -0.7842465437394441, 'test_spearman_p_value': 0.00032272480603742976, 'test_kendall_r': -0.635170352386366, 'test_kendall_p_value': 0.0009819483841946098, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 152.4931789118811, 'test_rmse': 188.75540732954371, 'test_r2': -1.0547163631943204, 'test_pearson_r': array([-0.8450164]), 'test_pearson_p_value': array([3.78384512e-05]), 'test_spearman_r': -0.7842465437394441, 'test_spearman_p_value': 0.00032272480603742976, 'test_kendall_r': -0.635170352386366, 'test_kendall_p_value': 0.0009819483841946098, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 151.51969542381255, 'test_rmse': 187.5469435087485, 'test_r2': -1.0284908702394806, 'test_pearson_r': array([-0.83989891]), 'test_pearson_p_value': array([4.68239097e-05]), 'test_spearman_r': -0.7993572671255604, 'test_spearman_p_value': 0.00020270928700180966, 'test_kendall_r': -0.6530624749887988, 'test_kendall_p_value': 0.000702802496032528, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 612, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 151.53059157996313, 'test_rmse': 187.9943166378164, 'test_r2': -1.0381799075942468, 'test_pearson_r': array([-0.83602963]), 'test_pearson_p_value': array([5.47456148e-05]), 'test_spearman_r': -0.7842465437394441, 'test_spearman_p_value': 0.00032272480603742976, 'test_kendall_r': -0.635170352386366, 'test_kendall_p_value': 0.0009819483841946098, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1130, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 152.29911272623622, 'test_rmse': 188.7913192442852, 'test_r2': -1.0554982832387925, 'test_pearson_r': array([-0.84658044]), 'test_pearson_p_value': array([3.53995776e-05]), 'test_spearman_r': -0.7993572671255604, 'test_spearman_p_value': 0.00020270928700180966, 'test_kendall_r': -0.6530624749887988, 'test_kendall_p_value': 0.000702802496032528, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1597, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_ionic-EG': {'cluster size (%)': 6, 6: {'fit_time': array([21.0841074 , 22.60846639, 17.46782994, 17.91011429, 18.61149168,
       21.56085801, 23.72275758, 17.96702886, 17.95341492, 16.67834997,
       18.61968827, 18.12439585, 20.75221539, 23.36262131, 22.05517268,
       21.40839911]), 'score_time': array([0.31901145, 0.33890176, 0.31913018, 0.3251822 , 0.32562876,
       0.32926059, 0.31521225, 0.32254148, 0.46060228, 0.39580488,
       0.30971766, 0.3142221 , 0.31550646, 0.31356907, 0.30944729,
       0.33068967]), 'test_pearson_r': array([0.93223451, 0.99472642, 0.99689203, 0.95369111, 0.9953899 ,
       0.97591944, 0.98616294, 0.81522768, 0.99304784, 0.98816832,
       0.98826965, 0.9605921 , 0.95471518, 0.90026986, 0.98049233,
       0.82054664]), 'test_pearson_p': array([-5.14484991e-08, -2.97577675e-16, -5.67654902e-18, -1.08317104e-08,
       -1.17233710e-15, -1.18145649e-10, -2.51087801e-12, -1.19114339e-04,
       -2.06651741e-14, -8.43611381e-13, -7.94528888e-13, -3.56561496e-09,
       -9.28761200e-09, -2.01414238e-06, -2.73809095e-11, -9.85609264e-05]), 'test_spearman_r': array([0.52605773, 0.94788491, 0.94297994, 0.93823529, 0.86470588,
       0.86470588, 0.961001  , 0.62647059, 0.74411765, 0.88741746,
       0.84326734, 0.81383392, 0.89330414, 0.8       , 0.90427197,
       0.89705882]), 'test_spearman_p': array([-3.00771077e-02, -7.51642282e-09, -1.45460594e-08, -7.80221977e-08,
       -1.54423405e-05, -1.54423405e-05, -3.31817876e-09, -9.41397731e-03,
       -9.48282786e-04, -4.54255403e-06, -4.07308471e-05, -1.25052909e-04,
       -3.16996646e-06, -1.98570973e-04, -1.52871825e-06, -2.49237597e-06]), 'test_kendall_r': array([0.40590682, 0.86347451, 0.83395402, 0.81666667, 0.71666667,
       0.73333333, 0.87866878, 0.58333333, 0.6       , 0.77824949,
       0.7113033 , 0.6778302 , 0.79498604, 0.6       , 0.77313654,
       0.75      ]), 'test_kendall_p': array([-2.33585309e-02, -1.40967662e-06, -3.18179868e-06, -5.50848432e-07,
       -2.87624658e-05, -1.62687222e-05, -2.22140114e-06, -1.14261804e-03,
       -7.73831095e-04, -2.77306574e-05, -1.27728091e-04, -2.61704221e-04,
       -1.85653874e-05, -7.73831095e-04, -3.31759538e-05, -8.91848950e-06]), 'test_rmse': array([-25.7580788 ,  -8.14437445, -28.10729906, -25.00000509,
       -19.34927355, -17.77204748,  -9.12630769, -39.28189916,
       -11.79493203, -29.48194354,  -9.69519387, -26.38344932,
       -31.42393812, -18.83534079, -14.74496235, -36.87936225]), 'test_mae': array([-16.70926713,  -5.90568119, -15.90493411, -16.20950904,
       -14.30775703, -14.36546402,  -6.48169819, -19.64028343,
        -8.28487594, -16.94169715,  -7.46633373, -17.18401539,
       -20.29439705, -11.64504375,  -9.53715456, -23.30027638]), 'test_r2': array([0.8594568 , 0.98410757, 0.98837638, 0.89938627, 0.99043907,
       0.95090172, 0.97044901, 0.65858995, 0.97752451, 0.97621908,
       0.97402768, 0.91314356, 0.91010745, 0.63937489, 0.95880411,
       0.61084584]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 818, 'regressor__learning_rate': 0.09245009280743517, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([53.06121969, 46.01648164, 46.8338604 , 54.17765164, 51.44001102,
       55.45435119, 58.04518461, 47.16761947, 46.30337691, 45.66219711,
       54.66183448, 53.70959306, 54.15901446, 48.77783585, 48.31165242,
       56.52393198]), 'score_time': array([0.72972608, 1.09771824, 0.76068449, 0.76139235, 0.76131344,
       0.77755785, 0.72059369, 0.71920538, 0.78130531, 0.80788326,
       0.74334073, 0.74687243, 0.73102236, 0.79236937, 0.75524616,
       0.75279856]), 'test_pearson_r': array([0.97325124, 0.97900685, 0.95397247, 0.99845635, 0.98205363,
       0.97740561, 0.91264903, 0.9941984 , 0.93581315, 0.83933635,
       0.67671238, 0.99786776, 0.98384585, 0.96386756, 0.9544596 ,
       0.97738822]), 'test_pearson_p': array([-5.44087662e-11, -8.98898891e-12, -3.01406784e-09, -5.57734598e-19,
       -1.53334360e-11, -7.59391344e-11, -8.23837276e-07, -5.84185202e-15,
       -1.01467083e-07, -4.79121696e-05, -3.99023155e-03, -5.34264183e-18,
       -7.37648950e-12, -1.95940462e-09, -9.65421021e-09, -7.63457007e-11]), 'test_spearman_r': array([0.87185792, 0.79950965, 0.8452114 , 0.73730704, 0.88823529,
       0.85798404, 0.61663004, 0.94705882, 0.8600893 , 0.84705882,
       0.73730704, 0.98823529, 0.92647059, 0.91176471, 0.84241623,
       0.92058824]), 'test_spearman_p': array([-5.10733748e-06, -1.17410212e-04, -1.94246124e-05, -1.11722688e-03,
       -4.32625087e-06, -2.12817957e-05, -1.09559882e-02, -2.71573117e-08,
       -1.92818221e-05, -3.46804648e-05, -1.11722688e-03, -8.10888105e-13,
       -2.56139707e-07, -8.81898574e-07, -4.22038472e-05, -4.32041043e-07]), 'test_kendall_r': array([0.73063228, 0.65683104, 0.69149282, 0.59414746, 0.83333333,
       0.76151294, 0.56067436, 0.83333333, 0.72271459, 0.63333333,
       0.51046472, 0.95      , 0.85      , 0.78333333, 0.77313654,
       0.81666667]), 'test_kendall_p': array([-4.47393435e-05, -2.43255252e-04, -1.21595108e-04, -1.37502262e-03,
       -2.44193725e-07, -4.10999309e-05, -2.53133322e-03, -2.44193725e-07,
       -1.04538557e-04, -3.36296765e-04, -5.97479842e-03, -7.63760478e-11,
       -1.02027025e-07, -2.41022656e-06, -3.31759538e-05, -5.50848432e-07]), 'test_rmse': array([ -8.84631276, -23.97198961, -19.39494484, -12.82696509,
       -18.57887445, -42.25207162, -33.7184591 , -21.62568824,
       -10.74449521, -29.78811101, -45.20702943, -22.05084825,
       -18.37795781, -23.23191702, -24.38611276, -17.93430027]), 'test_mae': array([ -5.94867326, -16.18361989, -11.50095435,  -8.55967704,
       -12.17399376, -20.7112851 , -15.37334406, -14.33928245,
        -7.99543386, -19.64066068, -27.28546695, -11.70156203,
        -9.08751621, -17.55718164, -15.86260024, -10.90270242]), 'test_r2': array([0.94527266, 0.91588268, 0.89232767, 0.99627104, 0.96021367,
       0.95199839, 0.8136849 , 0.98726071, 0.82385644, 0.54548007,
       0.01070244, 0.98920187, 0.92199563, 0.92460408, 0.89641937,
       0.94036149]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([55.71088028, 40.74559093, 53.3933773 , 46.72370124, 54.52543759,
       45.92371607, 55.20137095, 53.85713673, 49.57931376, 43.28879118,
       54.21457124, 56.52890038, 44.28649616, 47.37136245, 45.40694404,
       57.12669611]), 'score_time': array([0.72528338, 0.77965856, 0.75839996, 0.74998212, 0.73659229,
       0.73035383, 0.77412009, 0.71803927, 0.77711725, 0.75521374,
       0.73865461, 0.7558074 , 0.78822207, 0.7369554 , 0.76440001,
       0.74249792]), 'test_pearson_r': array([0.92913377, 0.99723974, 0.92335412, 0.9941649 , 0.99546835,
       0.99740119, 0.96461047, 0.94345904, 0.45930866, 0.96784747,
       0.99123504, 0.90924695, 0.97334036, 0.94538925, 0.81941011,
       0.98456767]), 'test_pearson_p': array([-7.13065704e-08, -2.33387376e-18, -1.26206280e-07, -6.08154687e-15,
       -1.03982794e-15, -2.13202847e-17, -1.69756272e-09, -4.26263288e-08,
       -7.34916335e-02, -8.74881421e-10, -1.04130428e-13, -1.06653147e-06,
       -2.39199689e-10, -3.35995263e-08, -1.02683794e-04, -5.36672645e-12]), 'test_spearman_r': array([0.88902531, 0.93317001, 0.86519608, 0.86470588, 0.96176471,
       0.87647059, 0.96688768, 0.91979422, 0.44705882, 0.57247992,
       0.92058824, 0.73823529, 0.88447412, 0.80000545, 0.63823529,
       0.8998537 ]), 'test_spearman_p': array([-1.82874182e-06, -4.64827006e-08, -7.32003455e-06, -1.54423405e-05,
       -2.89508013e-09, -8.43911858e-06, -1.07216639e-09, -4.62206235e-07,
       -8.25369234e-02, -2.04736268e-02, -4.32041043e-07, -1.09285081e-03,
       -5.39811216e-06, -1.98536206e-04, -7.80113863e-03, -2.07135857e-06]), 'test_kendall_r': array([0.74539253, 0.81919377, 0.75      , 0.75      , 0.86666667,
       0.75      , 0.87866878, 0.81172259, 0.36666667, 0.46025507,
       0.81666667, 0.58333333, 0.77824949, 0.6780635 , 0.56666667,
       0.78994386]), 'test_kendall_p': array([-3.12734232e-05, -4.73348832e-06, -3.71891753e-06, -8.91848950e-06,
       -3.98309214e-08, -8.91848950e-06, -2.22140114e-06, -1.23329686e-05,
       -5.16768954e-02, -1.31842959e-02, -5.50848432e-07, -1.14261804e-03,
       -2.77306574e-05, -2.95790813e-04, -1.65935081e-03, -2.22802570e-05]), 'test_rmse': array([-26.82913298, -13.79940238, -27.61487333, -31.43761355,
       -20.59406133, -13.75031032, -25.6920764 , -25.66759909,
       -74.32621412, -23.825478  , -13.44460007, -18.95720174,
       -21.92355626, -21.00516117, -28.23507573, -18.14103765]), 'test_mae': array([-16.33199065, -10.52909363, -16.53900194, -18.9639518 ,
       -12.4471756 ,  -9.50835999, -14.79853689,  -9.85383738,
       -39.73277453, -15.1466743 ,  -9.15918902, -11.81554349,
       -14.9841107 , -12.1785278 , -15.66094457,  -8.89691115]), 'test_r2': array([ 0.85852048,  0.99422865,  0.83666137,  0.9782682 ,  0.98985426,
        0.99476414,  0.90830944,  0.8485934 , -1.71526629,  0.92743536,
        0.97991483,  0.80988504,  0.93670675,  0.88932012,  0.65128737,
        0.94410957]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([36.7980299 , 36.36620879, 38.29745364, 29.80024409, 39.49050999,
       30.44608927, 38.20511532, 36.85582852, 33.70444918, 32.02617002,
       32.83934522, 33.3847084 , 35.67510629, 39.43976307, 31.32748723,
       29.32883406]), 'score_time': array([0.52671671, 0.51337838, 0.53044581, 0.54153991, 0.54463315,
       0.50675678, 0.52279234, 0.52330494, 0.55142117, 0.53416967,
       0.531183  , 0.54573131, 0.53250933, 0.52246904, 0.53432035,
       0.50738072]), 'test_pearson_r': array([0.9600057 , 0.940664  , 0.98984431, 0.99571774, 0.00569687,
       0.97245536, 0.99694416, 0.97938676, 0.94120351, 0.59097731,
       0.90482892, 0.98596059, 0.94670579, 0.99916897, 0.89268657,
       0.99213061]), 'test_pearson_p': array([-1.06943327e-09, -1.94747137e-08, -3.99975890e-14, -7.00101747e-16,
       -9.83294351e-01, -2.99930235e-10, -6.61861511e-17, -4.01572761e-11,
       -5.57138529e-08, -1.59198856e-02, -1.46976719e-06, -2.77797048e-12,
       -2.84237063e-08, -7.32352489e-21, -3.29507036e-06, -4.90837568e-14]), 'test_spearman_r': array([0.71595092, 0.81617647, 0.94297994, 0.96002634, 0.46244477,
       0.80882353, 0.94411765, 0.83443731, 0.93883796, 0.57817361,
       0.74521355, 0.82647059, 0.82266395, 0.85294118, 0.79705882,
       0.89705882]), 'test_spearman_p': array([-1.22796042e-03, -6.44925589e-05, -1.45460594e-08, -3.93381227e-09,
       -7.12965008e-02, -1.48475592e-04, -3.93392920e-08, -5.83157783e-05,
       -7.29648422e-08, -1.89765509e-02, -9.23166056e-04, -7.92354858e-05,
       -9.12475992e-05, -2.67907406e-05, -2.18098070e-04, -2.49237597e-06]), 'test_kendall_r': array([0.62222222, 0.73529412, 0.83395402, 0.88918124, 0.42016807,
       0.65      , 0.83333333, 0.6443571 , 0.83550998, 0.49793019,
       0.55462185, 0.68333333, 0.69456675, 0.73333333, 0.68333333,
       0.8       ]), 'test_kendall_p': array([-5.28174150e-04, -6.62542542e-06, -3.18179868e-06, -2.31227219e-06,
       -2.40904452e-02, -2.15302431e-04, -2.44193725e-07, -5.19968854e-04,
       -7.79116309e-06, -7.67014083e-03, -2.90607252e-03, -8.26619198e-05,
       -1.83536177e-04, -1.62687222e-05, -8.26619198e-05, -1.17934846e-06]), 'test_rmse': array([ -23.3626561 ,  -20.15604276,  -14.70564434,   -5.691814  ,
       -166.43567471,  -18.84507343,  -38.50534271,  -16.96442777,
        -23.8474704 ,  -46.6834279 ,  -28.67187042,  -14.1463193 ,
        -22.37770668,  -12.28756318,  -36.98195006,  -26.60392007]), 'test_mae': array([-12.55618922, -12.62865792, -10.54482906,  -3.31647126,
       -69.92842293, -12.27202311, -26.08008402, -14.0239593 ,
       -14.09580751, -21.58128834, -17.47361014, -10.71770887,
       -14.77401931,  -9.64479568, -21.89559533, -18.17263403]), 'test_r2': array([  0.88694701,   0.88288104,   0.97537518,   0.98137793,
       -20.39870242,   0.94269529,   0.97912784,   0.95748199,
         0.88152425,  -0.65821443,   0.79740616,   0.96579695,
         0.88245946,   0.99605721,   0.79161363,   0.98329553]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1393, 'regressor__learning_rate': 0.06301862595414566, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([46.99491525, 46.09017324, 50.74537015, 50.03911996, 55.0620513 ,
       43.99097371, 45.8702867 , 56.27017021, 58.55500317, 56.96233487,
       52.71480274, 57.84902453, 52.24822879, 55.80594063, 45.36478257,
       48.02062416]), 'score_time': array([0.73048782, 0.75632262, 0.76858425, 0.74274945, 0.75916696,
       0.99883986, 0.74081397, 0.72885489, 0.72155309, 0.77191091,
       0.70864654, 0.74607491, 0.76861143, 0.73156691, 0.74220181,
       0.7472496 ]), 'test_pearson_r': array([0.97102381, 0.94754864, 0.9886535 , 0.99278238, 0.95458942,
       0.95250563, 0.98542896, 0.97251504, 0.7629669 , 0.99810973,
       0.99175774, 0.97311302, 0.92018694, 0.96757186, 0.70201081,
       0.99874719]), 'test_pearson_p': array([-9.84904826e-11, -7.88011583e-09, -9.15562517e-14, -2.68444348e-14,
       -9.46649334e-09, -1.28873533e-08, -3.59841793e-12, -2.95457210e-10,
       -5.86320323e-04, -2.30064222e-18, -6.78032341e-14, -2.53695604e-10,
       -4.47070716e-07, -9.28066453e-10, -2.43303473e-03, -1.29449319e-19]), 'test_spearman_r': array([0.72058824, 0.80642716, 0.75214724, 0.85209736, 0.87564409,
       0.95588235, 0.94117647, 0.82647059, 0.77647059, 0.92783505,
       0.8197206 , 0.87352941, 0.73746634, 0.9757177 , 0.55481987,
       0.88235294]), 'test_spearman_p': array([-1.10173575e-03, -9.21923037e-05, -4.96177503e-04, -2.78199541e-05,
       -8.82222352e-06, -7.76027446e-09, -5.58893763e-08, -7.92354858e-05,
       -4.04350841e-04, -2.25494394e-07, -1.01543452e-04, -9.86965167e-06,
       -1.11301253e-03, -1.25183504e-10, -2.57030961e-02, -6.09561957e-06]), 'test_kendall_r': array([0.57352941, 0.66182252, 0.65925926, 0.7113033 , 0.6778302 ,
       0.83333333, 0.81666667, 0.73333333, 0.6       , 0.82352941,
       0.6778302 , 0.71666667, 0.6329621 , 0.89540533, 0.49372817,
       0.75      ]), 'test_kendall_p': array([-9.01334702e-04, -2.60304292e-04, -2.40323079e-04, -1.27728091e-04,
       -2.61704221e-04, -2.44193725e-07, -5.50848432e-07, -1.62687222e-05,
       -7.73831095e-04, -9.81814824e-06, -2.61704221e-04, -2.87624658e-05,
       -7.00693466e-04, -1.41912826e-06, -7.83671893e-03, -8.91848950e-06]), 'test_rmse': array([-17.92227776, -19.97244669, -12.16090554, -24.20229501,
       -35.84058976, -14.04780254, -17.53337372, -22.14065598,
       -28.66491318, -26.80677951,  -9.99090024, -22.21899013,
       -25.98207814, -19.25529551, -32.54636431,  -9.64190791]), 'test_mae': array([-10.62045952, -11.46799995,  -7.45739529, -17.59442601,
       -24.53641544,  -9.31849221, -12.44157442, -11.82211623,
       -18.34985211, -17.53402089,  -7.1837451 , -14.79550997,
       -15.407289  , -12.94962552, -17.48371348,  -6.87337628]), 'test_r2': array([0.941923  , 0.88276098, 0.97317588, 0.9855239 , 0.86032823,
       0.90632777, 0.96982427, 0.93696648, 0.38370912, 0.99005171,
       0.98331801, 0.94036369, 0.8075441 , 0.91748476, 0.29622965,
       0.99741437]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([31.8953824 , 28.75760078, 29.74758697, 29.77510333, 28.5320406 ,
       31.11465073, 27.81053662, 30.38651657, 30.23688388, 32.62002873,
       31.40271497, 31.05234194, 30.60659432, 30.86324954, 32.72112584,
       30.26259947]), 'score_time': array([0.48632956, 0.45782065, 0.45970774, 0.45178199, 1.0052197 ,
       0.48334956, 0.49449301, 0.471874  , 0.48195028, 0.4453361 ,
       0.46572566, 0.47615743, 0.4512701 , 0.44515705, 0.46730232,
       0.48030663]), 'test_pearson_r': array([0.98557527, 0.81057678, 0.99529812, 0.97190534, 0.99727347,
       0.95639067, 0.9839223 , 0.98728546, 0.98788014, 0.98252914,
       0.95682456, 0.99733398, 0.99147221, 0.7933799 , 0.97396887,
       0.99304158]), 'test_pearson_p': array([-5.49132975e-13, -7.93798159e-05, -1.26056274e-16, -3.43947786e-10,
       -2.98193250e-17, -7.16533811e-09, -7.13701986e-12, -1.39286518e-12,
       -9.97630260e-13, -1.27218306e-11, -6.68869376e-09, -2.54884995e-17,
       -8.59912551e-14, -2.44738711e-04, -2.02747673e-10, -2.07953316e-14]), 'test_spearman_r': array([0.91911765, 0.76715686, 0.85644236, 0.8550407 , 0.90574374,
       0.87352941, 0.9006625 , 0.87352941, 0.96764706, 0.8622975 ,
       0.92058824, 0.98820489, 0.95729117, 0.6490068 , 0.71976714,
       0.83235294]), 'test_spearman_p': array([-1.86581282e-07, -3.25721658e-04, -1.14258975e-05, -2.43675207e-05,
       -1.37711163e-06, -9.86965167e-06, -1.96139051e-06, -9.86965167e-06,
       -9.13289481e-10, -1.73559973e-05, -4.32041043e-07, -8.25605706e-13,
       -6.20653135e-09, -6.52447858e-03, -1.66814028e-03, -6.32812457e-05]), 'test_kendall_r': array([0.79411765, 0.58823529, 0.75557628, 0.7113033 , 0.80672269,
       0.71666667, 0.72803985, 0.73333333, 0.88333333, 0.75630252,
       0.78333333, 0.93678391, 0.87398044, 0.54393782, 0.59920413,
       0.71666667]), 'test_kendall_p': array([-5.45407093e-07, -6.28513226e-04, -2.56735365e-05, -1.27728091e-04,
       -1.48492509e-05, -2.87624658e-05, -8.82060896e-05, -1.62687222e-05,
       -1.43717927e-08, -4.90242494e-05, -2.41022656e-06, -5.27102297e-07,
       -2.70729796e-06, -3.39579783e-03, -1.33408624e-03, -2.87624658e-05]), 'test_rmse': array([-12.18128458, -40.59174651,  -8.97118858, -22.84094646,
        -5.88943314, -19.69816572, -42.58748512, -12.44529186,
       -15.12920781, -14.69123692, -21.13622719, -14.08220462,
       -12.96884455, -40.61037702, -20.92929205, -36.06961211]), 'test_mae': array([ -9.2479146 , -26.97379265,  -7.08197136, -14.3352561 ,
        -4.434162  ,  -9.3245725 , -30.21504337,  -9.80972728,
        -9.80151226, -11.19675424, -14.27072523,  -8.06296275,
        -9.18310991, -24.91269591, -12.40435404, -23.83637404]), 'test_r2': array([0.97023738, 0.49998834, 0.98914749, 0.89747988, 0.99308965,
       0.84047484, 0.96010141, 0.96154324, 0.9531371 , 0.90560283,
       0.88707478, 0.99418163, 0.98156833, 0.57822002, 0.92240139,
       0.98188939]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1216, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([ 96.00205874,  98.85435534,  92.35252309,  99.52788663,
        95.48646712,  93.71349716,  96.59901118, 101.51150227,
        93.52121425,  97.2923255 , 103.19907808,  98.18578577,
        94.12320423,  95.25435114,  91.53354859,  97.20746064]), 'score_time': array([0.81219721, 0.77022719, 1.88859606, 0.77550125, 0.89295244,
       1.40601778, 0.80109859, 0.77686334, 1.75359106, 0.75340724,
       0.73990273, 0.8033514 , 1.81825185, 0.82085299, 1.84682965,
       0.76825237]), 'test_pearson_r': array([0.99552406, 0.98181327, 0.99733544, 0.93988119, 0.84258155,
       0.9587063 , 0.99024678, 0.9329293 , 0.97276041, 0.91668099,
       0.97627744, 0.98191593, 0.9755079 , 0.97169858, 0.97876641,
       0.99753713]), 'test_pearson_p': array([-8.71843435e-17, -3.08896091e-12, -1.79164689e-18, -6.48681568e-08,
       -4.19142909e-05, -4.92099599e-09, -2.19397390e-13, -1.36948113e-07,
       -2.77661445e-10, -5.98322202e-07, -1.06486370e-10, -1.61703611e-11,
       -1.32879940e-10, -3.61864433e-10, -4.93390807e-11, -1.46426312e-17]), 'test_spearman_r': array([0.66094433, 0.6707637 , 0.80981656, 0.74319373, 0.90507751,
       0.67844021, 0.97058824, 0.92058824, 0.72901405, 0.88235294,
       0.93215745, 0.97643699, 0.90882353, 0.96470588, 0.96470588,
       0.94705882]), 'test_spearman_p': array([-3.86846845e-03, -3.20567520e-03, -8.16077038e-05, -9.69890137e-04,
       -1.44408329e-06, -3.86334348e-03, -4.72340113e-10, -4.32041043e-07,
       -1.35537263e-03, -6.09561957e-06, -1.48059702e-07, -1.01615885e-10,
       -1.10058522e-06, -1.66620775e-09, -1.66620775e-09, -2.71573117e-08]), 'test_kendall_r': array([0.64207079, 0.63200956, 0.71113062, 0.57741091, 0.82845913,
       0.61088401, 0.9       , 0.78333333, 0.57144875, 0.71666667,
       0.801752  , 0.90759507, 0.76666667, 0.86666667, 0.88333333,
       0.86666667]), 'test_kendall_p': array([-3.34757024e-04, -4.44218260e-04, -7.45679444e-05, -1.87273015e-03,
       -8.12917002e-06, -1.00194553e-03, -4.72556483e-09, -2.41022656e-06,
       -2.15672721e-03, -2.87624658e-05, -1.76177315e-05, -1.10296350e-06,
       -4.72451181e-06, -3.98309214e-08, -1.43717927e-08, -3.98309214e-08]), 'test_rmse': array([-19.79044624, -38.57944823, -14.03999448, -19.99789549,
       -24.12190892, -24.33837985, -13.18685639, -22.65680221,
       -14.51886337, -34.25852855, -19.09090177, -19.74161736,
       -20.04351311, -22.53997785, -17.07936092, -24.24556271]), 'test_mae': array([-12.31875095, -14.8923036 , -10.23900574, -12.91724973,
       -11.29617787, -14.61408749,  -9.27844752, -17.548739  ,
       -10.78859049, -21.90009932, -14.03639291, -11.28444947,
       -13.45139948, -12.9898474 , -10.24847997, -12.51647112]), 'test_r2': array([0.98792241, 0.96239776, 0.99421676, 0.87989496, 0.69577286,
       0.89929775, 0.97717474, 0.80301017, 0.94250204, 0.83905045,
       0.94222371, 0.95793393, 0.92213631, 0.93636643, 0.9147846 ,
       0.98743271]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07516595277142786, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 522)}}
Trimer_scaler
Filename: (ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/EG-Ionic-Based Cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/EG-Ionic-Based Cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/EG-Ionic-Based Cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c200n06>
Subject: Job 294633: <NGB_Rg1 (nm)_ECFP_Trimer_EG-Ionic-Based Cluster_20250311> in cluster <Hazel> Done

Job <NGB_Rg1 (nm)_ECFP_Trimer_EG-Ionic-Based Cluster_20250311> was submitted from host <c040n04> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 18:16:47 2025
Job was executed on host(s) <6*c200n06>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 00:25:00 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 00:25:00 2025
Terminated at Wed Mar 12 14:02:54 2025
Results reported at Wed Mar 12 14:02:54 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_Rg1 (nm)_ECFP_Trimer_EG-Ionic-Based Cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_EG-Ionic-Based Cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_EG-Ionic-Based Cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "Rg1 (nm)"                                       --representation "ECFP"                                       --regressor_type "NGB"                                       --radius "3"                                       --vector "count"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "EG-Ionic-Based Cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   216716.25 sec.
    Max Memory :                                 3 GB
    Average Memory :                             2.70 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              26
    Max Threads :                                29
    Run time :                                   49074 sec.
    Turnaround time :                            71167 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_EG-Ionic-Based Cluster_20250311.err> for stderr output of this job.

