


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6

------------------------------------------------------------
Sender: LSF System <lsfadmin@c016n04>
Subject: Job 295221: <NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311> in cluster <Hazel> Exited

Job <NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:09:32 2025
Job was executed on host(s) <8*c016n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 17:00:56 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 17:00:56 2025
Terminated at Thu Mar 13 04:30:37 2025
Results reported at Thu Mar 13 04:30:37 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 polymer_solvent HSP cluster" 



------------------------------------------------------------

Exited with exit code 120.

Resource usage summary:

    CPU time :                                   172403.14 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.76 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   1 GB
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   41382 sec.
    Turnaround time :                            120065 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311.err> for stderr output of this job.




-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023696508958208663), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 176), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06243344626737913), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04219740958686788), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09977604702763535), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 693), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004666611399926698), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04745768604521185), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1428), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.062176670694588085), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1447), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08034891281081914), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04460649237010557), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1367), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04254565457262954), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1372), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09701762666231041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003180614538446503), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 334), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.2578880169086277e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06734469813210106), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 241), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0651454501689819), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 117), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0353476791704779), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 808), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06037044803959038), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 834), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09735715926187881), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1773), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.8847509165378106e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005111289224655466), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07535209684582653), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 366), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000768085400118163), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 91), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.060886346807094725), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05764390326947681), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021826363230806868), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0639772130083123), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 590), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 840), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05490597104602404), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 599), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09795849365433103), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1991), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.116964444346862e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05613717372098833), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1480), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 527), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06669043620675741), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 573), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038383227291558485), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 454), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03742143472864552), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1208), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 667), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06943881095687969), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 985), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05995688930008203), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06449854041502759), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4103076091788285e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 747), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050268634824939325), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 453), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06099245997138851), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1317), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09875302458953115), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1783), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4038373772822614e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05630063059538137), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023810502284325095), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.751952734352674e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09806386016722225), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 549), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00028211984782890783), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026888480124487992), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1473), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05111527168721677), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 514), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008060428188982054), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06781301196862932), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 605), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022371277634528293), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1548), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05856364257160111), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07282431330042041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 319), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06074227899282915), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1495), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09893363665892795), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 212), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001631849069567083), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1272), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02597056452315638), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09696628411840752), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 211), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008186354019821059), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.053935123466136374), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 576), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009109127238559544), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 113), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.045271406195049047), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 384), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007446767393349163), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06209026692432958), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 620), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05677666497241606), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 328), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 394), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1212), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03198859611946592), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06403066081797505), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1153), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009841675720281202), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03986095106190162), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09942872008610594), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1214), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.316829066893263e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04357683426277615), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1185), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06318814911352401), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0569664516520818), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 700), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1358), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09892816810056504), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 369), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4081376605879763e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057752143431977085), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041774712342950576), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 525), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015381391419138002), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03585325240340093), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 774), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1395), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06102493782716531), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 918), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04019987692926855), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 898), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 821), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352854436764993), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1482), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05797080556031799), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09849168001999636), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 676), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.2353109065079192e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04932437247726928), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 743), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03092926877991534), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026415343772022724), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 417), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0739685875336034), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 201), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.29789485354602e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.040136030231398e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0633974314597767), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1914), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008384303246155712), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04134974371760575), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 957), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0912027239689642), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 585), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008388360456075459), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028739173344241233), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1167), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09861621135307413), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1339), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.510384627796408e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017339390259799307), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1385), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022878017873038392), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0992849331487508), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 275), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0595770537512154e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 331), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06346245955234554), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1467), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6085998379638478e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05090003139077409), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025110050741759458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2881294633636083e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07629862833435393), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 253), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01510183533020782), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025645139416425104), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.2987581066544117e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 501), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.042697514164351524), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.045816286587183466), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1062), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04740108299433949), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006760337033783526), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 538), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05628531544428155), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 529), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03405058415964281), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 269), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06736863858823255), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 402), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05490427715632164), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09905047049227562), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 860), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.003131108825929e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1648), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03371838315138179), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 481), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06696534712983036), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1023), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00944039617634061), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1567), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056956745112934457), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 321), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1276), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 435), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05890628987782327), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 189), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 311), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05495490817192752), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 517), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07292263303448028), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1455), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00977878577785751), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025041499136197735), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 349), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005147024286785698), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015550790441708956), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1985), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4144081237995499e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 354), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08770533089118117), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1305), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025841122889268073), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 805), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000821353567067531), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1018), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050528599274783585), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04765522044376469), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 903), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 772), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04914125018141517), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1334), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05097292088400042), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1435), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1630), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032323366856978286), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056797194143874685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 176), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01960456399791392), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 350), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09935189475944943), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 360), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.7434936369262282e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 932), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01641207810391858), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028460838957409525), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1181), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03114332161834689), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1257), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00023719851549414825), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011584653998883147), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 627), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09963605780102465), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 276), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000847707862621826), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06276278524650138), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 396), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3224502669065352e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1199), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0868882272724066), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07368100436624682), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1002), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007340970642973482), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05609524223178218), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06497795189484522), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0211047489837172), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 539), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 567), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 250), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06242755674414676), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1081), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06671440511736153), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 472), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04844941978348072), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 311), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.234723329072811e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 138), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0982625041889107), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 385), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0322615639689092e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05351245186224119), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023752657579156955), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1301), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06323350042142185), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1329), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008043244477388159), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0559672626303733), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1260), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09863766636390639), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 462), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3000980091377323e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09961345446146942), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1445), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5182217034478748e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016042593908952858), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04004468330771536), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 479), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05041469642305597), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 567), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1036), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06375002921542443), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04985402315255531), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 486), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04018107874046318), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 884), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0349969119650979e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 626), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059011833325772825), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1967), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008322878583246673), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09669645156827633), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1369), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00039938130608080255), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044635241193344465), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 916), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0706834898358438), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 341), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09891167091568198), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1986), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00053669030410338), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0911027961179286), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1968), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0191048318327284e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02351948677711185), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09984164711240609), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 584), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.602491727624702e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03939527293188708), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1878), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006761691185024079), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010787633620822369), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05932669204082694), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028415909010426108), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 803), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1426), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1085), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09928559655589952), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 284), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1393812554409814e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029764482495685883), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 840), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3818630206680985e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 915), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00667540070940666), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09955490509474976), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1875), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.22472499593345e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1250), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05926351446232179), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07371585374478429), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0995745213196144), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1917), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3842542767070137e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05479516519865446), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1183), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012653026456914886), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07027755234342481), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 340), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048117937391429874), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 366), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06866783008546534), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 195), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024807382518120258), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1990), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4257361046388194e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 315), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09985387060267412), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1202), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.380102462737834e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05392727336178622), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 937), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1027), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.433274882888435e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05930335882743346), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1894), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0531514692154225e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016135619567549938), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1381), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09678163116827738), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 181), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.1291756800185964e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 416), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047559703099080246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1199), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0369105500896084), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 930), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06722775627101939), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 37, 6: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.5511445560127811, 'test_rmse': 0.8081457438048979, 'test_r2': -0.9828365147049358, 'test_pearson_r': array([-0.09992981]), 'test_pearson_p_value': array([0.33011805]), 'test_spearman_r': -0.2042317754290477, 'test_spearman_p_value': 0.0447947654031701, 'test_kendall_r': -0.12862153987246697, 'test_kendall_p_value': 0.06542861223761859, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.5319052091337412, 'test_rmse': 0.6816961341215896, 'test_r2': -0.4108771187905347, 'test_pearson_r': array([-0.04796116]), 'test_pearson_p_value': array([0.64085216]), 'test_spearman_r': -0.2430096073794843, 'test_spearman_p_value': 0.01646640926818567, 'test_kendall_r': -0.1435726324082711, 'test_kendall_p_value': 0.039894451472713734, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 586, 'regressor__learning_rate': 0.06991692945397764, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.5128436511633934, 'test_rmse': 0.6796617597380997, 'test_r2': -0.4024687699608398, 'test_pearson_r': array([-0.04037357]), 'test_pearson_p_value': array([0.69458618]), 'test_spearman_r': -0.2543512146749378, 'test_spearman_p_value': 0.011934094848788176, 'test_kendall_r': -0.13821365471041364, 'test_kendall_p_value': 0.04773595873998199, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0651454501689819, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.5156666578680014, 'test_rmse': 0.7065761275492312, 'test_r2': -0.5157425713941799, 'test_pearson_r': array([-0.06719097]), 'test_pearson_p_value': array([0.5131665]), 'test_spearman_r': -0.18131965601496075, 'test_spearman_p_value': 0.0755015793667686, 'test_kendall_r': -0.08477247967523217, 'test_kendall_p_value': 0.22558197507070865, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 91, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.4976773870011182, 'test_rmse': 0.6911825204258111, 'test_r2': -0.4504174667350882, 'test_pearson_r': array([-0.01193852]), 'test_pearson_p_value': array([0.90760451]), 'test_spearman_r': -0.17047918865825837, 'test_spearman_p_value': 0.09501749502622772, 'test_kendall_r': -0.07163155358343191, 'test_kendall_p_value': 0.30565092867165666, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1480, 'regressor__learning_rate': 0.05613717372098833, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.4943709708742939, 'test_rmse': 0.6860044184181197, 'test_r2': -0.4287668124693429, 'test_pearson_r': array([-0.01831465]), 'test_pearson_p_value': array([0.85867985]), 'test_spearman_r': -0.16282504789009267, 'test_spearman_p_value': 0.11104685163742076, 'test_kendall_r': -0.06464310933138978, 'test_kendall_p_value': 0.35525215260795007, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1208, 'regressor__learning_rate': 0.03742143472864552, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.47706517163720746, 'test_rmse': 0.6792619583733621, 'test_r2': -0.4008192906259378, 'test_pearson_r': array([0.04010256]), 'test_pearson_p_value': array([0.69653567]), 'test_spearman_r': -0.11405102536667262, 'test_spearman_p_value': 0.26598996924836554, 'test_kendall_r': -0.021411605691166888, 'test_kendall_p_value': 0.7595454133973452, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05630063059538137, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 33, 6: {'fit_time': array([35.43762398, 35.44287229, 35.19710159]), 'score_time': array([0.78409338, 0.74627852, 0.74858737]), 'test_pearson_r': array([0.93296901, 0.90936972, 0.85747916]), 'test_pearson_p': array([-1.76448661e-39, -9.58470232e-34, -5.77007382e-26]), 'test_spearman_r': array([0.91869034, 0.92479714, 0.85061495]), 'test_spearman_p': array([-4.79309257e-36, -5.21942788e-37, -3.58955236e-25]), 'test_kendall_r': array([0.7989292 , 0.82606462, 0.74719017]), 'test_kendall_p': array([-7.93080828e-28, -2.81895772e-29, -2.83547046e-24]), 'test_rmse': array([-0.23593222, -0.2743064 , -0.31217465]), 'test_mae': array([-0.12979885, -0.12387543, -0.15204404]), 'test_r2': array([0.86628119, 0.82515382, 0.7089216 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1447, 'regressor__learning_rate': 0.062176670694588085, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([35.32842088, 34.62146544, 34.89732337]), 'score_time': array([0.73123837, 0.75397205, 0.65991378]), 'test_pearson_r': array([0.88633667, 0.90195023, 0.89342637]), 'test_pearson_p': array([-3.67015649e-30, -2.23509410e-32, -6.19305517e-31]), 'test_spearman_r': array([0.84019613, 0.91615874, 0.88728888]), 'test_spearman_p': array([-2.62241398e-24, -4.19687071e-35, -5.71353800e-30]), 'test_kendall_r': array([0.70750693, 0.81485604, 0.74547357]), 'test_kendall_p': array([-3.79668831e-22, -1.40142763e-28, -4.08768199e-24]), 'test_rmse': array([-0.31382412, -0.28564182, -0.27720793]), 'test_mae': array([-0.16335146, -0.13042721, -0.16024775]), 'test_r2': array([0.74554271, 0.80283367, 0.78800388]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1372, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([51.47548151, 55.52958202, 52.12527132]), 'score_time': array([1.03818154, 1.07676601, 1.05061507]), 'test_pearson_r': array([0.95825136, 0.88204649, 0.92266075]), 'test_pearson_p': array([-5.44173959e-48, -3.45078195e-29, -1.61919059e-36]), 'test_spearman_r': array([0.96210157, 0.85653493, 0.93547388]), 'test_spearman_p': array([-9.64709815e-50, -7.46136315e-26, -1.04886623e-39]), 'test_kendall_r': array([0.84670006, 0.74142369, 0.84163487]), 'test_kendall_p': array([-4.45434340e-31, -7.03752807e-24, -3.24536035e-30]), 'test_rmse': array([-0.18729696, -0.27617687, -0.25265613]), 'test_mae': array([-0.12593505, -0.15947304, -0.11477951]), 'test_r2': array([0.91692717, 0.77169079, 0.84926175]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([12.93681097, 12.4804008 , 13.33906007]), 'score_time': array([0.32270479, 0.30781269, 0.30314016]), 'test_pearson_r': array([0.94504204, 0.8423534 , 0.92706753]), 'test_pearson_p': array([-4.90558484e-43, -2.87996025e-24, -1.50981440e-37]), 'test_spearman_r': array([0.94103663, 0.85649721, 0.9250263 ]), 'test_spearman_p': array([-8.97191078e-42, -7.53809554e-26, -4.61340678e-37]), 'test_kendall_r': array([0.83590126, 0.74701854, 0.80279403]), 'test_kendall_p': array([-4.25387693e-30, -2.94396178e-24, -8.02968348e-28]), 'test_rmse': array([-0.19320818, -0.36470559, -0.25155245]), 'test_mae': array([-0.10298493, -0.18006118, -0.13761799]), 'test_r2': array([0.89075968, 0.67410704, 0.85286946]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 590, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([52.19689822, 49.97510552, 51.62683272]), 'score_time': array([1.05639338, 1.09628463, 0.9840951 ]), 'test_pearson_r': array([0.94444379, 0.8609421 , 0.89729333]), 'test_pearson_p': array([-7.67563098e-43, -2.21200697e-26, -1.42282390e-31]), 'test_spearman_r': array([0.9177096 , 0.84595933, 0.91974523]), 'test_spearman_p': array([-7.81498860e-36, -1.17812041e-24, -7.20993318e-36]), 'test_kendall_r': array([0.77906515, 0.73968472, 0.82482464]), 'test_kendall_p': array([-1.89447025e-26, -7.93636163e-24, -3.75848255e-29]), 'test_rmse': array([-0.20845709, -0.33512426, -0.2795434 ]), 'test_mae': array([-0.13035399, -0.16497803, -0.12820933]), 'test_r2': array([0.8896454 , 0.71559526, 0.80213745]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.038383227291558485, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([42.62911844, 40.58549428, 42.52322435]), 'score_time': array([0.87776804, 0.83941174, 0.84692597]), 'test_pearson_r': array([0.93781016, 0.93315947, 0.88452633]), 'test_pearson_p': array([-8.07163097e-41, -4.39263037e-39, -1.48997948e-29]), 'test_spearman_r': array([0.93364169, 0.93223194, 0.88902737]), 'test_spearman_p': array([-1.16565946e-39, -7.68720217e-39, -3.08557487e-30]), 'test_kendall_r': array([0.7935712 , 0.79627139, 0.78042877]), 'test_kendall_p': array([-1.77521267e-27, -2.40869191e-27, -3.30746534e-26]), 'test_rmse': array([-0.21719525, -0.22216545, -0.32366496]), 'test_mae': array([-0.1352223 , -0.13832464, -0.15899085]), 'test_r2': array([0.86675273, 0.8649067 , 0.77513797]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1783, 'regressor__learning_rate': 0.09875302458953115, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([51.18307424, 49.73081422, 55.11107635]), 'score_time': array([1.06764197, 1.05686426, 1.00849438]), 'test_pearson_r': array([0.88676206, 0.86676213, 0.96347795]), 'test_pearson_p': array([-3.15818261e-30, -4.15959784e-27, -7.73899436e-50]), 'test_spearman_r': array([0.88642812, 0.86536421, 0.95463144]), 'test_spearman_p': array([-3.55369479e-30, -6.25815693e-27, -5.84272203e-46]), 'test_kendall_r': array([0.78629084, 0.74197227, 0.82609385]), 'test_kendall_p': array([-7.90887558e-27, -6.51052997e-24, -2.51063435e-29]), 'test_rmse': array([-0.29549758, -0.29715293, -0.17994915]), 'test_mae': array([-0.13287518, -0.15994055, -0.12111276]), 'test_r2': array([0.77927363, 0.7406976 , 0.92045981]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05856364257160111, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 6, 6: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 1.1349594713469493, 'test_rmse': 1.3040580726604927, 'test_r2': -1.0179706153619619, 'test_pearson_r': array([0.75622982]), 'test_pearson_p_value': array([0.00110514]), 'test_spearman_r': 0.6023460304650873, 'test_spearman_p_value': 0.017488220126225477, 'test_kendall_r': 0.405371240588956, 'test_kendall_p_value': 0.04490541842092228, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 212, 'regressor__learning_rate': 0.09893363665892795, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 0.9615364107827068, 'test_rmse': 1.1964491929320642, 'test_r2': -0.6986718751506116, 'test_pearson_r': array([0.71552667]), 'test_pearson_p_value': array([0.00270598]), 'test_spearman_r': 0.675139951038577, 'test_spearman_p_value': 0.005749581447938781, 'test_kendall_r': 0.42295493443781357, 'test_kendall_p_value': 0.03874073768277019, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 328, 'regressor__learning_rate': 0.05677666497241606, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 0.9786605917428236, 'test_rmse': 1.1911347945200697, 'test_r2': -0.6836150384128525, 'test_pearson_r': array([0.6357578]), 'test_pearson_p_value': array([0.01085363]), 'test_spearman_r': 0.6663795275661979, 'test_spearman_p_value': 0.006673466578753964, 'test_kendall_r': 0.39277665953249347, 'test_kendall_p_value': 0.0509903330329577, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06318814911352401, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 0.9774811772182687, 'test_rmse': 1.2215871991575935, 'test_r2': -0.7708016599328231, 'test_pearson_r': array([0.76976095]), 'test_pearson_p_value': array([0.00079004]), 'test_spearman_r': 0.6799488932857427, 'test_spearman_p_value': 0.005287236920363597, 'test_kendall_r': 0.4469477780852592, 'test_kendall_p_value': 0.027019519889875776, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.015381391419138002, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 1.0478452101179558, 'test_rmse': 1.2938865306024538, 'test_r2': -0.9866133876695882, 'test_pearson_r': array([0.70521846]), 'test_pearson_p_value': array([0.00331723]), 'test_spearman_r': 0.6663795275661979, 'test_spearman_p_value': 0.006673466578753964, 'test_kendall_r': 0.39277665953249347, 'test_kendall_p_value': 0.0509903330329577, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1482, 'regressor__learning_rate': 0.07352854436764993, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 0.971899974654928, 'test_rmse': 1.2153943392384485, 'test_r2': -0.7528929430934577, 'test_pearson_r': array([0.70470716]), 'test_pearson_p_value': array([0.00335019]), 'test_spearman_r': 0.6663795275661979, 'test_spearman_p_value': 0.006673466578753964, 'test_kendall_r': 0.39277665953249347, 'test_kendall_p_value': 0.0509903330329577, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 957, 'regressor__learning_rate': 0.04134974371760575, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 0.9779804409432351, 'test_rmse': 1.2258501918265523, 'test_r2': -0.7831824155340346, 'test_pearson_r': array([0.73648815]), 'test_pearson_p_value': array([0.00174003]), 'test_spearman_r': 0.6811469409194654, 'test_spearman_p_value': 0.005176763648200599, 'test_kendall_r': 0.4547940268270977, 'test_kendall_p_value': 0.02383973037080235, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 849, 'regressor__learning_rate': 0.025110050741759458, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 6, 6: {'fit_time': array([5.32931566, 5.9882803 , 4.63576174, 5.29476333, 5.20230341,
       5.22604823, 5.0460844 , 4.9309516 , 4.98793864, 5.83373833,
       4.76563525, 4.86875439, 5.46446276, 4.65997529, 5.59560299,
       5.13616395, 5.37224197]), 'score_time': array([0.07654357, 0.07388878, 0.07830477, 0.07841372, 0.07747698,
       0.07968593, 0.08226776, 0.07956219, 0.07569838, 0.07344007,
       0.07829356, 0.07699609, 0.07308269, 0.07978773, 0.07339478,
       0.08127379, 0.0850141 ]), 'test_pearson_r': array([0.9618218 , 0.98770595, 0.99555202, 0.98533516, 0.96553456,
       0.95282254, 0.98063773, 0.99095268, 0.6931771 , 0.94289962,
       0.97115115, 0.96772241, 0.95378266, 0.98170338, 0.98000474,
       0.88378659, 0.95316965]), 'test_pearson_p': array([-2.86538877e-09, -1.10192492e-12, -9.12848800e-16, -3.76280364e-12,
       -5.62852039e-09, -4.20047729e-08, -1.37535952e-10, -1.00303703e-12,
       -4.16554876e-03, -1.41804494e-07, -1.79523718e-09, -3.69446202e-09,
       -3.68356919e-08, -9.54383122e-11, -1.69264534e-10, -1.24262057e-05,
       -4.00699531e-08]), 'test_spearman_r': array([0.92058824, 0.9256809 , 0.98235294, 0.94628429, 0.975     ,
       0.94285714, 0.97142857, 0.97857143, 0.78571429, 0.90259196,
       0.97050977, 0.94285714, 0.925     , 0.975     , 0.96071429,
       0.79892793, 0.9       ]), 'test_spearman_p': array([-4.32041043e-07, -2.75438509e-07, -1.36412383e-11, -3.00012032e-08,
       -7.14370597e-10, -1.42476769e-07, -1.68707649e-09, -2.64545601e-10,
       -5.16454748e-04, -4.13392746e-06, -2.06786837e-09, -1.42476769e-07,
       -7.98746211e-07, -7.14370597e-10, -1.30274898e-08, -3.53390867e-04,
       -4.87197095e-06]), 'test_kendall_r': array([0.83333333, 0.82845913, 0.91666667, 0.82845913, 0.9047619 ,
       0.82857143, 0.9047619 , 0.9047619 , 0.73333333, 0.78469798,
       0.88039285, 0.82857143, 0.79047619, 0.9047619 , 0.88571429,
       0.6890031 , 0.75238095]), 'test_kendall_p': array([-2.44193725e-07, -8.12917002e-06, -1.38948965e-09, -8.12917002e-06,
       -1.65377563e-08, -9.95137652e-07, -1.65377563e-08, -1.65377563e-08,
       -3.70285640e-05, -4.84614653e-05, -5.15437155e-06, -9.95137652e-07,
       -4.90647531e-06, -1.65377563e-08, -5.33772028e-08, -3.60476360e-04,
       -1.96940497e-05]), 'test_rmse': array([-0.16362045, -0.12327696, -0.07803721, -0.12664266, -0.14452598,
       -0.17935658, -0.12826512, -0.10025984, -0.50463153, -0.18107342,
       -0.16918739, -0.14070353, -0.17134057, -0.16044083, -0.11186113,
       -0.25133442, -0.15050576]), 'test_mae': array([-0.09950004, -0.09820217, -0.05529289, -0.08990823, -0.09678848,
       -0.13479855, -0.08045183, -0.076317  , -0.20274879, -0.08119186,
       -0.10840563, -0.09283343, -0.13490556, -0.11964134, -0.08338941,
       -0.12618135, -0.10719846]), 'test_r2': array([0.92172948, 0.95754781, 0.9871497 , 0.96999803, 0.93100669,
       0.89612211, 0.95701261, 0.97973472, 0.42959161, 0.87457222,
       0.93814772, 0.93540209, 0.8998535 , 0.95184691, 0.95725649,
       0.72442294, 0.89973314]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 211, 'regressor__learning_rate': 0.09696628411840752, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([63.60492253, 62.64543295, 57.7549293 , 60.16907334, 59.47471094,
       57.62503266, 58.95325541, 64.51745772, 59.22365546, 62.14850354,
       59.2087183 , 60.40146327, 59.76010299, 61.13257647, 65.16784811,
       57.00762224, 59.89116144]), 'score_time': array([0.46432829, 0.48702526, 0.5328505 , 0.48797536, 0.53263807,
       0.54222155, 0.55073833, 0.47898221, 0.55311084, 0.51810551,
       0.52914023, 0.4709239 , 0.50071311, 0.4605732 , 0.43738031,
       0.56200051, 0.49389124]), 'test_pearson_r': array([0.98402377, 0.98039891, 0.98204963, 0.99343587, 0.98977722,
       0.96245116, 0.94150701, 0.66580199, 0.98230436, 0.91634567,
       0.97852412, 0.92259599, 0.98870513, 0.95622887, 0.95422098,
       0.98732097, 0.98125905]), 'test_pearson_p': array([-6.82943400e-12, -2.83051231e-11, -1.53572310e-11, -1.38383065e-14,
       -2.21266364e-12, -9.75075877e-09, -1.65285914e-07, -6.73824743e-03,
       -7.69254554e-11, -1.59014571e-06, -2.68334141e-10, -9.74781543e-07,
       -4.22017863e-12, -2.60216872e-08, -3.46602335e-08, -8.91704805e-12,
       -1.11427962e-10]), 'test_spearman_r': array([0.92862424, 0.93745426, 0.96541601, 0.96983102, 0.95357143,
       0.95263666, 0.95357143, 0.66071429, 0.94906204, 0.91331582,
       0.89642857, 0.91234493, 0.98123364, 0.94642857, 0.91234493,
       0.9839014 , 0.97857143]), 'test_spearman_p': array([-2.09234458e-07, -8.50171042e-08, -1.44797070e-09, -5.63193822e-10,
       -3.79244004e-08, -4.30728048e-08, -3.79244004e-08, -7.33056983e-03,
       -6.85211474e-08, -1.98895645e-06, -6.06614302e-06, -2.13317417e-06,
       -1.12406985e-10, -9.44793851e-08, -2.13317417e-06, -4.17567304e-11,
       -2.64545601e-10]), 'test_kendall_r': array([0.81172259, 0.81172259, 0.87866878, 0.89540533, 0.86666667,
       0.8421149 , 0.86666667, 0.67619048, 0.82297593, 0.765559  ,
       0.75238095, 0.77888216, 0.9186708 , 0.86666667, 0.77888216,
       0.93273543, 0.92380952]), 'test_kendall_p': array([-1.23329686e-05, -1.23329686e-05, -2.22140114e-06, -1.41912826e-06,
       -1.54339647e-07, -1.29935955e-05, -1.54339647e-07, -1.99899920e-04,
       -2.03407556e-05, -7.37568107e-05, -1.96940497e-05, -5.86162297e-05,
       -1.96884727e-06, -1.54339647e-07, -5.86162297e-05, -1.49386838e-06,
       -4.47206135e-09]), 'test_rmse': array([-0.09470815, -0.1411536 , -0.11238182, -0.08845657, -0.0870204 ,
       -0.20616099, -0.22356137, -0.60459263, -0.10436281, -0.22909715,
       -0.14133669, -0.26615412, -0.09692533, -0.17822027, -0.16278037,
       -0.10623738, -0.12341064]), 'test_mae': array([-0.06126083, -0.10036998, -0.08313822, -0.06964901, -0.05542095,
       -0.14449395, -0.14506035, -0.2090365 , -0.07449114, -0.17505865,
       -0.11533143, -0.14604941, -0.07331952, -0.10501111, -0.10400991,
       -0.07225292, -0.08976185]), 'test_r2': array([0.96791682, 0.94993723, 0.96405262, 0.98363125, 0.97901777,
       0.92280212, 0.86121887, 0.36231065, 0.96279221, 0.77625   ,
       0.95116267, 0.83901799, 0.97333009, 0.91208087, 0.90417751,
       0.9722419 , 0.94135683]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([60.84311628, 62.04929352, 61.44449043, 56.89435005, 57.73163986,
       58.51302099, 57.55676007, 61.66682553, 58.69036245, 57.54248571,
       57.70834017, 61.39360476, 54.92115593, 58.28070188, 61.59035373,
       60.89793086, 61.87350392]), 'score_time': array([0.5072751 , 0.48577213, 0.5081048 , 0.55997968, 0.54198551,
       0.51878357, 0.53325081, 0.54173255, 0.51672506, 0.53516054,
       0.53870344, 0.50918412, 0.56151128, 0.51067162, 0.49675393,
       0.50085235, 0.50373173]), 'test_pearson_r': array([0.95148736, 0.98289127, 0.96113364, 0.98435505, 0.96237959,
       0.94241982, 0.98623932, 0.94599296, 0.97549616, 0.90293423,
       0.99579632, 0.96246374, 0.97807393, 0.98782659, 0.98340929,
       0.46915054, 0.98506799]), 'test_pearson_p': array([-1.49097333e-08, -1.09974097e-11, -3.24112762e-09, -5.90289437e-12,
       -9.87049934e-09, -1.49555674e-07, -1.51425033e-11, -9.94804089e-08,
       -6.27846857e-10, -4.04384687e-06, -6.95922237e-15, -9.72984495e-09,
       -3.06739705e-10, -6.85281399e-12, -5.07239003e-11, -7.76961942e-02,
       -2.56795130e-11]), 'test_spearman_r': array([0.96394434, 0.94705882, 0.96176471, 0.95588235, 0.95357143,
       0.93833818, 0.98214286, 0.94642857, 0.96071429, 0.90714286,
       0.9839014 , 0.94285714, 0.96693515, 0.975     , 0.9417135 ,
       0.61071429, 0.96780119]), 'test_spearman_p': array([-1.93084048e-09, -2.71573117e-08, -2.89508013e-09, -7.76027446e-09,
       -3.79244004e-08, -2.31103976e-07, -8.15733351e-11, -9.44793851e-08,
       -1.30274898e-08, -3.06331054e-06, -4.17567304e-11, -1.42476769e-07,
       -4.31271816e-09, -7.14370597e-10, -1.61611228e-07, -1.55928314e-02,
       -3.63693345e-09]), 'test_kendall_r': array([0.87866878, 0.83333333, 0.86666667, 0.86666667, 0.88571429,
       0.80383695, 0.92380952, 0.84761905, 0.86666667, 0.77142857,
       0.93273543, 0.84761905, 0.88039285, 0.88571429, 0.88366175,
       0.65714286, 0.89427211]), 'test_kendall_p': array([-2.22140114e-06, -2.44193725e-07, -3.98309214e-08, -3.98309214e-08,
       -5.33772028e-08, -3.15442760e-05, -4.47206135e-09, -4.07346059e-07,
       -1.54339647e-07, -1.00560004e-05, -1.49386838e-06, -4.07346059e-07,
       -5.15437155e-06, -5.33772028e-08, -5.91827496e-06, -3.30370902e-04,
       -3.95717604e-06]), 'test_rmse': array([-0.20230986, -0.12352731, -0.19547307, -0.12747146, -0.20172702,
       -0.16711524, -0.12395248, -0.15560482, -0.10921414, -0.2078893 ,
       -0.07037706, -0.16107446, -0.15378533, -0.11403026, -0.12611012,
       -0.54341704, -0.12426044]), 'test_mae': array([-0.12521326, -0.09500173, -0.14288534, -0.08313002, -0.12316297,
       -0.12569906, -0.09026678, -0.0907943 , -0.07501157, -0.14167739,
       -0.05136309, -0.10748018, -0.0967867 , -0.08108517, -0.07262365,
       -0.20617457, -0.07992828]), 'test_r2': array([ 0.90441392,  0.96546368,  0.90346318,  0.96408667,  0.9109595 ,
        0.86837034,  0.9710932 ,  0.89036395,  0.94874348,  0.79813989,
        0.98931335,  0.92481605,  0.93933367,  0.966639  ,  0.96666119,
       -0.03464853,  0.96540938]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([26.43946171, 27.46722579, 28.3408289 , 29.03519678, 27.17463708,
       27.80305147, 29.59793997, 26.21760201, 28.01091242, 26.71734929,
       26.08791375, 26.88908553, 25.51269817, 27.11865211, 26.7174592 ,
       27.39262605, 27.86819863]), 'score_time': array([0.25021672, 0.27824259, 0.24250412, 0.23265791, 0.27555966,
       0.23520446, 0.22743654, 0.25803661, 0.27360177, 0.25883842,
       0.27094483, 0.25889564, 0.2717092 , 0.27014923, 0.26273584,
       0.26179004, 0.27326107]), 'test_pearson_r': array([0.9904597 , 0.975003  , 0.96333021, 0.99377034, 0.7912928 ,
       0.84663687, 0.96455182, 0.98058732, 0.99165307, 0.98625403,
       0.53244254, 0.97660724, 0.97482072, 0.97691134, 0.98077629,
       0.96456895, 0.96674222]), 'test_pearson_p': array([-1.88093723e-13, -1.53077271e-10, -2.16960432e-09, -9.60453552e-15,
       -4.41435414e-04, -6.86663496e-05, -6.74106106e-09, -1.39863227e-10,
       -5.95100202e-13, -1.50381034e-11, -4.10232261e-02, -4.65610772e-10,
       -7.48009952e-10, -4.27959329e-10, -1.31306589e-10, -6.72019394e-09,
       -4.47684259e-09]), 'test_spearman_r': array([0.9757177 , 0.95882353, 0.93823529, 0.98518437, 0.7745975 ,
       0.825     , 0.95      , 0.94642857, 0.98928571, 0.96780119,
       0.63928571, 0.96785714, 0.95357143, 0.96693515, 0.925     ,
       0.93571429, 0.96336053]), 'test_spearman_p': array([-1.25183504e-10, -4.82554077e-09, -7.80221977e-08, -4.04052904e-12,
       -6.96970254e-04, -1.53235571e-04, -6.08625796e-08, -9.44793851e-08,
       -2.99893426e-12, -3.63693345e-09, -1.02884466e-02, -3.59653554e-09,
       -3.79244004e-08, -4.31271816e-09, -7.98746211e-07, -3.01064562e-07,
       -8.33271134e-09]), 'test_kendall_r': array([0.91214188, 0.88333333, 0.85      , 0.95742711, 0.64423077,
       0.71428571, 0.86666667, 0.84761905, 0.94285714, 0.87504045,
       0.58095238, 0.88571429, 0.86666667, 0.86125388, 0.79047619,
       0.82857143, 0.88039285]), 'test_kendall_p': array([-8.99518934e-07, -1.43717927e-08, -1.02027025e-07, -4.69648705e-07,
       -8.88154414e-04, -6.71036430e-05, -1.54339647e-07, -4.07346059e-07,
       -1.01554334e-09, -6.34958704e-06, -1.93596272e-03, -5.33772028e-08,
       -1.54339647e-07, -8.22244396e-06, -4.90647531e-06, -9.95137652e-07,
       -5.15437155e-06]), 'test_rmse': array([-0.09476036, -0.11672506, -0.15585738, -0.07605301, -0.36127901,
       -0.31632424, -0.23913834, -0.13083921, -0.08027957, -0.09080191,
       -0.53192456, -0.136974  , -0.12812112, -0.14418349, -0.13781781,
       -0.14579442, -0.19286761]), 'test_mae': array([-0.06859267, -0.07746223, -0.11464563, -0.05225627, -0.19434824,
       -0.17593859, -0.15538943, -0.09311968, -0.06425094, -0.07051728,
       -0.24675122, -0.09201016, -0.07864484, -0.11384516, -0.09550429,
       -0.10407255, -0.13275636]), 'test_r2': array([0.97855937, 0.9493843 , 0.92093324, 0.98316327, 0.52847503,
       0.694885  , 0.91096195, 0.95793351, 0.9821631 , 0.97129603,
       0.19906204, 0.94835665, 0.94655565, 0.94988817, 0.9590037 ,
       0.9227917 , 0.93344768]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 898, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([4.69461536, 5.06812143, 4.52288175, 4.5984931 , 5.41648912,
       4.89220977, 4.63385105, 4.60168648, 4.80844593, 5.30339742,
       5.33418679, 4.9079597 , 5.01663613, 5.72466874, 5.13020062,
       5.07380462, 5.1408689 ]), 'score_time': array([0.0711596 , 0.07769704, 0.07487631, 0.07477522, 0.05920672,
       0.08370805, 0.07393789, 0.07517552, 0.06925464, 0.05867672,
       0.06093144, 0.07246065, 0.06910539, 0.06503129, 0.07344484,
       0.07239366, 0.08438182]), 'test_pearson_r': array([0.96566471, 0.95325658, 0.98540586, 0.96936573, 0.96208294,
       0.98039536, 0.97788047, 0.97543573, 0.67842224, 0.89832479,
       0.96045578, 0.97911048, 0.98598671, 0.92600439, 0.97964117,
       0.50946675, 0.9969055 ]), 'test_pearson_p': array([-1.37754824e-09, -1.15500745e-08, -3.63831338e-12, -6.26108201e-10,
       -1.03800532e-08, -1.49032424e-10, -3.24613742e-10, -6.37887062e-10,
       -5.43070420e-03, -5.40501370e-06, -1.35863737e-08, -2.24461880e-10,
       -1.70327534e-11, -7.33534375e-07, -1.90131941e-10, -5.23965790e-02,
       -9.52692859e-16]), 'test_spearman_r': array([0.90507751, 0.85841081, 0.91243586, 0.90213417, 0.96693515,
       0.96071429, 0.95357143, 0.96336053, 0.62857143, 0.83767119,
       0.92307692, 0.92761431, 0.975     , 0.93548988, 0.97408439,
       0.65      , 0.98928571]), 'test_spearman_p': array([-1.44408329e-06, -2.08628964e-05, -8.37527941e-07, -1.77392711e-06,
       -4.31271816e-09, -1.30274898e-08, -3.79244004e-08, -8.33271134e-09,
       -1.20795392e-02, -9.71030822e-05, -9.37187535e-07, -6.38323204e-07,
       -7.14370597e-10, -3.07792633e-07, -9.00544474e-10, -8.71158362e-03,
       -2.99893426e-12]), 'test_kendall_r': array([0.77824949, 0.73423604, 0.81172259, 0.76151294, 0.88039285,
       0.84761905, 0.84761905, 0.88039285, 0.58095238, 0.6505161 ,
       0.79807692, 0.82297593, 0.92380952, 0.81167945, 0.89953183,
       0.65714286, 0.94285714]), 'test_kendall_p': array([-2.77306574e-05, -8.43834769e-05, -1.23329686e-05, -4.10999309e-05,
       -5.15437155e-06, -4.07346059e-07, -4.07346059e-07, -5.15437155e-06,
       -1.93596272e-03, -8.54121722e-04, -3.83033362e-05, -2.03407556e-05,
       -4.47206135e-09, -2.97055048e-05, -3.20072183e-06, -3.30370902e-04,
       -1.01554334e-09]), 'test_rmse': array([-0.15846454, -0.19296213, -0.10997432, -0.12090978, -0.22171657,
       -0.11827525, -0.14395966, -0.15352889, -0.39548143, -0.17910231,
       -0.23454074, -0.1409611 , -0.09695109, -0.21466387, -0.12130965,
       -0.53750486, -0.05274959]), 'test_mae': array([-0.10697259, -0.10504597, -0.0731652 , -0.09444759, -0.15809291,
       -0.09147479, -0.09338381, -0.11511086, -0.20835098, -0.13074815,
       -0.13007404, -0.09679806, -0.07038917, -0.14682003, -0.09490104,
       -0.23246652, -0.04388917]), 'test_r2': array([0.92985469, 0.90175146, 0.96863442, 0.93732339, 0.90803491,
       0.95974603, 0.95482212, 0.9476736 , 0.18579574, 0.78901175,
       0.9032601 , 0.95640527, 0.96944437, 0.84934594, 0.95394592,
       0.01564122, 0.99269602]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 201, 'regressor__learning_rate': 0.0739685875336034, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([52.93485332, 56.78465605, 56.07937241, 55.18138385, 60.30933881,
       55.24375057, 54.61437511, 54.24434876, 52.72732353, 51.85889649,
       52.04384565, 56.40096569, 52.87293243, 57.96095705, 57.0194664 ,
       58.3011291 , 53.85378742]), 'score_time': array([0.53196359, 0.45375705, 0.49084806, 0.46884751, 0.43262625,
       0.45740581, 0.45528746, 0.48525715, 0.52973294, 0.53940892,
       0.52650785, 0.48073459, 0.53129339, 0.47607422, 0.462538  ,
       0.44083118, 0.52832365]), 'test_pearson_r': array([0.89216698, 0.85405806, 0.9735377 , 0.99159107, 0.99495602,
       0.94015635, 0.98057402, 0.99596255, 0.97619579, 0.95805225,
       0.93957107, 0.97377245, 0.98571199, 0.99236506, 0.71630217,
       0.9812989 , 0.97525983]), 'test_pearson_p': array([-3.40352929e-06, -2.54777030e-05, -2.27195922e-10, -7.79688748e-14,
       -2.27049433e-14, -1.91093938e-07, -1.40482980e-10, -5.35588803e-15,
       -5.20970440e-10, -1.98217267e-08, -2.03282879e-07, -9.72645452e-10,
       -1.93109625e-11, -3.33918580e-13, -2.66392120e-03, -1.09907577e-10,
       -6.67886817e-10]), 'test_spearman_r': array([0.8       , 0.8197206 , 0.9661277 , 0.99117647, 0.98747764,
       0.95714286, 0.93571429, 0.95714286, 0.97142857, 0.87220768,
       0.94642857, 0.92403969, 0.99285714, 0.99910674, 0.79285714,
       0.9775883 , 0.95357143]), 'test_spearman_p': array([-1.98570973e-04, -1.01543452e-04, -1.25420638e-09, -1.09082915e-13,
       -8.22784933e-12, -2.27367516e-08, -3.01064562e-07, -2.27367516e-08,
       -1.68707649e-09, -2.23800824e-05, -9.44793851e-08, -8.65565027e-07,
       -2.16812149e-13, -2.97672627e-19, -4.22077185e-04, -3.53267516e-10,
       -3.79244004e-08]), 'test_kendall_r': array([0.7       , 0.62762056, 0.90759507, 0.95      , 0.95192308,
       0.86666667, 0.79047619, 0.86666667, 0.9047619 , 0.72728105,
       0.84761905, 0.82297593, 0.96190476, 0.9952267 , 0.75238095,
       0.90308289, 0.86666667]), 'test_kendall_p': array([-4.94106357e-05, -7.24551643e-04, -1.10296350e-06, -7.63760478e-11,
       -9.05141252e-07, -1.54339647e-07, -4.90647531e-06, -1.54339647e-07,
       -1.65377563e-08, -1.66124056e-04, -4.07346059e-07, -2.03407556e-05,
       -1.82002497e-10, -2.56380829e-07, -1.96940497e-05, -3.67732318e-06,
       -1.54339647e-07]), 'test_rmse': array([-0.22652178, -0.23990773, -0.16120476, -0.11590026, -0.06716665,
       -0.18854538, -0.10981477, -0.08255831, -0.1308655 , -0.12308549,
       -0.20127152, -0.14188217, -0.12001886, -0.0971289 , -0.52978021,
       -0.12565373, -0.20040757]), 'test_mae': array([-0.10877416, -0.19219476, -0.09606581, -0.09353464, -0.04662829,
       -0.11516074, -0.07503989, -0.06279922, -0.09330667, -0.08589018,
       -0.12962339, -0.09926948, -0.0882322 , -0.05924803, -0.23667585,
       -0.10112847, -0.14986291]), 'test_r2': array([0.78654423, 0.69229514, 0.94533097, 0.96716388, 0.98760444,
       0.86650229, 0.9577761 , 0.98757612, 0.95192429, 0.90244377,
       0.86391781, 0.94809322, 0.96522199, 0.9808225 , 0.49565416,
       0.9496278 , 0.9229797 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05090003139077409, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([56.25090265, 55.99557018, 55.79176593, 53.49400544, 55.3668716 ,
       56.58631086, 54.94793558, 51.31972432, 56.23553586, 55.16477871,
       56.44830942, 57.44617105, 57.55473638, 58.95670223, 55.23300767,
       53.49935985, 54.97594738]), 'score_time': array([0.4632051 , 0.53539324, 0.55318666, 0.55302787, 0.5495913 ,
       0.45568156, 0.55189347, 0.54684472, 0.45697236, 0.52647829,
       0.50388098, 0.46536589, 0.43748116, 0.43586993, 0.51642084,
       0.52851081, 0.53609347]), 'test_pearson_r': array([0.97585659, 0.71070568, 0.96805352, 0.94021498, 0.94150195,
       0.97552448, 0.98332217, 0.97653933, 0.96001806, 0.9640735 ,
       0.95404548, 0.9959054 , 0.9604135 , 0.87743463, 0.9798578 ,
       0.98761709, 0.99400238]), 'test_pearson_p': array([-1.20300974e-10, -2.02925921e-03, -8.36840865e-10, -6.24447030e-08,
       -1.65376882e-07, -6.23187880e-10, -5.24695469e-11, -4.74390037e-10,
       -1.45786860e-08, -7.34618996e-09, -3.55179246e-08, -5.86746671e-15,
       -1.36796576e-08, -1.72847485e-05, -1.77452464e-10, -7.65278759e-12,
       -6.98178357e-14]), 'test_spearman_r': array([0.88153078, 0.75516553, 0.92862424, 0.89330414, 0.91331582,
       0.97765901, 0.975     , 0.96785714, 0.95263666, 0.88571429,
       0.93118893, 0.99553212, 0.9419128 , 0.925     , 0.93928571,
       0.99285714, 0.96071429]), 'test_spearman_p': array([-6.38565422e-06, -7.19028626e-04, -2.09234458e-07, -3.16996646e-06,
       -1.98895645e-06, -3.46144222e-10, -7.14370597e-10, -3.59653554e-09,
       -4.30728048e-08, -1.11998219e-05, -4.63322550e-07, -1.03359251e-14,
       -1.58129910e-07, -7.98746211e-07, -2.09458019e-07, -2.16812149e-13,
       -1.30274898e-08]), 'test_kendall_r': array([0.76151294, 0.73423604, 0.79498604, 0.77824949, 0.8421149 ,
       0.89953183, 0.92380952, 0.88571429, 0.86125388, 0.77142857,
       0.82297593, 0.97608773, 0.88039285, 0.80952381, 0.80952381,
       0.96190476, 0.86666667]), 'test_kendall_p': array([-4.10999309e-05, -8.43834769e-05, -1.85653874e-05, -2.77306574e-05,
       -1.29935955e-05, -3.20072183e-06, -4.47206135e-09, -5.33772028e-08,
       -8.22244396e-06, -1.00560004e-05, -2.03407556e-05, -4.32916538e-07,
       -5.15437155e-06, -2.27466721e-06, -2.27466721e-06, -1.82002497e-10,
       -1.54339647e-07]), 'test_rmse': array([-0.15678535, -0.54852921, -0.17135308, -0.21988977, -0.18153106,
       -0.11044835, -0.11644223, -0.1239993 , -0.16040234, -0.15667357,
       -0.16392545, -0.08149789, -0.16997467, -0.36344317, -0.12151776,
       -0.10099501, -0.08898256]), 'test_mae': array([-0.10243289, -0.19094617, -0.1161713 , -0.14822345, -0.10600851,
       -0.08143969, -0.06085407, -0.08516275, -0.11871242, -0.12265754,
       -0.10795835, -0.06151232, -0.11265847, -0.22993023, -0.08657957,
       -0.07756541, -0.07452033]), 'test_r2': array([0.93836102, 0.43019837, 0.93048066, 0.87951605, 0.88626524,
       0.94446558, 0.96359347, 0.95306147, 0.92091538, 0.92248167,
       0.90487777, 0.98531809, 0.9192098 , 0.73512274, 0.94217977,
       0.97308489, 0.98388567]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.042697514164351524, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 32, 6: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.5499339671488818, 'test_rmse': 0.7421789485685673, 'test_r2': -1.037127677202628, 'test_pearson_r': array([0.23956973]), 'test_pearson_p_value': array([0.02915711]), 'test_spearman_r': 0.3599615944469275, 'test_spearman_p_value': 0.0008303865492886979, 'test_kendall_r': 0.24231040719038846, 'test_kendall_p_value': 0.0012702481370176044, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 269, 'regressor__learning_rate': 0.03405058415964281, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.58187766260102, 'test_rmse': 0.7594963428848374, 'test_r2': -1.1333020951864143, 'test_pearson_r': array([0.19044199]), 'test_pearson_p_value': array([0.08461447]), 'test_spearman_r': 0.2515211336497442, 'test_spearman_p_value': 0.021806441838622726, 'test_kendall_r': 0.1530057837232451, 'test_kendall_p_value': 0.041917965064458315, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 481, 'regressor__learning_rate': 0.03371838315138179, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.5470266646053865, 'test_rmse': 0.7642441538137332, 'test_r2': -1.160057123304274, 'test_pearson_r': array([0.25581947]), 'test_pearson_p_value': array([0.01958175]), 'test_spearman_r': 0.38816299576195623, 'test_spearman_p_value': 0.00028787783313481344, 'test_kendall_r': 0.2718965374944652, 'test_kendall_p_value': 0.0002990747635100032, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1455, 'regressor__learning_rate': 0.07292263303448028, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.5899082798406756, 'test_rmse': 0.8097575859410424, 'test_r2': -1.4249960547965141, 'test_pearson_r': array([0.18272221]), 'test_pearson_p_value': array([0.09825273]), 'test_spearman_r': 0.30765921207261343, 'test_spearman_p_value': 0.004663936407584953, 'test_kendall_r': 0.2040533324545792, 'test_kendall_p_value': 0.006628312172662977, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1018, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.5215029460731472, 'test_rmse': 0.7333975807897622, 'test_r2': -0.989206785455738, 'test_pearson_r': array([0.30039069]), 'test_pearson_p_value': array([0.00579399]), 'test_spearman_r': 0.3958487712440459, 'test_spearman_p_value': 0.00021207742837741893, 'test_kendall_r': 0.2735091441428492, 'test_kendall_p_value': 0.0002731850536684434, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.032323366856978286, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.5686941704048547, 'test_rmse': 0.771043169642169, 'test_r2': -1.1986615139951518, 'test_pearson_r': array([0.23852481]), 'test_pearson_p_value': array([0.02988914]), 'test_spearman_r': 0.3492196954980901, 'test_spearman_p_value': 0.0012129755788289702, 'test_kendall_r': 0.22199395357604984, 'test_kendall_p_value': 0.003128497048253134, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03114332161834689, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.5682905783303841, 'test_rmse': 0.7836917244932514, 'test_r2': -1.2713889438654902, 'test_pearson_r': array([0.23003749]), 'test_pearson_p_value': array([0.03642927]), 'test_spearman_r': 0.3603605718296419, 'test_spearman_p_value': 0.000818572397145207, 'test_kendall_r': 0.23343456809916546, 'test_kendall_p_value': 0.0019055362380661742, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06497795189484522, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 33, 6: {'fit_time': array([19.5034585 , 18.70139098, 18.82064891]), 'score_time': array([0.36034179, 0.3946104 , 0.37286925]), 'test_pearson_r': array([0.92943886, 0.90230687, 0.86446203]), 'test_pearson_p': array([-1.45145833e-38, -1.93233265e-32, -8.12605676e-27]), 'test_spearman_r': array([0.92098212, 0.9166592 , 0.84904584]), 'test_spearman_p': array([-1.49238918e-36, -3.29801260e-35, -5.38194057e-25]), 'test_kendall_r': array([0.80787886, 0.80592639, 0.7450293 ]), 'test_kendall_p': array([-2.07253297e-28, -5.93389941e-28, -3.98894385e-24]), 'test_rmse': array([-0.24209856, -0.28471176, -0.30371865]), 'test_mae': array([-0.13004069, -0.13096527, -0.150595  ]), 'test_r2': array([0.85920009, 0.81163723, 0.72447714]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 860, 'regressor__learning_rate': 0.09905047049227562, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([8.03696871, 8.75351834, 8.57940936]), 'score_time': array([0.20443988, 0.18581319, 0.18505001]), 'test_pearson_r': array([0.88057797, 0.894436  , 0.89731767]), 'test_pearson_p': array([-2.64986016e-29, -4.24158106e-31, -1.40945318e-31]), 'test_spearman_r': array([0.82902244, 0.91169339, 0.89129945]), 'test_spearman_p': array([-3.62547753e-23, -3.38002930e-34, -1.35785333e-30]), 'test_kendall_r': array([0.69356591, 0.80888511, 0.75096509]), 'test_kendall_p': array([-2.40573407e-21, -3.62805676e-28, -1.90054452e-24]), 'test_rmse': array([-0.32110678, -0.29528861, -0.27286214]), 'test_mae': array([-0.17074575, -0.13590943, -0.15757319]), 'test_r2': array([0.73359572, 0.78929125, 0.7945987 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 435, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([29.12184644, 31.10744262, 28.80751371]), 'score_time': array([0.55679512, 0.52088308, 0.57852316]), 'test_pearson_r': array([0.95630951, 0.88620673, 0.92198652]), 'test_pearson_p': array([-3.60935046e-47, -8.34159905e-30, -2.29898556e-36]), 'test_spearman_r': array([0.95691124, 0.85926185, 0.93489817]), 'test_spearman_p': array([-2.02704734e-47, -3.53354750e-26, -1.50512917e-39]), 'test_kendall_r': array([0.83476213, 0.74307069, 0.84108496]), 'test_kendall_p': array([-3.01535059e-30, -5.60292951e-24, -3.53631248e-30]), 'test_rmse': array([-0.19135996, -0.27160127, -0.2536286 ]), 'test_mae': array([-0.12900136, -0.15544588, -0.11454628]), 'test_r2': array([0.91328391, 0.77919322, 0.84809914]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1305, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([45.50810766, 45.00958347, 45.90335441]), 'score_time': array([0.8663063 , 0.89463282, 0.78182244]), 'test_pearson_r': array([0.92779006, 0.84104083, 0.92964239]), 'test_pearson_p': array([-3.74205737e-38, -3.96536659e-24, -3.51960449e-38]), 'test_spearman_r': array([0.92863573, 0.85584617, 0.93097527]), 'test_spearman_p': array([-2.30878209e-38, -8.98978761e-26, -1.62037687e-38]), 'test_kendall_r': array([0.82298743, 0.74427618, 0.81007824]), 'test_kendall_p': array([-3.16545810e-29, -4.31342965e-24, -2.63487681e-28]), 'test_rmse': array([-0.22229244, -0.36731987, -0.24871959]), 'test_mae': array([-0.1120424 , -0.18042594, -0.13420602]), 'test_r2': array([0.85539567, 0.66941816, 0.85616463]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([21.90250659, 20.17934775, 21.36200452]), 'score_time': array([0.35929036, 0.41317797, 0.36544538]), 'test_pearson_r': array([0.94817709, 0.87299996, 0.87997707]), 'test_pearson_p': array([-4.31410838e-44, -6.34277467e-28, -6.85617579e-29]), 'test_spearman_r': array([0.92629883, 0.84258001, 0.89862233]), 'test_spearman_p': array([-8.64561750e-38, -2.72444772e-24, -8.46706151e-32]), 'test_kendall_r': array([0.79237817, 0.73714527, 0.80889926]), 'test_kendall_p': array([-2.80913186e-27, -1.15701328e-23, -4.23030914e-28]), 'test_rmse': array([-0.20480435, -0.32157064, -0.30123068]), 'test_mae': array([-0.13041834, -0.1579771 , -0.1297256 ]), 'test_r2': array([0.89347895, 0.73813474, 0.77024578]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 932, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([22.45091796, 20.80485749, 21.56884551]), 'score_time': array([0.40182972, 0.44603729, 0.3998313 ]), 'test_pearson_r': array([0.92127837, 0.92087452, 0.88622568]), 'test_pearson_p': array([-1.28015866e-36, -4.07052705e-36, -8.28679700e-30]), 'test_spearman_r': array([0.91893259, 0.91758346, 0.89723232]), 'test_spearman_p': array([-4.24384574e-36, -2.10476594e-35, -1.45688641e-31]), 'test_kendall_r': array([0.76925221, 0.77361913, 0.79164719]), 'test_kendall_p': array([-6.25088351e-26, -6.75482251e-26, -6.62581489e-27]), 'test_rmse': array([-0.24295645, -0.24270435, -0.32077244]), 'test_mae': array([-0.15226116, -0.15785943, -0.16020586]), 'test_r2': array([0.8332697 , 0.83877369, 0.7791391 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1002, 'regressor__learning_rate': 0.07368100436624682, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([20.73782134, 19.04725647, 21.65410352]), 'score_time': array([0.40385294, 0.42124009, 0.41454005]), 'test_pearson_r': array([0.87957591, 0.86161048, 0.96106643]), 'test_pearson_p': array([-3.69907866e-29, -1.83284390e-26, -1.08051826e-48]), 'test_spearman_r': array([0.87953365, 0.85251254, 0.9560705 ]), 'test_spearman_p': array([-3.75125045e-29, -2.18580158e-25, -1.55401982e-46]), 'test_kendall_r': array([0.77735498, 0.74032528, 0.83283169]), 'test_kendall_p': array([-3.01968766e-26, -8.17487733e-24, -8.69786594e-30]), 'test_rmse': array([-0.30629015, -0.30546955, -0.18068166]), 'test_mae': array([-0.13495083, -0.16014421, -0.11619637]), 'test_r2': array([0.76285585, 0.72597995, 0.91981093]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1081, 'regressor__learning_rate': 0.06242755674414676, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 25, 6: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.1831980644561324, 'test_rmse': 0.2671721496977918, 'test_r2': 0.7523264248232668, 'test_pearson_r': array([0.87910262]), 'test_pearson_p_value': array([1.27458658e-21]), 'test_spearman_r': 0.8389100963047695, 'test_spearman_p_value': 4.988370763839289e-18, 'test_kendall_r': 0.6716858896079229, 'test_kendall_p_value': 7.143630463448365e-15, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05351245186224119, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.18497863594427166, 'test_rmse': 0.2790826016777759, 'test_r2': 0.7297517879292585, 'test_pearson_r': array([0.88679848]), 'test_pearson_p_value': array([1.86747452e-22]), 'test_spearman_r': 0.8498334178548498, 'test_spearman_p_value': 6.71381691980089e-19, 'test_kendall_r': 0.6723344661540894, 'test_kendall_p_value': 6.061491714546621e-15, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 479, 'regressor__learning_rate': 0.04004468330771536, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.1613365705894294, 'test_rmse': 0.23119816102123858, 'test_r2': 0.8145332532181531, 'test_pearson_r': array([0.90312545]), 'test_pearson_p_value': array([1.91741054e-24]), 'test_spearman_r': 0.8788750234023488, 'test_spearman_p_value': 1.3463809620047402e-21, 'test_kendall_r': 0.7172899653768741, 'test_kendall_p_value': 8.47677344509581e-17, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1369, 'regressor__learning_rate': 0.09669645156827633, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.19128565497572703, 'test_rmse': 0.28462072760319745, 'test_r2': 0.7189197360885276, 'test_pearson_r': array([0.87930595]), 'test_pearson_p_value': array([1.21357823e-21]), 'test_spearman_r': 0.8513369514171154, 'test_spearman_p_value': 5.031462632277389e-19, 'test_kendall_r': 0.6833697999305464, 'test_kendall_p_value': 2.464271899121648e-15, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1878, 'regressor__learning_rate': 0.03939527293188708, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.1698115593074429, 'test_rmse': 0.23924097525109775, 'test_r2': 0.8014049443696241, 'test_pearson_r': array([0.89540632]), 'test_pearson_p_value': array([1.83548692e-23]), 'test_spearman_r': 0.8835627752785937, 'test_spearman_p_value': 4.256958229233967e-22, 'test_kendall_r': 0.7262341876032103, 'test_kendall_p_value': 3.337542869716044e-17, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.1502071212317273, 'test_rmse': 0.21180139138627715, 'test_r2': 0.8443479226783552, 'test_pearson_r': array([0.92399136]), 'test_pearson_p_value': array([1.42632408e-27]), 'test_spearman_r': 0.8843718572599196, 'test_spearman_p_value': 3.4723390355302697e-22, 'test_kendall_r': 0.726281065221431, 'test_kendall_p_value': 3.4943805408108166e-17, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05479516519865446, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.1584143361702748, 'test_rmse': 0.2378699727180307, 'test_r2': 0.8036745737401876, 'test_pearson_r': array([0.89852384]), 'test_pearson_p_value': array([7.53427719e-24]), 'test_spearman_r': 0.8776382357843953, 'test_spearman_p_value': 1.8099346499154583e-21, 'test_kendall_r': 0.7322751317844689, 'test_kendall_p_value': 1.9239949312142052e-17, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 181, 'regressor__learning_rate': 0.09678163116827738, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 25, 6: {'fit_time': array([7.71294355, 8.47598004, 7.64452481, 7.92889261]), 'score_time': array([0.15193605, 0.15314436, 0.14463806, 0.14020801]), 'test_pearson_r': array([0.94808132, 0.88912575, 0.94510493, 0.96512502]), 'test_pearson_p': array([-4.76727450e-33, -4.61545177e-23, -2.63801213e-32, -8.54951441e-38]), 'test_spearman_r': array([0.90905516, 0.92055861, 0.94256644, 0.94387837]), 'test_spearman_p': array([-1.22420394e-25, -2.06416509e-27, -1.05429094e-31, -1.58499915e-31]), 'test_kendall_r': array([0.80531044, 0.83128821, 0.80492854, 0.82148276]), 'test_kendall_p': array([-3.31996748e-21, -1.39810122e-22, -3.70106553e-21, -1.03749401e-21]), 'test_rmse': array([-0.21392061, -0.30039391, -0.20575051, -0.15048112]), 'test_mae': array([-0.11054167, -0.12638355, -0.12992422, -0.10296114]), 'test_r2': array([0.89440456, 0.78750481, 0.89160999, 0.93036537]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 462, 'regressor__learning_rate': 0.09863766636390639, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([19.53392935, 18.99585915, 20.98409152, 18.59054041]), 'score_time': array([0.33179522, 0.3198843 , 0.30603814, 0.30449748]), 'test_pearson_r': array([0.87481324, 0.91035176, 0.92709629, 0.92219178]), 'test_pearson_p': array([-1.68994010e-21, -7.94516901e-26, -1.52548126e-28, -2.86730601e-27]), 'test_spearman_r': array([0.83832787, 0.92675891, 0.91599087, 0.90634123]), 'test_spearman_p': array([-2.99006944e-18, -1.75520419e-28, -1.11959368e-26, -7.07065483e-25]), 'test_kendall_r': array([0.71107895, 0.83558497, 0.77451238, 0.77802753]), 'test_kendall_p': array([-7.31953225e-17, -9.87107310e-23, -1.04034887e-19, -1.20565988e-19]), 'test_rmse': array([-0.33810926, -0.28314304, -0.22980262, -0.22670141]), 'test_mae': array([-0.16762882, -0.12627127, -0.13823929, -0.13254768]), 'test_r2': array([0.7037613 , 0.82451008, 0.85765716, 0.84602016]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1036, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([36.99253345, 36.71047473, 38.78846526, 38.89781213]), 'score_time': array([0.59031677, 0.61846924, 0.56329036, 0.56133723]), 'test_pearson_r': array([0.97387605, 0.96421651, 0.91876534, 0.90345132]), 'test_pearson_p': array([-2.82475594e-42, -4.92423455e-38, -4.05656550e-27, -1.73581870e-24]), 'test_spearman_r': array([0.96511705, 0.96052977, 0.91348393, 0.91870731]), 'test_spearman_p': array([-2.23629182e-38, -1.02266887e-36, -2.71994859e-26, -1.05788208e-26]), 'test_kendall_r': array([0.85108523, 0.84517278, 0.79740009, 0.83234787]), 'test_kendall_p': array([-1.52343044e-23, -2.87490701e-23, -7.17502722e-21, -4.04230735e-22]), 'test_rmse': array([-0.15488936, -0.16727511, -0.2281297 , -0.29173545]), 'test_mae': array([-0.10908931, -0.11483663, -0.12747576, -0.12119187]), 'test_r2': array([0.94472804, 0.92111275, 0.83954441, 0.81362207]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1968, 'regressor__learning_rate': 0.0911027961179286, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([24.50659204, 21.5733397 , 24.03527308, 23.6132071 ]), 'score_time': array([0.42904091, 0.37730694, 0.36446953, 0.35603118]), 'test_pearson_r': array([0.98070096, 0.90617185, 0.85334816, 0.93279119]), 'test_pearson_p': array([-2.25378710e-46, -3.12962082e-25, -1.76060882e-19, -3.59043163e-29]), 'test_spearman_r': array([0.97411808, 0.90082392, 0.88789317, 0.92520091]), 'test_spearman_p': array([-2.11454356e-42, -1.65141377e-24, -6.41368901e-23, -8.83418691e-28]), 'test_kendall_r': array([0.88788529, 0.78960039, 0.78273726, 0.80407273]), 'test_kendall_p': array([-2.85723767e-25, -1.60853108e-20, -3.89809709e-20, -6.54950365e-21]), 'test_rmse': array([-0.11850054, -0.28619614, -0.31983247, -0.23854406]), 'test_mae': array([-0.07791668, -0.14359115, -0.14510712, -0.13495453]), 'test_r2': array([0.9602565 , 0.81237761, 0.71010831, 0.86574552]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1085, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([44.69566369, 46.2402885 , 42.565341  , 43.45905185]), 'score_time': array([0.686625  , 0.67659497, 0.71326613, 0.63069916]), 'test_pearson_r': array([0.96943295, 0.96257003, 0.88685819, 0.86393317]), 'test_pearson_p': array([-3.72249308e-40, -1.98149538e-37, -8.42969155e-23, -3.93456526e-20]), 'test_spearman_r': array([0.92424395, 0.96884664, 0.83804613, 0.89185539]), 'test_spearman_p': array([-4.89176592e-28, -6.71329516e-40, -3.14444153e-18, -4.89381220e-23]), 'test_kendall_r': array([0.78851385, 0.86498197, 0.74656082, 0.81352722]), 'test_kendall_p': array([-2.27034731e-20, -2.58186538e-24, -2.12002880e-18, -2.53356831e-21]), 'test_rmse': array([-0.15213458, -0.17662533, -0.30982137, -0.32174409]), 'test_mae': array([-0.10353975, -0.12240659, -0.1425122 , -0.12928428]), 'test_r2': array([0.9391934 , 0.92304346, 0.76062423, 0.73243958]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05926351446232179, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([22.19797254, 19.85704231, 18.17643809, 19.89021397]), 'score_time': array([0.31581783, 0.35060668, 0.34493089, 0.30866146]), 'test_pearson_r': array([0.90532541, 0.97929254, 0.97454553, 0.87410223]), 'test_pearson_p': array([-4.09888025e-25, -2.02959917e-45, -1.25943126e-42, -4.14485826e-21]), 'test_spearman_r': array([0.91202074, 0.96972943, 0.97195813, 0.89673185]), 'test_spearman_p': array([-4.51020465e-26, -2.75062157e-40, -2.55686081e-41, -1.26134888e-23]), 'test_kendall_r': array([0.76239999, 0.84984455, 0.87421727, 0.78305213]), 'test_kendall_p': array([-4.13475345e-19, -1.81118210e-23, -9.43905834e-25, -8.98602652e-20]), 'test_rmse': array([-0.25919707, -0.13244848, -0.1381474 , -0.3398024 ]), 'test_mae': array([-0.17263868, -0.0932786 , -0.09308638, -0.17566015]), 'test_r2': array([0.79952588, 0.95781259, 0.94510071, 0.7537085 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 937, 'regressor__learning_rate': 0.05392727336178622, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([25.90733361, 25.07501698, 26.69009089, 29.1464994 ]), 'score_time': array([0.4344871 , 0.39282227, 0.41559815, 0.40236759]), 'test_pearson_r': array([0.88013865, 0.95305602, 0.96198536, 0.95147397]), 'test_pearson_p': array([-4.67140359e-22, -2.15296074e-34, -3.20043347e-37, -1.95592167e-33]), 'test_spearman_r': array([0.88448394, 0.94407835, 0.94841308, 0.94810592]), 'test_spearman_p': array([-1.56247255e-22, -4.65564864e-32, -3.91521775e-33, -1.48942288e-32]), 'test_kendall_r': array([0.78279016, 0.83896097, 0.82597847, 0.82703869]), 'test_kendall_p': array([-4.84699715e-20, -6.63752883e-23, -3.32544320e-22, -5.31478690e-22]), 'test_rmse': array([-0.31759247, -0.1732967 , -0.17129226, -0.1989579 ]), 'test_mae': array([-0.14810069, -0.10485373, -0.11567702, -0.1218223 ]), 'test_r2': array([0.76836564, 0.90643972, 0.9211408 , 0.90317845]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1199, 'regressor__learning_rate': 0.047559703099080246, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 polymer_solvent HSP cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 polymer_solvent HSP cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 polymer_solvent HSP cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c027n01>
Subject: Job 347501: <NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311> was submitted from host <c025n03> by user <sdehgha2> in cluster <Hazel> at Sun Mar 16 14:44:13 2025
Job was executed on host(s) <8*c027n01>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Mar 16 14:44:14 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Mar 16 14:44:14 2025
Terminated at Wed Mar 19 11:50:35 2025
Results reported at Wed Mar 19 11:50:35 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 80:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 polymer_solvent HSP cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   1119736.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.98 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   248783 sec.
    Turnaround time :                            248782 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311.err> for stderr output of this job.

