


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07187724783631999), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0958667401476242), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1665), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.608069074414161e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09557674663573557), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 848), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.7988338306357485e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06395700354869877), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 171), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007033442244657268), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0958667401476242), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1665), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.608069074414161e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04861306944900071), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1064), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01049269024792979), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059630918703705044), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 345), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07305479917184902), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 561), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.548437320677823e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 678), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016336035961494848), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 511), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 555), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06637759974081832), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 667), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04875158496039103), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1179), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07660015413473938), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008037740594500579), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09000824315279903), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 516), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.0829016406335016e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 839), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059917988293960875), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07426828207901058), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 192), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06303604855479776), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.053141522954103106), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1389), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 739), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010756943107084135), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06111156953023171), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1239), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02434786436000604), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09125441170025321), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1233), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 556), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1162), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 163), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07770220328652991), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 152), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05044502145893475), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025142007378362693), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 411), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 618), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 55), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07072046931906596), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 371), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06712188594566737), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 502), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032313644157993225), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04535853892563412), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 704), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 9.585557686897445e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 744), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06406352967171176), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 160), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030671786548319948), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04158110478822227), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 180), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005976750378848157), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005804121854431067), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1075), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06338322115190438), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1151), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005328038626341427), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055098198319047456), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1255), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03392617681730026), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 775), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00041596759600168886), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07841587679810368), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 208), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000437571671461839), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.058879185759523556), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1993), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.018389997235186726), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 962), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007522765181566795), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1481), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028717272036460795), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 514), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017140511514120254), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 571), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 129), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0759618841177361), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 483), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.075839939085213e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05723669094602339), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 692), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02958642289400538), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 299), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02920439969461285), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.049027664649829744), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1071), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0691133552663163), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 634), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.8460604973500977e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07369791102035368), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0646911752521415), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 743), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059556559896479046), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09306183521195888), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 238), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00039075724350661135), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08845170480236648), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 108), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.647485572545448e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04024138732012597), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 532), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 785), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1058), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1278), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04596117897878823), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03563388051344818), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019443261935932436), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027241263966014697), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 747), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 282), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02808287184621455), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 102), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4661899689853833e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1226), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 472), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 148), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03332086779143354), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1156), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0545416642532848), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06885364531397069), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.058688769372090624), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 883), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06028218491765386), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04018431251035962), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 954), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03183169610404452), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08472443219568657), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 435), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.13042711953317e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03768494643947889), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 958), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022297398695873823), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011493470811983477), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03693499023328491), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6980259507827906e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05213520569080488), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 716), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08413762922968152), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1404), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03238388976248184), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1344), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 257), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 241), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00018835868030492143), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059171151083212595), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 137), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010837273889935124), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1099), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0723760701850075), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 612), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002811576960841833), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009979413884289821), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048886478580736206), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012937202272293074), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027520828929601716), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 759), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03743305683423325), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 806), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08184228879083624), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1247), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.29993616709587e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015047389547019209), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 436), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03620562167452904), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020411191471869088), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.7416438484627603e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009407394686544147), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026172798456733686), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07209462565418447), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044451611108356305), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009756270554903894), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009405205236946776), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1662), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047829039890205254), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054445443662286014), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 90), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009954008224702085), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019656587156800433), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1167), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08322470369375479), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 589), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 870), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05205450174223213), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 117), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036771689886915135), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 603), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 262), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04032718211558032), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00016456367256344735), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 794), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1045), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06684858750849047), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 403), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00953479583507783), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06449854041502759), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4103076091788285e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014044590250285796), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.5871897255499115e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07283482921548083), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024289272592547602), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05648046124821917), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04552677587992432), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1115), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03295364703022852), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.052069477487849784), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 164), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 320), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 889), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03941130478512551), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 183), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 328), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011503631875569626), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 832), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016988629172864637), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 81), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07562639429849866), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 866), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037018582635493076), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041128340459161424), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 348), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04562782923793575), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 324), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026906008161617593), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061766802795202524), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 564), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006313339428390249), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 131), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09548321371521049), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1061), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024303619777781157), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06509972783064981), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 600), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.049095613928157214), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07489281488842617), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 603), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.8468320878985383e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0757410561986332), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 478), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00014594393426425767), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0678798484178172), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1107), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09005217552253028), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029797291290988986), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 196), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009567461474525035), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05034345798135088), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 696), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05093940826331461), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 221), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1181), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 130), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022544657954007005), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 86), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.040156948264163196), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1431), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06333572781389038), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05143092876213944), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07718334368510663), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 661), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0538803412390522), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1406), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05364025344203419), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 340), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00738374083203747), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06246137514197918), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1775), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00781448355412452), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1225), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 363), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028964705454563932), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4319277738570138e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 315), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 114), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 801), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09816086231043265), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1984), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.8508908164579456e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 677), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06726465713900281), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050053617205798207), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 820), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03823064760622702), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 407), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06685433569029411), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 73), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.83103638177656e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08368993146198392), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 120), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05376144572008096), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04048130560275195), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026122155875935093), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 859), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1432), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05508286150221062), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1478), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03260860728038056), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 845), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000999999999999999), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1307), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06738145248518958), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028401359943730515), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 4



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030099251207537828), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023422570014183488), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 643), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041742966978168455), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 391), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03800793327208151), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 490), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021603594412305308), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012103733182736345), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01166926330863096), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 975), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 922), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03701148133193168), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 399), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028376215402277825), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1185), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.08008850779062e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03928335670451087), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07540306728284818), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0349415010996593), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 575), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.043182172286060944), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04435841095776725), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 227), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 116), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059701147480670964), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 700), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09204871295840594), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 133), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00017875880157808814), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 628), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1783), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 198), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005034778339448855), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030640776481448202), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 787), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041601588614126134), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1476), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 482), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05253822771624642), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 967), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025791288775237346), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 820), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028020011994866208), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 993), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09954433655009232), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 154), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.094289333884097e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012339411775777069), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005759229381917915), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1157), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028399352304435882), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 300), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 128), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1286), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 700), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1315), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06120350766765581), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 702), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 137), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02557553785453624), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051454800465703845), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1349), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.068477133810999), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1121), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06004157255188633), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026383229497358156), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026516475339763788), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1797), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0940573597055328e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03127772090389429), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02688160257468982), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 610), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.528788303793085e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 358), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0727880237480246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 56), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0374514253812812e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03693499023328491), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6980259507827906e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1209), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1153), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027738237879408125), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05497913305607285), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 438), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 34, 6: {'test_mad': 71.78549118040651, 'test_ystd': 170.29127014494833, 'test_mae': 69.54133050933707, 'test_rmse': 184.69385410568614, 'test_r2': -0.17630547550513698, 'test_pearson_r': array([-0.21299899]), 'test_pearson_p_value': array([0.0450612]), 'test_spearman_r': -0.5254257645073789, 'test_spearman_p_value': 1.2450270705387668e-07, 'test_kendall_r': -0.3353742696504262, 'test_kendall_p_value': 4.655255854805209e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07187724783631999, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 71.78549118040651, 'test_ystd': 170.29127014494833, 'test_mae': 61.15146118178886, 'test_rmse': 181.1742889570546, 'test_r2': -0.13190078624542312, 'test_pearson_r': array([-0.19927941]), 'test_pearson_p_value': array([0.06117243]), 'test_spearman_r': 0.18881757720131143, 'test_spearman_p_value': 0.07637842511890103, 'test_kendall_r': 0.1375170846195236, 'test_kendall_p_value': 0.06286396696604435, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 561, 'regressor__learning_rate': 0.07305479917184902, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 71.78549118040651, 'test_ystd': 170.29127014494833, 'test_mae': 66.8996871455962, 'test_rmse': 182.98345325084077, 'test_r2': -0.15461945011391554, 'test_pearson_r': array([-0.1672348]), 'test_pearson_p_value': array([0.11724558]), 'test_spearman_r': -0.555207312285637, 'test_spearman_p_value': 1.635981349631221e-08, 'test_kendall_r': -0.3687760738598772, 'test_kendall_p_value': 5.03566387406345e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1179, 'regressor__learning_rate': 0.04875158496039103, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 71.78549118040651, 'test_ystd': 170.29127014494833, 'test_mae': 58.465511792274654, 'test_rmse': 180.23294420096732, 'test_r2': -0.12016909084895522, 'test_pearson_r': array([-0.1779589]), 'test_pearson_p_value': array([0.09522165]), 'test_spearman_r': 0.19896819493361004, 'test_spearman_p_value': 0.061586210398731, 'test_kendall_r': 0.14555301107946259, 'test_kendall_p_value': 0.04848039178628515, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.059917988293960875, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 71.78549118040651, 'test_ystd': 170.29127014494833, 'test_mae': 64.86690351726695, 'test_rmse': 181.59399381163595, 'test_r2': -0.13715113959261238, 'test_pearson_r': array([-0.15001879]), 'test_pearson_p_value': array([0.16055057]), 'test_spearman_r': -0.4498534964470304, 'test_spearman_p_value': 9.744773237915266e-06, 'test_kendall_r': -0.2818514038542309, 'test_kendall_p_value': 0.00011921650286039935, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 71.78549118040651, 'test_ystd': 170.29127014494833, 'test_mae': 65.9455836520266, 'test_rmse': 182.093674359944, 'test_r2': -0.1434178012776104, 'test_pearson_r': array([-0.1456792]), 'test_pearson_p_value': array([0.17313931]), 'test_spearman_r': -0.4460058238779013, 'test_spearman_p_value': 1.1847314423966036e-05, 'test_kendall_r': -0.2724823821194642, 'test_kendall_p_value': 0.00019935749049499184, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 71.78549118040651, 'test_ystd': 170.29127014494833, 'test_mae': 69.95057002906232, 'test_rmse': 183.73828675522861, 'test_r2': -0.16416504624797135, 'test_pearson_r': array([-0.21291533]), 'test_pearson_p_value': array([0.04514756]), 'test_spearman_r': -0.5730553128437266, 'test_spearman_p_value': 4.393300231148276e-09, 'test_kendall_r': -0.3775527385610463, 'test_kendall_p_value': 3.0363532550826415e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 704, 'regressor__learning_rate': 0.04535853892563412, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 33, 6: {'fit_time': array([30.76259899, 31.44350004, 32.9287107 ]), 'score_time': array([0.75313807, 0.78401065, 0.75532794]), 'test_pearson_r': array([0.95365806, 0.97131874, 0.93973721]), 'test_pearson_p': array([-4.17863098e-46, -3.54616136e-54, -6.48789345e-41]), 'test_spearman_r': array([0.75561308, 0.88148398, 0.79184398]), 'test_spearman_p': array([-2.72593820e-17, -4.16403883e-29, -1.11649935e-19]), 'test_kendall_r': array([0.61530309, 0.76558016, 0.64408277]), 'test_kendall_p': array([-3.80519992e-17, -2.34658072e-25, -1.96921950e-18]), 'test_rmse': array([-61.28361988, -25.1752935 , -26.97156079]), 'test_mae': array([-26.62708998, -13.24011382, -16.01041058]), 'test_r2': array([0.8506005 , 0.94286486, 0.87950934]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1665, 'regressor__learning_rate': 0.0958667401476242, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([8.0886209 , 7.67744255, 7.64738226]), 'score_time': array([0.23337889, 0.23665714, 0.23942065]), 'test_pearson_r': array([0.93493297, 0.96084759, 0.97441266]), 'test_pearson_p': array([-5.19516657e-40, -1.36123653e-48, -3.12570180e-56]), 'test_spearman_r': array([0.72678886, 0.77807296, 0.86157536]), 'test_spearman_p': array([-1.59971584e-15, -1.21050471e-18, -1.85109152e-26]), 'test_kendall_r': array([0.56717651, 0.63682866, 0.72221026]), 'test_kendall_p': array([-8.82057559e-15, -5.05599102e-18, -9.61219344e-23]), 'test_rmse': array([-41.81862347, -40.09512484, -27.4268662 ]), 'test_mae': array([-20.10910415, -21.84303873, -17.02544594]), 'test_r2': array([0.86084508, 0.90279292, 0.9441605 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 511, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([39.03591442, 38.42023683, 35.10179234]), 'score_time': array([0.92156792, 0.94768095, 0.89331889]), 'test_pearson_r': array([0.98138821, 0.67344411, 0.9359019 ]), 'test_pearson_p': array([-1.07430211e-62, -1.20837845e-12, -8.00134352e-40]), 'test_spearman_r': array([0.88501866, 0.75040573, 0.83211118]), 'test_spearman_p': array([-5.82382248e-30, -9.01688027e-17, -3.24340744e-23]), 'test_kendall_r': array([0.74139601, 0.62285735, 0.68546088]), 'test_kendall_p': array([-3.35156550e-24, -2.49249748e-17, -1.37102978e-20]), 'test_rmse': array([ -37.596114  , -107.77626871,  -25.13160209]), 'test_mae': array([-20.88711983, -31.43164553, -14.34404616]), 'test_r2': array([0.94386542, 0.02737689, 0.87481218]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([22.63133025, 26.10594773, 26.7623837 ]), 'score_time': array([0.6233182 , 0.65147543, 0.59200573]), 'test_pearson_r': array([0.54225285, 0.93969782, 0.93399391]), 'test_pearson_p': array([-5.80343026e-08, -6.66302716e-41, -2.63676069e-39]), 'test_spearman_r': array([0.78610748, 0.83513322, 0.79844702]), 'test_spearman_p': array([-1.89157064e-19, -1.61517585e-23, -3.33798347e-20]), 'test_kendall_r': array([0.63627502, 0.67480953, 0.66383602]), 'test_kendall_p': array([-4.08636420e-18, -4.57999244e-20, -1.59436078e-19]), 'test_rmse': array([-82.75529594, -48.80534144, -50.77796742]), 'test_mae': array([-25.8383276 , -23.17702982, -22.36699262]), 'test_r2': array([-0.54005171,  0.8754763 ,  0.862797  ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1389, 'regressor__learning_rate': 0.053141522954103106, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([22.98896337, 22.31109953, 22.37518954]), 'score_time': array([0.54343414, 0.55738473, 0.56146646]), 'test_pearson_r': array([0.97938021, 0.97642806, 0.95539921]), 'test_pearson_p': array([-8.02341983e-61, -1.03806557e-57, -2.89812328e-46]), 'test_spearman_r': array([0.81664557, 0.76456824, 0.86823668]), 'test_spearman_p': array([-5.37438955e-22, -1.06836530e-17, -2.68995397e-27]), 'test_kendall_r': array([0.66631204, 0.61977244, 0.74014526]), 'test_kendall_p': array([-8.58819951e-20, -3.43768362e-17, -9.38463558e-24]), 'test_rmse': array([-22.72796958, -30.53975309, -31.41551914]), 'test_mae': array([-14.6168304 , -17.80359183, -16.28888321]), 'test_r2': array([0.9588103 , 0.95064427, 0.9125429 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1233, 'regressor__learning_rate': 0.09125441170025321, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([10.04276752, 11.55176926,  9.65760446]), 'score_time': array([0.29358912, 0.28079557, 0.28364396]), 'test_pearson_r': array([0.90542105, 0.92765887, 0.92643696]), 'test_pearson_p': array([-2.23302337e-33, -1.08581482e-37, -2.13928515e-37]), 'test_spearman_r': array([0.7818457 , 0.8205046 , 0.79842011]), 'test_spearman_p': array([-3.97330875e-19, -4.17160585e-22, -3.35475019e-20]), 'test_kendall_r': array([0.62181864, 0.60907766, 0.68895142]), 'test_kendall_p': array([-1.78726940e-17, -1.18103226e-16, -8.95493637e-21]), 'test_rmse': array([-32.52469735, -42.85053472, -62.80821229]), 'test_mae': array([-20.43571112, -26.8549015 , -25.67344767]), 'test_r2': array([0.79455746, 0.85448963, 0.83966899]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 618, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([21.7591598 , 22.69841456, 20.44387078]), 'score_time': array([0.58587456, 0.54451513, 0.57276678]), 'test_pearson_r': array([0.97480631, 0.55000096, 0.96877118]), 'test_pearson_p': array([-3.64308746e-57, -4.13054639e-08, -1.20085299e-52]), 'test_spearman_r': array([0.67730784, 0.79971882, 0.95019248]), 'test_spearman_p': array([-5.87504552e-13, -2.63178506e-20, -2.69027486e-44]), 'test_kendall_r': array([0.55994313, 0.67444538, 0.81803311]), 'test_kendall_p': array([-2.26734050e-14, -4.90243875e-20, -8.51037864e-29]), 'test_rmse': array([-35.62158532, -91.41676567, -31.92762549]), 'test_mae': array([-16.64948271, -26.88257297, -17.23273043]), 'test_r2': array([ 0.94281076, -0.51533901,  0.93031934]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1255, 'regressor__learning_rate': 0.055098198319047456, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 6, 6: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 152.65759622648375, 'test_rmse': 188.9894518271967, 'test_r2': -1.0598149530067875, 'test_pearson_r': array([-0.84893323]), 'test_pearson_p_value': array([3.19794797e-05]), 'test_spearman_r': -0.7842465437394441, 'test_spearman_p_value': 0.00032272480603742976, 'test_kendall_r': -0.635170352386366, 'test_kendall_p_value': 0.0009819483841946098, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1993, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 151.33595072272533, 'test_rmse': 187.13536952506044, 'test_r2': -1.0195975448433638, 'test_pearson_r': array([-0.83902462]), 'test_pearson_p_value': array([4.8524269e-05]), 'test_spearman_r': -0.7993572671255604, 'test_spearman_p_value': 0.00020270928700180966, 'test_kendall_r': -0.6530624749887988, 'test_kendall_p_value': 0.000702802496032528, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 129, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 127.97947246136407, 'test_rmse': 160.16730720637418, 'test_r2': -0.4794518120288125, 'test_pearson_r': array([-0.63669974]), 'test_pearson_p_value': array([0.00799822]), 'test_spearman_r': -0.83562300325224, 'test_spearman_p_value': 5.563947207450541e-05, 'test_kendall_r': -0.7246309653985301, 'test_kendall_p_value': 0.0001700328068103163, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.059556559896479046, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 152.75096206833678, 'test_rmse': 189.21868073444648, 'test_r2': -1.0648147609613012, 'test_pearson_r': array([-0.84935403]), 'test_pearson_p_value': array([3.13980014e-05]), 'test_spearman_r': -0.7842465437394441, 'test_spearman_p_value': 0.00032272480603742976, 'test_kendall_r': -0.635170352386366, 'test_kendall_p_value': 0.0009819483841946098, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 151.18440846644836, 'test_rmse': 187.211743192089, 'test_r2': -1.0212463570999657, 'test_pearson_r': array([-0.83699411]), 'test_pearson_p_value': array([5.26733587e-05]), 'test_spearman_r': -0.7993572671255604, 'test_spearman_p_value': 0.00020270928700180966, 'test_kendall_r': -0.6530624749887988, 'test_kendall_p_value': 0.000702802496032528, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 289, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 144.76556758590783, 'test_rmse': 179.49113147156774, 'test_r2': -0.8579715790187687, 'test_pearson_r': array([-0.83106161]), 'test_pearson_p_value': array([6.65309658e-05]), 'test_spearman_r': -0.7993572671255604, 'test_spearman_p_value': 0.00020270928700180966, 'test_kendall_r': -0.6530624749887988, 'test_kendall_p_value': 0.000702802496032528, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0545416642532848, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 124.73343749999998, 'test_ystd': 131.68110494082853, 'test_mae': 144.83002995226474, 'test_rmse': 192.88858592419865, 'test_r2': -1.1456858361927922, 'test_pearson_r': array([-0.848904]), 'test_pearson_p_value': array([3.20202022e-05]), 'test_spearman_r': -0.7993572671255604, 'test_spearman_p_value': 0.00020270928700180966, 'test_kendall_r': -0.6530624749887988, 'test_kendall_p_value': 0.000702802496032528, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 435, 'regressor__learning_rate': 0.08472443219568657, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 6, 6: {'fit_time': array([17.81557155, 24.85287309, 31.07570624, 29.1766808 , 29.74769258,
       16.29347038, 17.37497497, 32.48367167, 16.75208163, 30.6553607 ,
       30.98734355, 27.46389055, 26.74125266, 26.81332803, 31.19577193,
       30.31447697]), 'score_time': array([0.21882772, 0.23731446, 0.22583199, 0.22390652, 0.21988344,
       0.22015572, 0.22512436, 0.19359875, 0.22187209, 0.22656274,
       0.21920633, 0.27436662, 0.238415  , 0.2670064 , 0.22344446,
       0.21930337]), 'test_pearson_r': array([0.9469693 , 0.9930887 , 0.99606701, 0.92587372, 0.99738671,
       0.97431039, 0.9857907 , 0.861576  , 0.9951441 , 0.98898751,
       0.98956468, 0.96678972, 0.97894202, 0.85733212, 0.99027563,
       0.82524288]), 'test_pearson_p': array([-8.54230785e-09, -2.25146721e-15, -3.31058450e-17, -2.70615925e-07,
       -2.21652058e-17, -1.85012402e-10, -3.02065031e-12, -1.79666045e-05,
       -1.68533162e-15, -5.11627669e-13, -3.51524292e-13, -1.09428240e-09,
       -4.65741863e-11, -2.19353034e-05, -2.14911180e-13, -8.29560754e-05]), 'test_spearman_r': array([0.56284499, 0.97546012, 0.92090759, 0.92941176, 0.87941176,
       0.89705882, 0.9757177 , 0.62058824, 0.80882353, 0.94334095,
       0.85798404, 0.81089058, 0.96688768, 0.90294118, 0.96907322,
       0.91470588]), 'test_spearman_p': array([-1.86588719e-02, -2.86888932e-11, -1.58591399e-07, -1.94011895e-07,
       -7.18727304e-06, -2.49237597e-06, -1.25183504e-10, -1.03135155e-02,
       -1.48475592e-04, -4.32397330e-08, -2.12817957e-05, -1.38406226e-04,
       -1.07216639e-09, -1.67772437e-06, -6.68655186e-10, -7.01180219e-07]), 'test_kendall_r': array([0.46494781, 0.94074074, 0.80443352, 0.8       , 0.75      ,
       0.78333333, 0.91214188, 0.58333333, 0.68333333, 0.86193223,
       0.74477639, 0.6778302 , 0.87866878, 0.8       , 0.89078776,
       0.78333333]), 'test_kendall_p': array([-9.39488486e-03, -1.60289263e-07, -6.99598360e-06, -1.17934846e-06,
       -8.91848950e-06, -2.41022656e-06, -8.99518934e-07, -1.14261804e-03,
       -8.26619198e-05, -3.45008795e-06, -6.04438410e-05, -2.61704221e-04,
       -2.22140114e-06, -1.17934846e-06, -1.73481918e-06, -2.41022656e-06]), 'test_rmse': array([-23.36618982, -11.05579369, -34.98602099, -30.28476027,
       -15.83231963, -18.14760233,  -9.59860179, -35.33625736,
       -10.5653698 , -28.90547656,  -9.08947009, -23.93226202,
       -23.49527341, -22.5869435 , -11.42798103, -35.66707193]), 'test_mae': array([-15.26318521,  -8.84184116, -18.45619882, -19.28913525,
       -11.65398969, -13.93668957,  -6.24873512, -20.71538997,
        -8.06807234, -17.14135484,  -6.37854651, -16.31346701,
       -14.05036119, -12.2326477 ,  -7.93550096, -20.35839691]), 'test_r2': array([0.88434652, 0.97071436, 0.98199089, 0.85235275, 0.99359882,
       0.94880473, 0.96731129, 0.72373082, 0.98196619, 0.97713998,
       0.97717163, 0.92853286, 0.94974683, 0.48141025, 0.97525397,
       0.63600972]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 847, 'regressor__learning_rate': 0.08646479880356304, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([30.68925428, 25.54345775, 25.25540996, 29.48403215, 27.77224183,
       30.15991354, 27.62682438, 28.73205924, 29.29525614, 29.16958904,
       26.14126158, 27.23953867, 25.67483544, 31.08673072, 31.38957596,
       26.10603118]), 'score_time': array([0.28244758, 0.28426933, 0.27867174, 0.26564026, 0.27055955,
       0.27727199, 0.30310321, 0.27645326, 0.26874948, 0.2648406 ,
       0.27874303, 0.26341271, 0.28398061, 0.28370261, 0.23917222,
       0.27360392]), 'test_pearson_r': array([0.96844978, 0.97733871, 0.93693759, 0.99825336, 0.98349389,
       0.98945628, 0.91271545, 0.99421865, 0.93836127, 0.83807294,
       0.69033031, 0.99776417, 0.98283645, 0.96282399, 0.91226552,
       0.97286165]), 'test_pearson_p': array([-1.85079185e-10, -1.58733487e-11, -3.04161348e-08, -1.32362148e-18,
       -8.56979968e-12, -3.77789406e-13, -8.19610314e-07, -5.70091318e-15,
       -7.69410946e-08, -5.04335070e-05, -3.07542052e-03, -7.44501125e-18,
       -1.12448290e-11, -2.38492880e-09, -8.48606011e-07, -2.70591005e-10]), 'test_spearman_r': array([0.8595955 , 0.78969972, 0.85012542, 0.7343637 , 0.91176471,
       0.88447412, 0.61663004, 0.95882353, 0.8600893 , 0.85      ,
       0.74908041, 0.98823529, 0.93235294, 0.91176471, 0.8335797 ,
       0.89705882]), 'test_spearman_p': array([-9.76599372e-06, -1.62924649e-04, -1.54807013e-05, -1.19747586e-03,
       -8.81898574e-07, -5.39811216e-06, -1.09559882e-02, -4.82554077e-09,
       -1.92818221e-05, -3.05226007e-05, -8.38854945e-04, -8.10888105e-13,
       -1.45175444e-07, -8.81898574e-07, -6.03178638e-05, -2.49237597e-06]), 'test_kendall_r': array([0.71587203, 0.64207079, 0.70636363, 0.59414746, 0.85      ,
       0.74477639, 0.56067436, 0.85      , 0.72271459, 0.65      ,
       0.54393782, 0.95      , 0.86666667, 0.78333333, 0.72271459,
       0.81666667]), 'test_kendall_p': array([-6.35893960e-05, -3.34757024e-04, -8.65388169e-05, -1.37502262e-03,
       -1.02027025e-07, -6.04438410e-05, -2.53133322e-03, -1.02027025e-07,
       -1.04538557e-04, -2.15302431e-04, -3.39579783e-03, -7.63760478e-11,
       -3.98309214e-08, -2.41022656e-06, -1.04538557e-04, -5.50848432e-07]), 'test_rmse': array([ -9.59487909, -24.46156762, -22.93231982, -14.26202775,
       -17.93976847, -28.56897455, -33.63667572, -21.62184689,
       -10.47453749, -29.78763397, -43.67028827, -23.01538756,
       -18.84166296, -23.57665036, -31.50148146, -19.8432389 ]), 'test_mae': array([ -6.92258958, -16.61579117, -12.91378694,  -9.90634943,
       -11.62444704, -17.8196598 , -15.20153638, -14.31139341,
        -7.89077773, -19.47474971, -26.83333563, -11.99987106,
        -9.19821886, -17.8694311 , -20.21400597, -13.04668548]), 'test_r2': array([0.93561884, 0.91241175, 0.84947002, 0.99538999, 0.96290386,
       0.97805432, 0.81458761, 0.98726524, 0.83259653, 0.54549463,
       0.07681845, 0.98823656, 0.91800962, 0.92234991, 0.82715559,
       0.92698989]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1071, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([20.31062675, 18.32524276, 18.24251318, 23.86406207, 22.48595238,
       18.84283924, 18.48749638, 18.54817462, 17.5986135 , 17.26054716,
       21.94144225, 18.79421353, 22.65905213, 20.39953017, 20.36686397,
       21.76730704]), 'score_time': array([0.19939852, 0.20173693, 0.19884014, 0.18024397, 0.19586253,
       0.22580123, 0.21571398, 0.19587255, 0.21219063, 0.20569062,
       0.19343996, 0.22663331, 0.19091082, 0.20087862, 0.23591685,
       0.19317889]), 'test_pearson_r': array([0.92711026, 0.99705671, 0.92077199, 0.99346423, 0.99544362,
       0.9970476 , 0.96445373, 0.92854565, 0.46527892, 0.96561633,
       0.99110989, 0.90593905, 0.97201316, 0.96234292, 0.83955012,
       0.98396748]), 'test_pearson_p': array([-8.75461454e-08, -3.77539105e-18, -1.60577589e-07, -1.34262404e-14,
       -1.08013968e-15, -5.20225455e-17, -1.75016531e-09, -2.10807784e-07,
       -6.93540800e-02, -1.39101189e-09, -1.14956550e-13, -1.35798414e-06,
       -3.34909727e-10, -2.60618773e-09, -4.74961708e-05, -6.99864600e-12]), 'test_spearman_r': array([0.88902531, 0.92826504, 0.86519608, 0.86470588, 0.96470588,
       0.89705882, 0.96688768, 0.94039761, 0.44705882, 0.5636499 ,
       0.90802085, 0.75      , 0.88447412, 0.67601936, 0.64117647,
       0.86450756]), 'test_spearman_p': array([-1.82874182e-06, -7.79295097e-08, -7.32003455e-06, -1.54423405e-05,
       -1.66620775e-09, -2.49237597e-06, -1.07216639e-09, -6.11516412e-08,
       -8.25369234e-02, -2.29740097e-02, -1.16766988e-06, -8.19764027e-04,
       -5.39811216e-06, -4.04205683e-03, -7.43441908e-03, -1.55929052e-05]), 'test_kendall_r': array([0.74539253, 0.80443352, 0.75      , 0.75      , 0.88333333,
       0.76666667, 0.87866878, 0.81172259, 0.36666667, 0.44351853,
       0.79498604, 0.58333333, 0.77824949, 0.50854763, 0.58333333,
       0.73952191]), 'test_kendall_p': array([-3.12734232e-05, -6.99598360e-06, -3.71891753e-06, -8.91848950e-06,
       -1.43717927e-08, -4.72451181e-06, -2.22140114e-06, -1.23329686e-05,
       -5.16768954e-02, -1.69119907e-02, -1.85653874e-05, -1.14261804e-03,
       -2.77306574e-05, -6.64322251e-03, -1.14261804e-03, -7.18614621e-05]), 'test_rmse': array([-27.27152693, -14.23825908, -27.90975377, -32.91302941,
       -20.41400901, -14.63413018, -25.82287538, -29.25739854,
       -73.16263685, -24.41528409, -13.51773504, -19.27034137,
       -22.53389282, -17.25210632, -26.25263106, -18.6573991 ]), 'test_mae': array([-16.93844036, -10.88885747, -16.94657002, -19.69460279,
       -11.93915557,  -9.92405448, -14.75413931, -11.11033545,
       -39.40947635, -15.44005922,  -8.84124099, -12.13276173,
       -15.29418418, -10.9609487 , -13.37711148,  -9.2765761 ]), 'test_r2': array([ 0.85381622,  0.99385572,  0.83315438,  0.97618052,  0.99003089,
        0.99406943,  0.90737346,  0.80328126, -1.63091673,  0.92379818,
        0.97969572,  0.80355243,  0.93313362,  0.92533778,  0.69853601,
        0.94088259]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 785, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([53.31993628, 50.73794723, 52.34779   , 52.87035465, 53.58129549,
       51.97772789, 57.29858041, 48.29255176, 54.65140057, 51.87876797,
       47.44479036, 54.70978665, 54.50067782, 52.13819981, 50.85487485,
       52.79859591]), 'score_time': array([0.53181696, 0.57370543, 0.47438598, 0.47956944, 0.4907732 ,
       0.50256395, 0.4357307 , 0.48253608, 0.55131531, 0.47414684,
       0.51938224, 0.51391482, 0.54378128, 0.46560979, 0.52904749,
       0.48457503]), 'test_pearson_r': array([0.94473318, 0.87238122, 0.99153781, 0.99348496, 0.01684268,
       0.97025361, 0.99540518, 0.97763596, 0.93805732, 0.63870297,
       0.93055129, 0.98896855, 0.91374057, 0.99804846, 0.96503536,
       0.99208879]), 'test_pearson_p': array([-1.15679362e-08, -4.96081442e-06, -1.02317652e-14, -1.31316768e-14,
       -9.50634892e-01, -5.10811640e-10, -1.14543640e-15, -7.07257931e-11,
       -7.95715020e-08, -7.74188729e-03, -1.73655338e-07, -5.17799899e-13,
       -7.56663102e-07, -2.87577490e-18, -1.56169855e-09, -5.09335899e-14]), 'test_spearman_r': array([0.70368098, 0.73039216, 0.93807498, 0.96002634, 0.44477172,
       0.81470588, 0.95294118, 0.83443731, 0.91820416, 0.53392563,
       0.78734385, 0.8       , 0.76085377, 0.65      , 0.90588235,
       0.85798404]), 'test_spearman_p': array([-1.62048731e-03, -8.69865322e-04, -2.66240836e-08, -3.93381227e-09,
       -8.43105282e-02, -1.21309506e-04, -1.20965793e-08, -5.83157783e-05,
       -5.28008516e-07, -3.31484495e-02, -2.94261400e-04, -1.98570973e-04,
       -6.20092216e-04, -6.41570652e-03, -1.36351336e-06, -2.12817957e-05]), 'test_kendall_r': array([0.60740741, 0.61764706, 0.81919377, 0.88918124, 0.40336134,
       0.66666667, 0.85      , 0.6443571 , 0.78487301, 0.41353524,
       0.59414746, 0.65      , 0.62762056, 0.48333333, 0.78333333,
       0.72803985]), 'test_kendall_p': array([-7.15628707e-04, -2.92493772e-04, -4.73348832e-06, -2.31227219e-06,
       -3.03527524e-02, -1.34937165e-04, -1.02027025e-07, -5.19968854e-04,
       -2.67052399e-05, -2.68048718e-02, -1.37502262e-03, -2.15302431e-04,
       -7.24551643e-04, -8.59466759e-03, -2.41022656e-06, -8.82060896e-05]), 'test_rmse': array([ -26.28563299,  -29.71592094,  -13.24995739,   -7.28526958,
       -160.63322099,  -19.70133631,  -34.38177398,  -17.74084028,
        -24.63124636,  -43.39416612,  -24.31652877,  -12.55360465,
        -27.07958227,  -13.52148607,  -22.23847329,  -31.02864105]), 'test_mae': array([-13.59056675, -16.25684146,  -9.53283344,  -4.66854993,
       -68.61815554, -13.09136117, -21.90372507, -14.24530181,
       -14.31526289, -22.71020867, -15.14377323,  -9.71106798,
       -18.49544667,  -9.81852358, -15.78542663, -21.7805622 ]), 'test_r2': array([  0.8568885 ,   0.74543714,   0.98000903,   0.96949171,
       -18.9326634 ,   0.93736948,   0.9833589 ,   0.95350108,
         0.87360858,  -0.43277472,   0.85428061,   0.97306513,
         0.82787638,   0.99522558,   0.92464716,   0.97727694]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03563388051344818, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([11.40775061, 10.26567101, 12.98342776, 10.95127559, 10.83687544,
       13.98417187, 12.51262164, 11.03678799,  9.61509228, 12.27704978,
       13.55923128, 12.89856482, 10.21349692, 11.38678694, 13.59850502,
       13.86052084]), 'score_time': array([0.12547135, 0.1418314 , 0.12723804, 0.12855244, 0.13856006,
       0.11509204, 0.12571144, 0.12432194, 0.13980722, 0.12438345,
       0.11957002, 0.12874365, 0.13436294, 0.12447429, 0.12860775,
       0.12659383]), 'test_pearson_r': array([0.9652866 , 0.94172573, 0.98546549, 0.99272561, 0.95886937,
       0.95298918, 0.98638376, 0.97408809, 0.75645558, 0.99773333,
       0.98939246, 0.96755016, 0.91704972, 0.96365322, 0.69569842,
       0.99877503]), 'test_pearson_p': array([-3.75469562e-10, -1.70614058e-08, -5.81078496e-13, -2.83537377e-14,
       -4.78864887e-09, -1.20120165e-08, -2.24477310e-12, -1.96398329e-10,
       -6.95526864e-04, -8.19350087e-18, -3.94022841e-13, -9.32369444e-10,
       -5.80612425e-07, -2.04106420e-09, -2.76507280e-03, -1.10616472e-19]), 'test_spearman_r': array([0.70920299, 0.76203668, 0.72515337, 0.87858743, 0.90360584,
       0.95882353, 0.94117647, 0.82647059, 0.76764706, 0.93220364,
       0.83738065, 0.85588235, 0.73746634, 0.97277436, 0.55481987,
       0.90882353]), 'test_spearman_p': array([-1.43272959e-03, -3.77271785e-04, -9.88130723e-04, -7.52120583e-06,
       -1.60183906e-06, -4.82554077e-09, -5.58893763e-08, -7.92354858e-05,
       -5.16883524e-04, -1.47373799e-07, -5.18614608e-05, -2.34491569e-05,
       -1.11301253e-03, -2.76678019e-10, -2.57030961e-02, -1.10058522e-06]), 'test_kendall_r': array([0.54816319, 0.58661542, 0.6       , 0.72803985, 0.7113033 ,
       0.85      , 0.81666667, 0.73333333, 0.6       , 0.83545047,
       0.7113033 , 0.7       , 0.6329621 , 0.87866878, 0.47699162,
       0.78333333]), 'test_kendall_p': array([-2.26233934e-03, -1.20829839e-03, -8.30997718e-04, -8.82060896e-05,
       -1.27728091e-04, -1.02027025e-07, -5.50848432e-07, -1.62687222e-05,
       -7.73831095e-04, -7.79393184e-06, -1.27728091e-04, -4.94106357e-05,
       -7.00693466e-04, -2.22140114e-06, -1.02025312e-02, -2.41022656e-06]), 'test_rmse': array([-19.57370772, -20.98639655, -13.76456733, -24.36527266,
       -36.3917687 , -13.97303687, -17.41988996, -21.7364786 ,
       -29.29719555, -29.71858812, -11.33229965, -24.6330194 ,
       -26.07778611, -20.42515851, -32.84623448,  -9.5428171 ]), 'test_mae': array([-11.38473889, -11.36897406,  -8.44427321, -17.89508966,
       -24.46982344,  -9.41267059, -12.13500087, -11.16179934,
       -18.6344197 , -18.86629033,  -7.85829577, -16.02746835,
       -15.50737488, -13.80625759, -17.88441802,  -6.81236504]), 'test_r2': array([0.930727  , 0.87055497, 0.9656348 , 0.98532828, 0.85599928,
       0.90732221, 0.97021363, 0.93924682, 0.35622134, 0.98777312,
       0.97853777, 0.9267011 , 0.80612363, 0.90715369, 0.28320135,
       0.99746724]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 472, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([53.80479693, 50.54300547, 51.28279686, 52.19745302, 53.84526563,
       55.75590348, 55.41727662, 57.31494284, 39.16005039, 54.71179771,
       54.25109625, 49.26982975, 54.91036296, 42.84272623, 43.38214731,
       53.92202473]), 'score_time': array([0.47369647, 0.51091552, 0.47342873, 0.46388912, 0.49634695,
       0.43314314, 0.47615504, 0.43012094, 0.47936797, 0.45931911,
       0.46898437, 0.53147912, 0.44759583, 0.48011208, 0.50634241,
       0.46537161]), 'test_pearson_r': array([0.96517442, 0.82908436, 0.98839091, 0.96776802, 0.99835022,
       0.95383327, 0.98448691, 0.98007271, 0.99094747, 0.97477797,
       0.9646885 , 0.99750798, 0.98672819, 0.81841783, 0.98797069,
       0.9926658 ]), 'test_pearson_p': array([-3.84540805e-10, -3.88756198e-05, -1.08612563e-13, -8.89939189e-10,
       -8.88033516e-19, -1.06051185e-08, -5.56525346e-12, -3.17442619e-11,
       -1.30433190e-13, -1.62890950e-10, -1.67188238e-09, -1.58985370e-17,
       -1.87791903e-12, -1.06399865e-04, -9.46834879e-13, -3.00214497e-14]), 'test_spearman_r': array([0.78186275, 0.68872549, 0.82699449, 0.85798404, 0.89919082,
       0.72058824, 0.89624748, 0.81470588, 0.96176471, 0.80794724,
       0.93156758, 0.97345556, 0.97496424, 0.6377032 , 0.84871427,
       0.73235294]), 'test_spearman_p': array([-2.09161804e-04, -2.23270172e-03, -4.23123216e-05, -2.12817957e-05,
       -2.16532951e-06, -1.63819116e-03, -2.62733392e-06, -1.21309506e-04,
       -2.89508013e-09, -1.52924260e-04, -1.57059247e-07, -2.32128210e-10,
       -1.54730831e-10, -7.86898952e-03, -3.22856115e-05, -1.25495817e-03]), 'test_kendall_r': array([0.63235294, 0.45588235, 0.68150018, 0.74477639, 0.79498604,
       0.6       , 0.72803985, 0.66666667, 0.86666667, 0.62762056,
       0.79498604, 0.90302594, 0.89078776, 0.57144875, 0.76282144,
       0.58333333]), 'test_kendall_p': array([-1.94890902e-04, -1.03403618e-02, -1.46949526e-04, -6.04438410e-05,
       -1.85653874e-05, -7.73831095e-04, -8.82060896e-05, -1.34937165e-04,
       -3.98309214e-08, -7.24551643e-04, -1.85653874e-05, -1.32869973e-06,
       -1.73481918e-06, -2.15672721e-03, -4.67457603e-05, -1.14261804e-03]), 'test_rmse': array([-18.62401674, -36.77193212, -13.43405736, -21.52491924,
        -4.37471599, -19.84023233, -40.59747232, -14.82213273,
       -11.28428245, -16.24865973, -20.55858664, -13.9875002 ,
       -16.7569644 , -36.91965592, -17.22687078, -36.17974947]), 'test_mae': array([-12.62798343, -26.06823195,  -9.29169039, -13.0510083 ,
        -3.51693427, -10.04928536, -29.20933524, -10.97333376,
        -8.74105143, -12.44849269, -12.0541091 ,  -8.89085882,
       -11.01800797, -23.66331433, -10.62109269, -24.43434178]), 'test_r2': array([0.93042846, 0.58966595, 0.97566426, 0.90895335, 0.99618713,
       0.83816549, 0.96374303, 0.94545136, 0.97392978, 0.88452783,
       0.89316279, 0.99425962, 0.9692282 , 0.65140014, 0.94742762,
       0.98177862]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06885364531397069, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([21.45476532, 26.51119924, 24.86452365, 25.23587823, 23.54445553,
       25.21183443, 24.68394208, 25.64963293, 25.86727571, 23.43404365,
       26.67735291, 23.26789999, 24.19404745, 23.38275003, 26.85380268,
       24.93749452]), 'score_time': array([0.66724658, 0.32716584, 0.3094902 , 0.3012054 , 0.31350732,
       0.30474567, 0.31889653, 0.29834318, 0.32484746, 0.32896376,
       0.33947229, 0.34168768, 0.29984045, 0.3231566 , 0.31587863,
       0.35004044]), 'test_pearson_r': array([0.99538713, 0.97704356, 0.99765185, 0.92027953, 0.70489572,
       0.97106878, 0.98361274, 0.92580794, 0.97264232, 0.92189017,
       0.96726926, 0.97553882, 0.9631446 , 0.95101965, 0.96918001,
       0.9982276 ]), 'test_pearson_p': array([-1.09249532e-16, -1.74761518e-11, -6.94866449e-19, -4.43564348e-07,
       -2.29244285e-03, -4.21433424e-10, -8.14963936e-12, -2.72253180e-07,
       -2.86108580e-10, -3.86192357e-07, -9.89615999e-10, -1.31720743e-10,
       -2.24654183e-09, -1.59255470e-08, -6.52844983e-10, -1.46640108e-18]), 'test_spearman_r': array([0.67320675, 0.71498987, 0.89325221, 0.78145717, 0.8903608 ,
       0.7343637 , 0.94117647, 0.76176471, 0.80265183, 0.80588235,
       0.93805718, 0.94109086, 0.91470588, 0.87941176, 0.96764706,
       0.87941176]), 'test_spearman_p': array([-3.05604327e-03, -1.25555486e-03, -1.38411203e-06, -3.50270634e-04,
       -3.80430564e-06, -1.19747586e-03, -5.58893763e-08, -6.05342838e-04,
       -1.82230143e-04, -1.63846665e-04, -7.95727170e-08, -5.64482654e-08,
       -7.01180219e-07, -7.18727304e-06, -9.13289481e-10, -7.18727304e-06]), 'test_kendall_r': array([0.62731054, 0.69149282, 0.75557628, 0.57741091, 0.84519568,
       0.6443571 , 0.85      , 0.58333333, 0.68909996, 0.61666667,
       0.81863099, 0.82355849, 0.76666667, 0.73333333, 0.88333333,
       0.75      ]), 'test_kendall_p': array([-4.57727189e-04, -1.21595108e-04, -2.56735365e-05, -1.87273015e-03,
       -5.31661458e-06, -5.19968854e-04, -1.02027025e-07, -1.14261804e-03,
       -2.16150057e-04, -5.14926454e-04, -1.16785197e-05, -9.81644457e-06,
       -4.72451181e-06, -1.62687222e-05, -1.43717927e-08, -8.91848950e-06]), 'test_rmse': array([-19.72484803, -43.98810091, -13.11810825, -23.87771543,
       -34.58165562, -20.12081087, -16.84637906, -20.83495245,
       -15.29208175, -33.19022386, -21.56954723, -23.51630073,
       -23.33984372, -28.71107998, -16.63023381, -26.28920235]), 'test_mae': array([-12.79139016, -18.84693642, -10.21966884, -14.75172315,
       -14.41295772, -13.95770407, -10.89481799, -15.44610268,
       -11.04197434, -22.21399223, -14.46854889, -13.69081271,
       -14.99346206, -17.22065648, -11.5429998 , -14.429457  ]), 'test_r2': array([0.98800235, 0.9511154 , 0.9949513 , 0.82877066, 0.37473205,
       0.93117491, 0.96274828, 0.83341664, 0.93621472, 0.84893191,
       0.92624715, 0.9403096 , 0.89441963, 0.89675278, 0.9192074 ,
       0.98522485]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1344, 'regressor__learning_rate': 0.03238388976248184, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 22, 6: {'test_mad': 77.45631985731274, 'test_ystd': 87.04923771082645, 'test_mae': 87.30289141898128, 'test_rmse': 120.14182037989197, 'test_r2': -0.904839864463336, 'test_pearson_r': array([-0.07134576]), 'test_pearson_p_value': array([0.5945847]), 'test_spearman_r': 0.1537739681723106, 'test_spearman_p_value': 0.24912206821740096, 'test_kendall_r': 0.136129898297372, 'test_kendall_p_value': 0.1327852290337787, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.059171151083212595, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 77.45631985731274, 'test_ystd': 87.04923771082645, 'test_mae': 92.35237871399457, 'test_rmse': 125.08770293331483, 'test_r2': -1.0649012634588422, 'test_pearson_r': array([-0.14736139]), 'test_pearson_p_value': array([0.26964513]), 'test_spearman_r': 0.03784591550074666, 'test_spearman_p_value': 0.7779031541286536, 'test_kendall_r': 0.05367646100215164, 'test_kendall_p_value': 0.5546461828354405, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 289, 'regressor__learning_rate': 0.07693173041362837, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 77.45631985731274, 'test_ystd': 87.04923771082645, 'test_mae': 87.8832810119353, 'test_rmse': 119.44675070843547, 'test_r2': -0.8828630626530802, 'test_pearson_r': array([-0.05704582]), 'test_pearson_p_value': array([0.67059084]), 'test_spearman_r': 0.1796935204645749, 'test_spearman_p_value': 0.17710251944817096, 'test_kendall_r': 0.15211642447331505, 'test_kendall_p_value': 0.09337846678437588, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.020411191471869088, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 77.45631985731274, 'test_ystd': 87.04923771082645, 'test_mae': 88.10545174643798, 'test_rmse': 120.40402561920737, 'test_r2': -0.9131634276765381, 'test_pearson_r': array([-0.08441811]), 'test_pearson_p_value': array([0.52866838]), 'test_spearman_r': 0.15165315970196483, 'test_spearman_p_value': 0.25578848792270464, 'test_kendall_r': 0.1623114999490954, 'test_kendall_p_value': 0.07316317674889299, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1662, 'regressor__learning_rate': 0.009405205236946776, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 77.45631985731274, 'test_ystd': 87.04923771082645, 'test_mae': 92.45183514163791, 'test_rmse': 123.75217739174371, 'test_r2': -1.0210439285454718, 'test_pearson_r': array([-0.16522027]), 'test_pearson_p_value': array([0.21518713]), 'test_spearman_r': 0.03469337651111159, 'test_spearman_p_value': 0.7959878528502126, 'test_kendall_r': 0.06743665702482057, 'test_kendall_p_value': 0.4563394136703822, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 603, 'regressor__learning_rate': 0.036771689886915135, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 77.45631985731274, 'test_ystd': 87.04923771082645, 'test_mae': 91.46682079243637, 'test_rmse': 124.36353047410158, 'test_r2': -1.0410617320191817, 'test_pearson_r': array([-0.16396012]), 'test_pearson_p_value': array([0.21875557]), 'test_spearman_r': 0.01626178919909176, 'test_spearman_p_value': 0.9035658257535114, 'test_kendall_r': 0.05042560840594691, 'test_kendall_p_value': 0.5775411050741651, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 403, 'regressor__learning_rate': 0.06684858750849047, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 77.45631985731274, 'test_ystd': 87.04923771082645, 'test_mae': 92.35119762930223, 'test_rmse': 125.31724470436525, 'test_r2': -1.0724865971190432, 'test_pearson_r': array([-0.07510818]), 'test_pearson_p_value': array([0.57524246]), 'test_spearman_r': 0.11777467155509186, 'test_spearman_p_value': 0.37859409523511756, 'test_kendall_r': 0.08449924529185117, 'test_kendall_p_value': 0.3509151387829118, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 889, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 25, 6: {'fit_time': array([32.26491809, 32.52542472, 33.19112802, 32.0485189 ]), 'score_time': array([0.62384415, 0.60334349, 0.60085654, 0.63529038]), 'test_pearson_r': array([0.98951597, 0.97558823, 0.96529719, 0.95439952]), 'test_pearson_p': array([-1.15389830e-54, -3.42576439e-43, -1.90490315e-38, -2.97212720e-34]), 'test_spearman_r': array([0.76998745, 0.8819345 , 0.80245255, 0.84904689]), 'test_spearman_p': array([-6.54365510e-14, -2.98632818e-22, -9.24413343e-16, -7.79760012e-19]), 'test_kendall_r': array([0.64029176, 0.78662517, 0.65524176, 0.68987919]), 'test_kendall_p': array([-5.67951039e-14, -2.10631368e-20, -1.52847857e-14, -9.16177089e-16]), 'test_rmse': array([-23.25194455, -26.07110547, -31.84203135, -22.80663441]), 'test_mae': array([-13.76014578, -13.80847236, -16.77692326, -14.04721088]), 'test_r2': array([0.97665892, 0.95170574, 0.92525086, 0.91000257]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([32.1641345 , 29.64357162, 29.50025606, 29.67163944]), 'score_time': array([0.60343218, 0.59663057, 0.60671782, 0.62728977]), 'test_pearson_r': array([0.91606675, 0.98400292, 0.96991264, 0.94740912]), 'test_pearson_p': array([-1.08944573e-26, -6.41495360e-49, -2.27809524e-40, -2.22884630e-32]), 'test_spearman_r': array([0.69501732, 0.8732934 , 0.8679724 , 0.9028506 ]), 'test_spearman_p': array([-1.33449832e-10, -2.41317885e-21, -8.10937801e-21, -2.08468203e-24]), 'test_kendall_r': array([0.51111135, 0.77410655, 0.6911054 , 0.76441437]), 'test_kendall_p': array([-2.07462193e-09, -1.14168441e-19, -4.84148110e-16, -5.01262413e-19]), 'test_rmse': array([-50.70874638, -27.64348032, -29.54507415, -25.46076579]), 'test_mae': array([-24.82837287, -13.67814781, -17.87198266, -16.14532103]), 'test_r2': array([0.82066558, 0.96568939, 0.93754703, 0.88679683]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([32.67281628, 34.15576172, 33.07968974, 34.8191874 ]), 'score_time': array([0.61258388, 0.63648605, 0.60639024, 0.61346388]), 'test_pearson_r': array([0.98788735, 0.98763602, 0.90563698, 0.92317475]), 'test_pearson_p': array([-1.06427542e-52, -2.02476813e-52, -3.71246371e-25, -1.96221035e-27]), 'test_spearman_r': array([0.91440999, 0.8661691 , 0.76590818, 0.82811473]), 'test_spearman_p': array([-1.96577387e-26, -1.20845247e-20, -1.06399845e-13, -3.14304696e-17]), 'test_kendall_r': array([0.77590443, 0.72639768, 0.61423804, 0.7185737 ]), 'test_kendall_p': array([-7.74610371e-20, -1.35911440e-17, -5.61477536e-13, -6.92914037e-17]), 'test_rmse': array([-24.8647358 , -23.66932476, -32.34934252, -28.06796866]), 'test_mae': array([-15.26627588, -14.02427667, -16.80193625, -13.99851115]), 'test_r2': array([0.97331728, 0.97492279, 0.80176116, 0.85167092]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07209462565418447, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([9.45021701, 8.51938081, 9.74330091, 9.68029332]), 'score_time': array([0.19477534, 0.20477629, 0.1975913 , 0.21400142]), 'test_pearson_r': array([0.96180819, 0.91623573, 0.90876776, 0.8993656 ]), 'test_pearson_p': array([-3.69541091e-37, -1.02509546e-26, -1.34613891e-25, -5.89486386e-24]), 'test_spearman_r': array([0.87309349, 0.74679284, 0.81548434, 0.74524349]), 'test_spearman_p': array([-2.52808392e-21, -9.16838218e-13, -1.33087329e-16, -1.63620686e-12]), 'test_kendall_r': array([0.72900566, 0.60857005, 0.6634532 , 0.64713204]), 'test_kendall_p': array([-1.49027297e-17, -8.26552133e-13, -6.87411505e-15, -4.35902031e-14]), 'test_rmse': array([-20.76041949, -63.35608939, -27.55473963, -69.69913457]), 'test_mae': array([-13.04585081, -24.36359721, -14.58908196, -29.64479532]), 'test_r2': array([0.91623067, 0.82935399, 0.81872648, 0.79124589]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 589, 'regressor__learning_rate': 0.08322470369375479, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([35.15852857, 31.89059067, 32.54092765, 31.67936468]), 'score_time': array([0.69533777, 0.64923573, 0.65209985, 0.648911  ]), 'test_pearson_r': array([0.98877102, 0.97457297, 0.98327533, 0.9609692 ]), 'test_pearson_p': array([-9.91830056e-54, -1.21785805e-42, -2.57612281e-48, -2.63601945e-36]), 'test_spearman_r': array([0.71757881, 0.9200896 , 0.81104361, 0.82914711]), 'test_spearman_p': array([-1.74473117e-11, -2.46685790e-27, -2.61964014e-16, -2.65049902e-17]), 'test_kendall_r': array([0.56156865, 0.78700363, 0.6904897 , 0.7094219 ]), 'test_kendall_p': array([-4.49211016e-11, -2.10047842e-20, -5.54221437e-16, -1.35268752e-16]), 'test_rmse': array([-18.32566292, -20.96037786, -28.55594391, -31.11782629]), 'test_mae': array([-11.29955976, -13.42803883, -17.27167341, -16.44927904]), 'test_r2': array([0.97640036, 0.94061256, 0.96449818, 0.92046874]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([29.65674829, 29.45537233, 32.092278  , 30.73134112]), 'score_time': array([0.59743667, 0.59880733, 0.58222437, 0.60157418]), 'test_pearson_r': array([0.89445038, 0.97560698, 0.9853452 , 0.93679877]), 'test_pearson_p': array([-1.06400165e-23, -3.34477170e-43, -4.13964837e-50, -5.66912129e-30]), 'test_spearman_r': array([0.83080185, 0.8560688 , 0.91751001, 0.73432889]), 'test_spearman_p': array([-1.11112551e-17, -1.01912616e-19, -6.45006812e-27, -5.01452438e-12]), 'test_kendall_r': array([0.65800288, 0.67759107, 0.76700577, 0.62743923]), 'test_kendall_p': array([-9.95604573e-15, -1.70285677e-15, -2.17629505e-19, -3.05278724e-13]), 'test_rmse': array([-34.16158267, -28.23255331, -18.74735888, -55.89423874]), 'test_mae': array([-22.22737147, -15.35249849, -13.02290869, -26.50640486]), 'test_r2': array([0.77919608, 0.94840643, 0.96980136, 0.87094707]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07283482921548083, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([28.71409702, 33.87763262, 33.31033158, 33.2596159 ]), 'score_time': array([0.68823886, 0.66789269, 0.61039114, 0.60732818]), 'test_pearson_r': array([0.98414438, 0.92199383, 0.96278782, 0.96927478]), 'test_pearson_p': array([-4.85957173e-49, -1.18822031e-27, -1.65418416e-37, -1.79039718e-39]), 'test_spearman_r': array([0.71503133, 0.81573599, 0.90124377, 0.93129343]), 'test_spearman_p': array([-2.21679630e-11, -1.28007223e-16, -1.45427149e-24, -6.95211741e-29]), 'test_kendall_r': array([0.61499191, 0.65767379, 0.75097085, 0.79771658]), 'test_kendall_p': array([-6.36587382e-13, -1.08405141e-14, -1.22998327e-18, -1.26849798e-20]), 'test_rmse': array([-33.59419527, -27.42542104, -22.77540643, -33.5955916 ]), 'test_mae': array([-15.94837978, -16.0858998 , -13.92943433, -18.17052962]), 'test_r2': array([0.96092825, 0.83685915, 0.92273326, 0.93126592]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.037018582635493076, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 7, 6: {'test_mad': 32.5180055401662, 'test_ystd': 36.91696679946946, 'test_mae': 47.43318617849425, 'test_rmse': 56.4033706059766, 'test_r2': -1.3343076511425283, 'test_pearson_r': array([-0.07675487]), 'test_pearson_p_value': array([0.7548017]), 'test_spearman_r': -0.029850746268656712, 'test_spearman_p_value': 0.9034460957629772, 'test_kendall_r': -0.02941176470588235, 'test_kendall_p_value': 0.860968267099983, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 564, 'regressor__learning_rate': 0.061766802795202524, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 32.5180055401662, 'test_ystd': 36.91696679946946, 'test_mae': 30.270912247263507, 'test_rmse': 35.80988599804469, 'test_r2': 0.05907749766560355, 'test_pearson_r': array([0.41196506]), 'test_pearson_p_value': array([0.07966998]), 'test_spearman_r': 0.3854258121158911, 'test_spearman_p_value': 0.1031735284143706, 'test_kendall_r': 0.2529411764705882, 'test_kendall_p_value': 0.1320109889244805, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 603, 'regressor__learning_rate': 0.07489281488842617, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 32.5180055401662, 'test_ystd': 36.91696679946946, 'test_mae': 38.23155603743182, 'test_rmse': 46.6613426345354, 'test_r2': -0.5975793567066607, 'test_pearson_r': array([-0.05340179]), 'test_pearson_p_value': array([0.82811134]), 'test_spearman_r': -0.03775241439859526, 'test_spearman_p_value': 0.8780504104591784, 'test_kendall_r': -0.02941176470588235, 'test_kendall_p_value': 0.860968267099983, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 696, 'regressor__learning_rate': 0.05034345798135088, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 32.5180055401662, 'test_ystd': 36.91696679946946, 'test_mae': 37.48326721486924, 'test_rmse': 43.4243713044724, 'test_r2': -0.3836143480542147, 'test_pearson_r': array([0.27603533]), 'test_pearson_p_value': array([0.25265466]), 'test_spearman_r': 0.32850244713874754, 'test_spearman_p_value': 0.16970095029846655, 'test_kendall_r': 0.24778868870453505, 'test_kendall_p_value': 0.140996936694086, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06333572781389038, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 32.5180055401662, 'test_ystd': 36.91696679946946, 'test_mae': 44.59924532077622, 'test_rmse': 51.902676196799284, 'test_r2': -0.9766395506425269, 'test_pearson_r': array([0.12908915]), 'test_pearson_p_value': array([0.59840276]), 'test_spearman_r': 0.14398595258999122, 'test_spearman_p_value': 0.5564720023120248, 'test_kendall_r': 0.08823529411764705, 'test_kendall_p_value': 0.5992876405087626, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1225, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 32.5180055401662, 'test_ystd': 36.91696679946946, 'test_mae': 34.96281080955436, 'test_rmse': 44.225916762973796, 'test_r2': -0.43516444467053295, 'test_pearson_r': array([0.09946965]), 'test_pearson_p_value': array([0.68536702]), 'test_spearman_r': 0.1633011413520632, 'test_spearman_p_value': 0.5041364896404678, 'test_kendall_r': 0.14705882352941174, 'test_kendall_p_value': 0.3811884344456903, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06726465713900281, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 32.5180055401662, 'test_ystd': 36.91696679946946, 'test_mae': 40.142622245249584, 'test_rmse': 47.479157288468215, 'test_r2': -0.6540703702069233, 'test_pearson_r': array([-0.01510427]), 'test_pearson_p_value': array([0.95106344]), 'test_spearman_r': 0.0052677787532923615, 'test_spearman_p_value': 0.9829242847132558, 'test_kendall_r': 0.017647058823529408, 'test_kendall_p_value': 0.9163083302399408, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1478, 'regressor__learning_rate': 0.05508286150221062, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 7, 6: {'fit_time': array([15.57214642, 14.20109868, 15.25926423, 14.55891919, 14.71463323,
       15.93459845, 15.98980665, 15.68504596, 15.13063693, 15.39191699,
       14.70058131, 13.91136193, 16.17062211, 15.81274343]), 'score_time': array([0.19109702, 0.20564008, 0.19855309, 0.19925332, 0.20358276,
       0.19671154, 0.19699955, 0.19027948, 0.19756317, 0.22063899,
       0.20786119, 0.21951652, 0.19910121, 0.21958327]), 'test_pearson_r': array([0.92331624, 0.99879697, 0.99347684, 0.99574747, 0.90362849,
       0.98201347, 0.83889898, 0.99566616, 0.98727378, 0.98136002,
       0.97374927, 0.9405731 , 0.98013662, 0.83599234]), 'test_pearson_p': array([-1.76000776e-08, -1.04640203e-23, -1.78839600e-17, -4.74667527e-19,
       -1.14643109e-07, -9.54625022e-14, -7.18642382e-06, -6.17253329e-18,
       -3.32424969e-14, -6.91226677e-13, -1.04426020e-11, -6.48506234e-09,
       -1.14502740e-12, -1.55196645e-05]), 'test_spearman_r': array([0.58358935, 0.94644425, 0.93684211, 0.92807018, 0.78421053,
       0.96709092, 0.66315789, 0.60020693, 0.92920008, 0.89886481,
       0.93753239, 0.74135271, 0.91219057, 0.93340229]), 'test_spearman_p': array([-8.71283021e-03, -9.01615581e-10, -3.54377793e-09, -1.03850543e-08,
       -7.06424516e-05, -1.54165421e-11, -1.96841596e-03, -8.45094220e-03,
       -2.53818954e-08, -3.99023672e-07, -9.57359643e-09, -4.30279224e-04,
       -1.34535861e-07, -1.57680662e-08]), 'test_kendall_r': array([0.45747997, 0.86470588, 0.80116959, 0.80116959, 0.68421053,
       0.87976918, 0.59064327, 0.45395719, 0.81852197, 0.76470588,
       0.8524636 , 0.62951158, 0.78291168, 0.82623395]), 'test_kendall_p': array([-6.32294770e-03, -2.61645931e-07, -4.67377304e-08, -4.67377304e-08,
       -1.01712688e-05, -1.51234358e-07, -2.23075840e-04, -8.86234276e-03,
       -2.51418949e-06, -8.04176944e-07, -8.32299419e-07, -2.73836334e-04,
       -6.36380428e-06, -1.78800684e-06]), 'test_rmse': array([-25.86999114,  -8.71270434, -29.8920776 , -20.0009194 ,
       -24.1197794 , -14.15001638, -34.57357843,  -9.2251961 ,
       -29.5427596 , -13.93795003, -24.08757692, -25.51281711,
       -14.48714291, -33.2729267 ]), 'test_mae': array([-15.91536135,  -6.82559829, -16.60870028, -13.99033922,
       -15.75484991,  -9.75212904, -17.23027259,  -6.84612958,
       -15.06317294, -10.45082055, -15.02518952, -16.15065949,
        -9.61177987, -19.16885246]), 'test_r2': array([0.84930223, 0.99743918, 0.97779548, 0.98904584, 0.80119645,
       0.96381735, 0.69448098, 0.98524306, 0.97397525, 0.96197103,
       0.94255746, 0.87935876, 0.95742588, 0.64917085]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 847, 'regressor__learning_rate': 0.08646479880356304, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([39.05859399, 39.13425398, 37.53797054, 37.06293249, 37.28732729,
       37.94250011, 38.79930687, 36.86256289, 38.83706594, 37.17251301,
       37.87303543, 38.67467451, 35.42595792, 38.33290815]), 'score_time': array([0.453897  , 0.44519877, 0.48327899, 0.4615078 , 0.46358371,
       0.48116279, 0.45182538, 0.46439648, 0.46727371, 0.46334529,
       0.50316811, 0.44152045, 0.46144819, 0.43792033]), 'test_pearson_r': array([0.97093125, 0.97954942, 0.98950904, 0.99318737, 0.98669589,
       0.90707033, 0.99524283, 0.95322042, 0.71102021, 0.98933319,
       0.98904766, 0.9681086 , 0.9515441 , 0.97050088]), 'test_pearson_p': array([-5.43996538e-12, -2.81941447e-13, -1.00160305e-15, -2.58416482e-17,
       -7.47352920e-15, -8.51757558e-08, -1.22917418e-18, -9.95333698e-10,
       -9.39606601e-04, -8.15022673e-15, -1.00592001e-14, -4.86802701e-11,
       -1.31214515e-09, -2.62851145e-11]), 'test_spearman_r': array([0.82967515, 0.84686274, 0.809482  , 0.76666667, 0.87319008,
       0.68245614, 0.94912281, 0.8791327 , 0.74406605, 0.93753239,
       0.9044916 , 0.84047507, 0.85758514, 0.90242655]), 'test_spearman_p': array([-1.11588151e-05, -4.80585345e-06, -2.68802515e-05, -1.28665057e-04,
       -1.06192496e-06, -1.28455051e-03, -5.88308946e-10, -1.55712511e-06,
       -3.99210544e-04, -9.57359643e-09, -2.57059539e-07, -1.26206448e-05,
       -5.38925995e-06, -3.03004867e-07]), 'test_kendall_r': array([0.67647059, 0.69208509, 0.62941176, 0.62573099, 0.73900611,
       0.62573099, 0.83625731, 0.74343714, 0.54248366, 0.8000043 ,
       0.81311912, 0.77377465, 0.73856209, 0.81311912]), 'test_kendall_p': array([-5.61912181e-05, -3.61461714e-05, -1.78226753e-04, -7.70690079e-05,
       -1.02950287e-05, -7.70690079e-05, -5.55516932e-09, -1.81645563e-05,
       -1.23061769e-03, -3.75687779e-06, -2.59896801e-06, -7.72097590e-06,
       -2.52158005e-06, -2.59896801e-06]), 'test_rmse': array([ -9.0384957 , -23.67445093, -28.68687663, -10.3803349 ,
       -30.14390203, -33.04790211, -18.36282363, -14.04578654,
       -35.49801534, -31.6897397 , -10.48597645, -24.25796614,
       -27.475517  , -20.67563912]), 'test_mae': array([ -6.42537735, -15.43114722, -15.98090118,  -6.32235601,
       -19.39822915, -15.99982868, -12.93731875, -10.38106646,
       -23.09246088, -17.54657086,  -6.53183272, -14.65300001,
       -18.32936023, -12.64858519]), 'test_r2': array([0.93780458, 0.92532448, 0.97670432, 0.98573121, 0.9723669 ,
       0.80287063, 0.98924782, 0.79315285, 0.42883577, 0.97461265,
       0.97778207, 0.87844746, 0.904444  , 0.92278316]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([37.5066781 , 40.32955551, 38.8634665 , 38.66615272, 37.63875556,
       39.11736202, 39.01702809, 38.97042489, 38.7159555 , 39.46836901,
       37.56423593, 39.12089539, 37.59362888, 37.44461536]), 'score_time': array([0.49390912, 0.46787238, 0.44491053, 0.44967198, 0.47510886,
       0.45157862, 0.47813582, 0.46413946, 0.46158385, 0.44038749,
       0.47812819, 0.4878087 , 0.46955156, 0.49847007]), 'test_pearson_r': array([0.9483222 , 0.98779608, 0.99440312, 0.99645518, 0.8655111 ,
       0.99531043, 0.92938199, 0.40944907, 0.97665205, 0.88963878,
       0.98111089, 0.96106131, 0.76034852, 0.98782027]), 'test_pearson_p': array([-6.69963213e-10, -3.60165736e-15, -4.88051866e-18, -1.01267460e-19,
       -1.70333616e-06, -1.08861545e-18, -8.92140389e-09, -9.15370199e-02,
       -4.12695455e-12, -7.78544754e-07, -7.68083718e-13, -2.35154048e-10,
       -2.49615768e-04, -2.34392317e-14]), 'test_spearman_r': array([0.90302773, 0.9161914 , 0.92982456, 0.97192982, 0.87757797,
       0.94164116, 0.92098367, 0.3126935 , 0.73657064, 0.71723426,
       0.93133724, 0.8043517 , 0.60990712, 0.95454596]), 'test_spearman_p': array([-1.20608197e-07, -3.65384910e-08, -8.47012219e-09, -4.05534963e-12,
       -7.99535237e-07, -1.84039565e-09, -2.25225113e-08, -2.06453642e-01,
       -4.89978013e-04, -8.07070649e-04, -1.99988229e-08, -5.72338464e-05,
       -7.19665859e-03, -7.94188165e-10]), 'test_kendall_r': array([0.76246662, 0.78592713, 0.83625731, 0.88304094, 0.7155456 ,
       0.84457841, 0.78236648, 0.28104575, 0.62501353, 0.56862745,
       0.83934877, 0.66454352, 0.55555556, 0.86186076]), 'test_kendall_p': array([-5.34143245e-06, -2.71955004e-06, -5.55516932e-09, -1.79983887e-10,
       -1.94725637e-05, -4.63085373e-07, -3.18078416e-06, -1.12417954e-01,
       -3.13893806e-04, -6.46804912e-04, -1.22329014e-06, -1.42803150e-04,
       -8.97111025e-04, -6.72597856e-07]), 'test_rmse': array([-22.11080811, -29.31626018, -28.01466454, -16.67323711,
       -21.17278546, -19.85664977, -26.87726731, -70.25870972,
       -25.50014279, -33.97237856, -18.03921185, -20.12988323,
       -33.57073156, -14.8972374 ]), 'test_mae': array([-14.83448681, -18.17271819, -18.59321115, -11.10422585,
       -12.8344167 , -11.98964105, -11.68496628, -39.91463263,
       -16.2755588 , -17.46112842, -12.74534719, -12.08799724,
       -16.44157934,  -8.16726373]), 'test_r2': array([ 0.89796227,  0.97139193,  0.98077343,  0.99234322,  0.7361799 ,
        0.98842017,  0.83520057, -2.78649778,  0.94034487,  0.74944231,
        0.95108727,  0.9152395 ,  0.55805649,  0.95944174]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([4.33405471, 5.27512908, 5.68221498, 5.11980391, 4.97442293,
       5.31638551, 4.24846983, 4.63925242, 5.47365665, 4.75252199,
       5.75323105, 5.35694408, 4.85105658, 5.01865339]), 'score_time': array([0.09101963, 0.08284163, 0.09217453, 0.08629537, 0.08728862,
       0.08570266, 0.09441352, 0.09747624, 0.08612514, 0.09813786,
       0.0903275 , 0.10358596, 0.08845639, 0.10003662]), 'test_pearson_r': array([0.96601734, 0.97440996, 0.99213587, 0.06596509, 0.97084168,
       0.99505084, 0.99561077, 0.95483887, 0.69185974, 0.92983651,
       0.98205403, 0.99029819, 0.94816778, 0.98786971]), 'test_pearson_p': array([-2.01792448e-11, -1.86295342e-12, -8.72244496e-17, -7.88463357e-01,
       -5.58239714e-12, -1.71944219e-18, -6.20852400e-19, -7.54858875e-10,
       -1.46744842e-03, -2.36612247e-08, -5.11371718e-13, -3.82847752e-15,
       -2.22509777e-09, -2.26922597e-14]), 'test_spearman_r': array([0.7809482 , 0.95263158, 0.94164116, 0.67023176, 0.83859649,
       0.91052632, 0.89600711, 0.94731456, 0.50362052, 0.68214654,
       0.96850813, 0.76676987, 0.85345717, 0.88648091]), 'test_spearman_p': array([-7.92936606e-05, -3.24364567e-10, -1.84039565e-09, -1.68922305e-03,
       -7.29399833e-06, -6.24664266e-08, -2.13172465e-07, -2.52870260e-09,
       -3.31066355e-02, -1.81708102e-03, -4.40654958e-11, -2.05354165e-04,
       -6.68154173e-06, -9.65676574e-07]), 'test_kendall_r': array([0.66470588, 0.87134503, 0.84457841, 0.59236403, 0.66081871,
       0.77777778, 0.72727585, 0.82238622, 0.33004918, 0.49019608,
       0.89180807, 0.55555556, 0.73856209, 0.79084967]), 'test_kendall_p': array([-7.55157152e-05, -4.58322529e-10, -4.63085373e-07, -5.27986278e-04,
       -2.38419293e-05, -1.64978258e-07, -1.41920797e-05, -2.12120439e-06,
       -5.75794253e-02, -3.93497845e-03, -2.53540670e-07, -8.97111025e-04,
       -2.52158005e-06, -2.29491225e-07]), 'test_rmse': array([ -20.89095233,  -16.26641612,  -10.81467695, -163.26122458,
        -17.26216007,  -27.78099752,  -17.22473238,  -19.86349638,
        -46.85507444,  -20.97741382,  -14.11734299,  -28.8703226 ,
        -22.78655122,  -35.9755446 ]), 'test_mae': array([-12.36242649, -10.6341221 ,  -7.16540898, -61.06595893,
       -10.37928931, -18.93277475, -13.8656325 , -11.37461292,
       -26.70085608, -13.36248455,  -9.21886368, -20.01289747,
       -15.38897327, -25.04091642]), 'test_r2': array([  0.90774314,   0.94651059,   0.98302667, -11.03112574,
         0.94192775,   0.98063999,   0.99073272,   0.90897225,
         0.38336938,   0.82482091,   0.95707806,   0.97645609,
         0.89656222,   0.96660725]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 340, 'regressor__learning_rate': 0.05364025344203419, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([33.66149735, 37.66259408, 36.87712288, 31.86577892, 35.04082799,
       35.27233267, 37.5785737 , 32.23304534, 35.37141633, 36.53497052,
       36.54786468, 36.31668854, 36.09685016, 37.38038373]), 'score_time': array([0.46379304, 0.5150485 , 0.42997813, 0.47059584, 0.4541564 ,
       0.44226289, 0.45760465, 0.48352242, 0.43178201, 0.41449809,
       0.42043877, 0.41833687, 0.42730117, 0.45317984]), 'test_pearson_r': array([0.98263137, 0.96231073, 0.97207214, 0.98705453, 0.96295897,
       0.97938398, 0.97346479, 0.59316492, 0.99397679, 0.98815164,
       0.79845629, 0.93298871, 0.79302849, 0.99911887]), 'test_pearson_p': array([-7.10713761e-14, -4.80380563e-11, -3.88574596e-12, -5.93161804e-15,
       -4.15431822e-11, -3.01757454e-13, -2.52754014e-12, -9.46734346e-03,
       -8.54702122e-17, -1.88172872e-14, -7.11432848e-05, -1.65467779e-08,
       -8.63908309e-05, -1.82163761e-23]), 'test_spearman_r': array([0.68656743, 0.8646762 , 0.58585864, 0.92496718, 0.82280702,
       0.94035088, 0.89473684, 0.62809917, 0.89152893, 0.7620032 ,
       0.78346347, 0.91744066, 0.6119711 , 0.95459236]), 'test_spearman_p': array([-1.16819720e-03, -1.79002079e-06, -8.39377726e-03, -1.47114304e-08,
       -1.52325850e-05, -2.20654144e-09, -2.35296190e-07, -5.25058067e-03,
       -6.82238920e-07, -2.37506309e-04, -1.20031087e-04, -8.35580353e-08,
       -6.95027471e-03, -7.87841526e-10]), 'test_kendall_r': array([0.52353847, 0.7197922 , 0.46607872, 0.79765739, 0.64912281,
       0.8128655 , 0.75438596, 0.49342105, 0.71710526, 0.53770781,
       0.6865023 , 0.77777778, 0.55555556, 0.85620915]), 'test_kendall_p': array([-1.82370893e-03, -1.88707169e-05, -5.62409459e-03, -1.92681603e-06,
       -3.57225177e-05, -2.37852170e-08, -5.24238695e-07, -4.44255379e-03,
       -3.55594727e-05, -1.88229380e-03, -7.88772577e-05, -4.36097754e-07,
       -8.97111025e-04, -5.28843419e-09]), 'test_rmse': array([-13.41236148, -21.56911836, -12.34371828, -31.66600805,
       -22.77485597, -20.14270699, -20.09977544, -40.127127  ,
       -37.37462214, -15.17715523, -34.26273789, -29.25429878,
       -28.17620214,  -8.02097001]), 'test_mae': array([ -9.47209526, -11.48858626,  -8.96733688, -23.39722171,
       -15.48103885, -13.57592366, -11.59535153, -24.93950403,
       -23.3894232 ,  -9.68609588, -16.33592121, -20.6958059 ,
       -15.45786222,  -5.74253884]), 'test_r2': array([ 0.96516269,  0.92271705,  0.92431605,  0.97168299,  0.90758318,
        0.95378806,  0.93978913, -0.22937368,  0.97768099,  0.97341594,
        0.60460365,  0.85417138,  0.55121862,  0.99804169]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.028964705454563932, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([1.48742604, 1.52711821, 1.58588958, 1.51927829, 1.69403934,
       1.51831698, 1.54134059, 1.50396109, 1.5246079 , 1.50254202,
       1.52943659, 1.51848936, 1.51131773, 1.52118039]), 'score_time': array([0.04270363, 0.04166842, 0.03892756, 0.04146838, 0.0482688 ,
       0.04085183, 0.04561257, 0.04222178, 0.04161954, 0.04127312,
       0.04217219, 0.0424192 , 0.04161239, 0.0413456 ]), 'test_pearson_r': array([0.94177249, 0.80203219, 0.98220585, 0.98896969, 0.96081096,
       0.98881687, 0.98124122, 0.91719244, 0.9724597 , 0.99248815,
       0.98285669, 0.91490838, 0.96916852, 0.99130711]), 'test_pearson_p': array([-1.80630303e-09, -3.62440019e-05, -8.71805720e-14, -1.53099580e-15,
       -6.65906470e-11, -1.72006159e-15, -1.36108284e-13, -8.55206978e-08,
       -1.52638953e-11, -4.97906317e-16, -3.55509059e-13, -1.05538217e-07,
       -3.72709298e-11, -1.59546031e-15]), 'test_spearman_r': array([0.71052632, 0.71578947, 0.88498717, 0.86819115, 0.68421053,
       0.91180351, 0.87368421, 0.84555785, 0.78328173, 0.93078562,
       0.9876161 , 0.6208681 , 0.89095714, 0.78328173]), 'test_spearman_p': array([-6.51267265e-04, -5.68469114e-04, -4.82754481e-07, -1.44919349e-06,
       -1.23376773e-03, -5.55270265e-08, -1.02906059e-06, -9.90641369e-06,
       -1.20764516e-04, -2.12832630e-08, -2.67561271e-14, -5.96503699e-03,
       -7.10222202e-07, -1.20764516e-04]), 'test_kendall_r': array([0.59064327, 0.53216374, 0.72354193, 0.7197922 , 0.50877193,
       0.73900611, 0.75438596, 0.67763158, 0.58169935, 0.82238622,
       0.94771242, 0.48027355, 0.7657141 , 0.67320261]), 'test_kendall_p': array([-2.23075840e-04, -1.06332219e-03, -1.64363930e-05, -1.88707169e-05,
       -1.86192384e-03, -1.02950287e-05, -5.24238695e-07, -9.34513479e-05,
       -4.60994225e-04, -2.12120439e-06, -1.81026609e-12, -5.62203808e-03,
       -1.06616678e-05, -2.96712369e-05]), 'test_rmse': array([-23.03043412, -39.14115715, -19.80332828, -10.53689441,
       -14.41935501, -35.18346294, -14.37406721, -20.57871671,
       -12.26076689, -21.89760547, -16.50028226, -32.81757532,
       -27.50855859, -38.40612309]), 'test_mae': array([-15.70537312, -24.022737  , -11.79635746,  -6.78270601,
        -8.93495558, -22.43811783, -10.47006836, -11.97613584,
        -9.17558937, -13.42409962, -12.02808874, -18.21551281,
       -17.98113458, -25.52174907]), 'test_r2': array([0.8843886 , 0.51844857, 0.95365966, 0.97715873, 0.88153369,
       0.96924262, 0.96147714, 0.81351562, 0.93970753, 0.98499397,
       0.95393144, 0.7941164 , 0.88510177, 0.97734816]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 120, 'regressor__learning_rate': 0.08368993146198392, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([32.45525074, 36.70247769, 36.04017949, 33.58865523, 35.42360091,
       33.8381815 , 33.91378641, 34.85322905, 34.53697538, 34.74041295,
       35.87743402, 28.91249132, 36.03247237, 33.89879489]), 'score_time': array([0.48259282, 0.42197251, 0.47064066, 0.4413383 , 0.46479106,
       0.44303751, 0.47845936, 0.43398476, 0.4309938 , 0.42869616,
       0.42026663, 0.52977419, 0.42709446, 0.47992325]), 'test_pearson_r': array([0.99432274, 0.9772723 , 0.99412325, 0.96813924, 0.73813416,
       0.98992354, 0.92248011, 0.99146365, 0.84234953, 0.9679785 ,
       0.97824117, 0.96767934, 0.95267936, 0.99773251]), 'test_pearson_p': array([-5.50788627e-18, -6.86332407e-13, -7.38209345e-18, -1.17497578e-11,
       -3.08371079e-04, -7.12021764e-16, -1.92437214e-08, -1.38026447e-15,
       -1.15537449e-05, -5.02712215e-11, -2.35988890e-12, -5.41025630e-11,
       -1.08937559e-09, -3.48843925e-20]), 'test_spearman_r': array([0.71522605, 0.60105541, 0.91787519, 0.8205354 , 0.63448887,
       0.96315789, 0.77490135, 0.77066157, 0.84460517, 0.96384349,
       0.89003626, 0.95252838, 0.9380805 , 0.89060888]), 'test_spearman_p': array([-5.76884924e-04, -6.49282785e-03, -3.09293167e-08, -1.68355149e-05,
       -3.52326103e-03, -3.97114834e-11, -9.77390424e-05, -1.81904292e-04,
       -1.03730949e-05, -1.31102802e-10, -7.57373444e-07, -1.11695903e-09,
       -8.93749440e-09, -7.27747371e-07]), 'test_kendall_r': array([0.6099733 , 0.54279412, 0.81419117, 0.66862458, 0.57478253,
       0.85964912, 0.59824304, 0.63817171, 0.68197088, 0.87501894,
       0.77377465, 0.85620915, 0.80392157, 0.79084967]), 'test_kendall_p': array([-2.71868003e-04, -1.25568618e-03, -1.31881393e-06, -6.58512835e-05,
       -6.02056607e-04, -1.10425357e-09, -3.56009163e-04, -2.33765259e-04,
       -8.07679747e-05, -4.53574602e-07, -7.72097590e-06, -5.28843419e-09,
       -1.16879681e-07, -2.29491225e-07]), 'test_rmse': array([-20.64726504, -42.8124018 , -19.42600325, -12.36783179,
       -40.83376521, -14.4181578 , -21.67281253, -12.32250144,
       -34.50164265, -21.85782446, -24.97718497, -23.78174195,
       -20.47799698, -26.7821852 ]), 'test_mae': array([-12.35358575, -20.09685262, -10.59364717,  -7.96391623,
       -23.70718837,  -9.04513927, -15.59522956,  -8.86436107,
       -21.20275343, -15.23660136, -14.96448826, -16.86873166,
       -12.75575332, -13.85165473]), 'test_r2': array([0.98541267, 0.94924116, 0.98780914, 0.93441742, 0.42349394,
       0.97680992, 0.80153255, 0.97781832, 0.6879684 , 0.92833055,
       0.93642802, 0.93013383, 0.86764564, 0.98299636]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.028401359943730515, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_4': {'cluster size (%)': 30, 6: {'test_mad': 34.698835891381336, 'test_ystd': 43.62393148250803, 'test_mae': 78.24863937770068, 'test_rmse': 99.20246479993101, 'test_r2': -4.171247459612874, 'test_pearson_r': array([-0.57747622]), 'test_pearson_p_value': array([3.83543435e-08]), 'test_spearman_r': -0.5829673240326433, 'test_spearman_p_value': 2.6517958699754114e-08, 'test_kendall_r': -0.4102799489665572, 'test_kendall_p_value': 1.6272887257795484e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.021603594412305308, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 34.698835891381336, 'test_ystd': 43.62393148250803, 'test_mae': 77.13001896602097, 'test_rmse': 95.1184870389522, 'test_r2': -3.754230812187169, 'test_pearson_r': array([-0.51782365]), 'test_pearson_p_value': array([1.41432894e-06]), 'test_spearman_r': -0.5862398145960208, 'test_spearman_p_value': 2.121319988113109e-08, 'test_kendall_r': -0.42136545357000854, 'test_kendall_p_value': 7.342678178221689e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 922, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 34.698835891381336, 'test_ystd': 43.62393148250803, 'test_mae': 76.87070923549327, 'test_rmse': 94.67200433909231, 'test_r2': -3.709703192387642, 'test_pearson_r': array([-0.51706127]), 'test_pearson_p_value': array([1.47463527e-06]), 'test_spearman_r': -0.5707607109925635, 'test_spearman_p_value': 5.968561718210381e-08, 'test_kendall_r': -0.41102942445545393, 'test_kendall_p_value': 1.5165098252397638e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 34.698835891381336, 'test_ystd': 43.62393148250803, 'test_mae': 74.85537070692642, 'test_rmse': 94.55784289188068, 'test_r2': -3.698351529135148, 'test_pearson_r': array([-0.54717309]), 'test_pearson_p_value': array([2.61615223e-07]), 'test_spearman_r': -0.5823387890352762, 'test_spearman_p_value': 2.767170032449911e-08, 'test_kendall_r': -0.41951612162397084, 'test_kendall_p_value': 8.493132794204787e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 967, 'regressor__learning_rate': 0.05253822771624642, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 34.698835891381336, 'test_ystd': 43.62393148250803, 'test_mae': 77.71898070059814, 'test_rmse': 96.6880827590816, 'test_r2': -3.9124290637733283, 'test_pearson_r': array([-0.57933232]), 'test_pearson_p_value': array([3.38819556e-08]), 'test_spearman_r': -0.6200237248400623, 'test_spearman_p_value': 1.8191060327275253e-09, 'test_kendall_r': -0.44560128303046387, 'test_kendall_p_value': 1.2960530902486707e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1157, 'regressor__learning_rate': 0.005759229381917915, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 34.698835891381336, 'test_ystd': 43.62393148250803, 'test_mae': 75.76331257070127, 'test_rmse': 94.16654047286671, 'test_r2': -3.6595462383076454, 'test_pearson_r': array([-0.50548905]), 'test_pearson_p_value': array([2.74546569e-06]), 'test_spearman_r': -0.5825048397248384, 'test_spearman_p_value': 2.7362344663541177e-08, 'test_kendall_r': -0.4206763849623716, 'test_kendall_p_value': 7.710499438050575e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 34.698835891381336, 'test_ystd': 43.62393148250803, 'test_mae': 67.2345926233842, 'test_rmse': 86.604465635297, 'test_r2': -2.9412226284510874, 'test_pearson_r': array([-0.53911332]), 'test_pearson_p_value': array([4.22543804e-07]), 'test_spearman_r': -0.5496367310297269, 'test_spearman_p_value': 2.2538497531293745e-07, 'test_kendall_r': -0.39145872486740646, 'test_kendall_p_value': 5.741134074903238e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 56, 'regressor__learning_rate': 0.0727880237480246, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_4': {'cluster size (%)': 33, 6: {'fit_time': array([28.96764708, 32.13446379, 30.09866095]), 'score_time': array([0.75147724, 0.72919488, 0.72993064]), 'test_pearson_r': array([0.91504345, 0.97156657, 0.93466745]), 'test_pearson_p': array([-2.86421758e-35, -2.47541682e-54, -1.73792802e-39]), 'test_spearman_r': array([0.76519188, 0.86341612, 0.77162011]), 'test_spearman_p': array([-6.20412835e-18, -1.09741264e-26, -3.49085200e-18]), 'test_kendall_r': array([0.64049407, 0.73229271, 0.62397232]), 'test_kendall_p': array([-1.89412892e-18, -2.51506088e-23, -2.12662702e-17]), 'test_rmse': array([-76.2977711 , -24.99735875, -28.09179217]), 'test_mae': array([-29.61852345, -13.14748856, -16.41439335]), 'test_r2': array([0.76842908, 0.94366965, 0.86929262]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([33.11785293, 32.61892676, 32.63597178]), 'score_time': array([0.84412193, 0.81304479, 0.8543961 ]), 'test_pearson_r': array([0.92991643, 0.97027863, 0.97821161]), 'test_pearson_p': array([-1.09852181e-38, -1.55006169e-53, -3.95147359e-59]), 'test_spearman_r': array([0.7072256 , 0.810515  , 0.87740044]), 'test_spearman_p': array([-1.91231640e-14, -3.25821860e-21, -1.58393471e-28]), 'test_kendall_r': array([0.56074047, 0.66867924, 0.74032728]), 'test_kendall_p': array([-1.75797400e-14, -9.47250804e-20, -8.11681477e-24]), 'test_rmse': array([-43.61044856, -32.9176384 , -25.6319686 ]), 'test_mae': array([-20.77394643, -18.33754485, -16.31449345]), 'test_r2': array([0.84866471, 0.93448027, 0.95122996]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07540306728284818, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([37.14065003, 35.55000138, 34.60924459]), 'score_time': array([0.86407375, 0.87210083, 0.85664368]), 'test_pearson_r': array([0.98222821, 0.66276625, 0.93892726]), 'test_pearson_p': array([-1.53520041e-63, -3.62186978e-12, -1.11783082e-40]), 'test_spearman_r': array([0.89251913, 0.75105679, 0.83049732]), 'test_spearman_p': array([-3.88917022e-31, -8.20042729e-17, -4.67997908e-23]), 'test_kendall_r': array([0.74996706, 0.62340612, 0.67941188]), 'test_kendall_p': array([-1.00051022e-24, -2.33782022e-17, -2.95805021e-20]), 'test_rmse': array([ -37.1619603 , -110.63363693,  -24.55311564]), 'test_mae': array([-20.65680285, -32.16168886, -14.38323373]), 'test_r2': array([ 0.9451544 , -0.02487919,  0.88050907]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([15.22153997, 13.31192446, 12.52935195]), 'score_time': array([0.42616105, 0.43465257, 0.42816186]), 'test_pearson_r': array([0.59159752, 0.94084633, 0.95005084]), 'test_pearson_p': array([-1.60053011e-09, -3.04225814e-41, -3.02225448e-44]), 'test_spearman_r': array([0.81114291, 0.84043216, 0.81074069]), 'test_spearman_p': array([-1.67090918e-21, -4.59480455e-24, -3.11457346e-21]), 'test_kendall_r': array([0.6748436 , 0.6881617 , 0.66493191]), 'test_kendall_p': array([-3.66183282e-20, -8.26475986e-21, -1.39082547e-19]), 'test_rmse': array([-72.9289392 , -48.47481758, -44.64893637]), 'test_mae': array([-22.6926372 , -23.89951975, -21.70197785]), 'test_r2': array([-0.19603394,  0.8771572 ,  0.89391959]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 993, 'regressor__learning_rate': 0.028020011994866208, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([31.54360271, 32.53427768, 35.04634762]), 'score_time': array([0.86073661, 0.83377624, 0.84743166]), 'test_pearson_r': array([0.97977215, 0.9742678 , 0.95589797]), 'test_pearson_p': array([-3.57792426e-61, -3.95046271e-56, -1.82566628e-46]), 'test_spearman_r': array([0.78962913, 0.76470505, 0.86593668]), 'test_spearman_p': array([-1.01130561e-19, -1.04581864e-17, -5.29713595e-27]), 'test_kendall_r': array([0.63625689, 0.62690256, 0.72847054]), 'test_kendall_p': array([-3.47544642e-18, -1.49371758e-17, -3.84487285e-23]), 'test_rmse': array([-22.45321277, -31.83214699, -31.30162344]), 'test_mae': array([-14.25772408, -17.531527  , -16.24558605]), 'test_r2': array([0.95980016, 0.94637856, 0.9131759 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([28.9722662 , 30.94090939, 33.92374444]), 'score_time': array([0.83783865, 0.8387289 , 0.81529522]), 'test_pearson_r': array([0.92284729, 0.91864286, 0.8828197 ]), 'test_pearson_p': array([-5.62389688e-37, -1.24969412e-35, -2.66119796e-29]), 'test_spearman_r': array([0.83671416, 0.81385837, 0.76663669]), 'test_spearman_p': array([-6.07214936e-24, -1.66031420e-21, -7.72674084e-18]), 'test_kendall_r': array([0.66157257, 0.60159071, 0.62621373]), 'test_kendall_p': array([-1.52455106e-19, -2.74048396e-16, -2.06765818e-17]), 'test_rmse': array([-29.60210472, -45.80776244, -76.4330942 ]), 'test_mae': array([-18.30170866, -27.7581819 , -29.67154753]), 'test_r2': array([0.8298198 , 0.8337125 , 0.76256346]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.02557553785453624, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([5.18123293, 6.46650386, 7.36687922]), 'score_time': array([0.20354033, 0.19896793, 0.21037245]), 'test_pearson_r': array([0.97352707, 0.7402817 , 0.95399094]), 'test_pearson_p': array([-2.91238087e-56, -3.80335691e-16, -1.03904800e-45]), 'test_spearman_r': array([0.6791315 , 0.80079451, 0.92751976]), 'test_spearman_p': array([-4.82335069e-13, -2.14958685e-20, -1.17366631e-37]), 'test_kendall_r': array([0.56101943, 0.67773938, 0.7701804 ]), 'test_kendall_p': array([-2.02305170e-14, -3.23368542e-20, -1.04606234e-25]), 'test_rmse': array([-37.40678284, -58.75786351, -39.06938249]), 'test_mae': array([-17.06539903, -21.7069117 , -21.09003061]), 'test_r2': array([0.93693497, 0.37397729, 0.89565969]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 438, 'regressor__learning_rate': 0.05497913305607285, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 522)}}
Trimer_scaler
Filename: (ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM5 polymer_solvent HSP and polysize cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM5 polymer_solvent HSP and polysize cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM5 polymer_solvent HSP and polysize cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c023n03>
Subject: Job 294634: <NGB_Rg1 (nm)_ECFP_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250311> in cluster <Hazel> Done

Job <NGB_Rg1 (nm)_ECFP_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250311> was submitted from host <c040n04> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 18:16:47 2025
Job was executed on host(s) <6*c023n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 00:50:21 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 00:50:21 2025
Terminated at Fri Mar 14 16:04:27 2025
Results reported at Fri Mar 14 16:04:27 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_Rg1 (nm)_ECFP_Trimer_KM5 polymer_solvent HSP and polysize cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_KM5 polymer_solvent HSP and polysize cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_KM5 polymer_solvent HSP and polysize cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "Rg1 (nm)"                                       --representation "ECFP"                                       --regressor_type "NGB"                                       --radius "3"                                       --vector "count"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM5 polymer_solvent HSP and polysize cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   992333.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.63 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   1 GB
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   227646 sec.
    Turnaround time :                            251260 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_KM5 polymer_solvent HSP and polysize cluster_20250311.err> for stderr output of this job.

