


-------------------------------------------------- 
OOD TEST ON Fluorene



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04925593534981647), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 878), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00015022253705905997), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01430744700354727), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 407), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030720950811491506), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1952), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00030090996885988937), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 486), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 125), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04779844302625236), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 211), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09439206792565193), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 860), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 251), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032095968696176605), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 145), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03396501915971602), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 668), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04032475750515942), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1046), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02910088562104919), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1269), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.788527313211385e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 120), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05226373265033474), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 789), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026205902323635344), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 906), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 304), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 327), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07143494781351954), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1213), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.097762847930832e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09403018906327586), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1133), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3686991419090793e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1126), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05338449168749024), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5951096983155946e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06869601138844282), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 711), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03298138377405091), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1132), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09920030467288685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.127233469667103e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1447), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07087204944980376), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01976907640805149), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 522), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022150896284237782), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 221), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 444), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 105), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06725318045176866), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02685224784403215), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03440693337510717), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09732995427776636), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1885), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.452907235207343e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01667599390675964), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 163), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 602), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 558), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 81), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07063595802548212), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 185), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 398), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 811), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 635), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03752398836353413), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 72), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 763), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 83), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08472443219568657), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 435), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.13042711953317e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05306277141477398), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 167), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07441640476411109), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07873395049105522), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 544), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON PPV



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 135), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01037625704824992), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 59), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038282899102252604), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 238), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032158864573367175), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016314232594625826), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1441), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1544), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020878307705720054), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 749), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 65), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00020875011915058507), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.043091720341206834), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 327), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09330883592807893), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.7770850552039513e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01942633927253802), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09335546765172036), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 736), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0995623119698446e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 140), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08255061233016991), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 833), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09845883013253116), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 150), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002444742177018896), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04072677000304303), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 296), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04647793524801957), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1066), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016154351417855532), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06183946265419233), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06139249051059341), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03356745159149531), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.8893193940290107e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038440949131043366), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09998721538949915), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 105), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.92191756834181e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06661134392338754), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021691467900255765), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038442591635803484), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08350944757753417), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 233), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.063068357215835), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 303), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08449167400698888), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09129599557071383), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016665491733384503), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07498472228406572), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05361693749339715), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08042068928291965), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 594), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012691124921700785), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0764279914509135), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 607), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008170720505784054), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 172), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 218), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 337), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 129), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07360567583235392), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 661), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07746745617650797), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON Thiophene



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 233), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019643280961885643), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1056), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020220469310038954), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 919), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 173), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0929827512131165), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1993), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1280217484176249e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0360614635627279), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 194), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 501), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030830445890258452), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 944), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009525629383850548), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013707312696353785), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013698912108366745), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03626966347804673), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 689), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 393), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034359692762865046), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 961), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 191), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1313), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 723), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08984911676444389), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 89), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007420861304258432), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.035592718880612786), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 293), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07405734923310998), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1380), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.232768948467971e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05449777796603629), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1496), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.559459867873775e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06118761130755976), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 189), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001535645363372046), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1492), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02291095560280783), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1118), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05502615065149096), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 356), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020198757644655698), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1149), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05746996737164005), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05273339058505901), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009744738742293396), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07023373020294442), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 533), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03513303210654899), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 774), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011110027324239711), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1250), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 484), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03085619880193843), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023715859454151486), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 558), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.816369540863739e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 107), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1162), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06409092973818582), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06259186163705488), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007379901635575997), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013116703579442123), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06758780168963512), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 340), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028948064702719174), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019796879304210296), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1040), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.062409465937345074), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1178), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026610651131807397), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 969), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 341), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06258330416987665), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07319667091251598), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061486753805713786), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])


{'CO_Fluorene': {'cluster size (%)': 27, 6: {'test_mad': 74.764036897441, 'test_ystd': 84.30178657836092, 'test_mae': 130.9726685842146, 'test_rmse': 172.73706136581572, 'test_r2': -3.1985322833253687, 'test_pearson_r': array([-0.39715443]), 'test_pearson_p_value': array([0.00060517]), 'test_spearman_r': -0.5304121945348323, 'test_spearman_p_value': 1.9588339960994157e-06, 'test_kendall_r': -0.36934022626136087, 'test_kendall_p_value': 5.799214840824406e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 407, 'regressor__learning_rate': 0.01430744700354727, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 74.764036897441, 'test_ystd': 84.30178657836092, 'test_mae': 128.59546958639956, 'test_rmse': 169.5790755330656, 'test_r2': -3.0464201025763407, 'test_pearson_r': array([-0.38780509]), 'test_pearson_p_value': array([0.00083327]), 'test_spearman_r': -0.499195016076191, 'test_spearman_p_value': 9.365092448090093e-06, 'test_kendall_r': -0.35662501163516186, 'test_kendall_p_value': 1.164808191047365e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 860, 'regressor__learning_rate': 0.09439206792565193, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 74.764036897441, 'test_ystd': 84.30178657836092, 'test_mae': 153.68182697695195, 'test_rmse': 202.98575166384896, 'test_r2': -4.797724191027815, 'test_pearson_r': array([-0.42853545]), 'test_pearson_p_value': array([0.0001927]), 'test_spearman_r': -0.5605667177483236, 'test_spearman_p_value': 3.697316450298099e-07, 'test_kendall_r': -0.39652318306896994, 'test_kendall_p_value': 1.1604827606321747e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 327, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 74.764036897441, 'test_ystd': 84.30178657836092, 'test_mae': 126.56849275145045, 'test_rmse': 172.68805589149403, 'test_r2': -3.1961503754869254, 'test_pearson_r': array([-0.36378864]), 'test_pearson_p_value': array([0.00181757]), 'test_spearman_r': -0.41348687546576646, 'test_spearman_p_value': 0.0003382739666534379, 'test_kendall_r': -0.29963851929789703, 'test_kendall_p_value': 0.0002336365517059415, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1126, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 74.764036897441, 'test_ystd': 84.30178657836092, 'test_mae': 136.59306610966416, 'test_rmse': 183.94953555621993, 'test_r2': -3.7612812283943686, 'test_pearson_r': array([-0.3812207]), 'test_pearson_p_value': array([0.00103803]), 'test_spearman_r': -0.5320139388968957, 'test_spearman_p_value': 1.8000292814135396e-06, 'test_kendall_r': -0.3855216162399528, 'test_kendall_p_value': 2.2209507264815194e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 221, 'regressor__learning_rate': 0.022150896284237782, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 74.764036897441, 'test_ystd': 84.30178657836092, 'test_mae': 148.68817112330376, 'test_rmse': 206.4697209750676, 'test_r2': -4.9984519536373355, 'test_pearson_r': array([-0.3893485]), 'test_pearson_p_value': array([0.00079092]), 'test_spearman_r': -0.5577484929617146, 'test_spearman_p_value': 4.351161405719886e-07, 'test_kendall_r': -0.3949030679185349, 'test_kendall_p_value': 1.2827899031848975e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 602, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 74.764036897441, 'test_ystd': 84.30178657836092, 'test_mae': 161.47668862694425, 'test_rmse': 241.4389213351528, 'test_r2': -7.202401186198429, 'test_pearson_r': array([-0.35770934]), 'test_pearson_p_value': array([0.00219398]), 'test_spearman_r': -0.5743719822546396, 'test_spearman_p_value': 1.6286692213767918e-07, 'test_kendall_r': -0.4271919170230087, 'test_kendall_p_value': 1.6879364512028e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 83, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_Fluorene': {'cluster size (%)': 25, 6: {'fit_time': array([53.19657302, 53.5732305 , 53.44271302, 52.72937822]), 'score_time': array([0.9919045 , 0.96388984, 0.95256782, 1.02300835]), 'test_pearson_r': array([0.99006538, 0.98474501, 0.98417157, 0.95738179]), 'test_pearson_p': array([-2.13467436e-55, -1.45273825e-49, -4.60571981e-49, -3.81667510e-35]), 'test_spearman_r': array([0.78518258, 0.89159391, 0.82100156, 0.84208599]), 'test_spearman_p': array([-9.76570744e-15, -2.36016200e-23, -5.59182328e-17, -2.82840976e-18]), 'test_kendall_r': array([0.64345372, 0.77507838, 0.66328981, 0.6749575 ]), 'test_kendall_p': array([-4.86096457e-14, -7.44823764e-20, -7.17962770e-15, -3.72807101e-15]), 'test_rmse': array([-22.25691878, -20.89753296, -21.12064579, -22.07676847]), 'test_mae': array([-12.28399151, -12.88580961, -13.77134994, -13.51585057]), 'test_r2': array([0.97861385, 0.96897108, 0.96711339, 0.91567066]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([32.67362213, 32.13706088, 32.76120734, 34.2104733 ]), 'score_time': array([0.60343885, 0.59013224, 0.59899282, 0.59591079]), 'test_pearson_r': array([0.92053375, 0.97839768, 0.97462074, 0.91950311]), 'test_pearson_p': array([-2.08380825e-27, -7.59228899e-45, -1.14863682e-42, -7.89248149e-27]), 'test_spearman_r': array([0.69985136, 0.83291254, 0.86000331, 0.8675543 ]), 'test_spearman_p': array([-8.76742715e-11, -7.73999604e-18, -4.53018193e-20, -1.80358908e-20]), 'test_kendall_r': array([0.53948336, 0.72675172, 0.67824796, 0.73129616]), 'test_kendall_p': array([-2.51773535e-10, -1.60368746e-17, -1.68420128e-15, -1.54274101e-17]), 'test_rmse': array([-50.48357027, -31.87769571, -27.49437354, -30.45029321]), 'test_mae': array([-23.25513643, -15.64820053, -17.04669766, -18.67246698]), 'test_r2': array([0.82225475, 0.95437353, 0.94591578, 0.8380807 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1269, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([52.83012176, 52.50506306, 54.21310949, 54.45758677]), 'score_time': array([0.95506954, 0.94596934, 0.94875908, 0.93471384]), 'test_pearson_r': array([0.98665336, 0.98929537, 0.89765815, 0.91729504]), 'test_pearson_p': array([-2.21954694e-51, -2.21622133e-54, -4.23042064e-24, -1.76623843e-26]), 'test_spearman_r': array([0.9011431 , 0.86364928, 0.78081626, 0.795451  ]), 'test_spearman_p': array([-1.49936026e-24, -2.08997991e-20, -1.71309626e-14, -4.10792003e-15]), 'test_kendall_r': array([0.76337429, 0.71930703, 0.62967843, 0.66268463]), 'test_kendall_p': array([-2.97988121e-19, -2.69859264e-17, -1.45999265e-13, -1.37213980e-14]), 'test_rmse': array([-26.5015577 , -22.08744971, -33.49261817, -29.32911   ]), 'test_mae': array([-17.28323726, -13.08226811, -17.28306799, -14.35224439]), 'test_r2': array([0.96968865, 0.97816271, 0.78750142, 0.83804211]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([27.91961503, 27.31321621, 29.17013788, 28.12086582]), 'score_time': array([0.53249288, 0.54131413, 0.53728056, 0.5238266 ]), 'test_pearson_r': array([0.97369934, 0.93789736, 0.90548437, 0.94567808]), 'test_pearson_p': array([-3.48383836e-42, -1.15177685e-30, -3.89712331e-25, -5.92762748e-32]), 'test_spearman_r': array([0.87150937, 0.69937604, 0.78564404, 0.78983881]), 'test_spearman_p': array([-3.64486974e-21, -9.14052633e-11, -9.19555149e-15, -8.68583230e-15]), 'test_kendall_r': array([0.71090997, 0.57934025, 0.61393995, 0.68521792]), 'test_kendall_p': array([-8.93760496e-17, -9.66468380e-12, -5.64347341e-13, -1.34465863e-15]), 'test_rmse': array([-17.10566611, -55.07208536, -28.11060615, -50.54182218]), 'test_mae': array([-11.01130781, -25.70619525, -16.04644305, -24.28796726]), 'test_r2': array([0.94312875, 0.87106155, 0.81133898, 0.8902304 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1132, 'regressor__learning_rate': 0.03298138377405091, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([53.03954554, 51.57204461, 54.94861293, 55.16689539]), 'score_time': array([0.90214157, 0.93595767, 0.88890624, 0.88261843]), 'test_pearson_r': array([0.98519832, 0.97153878, 0.97714826, 0.96299631]), 'test_pearson_p': array([-5.65514865e-50, -4.05546875e-41, -4.37987297e-44, -5.19921621e-37]), 'test_spearman_r': array([0.73010463, 0.89910944, 0.70076074, 0.84323446]), 'test_spearman_p': array([-5.16920105e-12, -2.75918677e-24, -8.09369862e-11, -2.29664898e-18]), 'test_kendall_r': array([0.58860893, 0.76967511, 0.58232908, 0.73563974]), 'test_kendall_p': array([-5.05472239e-12, -1.38737066e-19, -8.47206280e-12, -1.03000272e-17]), 'test_rmse': array([-20.8761502 , -23.055744  , -32.48616135, -30.2612795 ]), 'test_mae': array([-12.45277134, -14.8106001 , -18.32518595, -15.42803084]), 'test_r2': array([0.96937425, 0.92814538, 0.95405329, 0.92478682]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([3.66224504, 3.79432964, 3.64447713, 3.99116802]), 'score_time': array([0.10085773, 0.10125351, 0.10401011, 0.1042223 ]), 'test_pearson_r': array([0.90926947, 0.97448416, 0.98238062, 0.93245491]), 'test_pearson_p': array([-1.14029230e-25, -1.35744155e-42, -1.31257332e-47, -4.17012750e-29]), 'test_spearman_r': array([0.8487226 , 0.77876493, 0.86702221, 0.73398535]), 'test_spearman_p': array([-4.35076469e-19, -2.22095133e-14, -1.00135150e-20, -5.18982585e-12]), 'test_kendall_r': array([0.67629411, 0.57156686, 0.69623988, 0.60150374]), 'test_kendall_p': array([-1.79176939e-15, -1.87358116e-11, -2.91093030e-16, -2.73659010e-12]), 'test_rmse': array([-31.50670659, -28.27930486, -20.7012342 , -57.60900921]), 'test_mae': array([-20.60924763, -16.22151763, -13.82729598, -28.32601428]), 'test_r2': array([0.81218217, 0.94823542, 0.96317865, 0.86290722]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 185, 'regressor__learning_rate': 0.07063595802548212, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([13.4043479 , 12.24657631, 13.67019796, 13.80077767]), 'score_time': array([0.26999593, 0.270715  , 0.27204204, 0.27313542]), 'test_pearson_r': array([0.98226991, 0.91660814, 0.96271045, 0.97651276]), 'test_pearson_p': array([-1.59623814e-47, -8.95973842e-27, -1.76397263e-37, -4.81575502e-43]), 'test_spearman_r': array([0.67409454, 0.80119561, 0.89858466, 0.91655887]), 'test_spearman_p': array([-7.50912016e-10, -1.10596257e-15, -3.22268313e-24, -2.29891405e-26]), 'test_kendall_r': array([0.56217687, 0.64384118, 0.74167769, 0.76861976]), 'test_kendall_p': array([-4.58773142e-11, -4.03293806e-14, -3.34679632e-18, -2.98596034e-19]), 'test_rmse': array([-35.47783176, -28.85814523, -22.84499374, -29.31156298]), 'test_mae': array([-16.22264373, -17.7375545 , -14.23285379, -17.06794026]), 'test_r2': array([0.95642389, 0.81936872, 0.92226039, 0.94767786]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 544, 'regressor__learning_rate': 0.07873395049105522, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_PPV': {'cluster size (%)': 11, 6: {'test_mad': 75.88433673469387, 'test_ystd': 96.24480195014932, 'test_mae': 88.82932199550112, 'test_rmse': 124.63011601822228, 'test_r2': -0.6768392549176185, 'test_pearson_r': array([0.08484633]), 'test_pearson_p_value': array([0.66772615]), 'test_spearman_r': 0.06938411200300772, 'test_spearman_p_value': 0.7257155517886993, 'test_kendall_r': 0.05458168896627308, 'test_kendall_p_value': 0.690630900273185, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 75.88433673469387, 'test_ystd': 96.24480195014932, 'test_mae': 86.55237100940887, 'test_rmse': 124.1260853451976, 'test_r2': -0.6633036921724891, 'test_pearson_r': array([0.00947106]), 'test_pearson_p_value': array([0.96184999]), 'test_spearman_r': 0.043508756781053384, 'test_spearman_p_value': 0.8260004508725033, 'test_kendall_r': 0.005465786721543948, 'test_kendall_p_value': 0.9682464353872551, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1544, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 75.88433673469387, 'test_ystd': 96.24480195014932, 'test_mae': 88.38685603677418, 'test_rmse': 127.53117507472192, 'test_r2': -0.7558125798213888, 'test_pearson_r': array([-0.23166844]), 'test_pearson_p_value': array([0.23554102]), 'test_spearman_r': -0.042401401779615835, 'test_spearman_p_value': 0.8303647381354702, 'test_kendall_r': -0.02729084448313654, 'test_kendall_p_value': 0.8422631237209453, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 988, 'regressor__learning_rate': 0.09330883592807893, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 75.88433673469387, 'test_ystd': 96.24480195014932, 'test_mae': 91.98801886639164, 'test_rmse': 129.6871916687279, 'test_r2': -0.8156812358687922, 'test_pearson_r': array([-0.12702297]), 'test_pearson_p_value': array([0.51950076]), 'test_spearman_r': 0.012390020000537095, 'test_spearman_p_value': 0.9501049759041333, 'test_kendall_r': 0.005458168896627307, 'test_kendall_p_value': 0.9682526535134302, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 150, 'regressor__learning_rate': 0.09845883013253116, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 75.88433673469387, 'test_ystd': 96.24480195014932, 'test_mae': 84.506810846388, 'test_rmse': 123.15967806453791, 'test_r2': -0.6375045811787334, 'test_pearson_r': array([0.03285378]), 'test_pearson_p_value': array([0.868185]), 'test_spearman_r': 0.0831508008924934, 'test_spearman_p_value': 0.6740017272763565, 'test_kendall_r': 0.04366535117301846, 'test_kendall_p_value': 0.7501821264278565, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 75.88433673469387, 'test_ystd': 96.24480195014932, 'test_mae': 90.7261983236308, 'test_rmse': 128.8647522160523, 'test_r2': -0.7927251851096819, 'test_pearson_r': array([-0.18153102]), 'test_pearson_p_value': array([0.35523092]), 'test_spearman_r': -0.046256074668671814, 'test_spearman_p_value': 0.8151948539008287, 'test_kendall_r': -0.06549802675952768, 'test_kendall_p_value': 0.6329357589487391, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 233, 'regressor__learning_rate': 0.08350944757753417, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 75.88433673469387, 'test_ystd': 96.24480195014932, 'test_mae': 83.74688089376977, 'test_rmse': 122.62272654280764, 'test_r2': -0.6232573228144214, 'test_pearson_r': array([-0.09695681]), 'test_pearson_p_value': array([0.62355706]), 'test_spearman_r': -0.015726696298525817, 'test_spearman_p_value': 0.9366918185322304, 'test_kendall_r': -0.011008720296127135, 'test_kendall_p_value': 0.9364053849112584, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 594, 'regressor__learning_rate': 0.08042068928291965, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_PPV': {'cluster size (%)': 11, 6: {'fit_time': array([57.06690645, 55.77750349, 59.3068428 , 56.8101418 , 54.40004063,
       56.84980392, 56.94815516, 54.49842572, 56.66730213]), 'score_time': array([0.79836655, 0.82640409, 0.82358503, 0.80519438, 0.78792977,
       0.75236011, 0.78156781, 0.82066631, 0.79528141]), 'test_pearson_r': array([0.96443301, 0.99343011, 0.98914914, 0.98541805, 0.90693822,
       0.97776877, 0.974322  , 0.96272178, 0.88874136]), 'test_pearson_p': array([-3.93265844e-17, -5.84185249e-27, -4.98223219e-24, -2.63440379e-22,
       -1.21462031e-11, -7.47639365e-20, -5.12810855e-19, -2.76466545e-16,
       -2.69180928e-10]), 'test_spearman_r': array([0.74904522, 0.92929293, 0.81330049, 0.97770662, 0.64482759,
       0.92920674, 0.88059166, 0.81275664, 0.94731081]), 'test_spearman_p': array([-2.94457844e-06, -3.40700215e-13, -8.21083939e-08, -7.76069826e-20,
       -1.59322176e-04, -3.46170443e-13, -2.99340799e-10, -1.48716060e-07,
       -2.27545223e-14]), 'test_kendall_r': array([0.62051963, 0.8       , 0.67980296, 0.90012399, 0.56157635,
       0.81098542, 0.74753391, 0.69496021, 0.82384178]), 'test_kendall_p': array([-2.46799068e-06, -1.20370803e-09, -1.36805503e-08, -7.49432578e-12,
       -6.68484709e-06, -8.97563255e-10, -1.43138454e-08, -2.24004576e-07,
       -7.97235500e-10]), 'test_rmse': array([-19.47502708, -25.31437218, -23.86935303, -13.6859003 ,
       -30.27775471, -31.66888534, -19.42660765, -23.50102503,
       -30.02871768]), 'test_mae': array([-12.31322901, -12.86863324, -15.91121993,  -9.04469735,
       -14.70939447, -14.64975357, -12.47388209, -14.63796053,
       -13.61960846]), 'test_r2': array([0.92121131, 0.98546416, 0.97733432, 0.96924789, 0.77479998,
       0.95467153, 0.94663333, 0.92489908, 0.75275496]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([55.40581203, 56.5247395 , 56.85479689, 56.64032769, 58.18614173,
       55.24731469, 56.52706385, 55.75931478, 57.9258523 ]), 'score_time': array([0.76818705, 0.80693436, 0.8119843 , 0.77416444, 0.77110457,
       0.79907465, 0.7956183 , 0.77091622, 0.83333564]), 'test_pearson_r': array([0.98254058, 0.99503387, 0.98412568, 0.98575894, 0.96486149,
       0.78257294, 0.99655183, 0.96899419, 0.97878235]), 'test_pearson_p': array([-2.94613517e-21, -1.34841778e-28, -8.22752948e-22, -1.91806274e-22,
       -3.34753779e-17, -5.27892182e-07, -9.88257107e-31, -2.61151176e-17,
       -1.99138352e-19]), 'test_spearman_r': array([0.87119444, 0.7806261 , 0.83004926, 0.75696337, 0.89981533,
       0.80280823, 0.89949522, 0.89928845, 0.9375686 ]), 'test_spearman_p': array([-7.85605675e-10, -5.87993086e-07, -2.56572676e-08, -2.01124953e-06,
       -3.14810150e-11, -1.60701021e-07, -3.28024420e-11, -7.84318358e-11,
       -1.95320173e-13]), 'test_kendall_r': array([0.73449358, 0.61710085, 0.68965517, 0.67906293, 0.77723725,
       0.609125  , 0.74288523, 0.78835979, 0.82072365]), 'test_kendall_p': array([-2.71494537e-08, -2.93368765e-06, -7.31746967e-09, -2.67760724e-07,
       -3.74969203e-09, -3.58568843e-06, -1.92930912e-08, -9.86562168e-12,
       -1.00170871e-09]), 'test_rmse': array([-15.66755086, -17.04232717, -16.18093978, -39.59316667,
       -14.15616115, -32.51578209, -16.26553975, -20.91673944,
       -20.26351761]), 'test_mae': array([ -9.17197392, -11.73727753, -10.31531566, -23.42103139,
        -9.29310303, -19.64241416, -10.73565109, -13.94651737,
       -14.09076959]), 'test_r2': array([0.94550612, 0.98843396, 0.96652701, 0.96128186, 0.92848907,
       0.46495319, 0.99049963, 0.93191678, 0.93034461]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([53.50495696, 56.81432557, 55.90084434, 58.3092289 , 58.34950185,
       58.90449452, 57.75008821, 58.38802361, 61.87577939]), 'score_time': array([0.77621222, 0.77598834, 0.78049111, 0.83034444, 0.7707479 ,
       0.79435754, 0.79461908, 0.80267739, 0.82294106]), 'test_pearson_r': array([0.95916382, 0.9949936 , 0.99424611, 0.98670889, 0.84275513,
       0.98110537, 0.97896097, 0.96482211, 0.87824328]), 'test_pearson_p': array([-2.46102496e-16, -1.50341073e-28, -9.79632570e-28, -7.59505438e-23,
       -9.73216662e-09, -8.48718439e-21, -3.57745619e-20, -1.31642428e-16,
       -8.17248852e-10]), 'test_spearman_r': array([0.89502229, 0.93558321, 0.90676192, 0.86488484, 0.85995813,
       0.71110021, 0.90676192, 0.68751002, 0.73210136]), 'test_spearman_p': array([-5.74592761e-11, -1.00575839e-13, -1.24472225e-11, -1.44102322e-09,
       -2.26673604e-09, -1.53452314e-05, -1.24472225e-11, -5.29825855e-05,
       -9.51034593e-06]), 'test_kendall_r': array([0.74413367, 0.82120901, 0.77681933, 0.74229403, 0.74722622,
       0.62052343, 0.78175152, 0.49870433, 0.66667196]), 'test_kendall_p': array([-1.60613680e-08, -4.16983982e-10, -3.42462422e-09, -1.63110313e-08,
       -1.31047895e-08, -2.46794118e-06, -2.72514927e-09, -2.29321025e-04,
       -6.98456707e-07]), 'test_rmse': array([-20.05872359, -28.81389069, -17.37240084, -25.12644777,
       -39.63397719, -18.12662615, -14.81095256, -20.72485519,
       -30.67143628]), 'test_mae': array([-14.47248716, -17.95720182, -10.81829459, -15.71679943,
       -16.69109336, -10.22177734, -10.59984947, -13.67169366,
       -13.96216903]), 'test_r2': array([0.91832747, 0.9816198 , 0.98738817, 0.97331968, 0.54086177,
       0.95693406, 0.95546927, 0.92923668, 0.76996231]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.08255061233016991, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([53.60569859, 53.74552464, 50.81816816, 49.32307649, 51.70543599,
       53.67574072, 52.67048264, 54.89380169, 51.6504302 ]), 'score_time': array([0.78167176, 0.78670192, 0.80269837, 0.76091766, 0.77277708,
       0.78652048, 0.7620616 , 0.8142705 , 0.79877996]), 'test_pearson_r': array([0.97199505, 0.98902183, 0.21297634, 0.99403114, 0.95265188,
       0.7917318 , 0.95580904, 0.98546198, 0.98956298]), 'test_pearson_p': array([-1.63155223e-18, -5.82756533e-24, -2.67322593e-01, -1.60537196e-27,
       -1.74506690e-15, -3.13133158e-07, -7.00437334e-16, -1.51686179e-21,
       -2.08859051e-23]), 'test_spearman_r': array([0.8453672 , 0.96325597, 0.64232905, 0.88029557, 0.89923629,
       0.67767375, 0.87818698, 0.68081032, 0.94307608]), 'test_spearman_p': array([-7.89008838e-09, -6.06106116e-17, -1.72154101e-04, -3.08956133e-10,
       -3.39083512e-11, -5.37705302e-05, -3.86054052e-10, -6.68560039e-05,
       -6.06767002e-14]), 'test_kendall_r': array([0.71782398, 0.87347333, 0.56717997, 0.73891626, 0.74568129,
       0.51485306, 0.69790435, 0.48806538, 0.83597884]), 'test_kendall_p': array([-5.21959065e-08, -3.76790438e-11, -1.82843042e-05, -2.29304238e-10,
       -1.45379531e-08, -9.44514697e-05, -1.09947078e-07, -2.76239724e-04,
       -8.86557197e-14]), 'test_rmse': array([-19.6010428 , -12.38506879, -93.9450324 , -26.57981634,
       -24.12084596, -35.7533974 , -21.94419846, -28.50877596,
       -24.62319848]), 'test_mae': array([-11.87203533,  -8.06542326, -35.35021651, -16.51351621,
       -16.40355916, -18.77224823, -13.110941  , -18.38285407,
       -17.81401666]), 'test_r2': array([ 0.91449359,  0.97641502, -4.00703407,  0.98422875,  0.90282565,
        0.5892566 ,  0.89343447,  0.96605686,  0.97793003]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.016154351417855532, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([43.57389092, 41.77972531, 42.75146508, 43.12927723, 42.70745587,
       43.15197802, 43.85776281, 44.6345644 , 44.30800605]), 'score_time': array([0.61514139, 0.61350656, 0.64758825, 0.61921906, 0.61595821,
       0.63626361, 0.62529016, 0.63065481, 0.61690307]), 'test_pearson_r': array([0.97933431, 0.98314859, 0.98098501, 0.97670238, 0.93961929,
       0.99239056, 0.91213659, 0.93714527, 0.98314393]), 'test_pearson_p': array([-2.81548805e-20, -1.83226281e-21, -9.24026441e-21, -1.39851886e-19,
       -4.30148651e-14, -4.21834783e-26, -5.76919245e-12, -2.12739011e-13,
       -1.02462331e-20]), 'test_spearman_r': array([0.69462336, 0.7994086 , 0.806849  , 0.89901478, 0.80394089,
       0.81957121, 0.87188965, 0.91486453, 0.74021355]), 'test_spearman_p': array([-2.90662525e-05, -1.98075365e-07, -1.24677822e-07, -3.48815475e-11,
       -1.49752992e-07, -5.38652178e-08, -7.33390881e-10, -9.66449925e-12,
       -6.71035445e-06]), 'test_kendall_r': array([0.52738929, 0.64604158, 0.64197727, 0.76847291, 0.63546798,
       0.66667127, 0.72098985, 0.77984359, 0.61538678]), 'test_kendall_p': array([-6.77098491e-05, -9.61802815e-07, -1.06726157e-06, -2.09137671e-11,
       -1.81307852e-07, -4.39622913e-07, -4.27054381e-08, -6.22176607e-09,
       -4.53329384e-06]), 'test_rmse': array([-14.21955544, -12.13041615, -31.87270563, -17.94925218,
       -24.46384622, -30.60897113, -34.02477475, -24.26652646,
       -29.53646146]), 'test_mae': array([ -9.49471864,  -7.39437203, -23.13159086, -11.75146723,
       -15.14463054, -17.72050713, -17.38893819, -15.11294066,
       -14.42179278]), 'test_r2': array([0.95893435, 0.96517754, 0.96173292, 0.95179755, 0.87943214,
       0.97837517, 0.83127383, 0.87466648, 0.96153556]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1586, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([55.75047159, 55.23501945, 57.91210341, 54.85335255, 54.62004447,
       54.15192628, 53.86314893, 54.46095681, 55.28412008]), 'score_time': array([0.79492211, 0.76741529, 0.8396647 , 0.8049345 , 0.81114721,
       0.80400801, 0.76370764, 0.74311018, 0.78957224]), 'test_pearson_r': array([0.93507967, 0.96280382, 0.97707321, 0.99025896, 0.97645595,
       0.94564463, 0.99511693, 0.93270271, 0.90449097]), 'test_pearson_p': array([-1.11387377e-13, -7.13006047e-17, -1.12861041e-19, -1.16854233e-24,
       -1.60963933e-19, -1.07866406e-14, -1.07434375e-28, -5.03916247e-13,
       -4.05686409e-11]), 'test_spearman_r': array([0.73358789, 0.88790345, 0.87168758, 0.88015766, 0.90465635,
       0.85404607, 0.95416473, 0.77913193, 0.76598676]), 'test_spearman_p': array([-5.96297997e-06, -1.33400357e-10, -7.48230035e-10, -3.13530341e-10,
       -1.66131380e-11, -3.81853148e-09, -1.13586227e-15, -1.03645125e-06,
       -2.02613185e-06]), 'test_kendall_r': array([0.56966751, 0.75061957, 0.73201894, 0.70776873, 0.76049615,
       0.70776873, 0.84302187, 0.68085347, 0.62766845]), 'test_kendall_p': array([-1.46507502e-05, -1.16713627e-08, -3.02267991e-08, -7.26418049e-08,
       -7.49153788e-09, -7.26418049e-08, -1.54737772e-10, -4.14285698e-07,
       -3.05940537e-06]), 'test_rmse': array([-23.76321302, -22.22026938, -14.28305226, -26.34348156,
       -15.87701673, -20.08234044, -14.46156034, -33.34367029,
       -98.42638701]), 'test_mae': array([-17.55326587, -13.24490152,  -7.17663045, -16.92999074,
       -10.53503405, -14.34795155,  -9.57939387, -20.15815881,
       -39.26312464]), 'test_r2': array([0.87290015, 0.92526652, 0.94856133, 0.97545417, 0.94706863,
       0.88470579, 0.98969053, 0.86952083, 0.78607077]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07498472228406572, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([54.85637474, 55.54233456, 57.10977054, 54.14776826, 53.07092381,
       56.7734251 , 56.84548593, 53.95082116, 56.56465244]), 'score_time': array([0.77119446, 0.78491926, 0.80502725, 0.76409268, 0.79790568,
       0.79636526, 0.78355312, 0.79960585, 0.7842319 ]), 'test_pearson_r': array([0.98684066, 0.99565149, 0.93010703, 0.986697  , 0.95272577,
       0.94616469, 0.96696189, 0.96356753, 0.99605223]), 'test_pearson_p': array([-6.64432897e-23, -2.25288648e-29, -2.92818783e-13, -7.68680233e-23,
       -1.70940838e-15, -9.50311327e-15, -1.47483595e-17, -2.06137593e-16,
       -7.02564072e-29]), 'test_spearman_r': array([0.62942448, 0.8799608 , 0.77654597, 0.90145356, 0.8687939 ,
       0.84524407, 0.94419127, 0.95347564, 0.89162562]), 'test_spearman_p': array([-2.54128357e-04, -3.20167656e-10, -7.34524906e-07, -2.54514471e-11,
       -9.93195687e-10, -7.96920625e-09, -1.52696106e-14, -4.67498034e-15,
       -1.94572590e-10]), 'test_kendall_r': array([0.57392411, 0.73607361, 0.61728583, 0.7654321 , 0.73424036,
       0.68480075, 0.808411  , 0.83068783, 0.75132275]), 'test_kendall_p': array([-1.42165952e-05, -2.45114426e-08, -2.71651911e-06, -5.98974435e-09,
       -2.48838092e-08, -1.99999303e-07, -8.40276155e-10, -1.57749947e-13,
       -2.10558286e-10]), 'test_rmse': array([-34.84342564, -15.15923201, -18.61788805, -14.33298436,
       -18.41040828, -27.24508432, -21.96667602, -24.25169376,
       -18.28337898]), 'test_mae': array([-15.26895173,  -9.61190249, -10.87271834, -10.70480929,
       -10.86233686, -17.34508242, -15.28079469, -15.54770368,
       -11.35877598]), 'test_r2': array([0.97059272, 0.98948945, 0.86105297, 0.97207775, 0.89675159,
       0.89504862, 0.92597772, 0.92640879, 0.988316  ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07746745617650797, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_Thiophene': {'cluster size (%)': 62, 6: {'test_mad': 55.080311900000005, 'test_ystd': 130.77627309021264, 'test_mae': 87.951218843462, 'test_rmse': 146.9991950317247, 'test_r2': -0.26349055585412606, 'test_pearson_r': array([0.01588329]), 'test_pearson_p_value': array([0.84199144]), 'test_spearman_r': 0.04173537229085758, 'test_spearman_p_value': 0.6002754065373853, 'test_kendall_r': 0.0018258949776275585, 'test_kendall_p_value': 0.9729036901605591, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 919, 'regressor__learning_rate': 0.020220469310038954, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 55.080311900000005, 'test_ystd': 130.77627309021264, 'test_mae': 83.38690473148733, 'test_rmse': 147.31181956028436, 'test_r2': -0.2688704242588562, 'test_pearson_r': array([-0.00876335]), 'test_pearson_p_value': array([0.91242401]), 'test_spearman_r': 0.017875489219185282, 'test_spearman_p_value': 0.8224817771610402, 'test_kendall_r': -0.021130408807978226, 'test_kendall_p_value': 0.6944280289987779, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 289, 'regressor__learning_rate': 0.07693173041362837, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 55.080311900000005, 'test_ystd': 130.77627309021264, 'test_mae': 112.57149611546461, 'test_rmse': 159.33725001929474, 'test_r2': -0.4844881045884981, 'test_pearson_r': array([0.08444552]), 'test_pearson_p_value': array([0.28837952]), 'test_spearman_r': 0.24578262956622415, 'test_spearman_p_value': 0.0017317444423655612, 'test_kendall_r': 0.1304731916010169, 'test_kendall_p_value': 0.015304981710857408, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 191, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 55.080311900000005, 'test_ystd': 130.77627309021264, 'test_mae': 90.06655092787692, 'test_rmse': 148.35129060050684, 'test_r2': -0.28684057095270243, 'test_pearson_r': array([0.040718]), 'test_pearson_p_value': array([0.60919687]), 'test_spearman_r': 0.11890360694504094, 'test_spearman_p_value': 0.13425017865570696, 'test_kendall_r': 0.04842022550623881, 'test_kendall_p_value': 0.3683902735091451, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1492, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 55.080311900000005, 'test_ystd': 130.77627309021264, 'test_mae': 84.93839269477633, 'test_rmse': 143.13806405904137, 'test_r2': -0.19798771670354243, 'test_pearson_r': array([0.07304584]), 'test_pearson_p_value': array([0.3586464]), 'test_spearman_r': 0.12442725443960717, 'test_spearman_p_value': 0.11696234869275095, 'test_kendall_r': 0.05834925254592416, 'test_kendall_p_value': 0.27772017427811635, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 533, 'regressor__learning_rate': 0.07023373020294442, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 55.080311900000005, 'test_ystd': 130.77627309021264, 'test_mae': 107.46641184855909, 'test_rmse': 157.11136994756595, 'test_r2': -0.44330234744738006, 'test_pearson_r': array([-0.00820445]), 'test_pearson_p_value': array([0.91798916]), 'test_spearman_r': 0.12495458932599096, 'test_spearman_p_value': 0.11540692171941117, 'test_kendall_r': 0.041107524845735446, 'test_kendall_p_value': 0.4442822177855351, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06259186163705488, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 55.080311900000005, 'test_ystd': 130.77627309021264, 'test_mae': 95.26991311920199, 'test_rmse': 149.35171881455187, 'test_r2': -0.30425508031038406, 'test_pearson_r': array([0.00807586]), 'test_pearson_p_value': array([0.91927014]), 'test_spearman_r': 0.01969079692038799, 'test_spearman_p_value': 0.8047982266219278, 'test_kendall_r': -0.01182294669984302, 'test_kendall_p_value': 0.825839637684876, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.019796879304210296, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_Thiophene': {'cluster size (%)': 50, 6: {'fit_time': array([46.67234635, 46.69488025]), 'score_time': array([1.1792109 , 1.21328282]), 'test_pearson_r': array([0.92662539, 0.96571125]), 'test_pearson_p': array([-3.17681494e-56, -3.05298174e-76]), 'test_spearman_r': array([0.71291436, 0.77997997]), 'test_spearman_p': array([-1.83269523e-21, -1.26668714e-27]), 'test_kendall_r': array([0.58261668, 0.63742867]), 'test_kendall_p': array([-1.03690496e-22, -1.41938072e-26]), 'test_rmse': array([-55.69228275, -26.44309712]), 'test_mae': array([-26.65153752, -16.28177955]), 'test_r2': array([0.83342785, 0.92805323]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([46.50315499, 47.47234678]), 'score_time': array([1.1819725 , 1.13215351]), 'test_pearson_r': array([0.95912559, 0.92789698]), 'test_pearson_p': array([-4.90008150e-72, -2.91078259e-56]), 'test_spearman_r': array([0.75700291, 0.76607847]), 'test_spearman_p': array([-2.04099604e-25, -3.83409685e-26]), 'test_kendall_r': array([0.6107611 , 0.61477006]), 'test_kendall_p': array([-1.03158711e-24, -7.06276531e-25]), 'test_rmse': array([-41.51325472, -37.22155665]), 'test_mae': array([-21.51074756, -22.39570851]), 'test_r2': array([0.90704681, 0.85984954]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([43.77758837, 48.56963396]), 'score_time': array([1.17721915, 1.15879798]), 'test_pearson_r': array([0.32347181, 0.9048113 ]), 'test_pearson_p': array([-1.74058209e-04, -6.34824743e-49]), 'test_spearman_r': array([0.82465427, 0.72677752]), 'test_spearman_p': array([-1.79682788e-33, -1.85407653e-22]), 'test_kendall_r': array([0.67993878, 0.57704018]), 'test_kendall_p': array([-2.44129157e-30, -4.18334125e-22]), 'test_rmse': array([-145.69594385,  -31.52338742]), 'test_mae': array([-39.7289929 , -19.61824831]), 'test_r2': array([0.0691863 , 0.81316011]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([38.37526202, 46.39434075]), 'score_time': array([1.23809338, 1.21251631]), 'test_pearson_r': array([0.85553101, 0.92466481]), 'test_pearson_p': array([-2.09690238e-38, -4.25151957e-55]), 'test_spearman_r': array([0.71332417, 0.76512726]), 'test_spearman_p': array([-1.69743031e-21, -4.80004440e-26]), 'test_kendall_r': array([0.58575906, 0.62172987]), 'test_kendall_p': array([-6.73524494e-23, -1.94308861e-25]), 'test_rmse': array([-67.30795096, -46.80773574]), 'test_mae': array([-26.84313517, -22.54896733]), 'test_r2': array([0.68658015, 0.84368916]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.020198757644655698, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([47.55360651, 50.01315808]), 'score_time': array([1.2171731 , 1.18519545]), 'test_pearson_r': array([0.96934412, 0.96306854]), 'test_pearson_p': array([-6.82742576e-80, -3.13576109e-74]), 'test_spearman_r': array([0.76144835, 0.77786616]), 'test_spearman_p': array([-7.31825470e-26, -2.16139025e-27]), 'test_kendall_r': array([0.62671334, 0.65418522]), 'test_kendall_p': array([-5.33640286e-26, -6.24627850e-28]), 'test_rmse': array([-25.5953743 , -36.05574117]), 'test_mae': array([-16.5386747 , -19.29823179]), 'test_r2': array([0.93945313, 0.92632385]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([35.03783226, 33.39843726]), 'score_time': array([1.19175172, 1.13260126]), 'test_pearson_r': array([0.88027882, 0.8596372 ]), 'test_pearson_p': array([-2.85147554e-43, -7.46247332e-39]), 'test_spearman_r': array([0.77181503, 0.740485  ]), 'test_spearman_p': array([-6.12182292e-27, -1.14502683e-23]), 'test_kendall_r': array([0.60880645, 0.63531059]), 'test_kendall_p': array([-1.26843803e-24, -1.86084886e-26]), 'test_rmse': array([-52.0650795 , -75.40700604]), 'test_mae': array([-23.30134948, -28.5480193 ]), 'test_r2': array([0.73853362, 0.68562102]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.007379901635575997, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([42.92140126, 49.73316455]), 'score_time': array([1.18228364, 1.19959283]), 'test_pearson_r': array([0.95154521, 0.93892441]), 'test_pearson_p': array([-2.06295749e-67, -1.09349061e-60]), 'test_spearman_r': array([0.72381096, 0.86629777]), 'test_spearman_p': array([-2.27732701e-22, -4.24128612e-40]), 'test_kendall_r': array([0.57104123, 0.69345736]), 'test_kendall_p': array([-9.38360813e-22, -2.88952015e-31]), 'test_rmse': array([-44.66284601, -37.59144464]), 'test_mae': array([-21.84490586, -20.31161537]), 'test_r2': array([0.88130931, 0.87763346]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.061486753805713786, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/substructure cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/substructure cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/substructure cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c207n09>
Subject: Job 294648: <NGB_Rg1 (nm)_Mordred_Trimer_substructure cluster_20250311> in cluster <Hazel> Done

Job <NGB_Rg1 (nm)_Mordred_Trimer_substructure cluster_20250311> was submitted from host <c040n04> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 18:17:47 2025
Job was executed on host(s) <6*c207n09>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 05:20:21 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 05:20:21 2025
Terminated at Fri Mar 14 10:37:47 2025
Results reported at Fri Mar 14 10:37:47 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_Rg1 (nm)_Mordred_Trimer_substructure cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_substructure cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_substructure cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "Rg1 (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "substructure cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   853283.00 sec.
    Max Memory :                                 3 GB
    Average Memory :                             2.86 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              26
    Max Threads :                                29
    Run time :                                   191873 sec.
    Turnaround time :                            231600 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_substructure cluster_20250311.err> for stderr output of this job.

