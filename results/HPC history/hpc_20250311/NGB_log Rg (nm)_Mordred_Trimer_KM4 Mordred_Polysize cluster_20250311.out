


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03267643505917463), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 747), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02625700039487651), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 766), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03881402327733831), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04445518300793678), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1028), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4613509323533934e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05119631925169673), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06308796265340293), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09983877865121306), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1911), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00041497087213074357), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027409094521198028), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1308), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 946), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015152998322112442), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09902515431414002), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 110), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00034696383475764483), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09977083634575751), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 92), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.8849270195241658e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027364528220782454), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 454), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.7081473573792404e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04112870488526499), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 880), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09868712715992688), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1863), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.84949415333334e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09804697500837978), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1972), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003818371276154087), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003747737668042439), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032631197951637506), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 968), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02489926731638925), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03917717790343103), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 944), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06607316965450116), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 698), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009104837300316426), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03829128574438116), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 476), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09997275730069603), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 612), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2753949340271247e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1310), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1218), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03196981764426038), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0492759884564182), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 139), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06252884110165963), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 157), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6616578700228442e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1204), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06371268364657759), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09919211208825982), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1581), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.593504399570395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027805630726731666), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0749220973772352), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1686), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1584), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014044590250285796), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.5871897255499115e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047442689398969735), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06317317920007243), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 196), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005549346097060431), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015320280462401475), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1067), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 604), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04306071999325014), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09926164643075035), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 319), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2086729975964592e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07845777335505164), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1300), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.052757537613492875), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1214), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024788045116838055), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0215512166988138), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03570162689013446), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1298), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021198076039751258), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.1993934445803734e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08759856664765452), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 164), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019085482402657408), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06428655706624552), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1244), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0673507080208438), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005032519586048211), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009435245651995697), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05720085071899806), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0773195633044464), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 281), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1390), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054456290680753645), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1293), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061865836192057384), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09938416758780978), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 424), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.401128681493884e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06053263208843759), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1995), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007143975020046123), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09862822447154428), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1967), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0751255917310225e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09701762666231041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003180614538446503), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1174), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044520470243125686), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1896), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008757501829776821), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 294), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09971649244143738), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 752), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005916593152884905), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03558910739001264), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09868712715992688), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1863), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.84949415333334e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05090695665611762), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1196), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 522), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06311214283201373), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09740524916085616), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1881), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1627812615084256e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0640205477092073), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 367), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007185775903968756), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010960902471677959), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09605773684943407), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1920), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.42199238214681e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 487), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0970516193590261), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1888), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00020099396124795223), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.066361124992674), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1182), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021543074065614808), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 858), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.392396341994658e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 659), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05503292607700584), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.060872756450602444), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 272), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03145574027118708), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03532641267496681), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 702), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09967974862764763), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 440), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.5586481535957242e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06631096990168359), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 485), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0987629814225909), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1475), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005670016856151221), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05303068633259809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 504), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05186926550849816), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1466), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 375), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.985062639283408e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 242), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06565726149690128), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 837), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009594409639734917), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021889743223520865), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1218), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4359048433113877e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05510049394550456), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06308061879781636), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 548), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04318649794350635), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1703), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09963805261142138), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1237), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007456686683828838), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05399410990789198), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 599), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 605), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09971278241078912), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 883), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007921064071352468), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 778), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 345), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05364480466086497), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 596), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009149109424256575), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06029211609013387), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03674661938817935), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013123008846249144), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09987068081360422), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 479), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00047582570667067026), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 235), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0734514868203534), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 234), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 261), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 283), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1091), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054025865243276294), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032861787167982694), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09904343519453694), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 192), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0858045294531877e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07486154930068327), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1940), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007724915578891902), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 170), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1116), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 224), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09960803558964118), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 474), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009962690135106626), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 535), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1298), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0519261733555988), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 327), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09931892121308969), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1867), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.9392326972837965e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09970043279071), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 481), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.260555656995149e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044410310038138494), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1060), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 816), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0991293716145255), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1958), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3601668281561207e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1558), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04455689935064926), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 693), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 355), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06474684908537243), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059397735213544973), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051530476224414284), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 772), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09874892712301929), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1417), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.982149995571932e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05760472668638614), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 587), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1743482295513743e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06448312670560666), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 376), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 553), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 199), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09931406892739618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1958), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.0915340173014853e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041608788653926844), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 598), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352103266450047), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1480), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 663), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06576125017046343), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 782), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09738378901277296), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4733072463880757e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04388444611638521), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.058432846036594356), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1689), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.7349230827903768e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09966547610347452), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1415), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008117101222257206), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01528867643386969), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 386), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09986529879467336), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1984), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006766151577177176), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03105447318009723), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07823465613141671), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 822), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03468198847382689), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 286), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00047820948850726014), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09701649283522984), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003756808464922064), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056532715454498735), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03005402877169755), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1351), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09910803117599637), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 778), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009195493900782837), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03317953904632615), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1971), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6177763837401975e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06550835799053044), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 661), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051555908072231475), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1127), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07132600312032003), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 583), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3098205507532526e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 133), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03307361485058502), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1134), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0366185908503277e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 526), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05156420536528496), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1030), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0484759480951802), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1185), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02958110736926079), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04710507346827683), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 734), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.062194335451173886), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09802839489310182), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.038974921879261e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010336579826074214), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09866458318672833), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 284), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2564730966159075e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09701762666231041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003180614538446503), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09863525863330289), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1967), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0751222750504132e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.099370197460435), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1269), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005342999838329444), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09977258006639517), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 407), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.445199956256905e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 220), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01479266614446887), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1448), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012951537649757506), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029719692763777558), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 313), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06599279066018542), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 716), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 936), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09899263009675877), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1892), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004749905899576313), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05348899421453548), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 551), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1045), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1158), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06260787480990239), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1076), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003995936636763073), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05897281106146019), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1920), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009256178539063112), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 644), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1077), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 474), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047695505572347086), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1034), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1749612110856602e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 220), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0562574658517972), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05910037077104646), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 464), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.052624051680803086), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 542), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008638700036326635), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1127), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09878127568409924), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 927), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.164106499974509e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1135), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02250186495395677), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 227), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05109605553150876), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 912), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09876570798419139), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 736), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007766977097956864), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352422719549719), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 481), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03180197355225681), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048768986184927025), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 362), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1103), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07767838637164796), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.046298039293679136), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 538), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 394), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05497972147035383), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 751), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0783668936058961), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04622314737014282), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 628), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05163458768255975), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 54, 6: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.54369253604971, 'test_rmse': 0.7332880280647469, 'test_r2': -0.6461733442721076, 'test_pearson_r': array([0.31961667]), 'test_pearson_p_value': array([0.00011187]), 'test_spearman_r': 0.36058052493576653, 'test_spearman_p_value': 1.1219618105084806e-05, 'test_kendall_r': 0.25535288919958704, 'test_kendall_p_value': 8.964797607900906e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 766, 'regressor__learning_rate': 0.02625700039487651, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.43094610044058923, 'test_rmse': 0.6342273639362952, 'test_r2': -0.23144870853032207, 'test_pearson_r': array([0.3293773]), 'test_pearson_p_value': array([6.65775565e-05]), 'test_spearman_r': 0.34636504019268677, 'test_spearman_p_value': 2.5851812470958204e-05, 'test_kendall_r': 0.234064598104975, 'test_kendall_p_value': 4.64342474603763e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.5377620404271279, 'test_rmse': 0.7337020340453343, 'test_r2': -0.6480326900524247, 'test_pearson_r': array([0.31017611]), 'test_pearson_p_value': array([0.00018176]), 'test_spearman_r': 0.3426168579704968, 'test_spearman_p_value': 3.20038791654552e-05, 'test_kendall_r': 0.22724786955788318, 'test_kendall_p_value': 7.650866465021257e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.015152998322112442, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.5071503871444877, 'test_rmse': 0.7015355257541847, 'test_r2': -0.5066962697796822, 'test_pearson_r': array([0.30099641]), 'test_pearson_p_value': array([0.00028696]), 'test_spearman_r': 0.3608751972751511, 'test_spearman_p_value': 1.1022458152782424e-05, 'test_kendall_r': 0.24641170515365238, 'test_kendall_p_value': 1.7961761616948758e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1972, 'regressor__learning_rate': 0.09804697500837978, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.4935802855447957, 'test_rmse': 0.6890031172604886, 'test_r2': -0.4533450957842664, 'test_pearson_r': array([0.3779329]), 'test_pearson_p_value': array([3.83191628e-06]), 'test_spearman_r': 0.41350872069779476, 'test_spearman_p_value': 3.461383239760044e-07, 'test_kendall_r': 0.28370844800979883, 'test_kendall_p_value': 7.944627168291858e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.47895207829136466, 'test_rmse': 0.684146489868328, 'test_r2': -0.4329287027409252, 'test_pearson_r': array([0.34817147]), 'test_pearson_p_value': array([2.33015727e-05]), 'test_spearman_r': 0.4099741395689493, 'test_spearman_p_value': 4.45141399929403e-07, 'test_kendall_r': 0.2827855982445972, 'test_kendall_p_value': 8.849681484424824e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 196, 'regressor__learning_rate': 0.06317317920007243, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.47630156057029616, 'test_ystd': 0.571527078911335, 'test_mae': 0.517573411110995, 'test_rmse': 0.7166719699862827, 'test_r2': -0.5724151292019886, 'test_pearson_r': array([0.30771569]), 'test_pearson_p_value': array([0.00020573]), 'test_spearman_r': 0.37683377361116444, 'test_spearman_p_value': 4.109354335206216e-06, 'test_kendall_r': 0.2562197046740699, 'test_kendall_p_value': 8.255924065254135e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.024788045116838055, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 50, 6: {'fit_time': array([45.61624217, 41.33476901]), 'score_time': array([1.16159463, 1.18004823]), 'test_pearson_r': array([0.90141708, 0.88734383]), 'test_pearson_p': array([-2.27014557e-48, -1.59649584e-44]), 'test_spearman_r': array([0.89992967, 0.88261812]), 'test_spearman_p': array([-5.63950138e-48, -1.86006869e-43]), 'test_kendall_r': array([0.76889141, 0.77172909]), 'test_kendall_p': array([-2.53341574e-38, -3.10211488e-38]), 'test_rmse': array([-0.2902775 , -0.28398784]), 'test_mae': array([-0.16431955, -0.14442144]), 'test_r2': array([0.80468936, 0.77498768]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06308796265340293, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([30.64387012, 29.32878113]), 'score_time': array([0.80648804, 0.75437832]), 'test_pearson_r': array([0.8970408 , 0.79623054]), 'test_pearson_p': array([-3.17208075e-47, -1.69256743e-29]), 'test_spearman_r': array([0.88460189, 0.81145358]), 'test_spearman_p': array([-3.12311815e-44, -2.05106540e-31]), 'test_kendall_r': array([0.76579026, 0.69015561]), 'test_kendall_p': array([-5.38864763e-38, -5.97551819e-31]), 'test_rmse': array([-0.30206007, -0.38132941]), 'test_mae': array([-0.14652941, -0.20064573]), 'test_r2': array([0.78914495, 0.58773964]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1308, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([43.18706274, 48.09424829]), 'score_time': array([1.17334914, 1.19495511]), 'test_pearson_r': array([0.77586993, 0.88289468]), 'test_pearson_p': array([-2.23788706e-27, -1.61582987e-43]), 'test_spearman_r': array([0.84755524, 0.89081278]), 'test_spearman_p': array([-5.00558022e-37, -2.45254448e-45]), 'test_kendall_r': array([0.73552819, 0.77834175]), 'test_kendall_p': array([-2.94670360e-35, -7.36901382e-39]), 'test_rmse': array([-0.40761189, -0.29735642]), 'test_mae': array([-0.18894752, -0.15546447]), 'test_r2': array([0.58027876, 0.77330951]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([28.47272277, 29.35187435]), 'score_time': array([0.77897644, 0.78291631]), 'test_pearson_r': array([0.91269555, 0.86937094]), 'test_pearson_p': array([-1.37454137e-51, -1.07173649e-40]), 'test_spearman_r': array([0.9053106 , 0.87827453]), 'test_spearman_p': array([-1.95457917e-49, -1.62174793e-42]), 'test_kendall_r': array([0.78230991, 0.75476941]), 'test_kendall_p': array([-1.58815691e-39, -1.07904008e-36]), 'test_rmse': array([-0.2620559, -0.321583 ]), 'test_mae': array([-0.14681759, -0.15907227]), 'test_r2': array([0.82614466, 0.73805805]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1310, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([34.88363862, 34.72940373]), 'score_time': array([0.92517257, 0.91079974]), 'test_pearson_r': array([0.91592078, 0.85797669]), 'test_pearson_p': array([-1.37160110e-52, -1.49074097e-38]), 'test_spearman_r': array([0.89395291, 0.87034037]), 'test_spearman_p': array([-1.90057104e-46, -6.89424102e-41]), 'test_kendall_r': array([0.7645947 , 0.76670862]), 'test_kendall_p': array([-6.97797485e-38, -8.74651350e-38]), 'test_rmse': array([-0.25308301, -0.32868961]), 'test_mae': array([-0.15223366, -0.15761244]), 'test_r2': array([0.83783142, 0.72586734]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1581, 'regressor__learning_rate': 0.09919211208825982, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([24.5027895 , 24.36899376]), 'score_time': array([0.71712875, 0.70998836]), 'test_pearson_r': array([0.89664416, 0.89505514]), 'test_pearson_p': array([-4.00491489e-47, -2.27259826e-46]), 'test_spearman_r': array([0.88687038, 0.90193837]), 'test_spearman_p': array([-9.44283646e-45, -3.82299686e-48]), 'test_kendall_r': array([0.74136195, 0.78002199]), 'test_kendall_p': array([-9.67992915e-36, -4.93853508e-39]), 'test_rmse': array([-0.27981067, -0.28892474]), 'test_mae': array([-0.16744862, -0.15206159]), 'test_r2': array([0.7946623 , 0.79607309]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1214, 'regressor__learning_rate': 0.052757537613492875, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([35.86976767, 37.94433045]), 'score_time': array([1.16908145, 1.15996695]), 'test_pearson_r': array([0.8850237 , 0.92943569]), 'test_pearson_p': array([-2.50507407e-44, -7.76988813e-57]), 'test_spearman_r': array([0.88338795, 0.927371  ]), 'test_spearman_p': array([-5.86307976e-44, -4.54119341e-56]), 'test_kendall_r': array([0.76472002, 0.79818001]), 'test_kendall_p': array([-8.15156992e-38, -7.54357342e-41]), 'test_rmse': array([-0.2998595 , -0.23873453]), 'test_mae': array([-0.14385619, -0.14682487]), 'test_r2': array([0.76577436, 0.85397731]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.019085482402657408, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 7, 6: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.31213607067492566, 'test_rmse': 0.40067548332133945, 'test_r2': -0.13913074100123124, 'test_pearson_r': array([0.34411607]), 'test_pearson_p_value': array([0.14912406]), 'test_spearman_r': 0.1838171335393907, 'test_spearman_p_value': 0.45127011720567545, 'test_kendall_r': 0.15476464650682736, 'test_kendall_p_value': 0.3612650777126736, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.2589973660553104, 'test_rmse': 0.4053764038976988, 'test_r2': -0.16601722088825155, 'test_pearson_r': array([0.4050374]), 'test_pearson_p_value': array([0.08538116]), 'test_spearman_r': 0.2999121652484795, 'test_spearman_p_value': 0.2122147274183225, 'test_kendall_r': 0.2976243202054373, 'test_kendall_p_value': 0.07914189693581544, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1967, 'regressor__learning_rate': 0.09862822447154428, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.3298056375427659, 'test_rmse': 0.42983130486103976, 'test_r2': -0.3109439316325171, 'test_pearson_r': array([0.3829786]), 'test_pearson_p_value': array([0.10556816]), 'test_spearman_r': 0.4704370610731216, 'test_spearman_p_value': 0.04208308281458745, 'test_kendall_r': 0.38560514460945594, 'test_kendall_p_value': 0.02403889863378123, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 752, 'regressor__learning_rate': 0.09971649244143738, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.2968247907679907, 'test_rmse': 0.4119593323491632, 'test_r2': -0.2041947358374374, 'test_pearson_r': array([0.32652023]), 'test_pearson_p_value': array([0.17244478]), 'test_spearman_r': 0.047493422062809085, 'test_spearman_p_value': 0.8469018912862503, 'test_kendall_r': 0.05952486404108745, 'test_kendall_p_value': 0.7254852965988312, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1920, 'regressor__learning_rate': 0.09605773684943407, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.31924883307812035, 'test_rmse': 0.500403118764463, 'test_r2': -0.7767570552572041, 'test_pearson_r': array([0.09841584]), 'test_pearson_p_value': array([0.68854025]), 'test_spearman_r': 0.2990326574325016, 'test_spearman_p_value': 0.21362389803484483, 'test_kendall_r': 0.2976243202054373, 'test_kendall_p_value': 0.07914189693581544, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05503292607700584, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.28804497091798875, 'test_rmse': 0.4306008618153104, 'test_r2': -0.3156422824111196, 'test_pearson_r': array([0.30950198]), 'test_pearson_p_value': array([0.19724523]), 'test_spearman_r': 0.3036216679346226, 'test_spearman_p_value': 0.20633846970892117, 'test_kendall_r': 0.3012540192261375, 'test_kendall_p_value': 0.07791801857194401, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 837, 'regressor__learning_rate': 0.06565726149690128, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.315827357905148, 'test_rmse': 0.39038782334011596, 'test_r2': -0.08138554293778788, 'test_pearson_r': array([0.37021442]), 'test_pearson_p_value': array([0.11870989]), 'test_spearman_r': 0.34388755604737686, 'test_spearman_p_value': 0.1494121047351295, 'test_kendall_r': 0.27381437458900226, 'test_kendall_p_value': 0.10626048853445015, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 605, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 7, 6: {'fit_time': array([55.96921086, 55.66085005, 54.30271602, 55.02575445, 53.27760625,
       54.9111433 , 54.94146609, 58.25861192, 56.95904207, 59.56747603,
       57.38987899, 54.78205132, 55.57436657, 56.07265759]), 'score_time': array([0.78013706, 0.76748013, 0.75666833, 0.75818324, 0.78257799,
       0.73157644, 0.75201368, 0.74110413, 0.73531604, 0.74234819,
       0.74387479, 0.756001  , 0.74422312, 0.77384019]), 'test_pearson_r': array([0.98115513, 0.99182152, 0.99212817, 0.98198452, 0.954935  ,
       0.97991814, 0.74754983, 0.95831444, 0.96846852, 0.95647648,
       0.98086412, 0.97970199, 0.93978136, 0.96581902]), 'test_pearson_p': array([-1.41469240e-13, -1.21580816e-16, -8.79511724e-17, -9.67669603e-14,
       -2.14010139e-10, -2.41844620e-13, -2.34005234e-04, -4.02173568e-10,
       -4.45053495e-11, -5.64667264e-10, -8.51467513e-13, -1.35964518e-12,
       -7.19119218e-09, -8.41596855e-11]), 'test_spearman_r': array([0.92631579, 0.97980685, 0.97719298, 0.95964912, 0.9679685 ,
       0.95789474, 0.80350877, 0.89772775, 0.97417407, 0.91331269,
       0.98089843, 0.9251421 , 0.94938067, 0.94579259]), 'test_spearman_p': array([-1.26686179e-08, -2.53380837e-13, -7.06769745e-13, -8.50242512e-11,
       -1.22887146e-11, -1.21353119e-10, -3.41932276e-05, -4.34750148e-07,
       -9.17709168e-12, -1.21821828e-07, -8.39423191e-13, -3.91301914e-08,
       -1.84822802e-09, -3.16038098e-09]), 'test_kendall_r': array([0.85964912, 0.91176471, 0.90643275, 0.88304094, 0.87976918,
       0.85964912, 0.77777778, 0.79606986, 0.88817712, 0.77777778,
       0.91803772, 0.81311912, 0.8355444 , 0.83934877]), 'test_kendall_p': array([-1.10425357e-09, -5.65458167e-08, -2.27996852e-11, -1.79983887e-10,
       -1.51234358e-07, -1.10425357e-09, -1.64978258e-07, -4.43688739e-06,
       -3.04174616e-07, -4.36097754e-07, -1.11636054e-07, -2.59896801e-06,
       -1.45452173e-06, -1.22329014e-06]), 'test_rmse': array([-0.1229349 , -0.09732985, -0.08758583, -0.13574267, -0.16291859,
       -0.13490337, -0.46955019, -0.18933444, -0.16346113, -0.17010635,
       -0.12442965, -0.12368933, -0.20462808, -0.12192153]), 'test_mae': array([-0.07920117, -0.06761042, -0.06418742, -0.08803331, -0.12299696,
       -0.09016213, -0.18659017, -0.08544999, -0.10842382, -0.11221282,
       -0.09243734, -0.09483565, -0.1110304 , -0.08640496]), 'test_r2': array([0.9562408 , 0.97898649, 0.98390509, 0.95984932, 0.90598907,
       0.95517754, 0.52499539, 0.91392716, 0.93377802, 0.91285228,
       0.95963827, 0.95375681, 0.87672221, 0.92878643]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.061865836192057384, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([32.5113492 , 32.28279805, 32.53719497, 32.43779635, 33.26744366,
       33.45988846, 32.59604144, 32.95923281, 33.45384765, 33.65493536,
       33.43276191, 34.8638742 , 32.95877528, 31.20790935]), 'score_time': array([0.46792698, 0.4481976 , 0.44884038, 0.46636796, 0.45183182,
       0.44638968, 0.44853687, 0.45844221, 0.46140909, 0.45412064,
       0.43991637, 0.44117999, 0.45705509, 0.46179914]), 'test_pearson_r': array([0.98199569, 0.98856508, 0.99228048, 0.98829978, 0.95404941,
       0.69596111, 0.98866062, 0.95885186, 0.97073822, 0.9288393 ,
       0.9909032 , 0.91374134, 0.98714349, 0.94160543]), 'test_pearson_p': array([-9.62616317e-14, -2.07666525e-15, -7.45311440e-17, -2.52143016e-15,
       -2.51743948e-10, -9.35063599e-04, -1.93434877e-15, -3.63135197e-10,
       -2.46585725e-11, -2.64047296e-08, -2.29156335e-15, -1.17247340e-07,
       -3.60501774e-14, -5.65534406e-09]), 'test_spearman_r': array([0.9499561 , 0.95919272, 0.98068481, 0.93859649, 0.95041694,
       0.77017544, 0.99122807, 0.91425669, 0.9086217 , 0.91219057,
       0.99122367, 0.92569659, 0.98142415, 0.88177606]), 'test_spearman_p': array([-5.12723828e-10, -9.34084168e-11, -1.74168595e-13, -2.80606429e-09,
       -4.74698356e-10, -1.14597553e-04, -2.20085178e-16, -1.11945142e-07,
       -1.82914385e-07, -1.34535861e-07, -1.72171485e-15, -3.69362838e-08,
       -6.72563970e-13, -1.31598583e-06]), 'test_kendall_r': array([0.85294118, 0.84457841, 0.92352941, 0.8245614 , 0.84457841,
       0.67251462, 0.95321637, 0.75659532, 0.76065983, 0.78291168,
       0.94426737, 0.81699346, 0.90849673, 0.76065983]), 'test_kendall_p': array([-3.79206619e-07, -4.63085373e-07, -3.80976840e-08, -1.17067315e-08,
       -4.63085373e-07, -1.56889756e-05, -1.16815227e-13, -1.28761880e-05,
       -1.09773191e-05, -6.36380428e-06, -4.80698932e-08, -5.74338967e-08,
       -9.76656516e-11, -1.09773191e-05]), 'test_rmse': array([-0.09629126, -0.11151531, -0.0793039 , -0.09902058, -0.21482647,
       -0.5119692 , -0.10458348, -0.1516044 , -0.14568115, -0.23530585,
       -0.09760043, -0.21400362, -0.1044789 , -0.22742622]), 'test_mae': array([-0.05651154, -0.08526575, -0.06764422, -0.06783961, -0.13296126,
       -0.24576779, -0.07050245, -0.11175627, -0.11615634, -0.13308233,
       -0.06549412, -0.14894124, -0.08215893, -0.12779308]), 'test_r2': array([0.96338931, 0.97140063, 0.98454917, 0.97137583, 0.90797285,
       0.4134392 , 0.97597884, 0.90385368, 0.94109036, 0.85364338,
       0.97716639, 0.83340501, 0.97276428, 0.81628062]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1174, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([56.85785103, 57.47661114, 56.90213633, 56.01099467, 55.88050938,
       57.44983745, 60.66618705, 56.61058688, 56.4040525 , 56.42368412,
       57.82837963, 56.42292452, 57.51309156, 59.27212429]), 'score_time': array([0.73801208, 0.78962708, 0.75881457, 0.7533052 , 0.76511049,
       0.73568201, 0.77432919, 0.75280023, 0.76501107, 0.74408054,
       0.73909903, 0.77560735, 0.76110649, 0.71819878]), 'test_pearson_r': array([0.94972837, 0.96641211, 0.97648779, 0.96809048, 0.94025947,
       0.97839181, 0.96719615, 0.8255973 , 0.98713357, 0.93071013,
       0.98970659, 0.95813712, 0.66915259, 0.99113308]), 'test_pearson_p': array([-5.32482773e-10, -1.82958867e-11, -9.13381912e-13, -1.19015164e-11,
       -2.23474424e-09, -4.48450507e-13, -1.50079007e-11, -2.45081723e-05,
       -3.62720141e-14, -2.14644866e-08, -6.13587026e-15, -4.15831088e-10,
       -2.38995302e-03, -1.86861184e-15]), 'test_spearman_r': array([0.93988601, 0.93462054, 0.97894737, 0.96140351, 0.91794656,
       0.97674428, 0.97674428, 0.78328173, 0.97004184, 0.91950464,
       0.98915862, 0.9244351 , 0.66357069, 0.98140548]), 'test_spearman_p': array([-2.35329013e-09, -4.71799424e-09, -3.60064188e-13, -5.86202817e-11,
       -3.07092205e-08, -8.32796316e-13, -8.32796316e-13, -1.20764516e-04,
       -2.96982597e-11, -6.86926274e-08, -9.27540331e-15, -4.20906809e-08,
       -2.67798397e-03, -6.77950044e-13]), 'test_kendall_r': array([0.8211179 , 0.80938764, 0.90643275, 0.89473684, 0.78592713,
       0.90322969, 0.90322969, 0.64705882, 0.9013353 , 0.79084967,
       0.94426737, 0.82403396, 0.62091503, 0.92765165]), 'test_kendall_p': array([-9.53596222e-07, -1.35872010e-06, -2.27996852e-11, -6.63913300e-11,
       -2.71955004e-06, -7.00361385e-08, -7.00361385e-08, -6.99211859e-05,
       -2.02850566e-07, -2.29491225e-07, -4.80698932e-08, -2.40473321e-06,
       -1.54908277e-04, -8.87180979e-08]), 'test_rmse': array([-0.20351029, -0.17467869, -0.1669125 , -0.16825084, -0.16961398,
       -0.14652403, -0.13215846, -0.25345791, -0.1120785 , -0.21284755,
       -0.10279618, -0.20217239, -0.52578737, -0.09024235]), 'test_mae': array([-0.11871535, -0.11517332, -0.11250822, -0.10124317, -0.12067593,
       -0.1035993 , -0.08193586, -0.17469147, -0.076565  , -0.14288958,
       -0.0668554 , -0.09959373, -0.210068  , -0.07026642]), 'test_r2': array([0.90045703, 0.92792987, 0.94696862, 0.93491512, 0.86134317,
       0.9528984 , 0.93539892, 0.66398677, 0.97142821, 0.85752948,
       0.97797367, 0.90616918, 0.368499  , 0.97914344]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([23.47827029, 22.14643192, 22.81546354, 23.57449794, 24.36123085,
       21.22783375, 23.88132954, 23.85725093, 23.97737956, 23.85549164,
       25.04079604, 23.51686621, 24.23401713, 24.47699857]), 'score_time': array([0.32507944, 0.33969355, 0.32790184, 0.32682872, 0.33903933,
       0.32999277, 0.33921337, 0.34560633, 0.3402319 , 0.32670736,
       0.32611132, 0.33883572, 0.33883834, 0.32895851]), 'test_pearson_r': array([0.99195655, 0.98823149, 0.97927932, 0.74622574, 0.87632084,
       0.97181232, 0.98398169, 0.98214733, 0.59906892, 0.97482706,
       0.969234  , 0.96019564, 0.97207871, 0.96655567]), 'test_pearson_p': array([-1.05585786e-16, -2.64868845e-15, -3.14917926e-13, -2.43436115e-04,
       -8.68204658e-07, -4.20025466e-12, -3.58846971e-14, -4.90630039e-13,
       -8.60895497e-03, -7.49239794e-12, -3.66498849e-11, -2.79613734e-10,
       -1.70168490e-11, -7.08626570e-11]), 'test_spearman_r': array([0.98902546, 0.98070175, 0.97323397, 0.81631927, 0.87894737,
       0.95614035, 0.9837649 , 0.95557902, 0.66907598, 0.92776058,
       0.95818288, 0.88028896, 0.95252838, 0.9628483 ]), 'test_spearman_p': array([-1.46670481e-15, -1.72884140e-13, -2.71850932e-12, -2.01980330e-05,
       -7.30151507e-07, -1.70664316e-10, -4.01991254e-14, -6.62934630e-10,
       -2.39372581e-03, -2.96792228e-08, -4.12268255e-10, -1.44733680e-06,
       -1.11695903e-09, -1.62399435e-10]), 'test_kendall_r': array([0.93529412, 0.90643275, 0.91495995, 0.68907652, 0.76608187,
       0.84795322, 0.9266902 , 0.84870258, 0.60328193, 0.81699346,
       0.86557842, 0.79084967, 0.84313725, 0.88235294]), 'test_kendall_p': array([-2.55460982e-08, -2.27996852e-11, -4.73213851e-08, -5.52943981e-05,
       -2.97692997e-07, -2.53233265e-09, -3.18217344e-08, -9.91848331e-07,
       -4.88013116e-04, -5.74338967e-08, -5.63141283e-07, -2.29491225e-07,
       -1.22726897e-08, -8.28241250e-10]), 'test_rmse': array([-0.09528061, -0.08444761, -0.12690802, -0.39137949, -0.27913715,
       -0.18388828, -0.12272066, -0.10566053, -0.50569777, -0.13558726,
       -0.11729743, -0.20712362, -0.13729583, -0.18764469]), 'test_mae': array([-0.06977193, -0.05968122, -0.08147974, -0.17179843, -0.17084874,
       -0.1133738 , -0.09750193, -0.08152605, -0.22402801, -0.10427957,
       -0.073781  , -0.12102031, -0.10349132, -0.13366707]), 'test_r2': array([0.97822381, 0.974683  , 0.95568659, 0.42023652, 0.7663388 ,
       0.93721534, 0.96581878, 0.9636929 , 0.26828895, 0.94627142,
       0.9393603 , 0.91636567, 0.94308831, 0.93296667]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 858, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([11.59453988, 13.86401796, 11.4427774 , 11.42258954, 13.8705678 ,
       11.83174396, 12.00298429, 12.16067553, 13.69272304, 12.49369407,
       12.72514844, 14.18562579, 13.9899416 , 11.52279615]), 'score_time': array([0.20591307, 0.20677376, 0.20533323, 0.21301889, 0.20212436,
       0.21596384, 0.2074964 , 0.21412468, 0.20777774, 0.21475029,
       0.20350671, 0.20176268, 0.20791245, 0.19791555]), 'test_pearson_r': array([0.96664501, 0.96336959, 0.98606263, 0.97556019, 0.92286742,
       0.98591613, 0.97126237, 0.69898795, 0.97166763, 0.98421851,
       0.94512387, 0.95224891, 0.66215488, 0.99158615]), 'test_pearson_p': array([-1.72588173e-11, -3.78404508e-11, -1.10727467e-14, -1.26510001e-12,
       -1.84663771e-08, -1.20959893e-14, -4.94076122e-12, -1.24802972e-03,
       -1.91027784e-11, -1.84131943e-13, -3.47867173e-09, -1.16962325e-09,
       -2.75540748e-03, -1.23001365e-15]), 'test_spearman_r': array([0.8754386 , 0.91740036, 0.94598165, 0.96709092, 0.92807018,
       0.96491228, 0.94736842, 0.59504132, 0.93491736, 0.93959744,
       0.9163228 , 0.94633643, 0.73993808, 0.9628483 ]), 'test_spearman_p': array([-9.19404003e-07, -3.24291961e-08, -9.68459556e-10, -1.54165421e-11,
       -1.03850543e-08, -2.63877371e-11, -7.80082922e-10, -9.18739608e-03,
       -1.31804289e-08, -7.36446168e-09, -9.27154202e-08, -2.92050558e-09,
       -4.47265775e-04, -1.62399435e-10]), 'test_kendall_r': array([0.75438596, 0.8023913 , 0.82006256, 0.87976918, 0.78947368,
       0.87134503, 0.85964912, 0.51973684, 0.79605263, 0.81311912,
       0.84870258, 0.83006536, 0.73856209, 0.85620915]), 'test_kendall_p': array([-5.24238695e-07, -1.85371850e-06, -1.10523131e-06, -1.51234358e-07,
       -8.90628326e-08, -4.58322529e-10, -1.10425357e-09, -2.72984759e-03,
       -4.43734615e-06, -2.59896801e-06, -9.91848331e-07, -2.71335027e-08,
       -2.52158005e-06, -5.28843419e-09]), 'test_rmse': array([-0.15656054, -0.17052235, -0.09329346, -0.13526392, -0.25190998,
       -0.11782667, -0.14125443, -0.38520335, -0.19239233, -0.12204908,
       -0.16215802, -0.18969422, -0.50994323, -0.08597087]), 'test_mae': array([-0.09540454, -0.1146551 , -0.0739942 , -0.09598525, -0.15784372,
       -0.08749156, -0.09541548, -0.21253801, -0.11943446, -0.07880096,
       -0.09298472, -0.15319643, -0.20564086, -0.06798269]), 'test_r2': array([0.93094188, 0.92381931, 0.96426079, 0.94074498, 0.83657423,
       0.97125247, 0.93531817, 0.28965771, 0.93305401, 0.96779838,
       0.88967198, 0.89988372, 0.32522914, 0.98205502]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 504, 'regressor__learning_rate': 0.05303068633259809, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([13.29142094, 15.78658175, 17.24768782, 16.55846357, 14.99682951,
       14.84842682, 14.15904474, 15.75485873, 16.27055168, 14.8436532 ,
       15.21748757, 15.25440407, 14.4308362 , 15.96450782]), 'score_time': array([0.23875618, 0.24407148, 0.23656273, 0.24006867, 0.24198723,
       0.23920202, 0.23512673, 0.25889301, 0.25420094, 0.23408508,
       0.25051761, 0.23582029, 0.24078655, 0.24073911]), 'test_pearson_r': array([0.90754604, 0.89379223, 0.98736588, 0.99159502, 0.93528264,
       0.98648286, 0.98649622, 0.95923656, 0.93794645, 0.97688871,
       0.98517239, 0.74195087, 0.97840621, 0.9660435 ]), 'test_pearson_p': array([-8.16753564e-08, -2.53019888e-07, -4.82794108e-15, -1.53242392e-16,
       -4.33684786e-09, -8.54782236e-15, -8.47666975e-15, -3.37258209e-10,
       -9.08957141e-09, -3.80677338e-12, -1.12153242e-13, -4.23261259e-04,
       -2.22158587e-12, -7.98949744e-11]), 'test_spearman_r': array([0.9122807 , 0.88459859, 0.96224796, 0.98945671, 0.9754386 ,
       0.94385965, 0.98245614, 0.80330419, 0.94633643, 0.93546734,
       0.99793602, 0.80536923, 0.96590961, 0.9628483 ]), 'test_spearman_p': array([-5.31127364e-08, -4.96115540e-07, -4.87119599e-11, -1.04468862e-15,
       -1.31906436e-12, -1.33399558e-09, -7.73558991e-14, -5.95206184e-05,
       -2.92050558e-09, -1.23369500e-08, -1.64512317e-20, -5.50845135e-05,
       -8.24154170e-11, -1.62399435e-10]), 'test_kendall_r': array([0.77777778, 0.70381534, 0.87648575, 0.94398977, 0.89473684,
       0.80116959, 0.92982456, 0.61639676, 0.85620915, 0.83934877,
       0.9869281 , 0.78688948, 0.87501894, 0.88235294]), 'test_kendall_p': array([-1.64978258e-07, -2.65926186e-05, -1.79656543e-07, -2.01982025e-08,
       -6.63913300e-11, -4.67377304e-08, -2.06767062e-12, -3.66555731e-04,
       -5.28843419e-09, -1.22329014e-06, -5.62291451e-15, -5.40069919e-06,
       -4.53574602e-07, -8.28241250e-10]), 'test_rmse': array([-0.20936119, -0.21762029, -0.14840766, -0.08690962, -0.1942002 ,
       -0.12009794, -0.10746262, -0.12264994, -0.21312474, -0.14784762,
       -0.1150334 , -0.48143215, -0.15285184, -0.20696407]), 'test_mae': array([-0.1181991 , -0.15652665, -0.11242335, -0.06098751, -0.10254424,
       -0.08872686, -0.07502067, -0.08737848, -0.11504859, -0.10568174,
       -0.07347539, -0.18989372, -0.12481586, -0.14080583]), 'test_r2': array([0.81020612, 0.77670619, 0.96070732, 0.97741493, 0.85916054,
       0.97214482, 0.97312523, 0.90669275, 0.86140527, 0.9542423 ,
       0.96541415, 0.51279618, 0.94002925, 0.91847054]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 599, 'regressor__learning_rate': 0.05399410990789198, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([55.00199366, 55.46103764, 54.60313606, 52.3190186 , 53.69121504,
       51.48957133, 54.63010192, 53.97421479, 57.25320816, 58.6754334 ,
       52.41119552, 59.19550061, 54.88610625, 57.03004718]), 'score_time': array([0.74799395, 0.75046492, 0.7927258 , 0.7720263 , 0.75626326,
       0.76301527, 0.79983735, 0.78233647, 0.74917054, 0.78781462,
       0.74919057, 0.77863908, 0.73275328, 0.73317337]), 'test_pearson_r': array([0.97518116, 0.70828386, 0.97708313, 0.94431656, 0.90546694,
       0.99138107, 0.96280624, 0.96052823, 0.94816548, 0.98869879,
       0.97716781, 0.9281473 , 0.97107301, 0.99482703]), 'test_pearson_p': array([-1.44005140e-12, -6.89508920e-04, -7.35961136e-13, -1.24643329e-09,
       -9.79567894e-08, -1.89609132e-16, -4.29995266e-11, -2.61735520e-10,
       -2.22587164e-09, -1.29132141e-14, -3.45720173e-12, -2.84669880e-08,
       -2.25136445e-11, -2.53665344e-17]), 'test_spearman_r': array([0.9082932 , 0.72232097, 0.98287305, 0.91355867, 0.88421053,
       0.99254068, 0.92321202, 0.90702528, 0.92307705, 0.98450466,
       0.98089843, 0.9504644 , 0.9628483 , 0.9752322 ]), 'test_spearman_p': array([-7.64309346e-08, -4.78221640e-04, -6.31424104e-14, -4.70927404e-08,
       -5.09778919e-07, -5.57369212e-17, -1.77979972e-08, -2.09016678e-07,
       -4.83257537e-08, -1.59200608e-13, -8.39423191e-13, -1.55976502e-09,
       -1.62399435e-10, -6.58873719e-12]), 'test_kendall_r': array([0.79765739, 0.64899296, 0.9321899 , 0.78592713, 0.76608187,
       0.95015071, 0.80938764, 0.79606986, 0.78688948, 0.94080983,
       0.91803772, 0.83006536, 0.86928105, 0.89542484]), 'test_kendall_p': array([-1.92681603e-06, -1.14750646e-04, -3.06124963e-08, -2.71955004e-06,
       -2.97692997e-07, -1.41855104e-08, -1.35872010e-06, -4.43688739e-06,
       -5.40069919e-06, -5.81823612e-08, -1.11636054e-07, -2.71335027e-08,
       -2.15825858e-09, -2.96242626e-10]), 'test_rmse': array([-0.14957625, -0.51288452, -0.14547636, -0.18446183, -0.20257602,
       -0.08912977, -0.13874305, -0.18340005, -0.17512071, -0.11270681,
       -0.14498691, -0.25286422, -0.13263761, -0.0937933 ]), 'test_mae': array([-0.09501843, -0.20040377, -0.09722599, -0.11106096, -0.12692346,
       -0.05279494, -0.10569276, -0.13372109, -0.12781997, -0.09315806,
       -0.10490584, -0.17730857, -0.09629002, -0.07748623]), 'test_r2': array([0.94315323, 0.43710498, 0.95343689, 0.88488813, 0.81891164,
       0.98146209, 0.92605272, 0.91056617, 0.89104369, 0.96652543,
       0.95182766, 0.86114598, 0.93689906, 0.98188284]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03674661938817935, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 29, 6: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.6916322933429699, 'test_rmse': 0.8436983974110761, 'test_r2': -0.7821448314547355, 'test_pearson_r': array([-0.27662228]), 'test_pearson_p_value': array([0.01704016]), 'test_spearman_r': -0.3767468765774534, 'test_spearman_p_value': 0.0009378546126353215, 'test_kendall_r': -0.21813548642204386, 'test_kendall_p_value': 0.006143353741415224, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 235, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.654434594958353, 'test_rmse': 0.7939120516103266, 'test_r2': -0.5780230269115691, 'test_pearson_r': array([-0.16612714]), 'test_pearson_p_value': array([0.15718553]), 'test_spearman_r': -0.22067438582647045, 'test_spearman_p_value': 0.058843833415282924, 'test_kendall_r': -0.12671925190786534, 'test_kendall_p_value': 0.11144354963332918, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 170, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.6996648044595042, 'test_rmse': 0.8164784855973937, 'test_r2': -0.6690065381301065, 'test_pearson_r': array([-0.14311355]), 'test_pearson_p_value': array([0.22382378]), 'test_spearman_r': -0.09524867468873398, 'test_spearman_p_value': 0.41952339780452363, 'test_kendall_r': -0.04786647201847537, 'test_kendall_p_value': 0.5471100112166878, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1060, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7509947075212582, 'test_rmse': 0.8797070958753297, 'test_r2': -0.9375135000098886, 'test_pearson_r': array([-0.31479182]), 'test_pearson_p_value': array([0.00630162]), 'test_spearman_r': -0.4139266577302741, 'test_spearman_p_value': 0.00024638339407569176, 'test_kendall_r': -0.27272757312852247, 'test_kendall_p_value': 0.0006023613716478088, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 772, 'regressor__learning_rate': 0.051530476224414284, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7001307140714044, 'test_rmse': 0.8309482573148678, 'test_r2': -0.7286875720443529, 'test_pearson_r': array([-0.2036448]), 'test_pearson_p_value': array([0.08180961]), 'test_spearman_r': -0.27164197059197603, 'test_spearman_p_value': 0.019223037664362216, 'test_kendall_r': -0.1475294516346702, 'test_kendall_p_value': 0.06386258455745726, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 199, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7191562847278509, 'test_rmse': 0.8505295827584076, 'test_r2': -0.8111207002124363, 'test_pearson_r': array([-0.2411724]), 'test_pearson_p_value': array([0.03845374]), 'test_spearman_r': -0.39098775401626273, 'test_spearman_p_value': 0.0005724528652924345, 'test_kendall_r': -0.239275051609308, 'test_kendall_p_value': 0.0027573192572141808, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 782, 'regressor__learning_rate': 0.06576125017046343, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.526829335964419, 'test_ystd': 0.6319980328017669, 'test_mae': 0.7442066781195165, 'test_rmse': 0.8507044441749967, 'test_r2': -0.8118654778017007, 'test_pearson_r': array([-0.24262794]), 'test_pearson_p_value': array([0.03726362]), 'test_spearman_r': -0.34373588499219293, 'test_spearman_p_value': 0.002712882792953916, 'test_kendall_r': -0.2261424105223691, 'test_kendall_p_value': 0.004474730120960855, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 306, 'regressor__learning_rate': 0.056532715454498735, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 25, 6: {'fit_time': array([3.89473271, 3.71178699, 3.84723067, 3.72650623]), 'score_time': array([0.10595846, 0.10604119, 0.10548329, 0.10526586]), 'test_pearson_r': array([0.94722522, 0.89623787, 0.94882367, 0.96049786]), 'test_pearson_p': array([-7.87720967e-33, -6.38777223e-24, -3.06293119e-33, -3.79775030e-36]), 'test_spearman_r': array([0.91493527, 0.92064602, 0.93920153, 0.94185129]), 'test_spearman_p': array([-1.63241272e-26, -1.99648063e-27, -6.02059510e-31, -4.61944109e-31]), 'test_kendall_r': array([0.81206559, 0.82166124, 0.79942353, 0.81024744]), 'test_kendall_p': array([-1.55147180e-21, -4.25191708e-22, -6.71040989e-21, -3.72869783e-21]), 'test_rmse': array([-0.21584222, -0.29027747, -0.19843348, -0.15878624]), 'test_mae': array([-0.11168042, -0.12206283, -0.12861149, -0.10949365]), 'test_r2': array([0.89249895, 0.80157632, 0.89918218, 0.92246694]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 192, 'regressor__learning_rate': 0.09904343519453694, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([11.73346996, 13.11539173, 13.65267968, 13.32769084]), 'score_time': array([0.25627542, 0.26074266, 0.25557828, 0.25282407]), 'test_pearson_r': array([0.87385285, 0.90383739, 0.92551233, 0.91780946]), 'test_pearson_p': array([-2.11772735e-21, -6.54648152e-25, -2.93035212e-28, -1.46698454e-26]), 'test_spearman_r': array([0.84012022, 0.91851901, 0.91537878, 0.90061707]), 'test_spearman_p': array([-2.16577697e-18, -4.44564211e-27, -1.39406185e-26, -4.07648091e-24]), 'test_kendall_r': array([0.7081825 , 0.81919149, 0.77258093, 0.77106754]), 'test_kendall_p': array([-9.75112068e-17, -6.53542537e-22, -1.28088549e-19, -2.52995542e-19]), 'test_rmse': array([-0.34030637, -0.29359921, -0.23179634, -0.23338917]), 'test_mae': array([-0.17225228, -0.1306421 , -0.1408929 , -0.13713795]), 'test_r2': array([0.69989874, 0.81130945, 0.85517657, 0.83680126]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 535, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([39.09284925, 38.68907762, 40.80779362, 39.69022965]), 'score_time': array([0.70537162, 0.73563242, 0.72438121, 0.72615981]), 'test_pearson_r': array([0.9707682 , 0.95596443, 0.9114096 , 0.9053844 ]), 'test_pearson_p': array([-9.30024901e-41, -3.00028712e-35, -5.55653682e-26, -9.54961658e-25]), 'test_spearman_r': array([0.96352152, 0.94408567, 0.8910599 , 0.92058559]), 'test_spearman_p': array([-8.93203303e-38, -4.63700410e-32, -2.73245690e-23, -5.27276250e-27]), 'test_kendall_r': array([0.84433823, 0.82551165, 0.78487296, 0.82935381]), 'test_kendall_p': array([-3.38172556e-23, -2.73194088e-22, -2.86421975e-20, -5.67520298e-22]), 'test_rmse': array([-0.16543389, -0.18429308, -0.23879445, -0.28889821]), 'test_mae': array([-0.11370327, -0.12440298, -0.1306805 , -0.12132256]), 'test_r2': array([0.93694628, 0.90424484, 0.82419159, 0.81722963]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1558, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([8.61196613, 8.91220975, 9.40809846, 8.41791248]), 'score_time': array([0.18348598, 0.20048475, 0.19511962, 0.18467855]), 'test_pearson_r': array([0.98142303, 0.90879473, 0.84210152, 0.93098131]), 'test_pearson_p': array([-6.85373517e-47, -1.33421672e-25, -1.50926065e-18, -7.96346624e-29]), 'test_spearman_r': array([0.97781397, 0.9057511 , 0.88262553, 0.92341507]), 'test_spearman_p': array([-1.74313604e-44, -3.57993268e-25, -2.50916004e-22, -1.78705391e-27]), 'test_kendall_r': array([0.89757308, 0.79797739, 0.77019803, 0.80407273]), 'test_kendall_p': array([-8.65626557e-26, -6.47533215e-21, -1.51596908e-19, -6.54950365e-21]), 'test_rmse': array([-0.116308  , -0.28172002, -0.33056258, -0.24093051]), 'test_mae': array([-0.07590231, -0.15123188, -0.15825196, -0.13703175]), 'test_r2': array([0.96171359, 0.81820055, 0.6903308 , 0.86304587]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 376, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([50.18696523, 47.1134851 , 48.92701674, 51.60790229]), 'score_time': array([0.94260812, 0.91100717, 0.9129138 , 0.91060948]), 'test_pearson_r': array([0.97574898, 0.97227691, 0.88661976, 0.85248533]), 'test_pearson_p': array([-2.78879719e-43, -1.79214018e-41, -8.97417594e-23, -4.02790352e-19]), 'test_spearman_r': array([0.92939123, 0.97404797, 0.83390537, 0.87710944]), 'test_spearman_p': array([-5.76881087e-29, -2.30022617e-42, -6.51813628e-18, -2.05200876e-21]), 'test_kendall_r': array([0.80174547, 0.88327319, 0.74009973, 0.80756003]), 'test_kendall_p': array([-5.36035541e-21, -2.76876292e-25, -4.06535548e-18, -4.92175654e-21]), 'test_rmse': array([-0.13587636, -0.15062609, -0.31210079, -0.33591823]), 'test_mae': array([-0.0912297 , -0.1013935 , -0.14518851, -0.13287469]), 'test_r2': array([0.95149543, 0.94403198, 0.75708898, 0.70834606]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07352103266450047, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([47.41398787, 46.49272394, 48.21692848, 48.9650507 ]), 'score_time': array([0.90942216, 0.91158223, 0.90136433, 0.93355536]), 'test_pearson_r': array([0.91971117, 0.97908503, 0.96897006, 0.88802445]), 'test_pearson_p': array([-2.84611486e-27, -2.76994350e-45, -5.93515593e-40, -1.35775793e-22]), 'test_spearman_r': array([0.92117888, 0.9682982 , 0.96210971, 0.91345081]), 'test_spearman_p': array([-1.62796806e-27, -1.15371685e-39, -2.89200426e-37, -6.81492004e-26]), 'test_kendall_r': array([0.76812052, 0.84915751, 0.85769576, 0.80699258]), 'test_kendall_p': array([-1.69930612e-19, -1.92063860e-23, -7.59466509e-24, -6.67263094e-21]), 'test_rmse': array([-0.23916298, -0.13395218, -0.15315093, -0.32134547]), 'test_mae': array([-0.15247975, -0.09193169, -0.10313026, -0.16912016]), 'test_r2': array([0.82931866, 0.95684924, 0.93252847, 0.77973733]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03105447318009723, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([15.99237108, 14.72683501, 17.44885015, 17.13857937]), 'score_time': array([0.31145549, 0.31796169, 0.31516695, 0.31631827]), 'test_pearson_r': array([0.86256612, 0.94627708, 0.95101098, 0.95381428]), 'test_pearson_p': array([-2.63607218e-20, -1.36058919e-32, -7.99741026e-34, -4.37500647e-34]), 'test_spearman_r': array([0.86189458, 0.9361107 , 0.94295743, 0.95124269]), 'test_spearman_p': array([-3.04110613e-20, -2.73884746e-30, -8.55245901e-32, -2.25877388e-33]), 'test_kendall_r': array([0.77601695, 0.82035495, 0.82126562, 0.83300291]), 'test_kendall_p': array([-1.00833117e-19, -5.82726936e-22, -6.08076322e-22, -2.69283264e-22]), 'test_rmse': array([-0.33948315, -0.18477464, -0.19552811, -0.19326373]), 'test_mae': array([-0.15226404, -0.11232897, -0.14019403, -0.11696469]), 'test_r2': array([0.73533347, 0.89363575, 0.89724681, 0.90864121]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 661, 'regressor__learning_rate': 0.06550835799053044, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 10, 6: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.4542111893460062, 'test_rmse': 0.5698251446724278, 'test_r2': -0.7233693927035967, 'test_pearson_r': array([0.30856924]), 'test_pearson_p_value': array([0.13341815]), 'test_spearman_r': -0.05896187167354912, 'test_spearman_p_value': 0.7795084461354271, 'test_kendall_r': -0.006934752729676544, 'test_kendall_p_value': 0.9623656136044043, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 526, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.5487613011952297, 'test_rmse': 0.6735545735443841, 'test_r2': -1.4079126898524965, 'test_pearson_r': array([-0.35042451]), 'test_pearson_p_value': array([0.08591322]), 'test_spearman_r': -0.36152937105097216, 'test_spearman_p_value': 0.07577863169587837, 'test_kendall_r': -0.3051291201057679, 'test_kendall_p_value': 0.037880142616071914, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 284, 'regressor__learning_rate': 0.09866458318672833, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.49148335513699976, 'test_rmse': 0.599142368368435, 'test_r2': -0.9052642578647536, 'test_pearson_r': array([0.06429245]), 'test_pearson_p_value': array([0.76012205]), 'test_spearman_r': -0.2862754032571003, 'test_spearman_p_value': 0.16534009303121902, 'test_kendall_r': -0.24965109826835558, 'test_kendall_p_value': 0.08938182626038396, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1448, 'regressor__learning_rate': 0.01479266614446887, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.48287082865259945, 'test_rmse': 0.6107528333254646, 'test_r2': -0.9798219614464982, 'test_pearson_r': array([0.21485856]), 'test_pearson_p_value': array([0.3023525]), 'test_spearman_r': -0.18619538423226037, 'test_spearman_p_value': 0.37285231291486454, 'test_kendall_r': -0.13869505459353088, 'test_kendall_p_value': 0.3453208079425878, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1158, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.5505819249043439, 'test_rmse': 0.6877942024164088, 'test_r2': -1.5108003361624927, 'test_pearson_r': array([-0.21745415]), 'test_pearson_p_value': array([0.29640795]), 'test_spearman_r': -0.3785972812722627, 'test_spearman_p_value': 0.062009148966340785, 'test_kendall_r': -0.29125961464641487, 'test_kendall_p_value': 0.04750399213551825, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1123, 'regressor__learning_rate': 0.05913781436124809, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.6229850513012619, 'test_rmse': 0.7657774780251754, 'test_r2': -2.1124353220665295, 'test_pearson_r': array([-0.17266556]), 'test_pearson_p_value': array([0.4091703]), 'test_spearman_r': -0.33204843521419763, 'test_spearman_p_value': 0.10488126179490717, 'test_kendall_r': -0.29125961464641487, 'test_kendall_p_value': 0.04750399213551825, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1135, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.34745604563847493, 'test_ystd': 0.4340626541657373, 'test_mae': 0.5435567226605247, 'test_rmse': 0.7050491685255305, 'test_r2': -1.6383594662562335, 'test_pearson_r': array([-0.25678524]), 'test_pearson_p_value': array([0.21530851]), 'test_spearman_r': -0.3541591370917786, 'test_spearman_p_value': 0.08239709259652486, 'test_kendall_r': -0.27045535645738517, 'test_kendall_p_value': 0.06573546595358566, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 538, 'regressor__learning_rate': 0.046298039293679136, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 10, 6: {'fit_time': array([53.90977478, 53.69223952, 52.93532634, 54.71592689, 62.95082903,
       55.3649931 , 54.47045064, 59.12970138, 54.47530293, 61.33843946]), 'score_time': array([0.80973053, 0.7753222 , 0.76068473, 0.76488256, 0.79888844,
       0.73919344, 0.76319289, 0.77782536, 0.80329394, 0.79705477]), 'test_pearson_r': array([0.96538648, 0.990039  , 0.97611301, 0.96899243, 0.80463638,
       0.95567574, 0.9750384 , 0.97164036, 0.96265873, 0.93273568]), 'test_pearson_p': array([-1.63577736e-15, -5.98817025e-22, -2.01681496e-17, -4.45094390e-16,
       -7.24132960e-07, -3.02474884e-14, -3.40097580e-17, -1.54583594e-16,
       -4.00805763e-15, -1.13382273e-11]), 'test_spearman_r': array([0.93554455, 0.9753762 , 0.96444444, 0.95948027, 0.8174359 ,
       0.95861839, 0.97315782, 0.96614233, 0.94596443, 0.92133104]), 'test_spearman_p': array([-2.43584318e-12, -2.89300248e-17, -2.24675205e-15, -1.05083756e-14,
       -3.44662097e-07, -1.34676244e-14, -8.05293957e-17, -1.25994483e-15,
       -3.09934228e-13, -6.48725781e-11]), 'test_kendall_r': array([0.8505403 , 0.91049383, 0.87692308, 0.84437697, 0.79692308,
       0.84259661, 0.88135698, 0.86728808, 0.82407407, 0.79131997]), 'test_kendall_p': array([-1.16530353e-09, -7.74797512e-11, -1.09691214e-14, -1.53302077e-09,
       -3.76435185e-11, -1.74127560e-09, -2.87422002e-10, -5.76640000e-10,
       -3.91013273e-09, -3.08333456e-08]), 'test_rmse': array([-0.17037742, -0.10163596, -0.14322756, -0.15298738, -0.40005481,
       -0.18119158, -0.14082191, -0.15226768, -0.15900853, -0.19270245]), 'test_mae': array([-0.09798598, -0.07125315, -0.09611765, -0.11508072, -0.14991388,
       -0.10003576, -0.09767305, -0.11955318, -0.11196848, -0.1049503 ]), 'test_r2': array([0.92376158, 0.97869068, 0.95216541, 0.93698847, 0.63063237,
       0.90733704, 0.95013087, 0.9399339 , 0.92425385, 0.8575046 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.062194335451173886, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([63.05066395, 54.71548605, 55.0393455 , 52.80203271, 61.17428422,
       54.19805431, 58.1050334 , 54.73788071, 55.43188429, 61.77226448]), 'score_time': array([0.79233623, 0.75996566, 0.75799179, 0.75247216, 0.76429868,
       0.76264477, 0.76506996, 0.81826234, 0.78584838, 0.77839661]), 'test_pearson_r': array([0.97936407, 0.9565912 , 0.98948561, 0.95920723, 0.81794285,
       0.9581583 , 0.91900782, 0.97751147, 0.97311856, 0.94959364]), 'test_pearson_p': array([-3.54369462e-18, -2.36582151e-14, -1.14246497e-21, -1.13742337e-14,
       -3.34283279e-07, -1.53419549e-14, -3.46102891e-11, -9.84864772e-18,
       -8.19375795e-17, -4.46563497e-13]), 'test_spearman_r': array([0.95601587, 0.92660427, 0.96084802, 0.9471524 , 0.85279536,
       0.94987203, 0.89687031, 0.97777024, 0.97059829, 0.92902483]), 'test_spearman_p': array([-2.76253391e-14, -1.10475217e-11, -7.00889980e-15, -2.38834763e-13,
       -3.15780322e-08, -1.28495701e-13, -5.59319309e-10, -8.58298703e-18,
       -2.37082065e-16, -2.06405761e-11]), 'test_kendall_r': array([0.8602526 , 0.80806503, 0.86903031, 0.8500783 , 0.78890695,
       0.80187296, 0.74807605, 0.90432529, 0.87076923, 0.80467558]), 'test_kendall_p': array([-9.63244754e-10, -8.44248026e-09, -5.06015047e-10, -1.31266214e-09,
       -1.66136182e-08, -1.09546633e-08, -9.40050819e-08, -1.03797523e-10,
       -2.32824644e-14, -1.80122866e-08]), 'test_rmse': array([-0.12032332, -0.19268034, -0.09360775, -0.1937784 , -0.43043262,
       -0.18891088, -0.26856057, -0.13125712, -0.13965034, -0.19197164]), 'test_mae': array([-0.07765301, -0.10917533, -0.06724628, -0.11832793, -0.16242705,
       -0.12575713, -0.17211434, -0.08591395, -0.09298158, -0.1147766 ]), 'test_r2': array([0.95815434, 0.91329963, 0.97375169, 0.91247403, 0.63351258,
       0.86907971, 0.84122295, 0.95390611, 0.94015433, 0.87795431]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([56.04085493, 55.58256316, 54.03619957, 54.44064069, 63.77297688,
       54.85567498, 54.52103591, 62.26499772, 55.99334145, 62.3637886 ]), 'score_time': array([0.75706148, 0.77093172, 0.7570343 , 0.77598047, 0.78956366,
       0.77585673, 0.75323415, 0.77574611, 0.773417  , 0.7812748 ]), 'test_pearson_r': array([0.96243439, 0.97456224, 0.97585667, 0.97088752, 0.95738525,
       0.86655921, 0.9863599 , 0.98918656, 0.95727237, 0.75861386]), 'test_pearson_p': array([-4.30177136e-15, -4.25617195e-17, -2.28941019e-17, -2.10874824e-16,
       -1.90349609e-14, -1.04734860e-08, -2.55456864e-20, -1.59712621e-21,
       -1.96374323e-14, -1.10903299e-05]), 'test_spearman_r': array([0.93841965, 0.96084802, 0.96376068, 0.96221578, 0.95127374,
       0.82495726, 0.96903372, 0.98803015, 0.90644538, 0.81223554]), 'test_spearman_p': array([-1.43006683e-12, -7.00889980e-15, -2.81380519e-15, -4.60678694e-15,
       -9.20964795e-14, -2.16821615e-07, -4.38128341e-16, -5.37370602e-21,
       -1.82762291e-10, -8.20589638e-07]), 'test_kendall_r': array([0.82226541, 0.84437697, 0.88923077, 0.86286697, 0.84437697,
       0.68      , 0.86998572, 0.92901677, 0.81755329, 0.80268007]), 'test_kendall_p': array([-4.40334823e-09, -1.53302077e-09, -2.23573211e-15, -6.69494483e-10,
       -1.53302077e-09, -1.03183414e-07, -5.62093985e-10, -3.18545553e-11,
       -6.94431589e-09, -2.04379965e-08]), 'test_rmse': array([-0.18071279, -0.16677678, -0.1467951 , -0.15582274, -0.14654729,
       -0.2665423 , -0.10185649, -0.10295243, -0.19077331, -0.42971838]), 'test_mae': array([-0.11674888, -0.11490034, -0.09281687, -0.11039547, -0.09153084,
       -0.16221451, -0.07703799, -0.06802331, -0.09019949, -0.15670493]), 'test_r2': array([0.92340374, 0.9396807 , 0.95030996, 0.93870548, 0.90589698,
       0.7330093 , 0.97287351, 0.97587583, 0.91318231, 0.54938701]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([17.41102767, 16.65170288, 16.75899696, 15.84751654, 19.09837794,
       17.81850171, 19.25882387, 16.90715981, 18.68854499, 18.38719463]), 'score_time': array([0.25907111, 0.25727415, 0.26999855, 0.26772857, 0.27391839,
       0.27706051, 0.27433515, 0.26702881, 0.24839664, 0.26890302]), 'test_pearson_r': array([0.98986492, 0.98090123, 0.84788493, 0.94963866, 0.97778591,
       0.94681571, 0.72719638, 0.95967582, 0.97911831, 0.96247743]), 'test_pearson_p': array([-7.36552151e-22, -1.41075099e-18, -4.55849384e-08, -1.35696636e-13,
       -8.51134253e-18, -2.57297369e-13, -2.57100839e-05, -9.92571772e-15,
       -4.07951128e-18, -1.59666712e-14]), 'test_spearman_r': array([0.9931589 , 0.96700292, 0.86654389, 0.9391453 , 0.98136435,
       0.95277258, 0.77941176, 0.94083453, 0.93759618, 0.95846154]), 'test_spearman_p': array([-6.70003791e-24, -9.29175450e-16, -1.04870600e-08, -1.24515592e-12,
       -1.05329481e-18, -6.37957309e-14, -2.70155905e-06, -8.96061845e-13,
       -1.67000866e-12, -5.04032958e-14]), 'test_kendall_r': array([0.9459053 , 0.86903031, 0.76043779, 0.87076923, 0.91217366,
       0.85583967, 0.71296296, 0.824078  , 0.83205029, 0.84      ]), 'test_kendall_p': array([-1.48227779e-11, -5.06015047e-10, -8.78507271e-08, -2.32824644e-14,
       -6.76014225e-11, -1.11606729e-09, -3.50457518e-07, -3.91002853e-09,
       -2.63811153e-09, -2.45954950e-12]), 'test_rmse': array([-0.09969649, -0.11948251, -0.28503606, -0.2161651 , -0.1554637 ,
       -0.1798524 , -0.43027741, -0.16496126, -0.15335568, -0.17953166]), 'test_mae': array([-0.07054839, -0.07661579, -0.12901801, -0.11968624, -0.0987326 ,
       -0.11067422, -0.18994644, -0.09552319, -0.11176527, -0.12111542]), 'test_r2': array([0.97484382, 0.95960164, 0.66878738, 0.89604301, 0.94948659,
       0.89375443, 0.47440328, 0.92072178, 0.95079839, 0.92433631]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 644, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([64.46167397, 60.6013751 , 59.93185616, 62.55255198, 59.26146507,
       57.768152  , 60.52409029, 63.97510409, 62.44773126, 59.52554774]), 'score_time': array([0.76750588, 0.78016925, 0.76241064, 0.78240728, 0.80583572,
       0.78442788, 0.80974388, 0.8361342 , 0.77731228, 0.79724765]), 'test_pearson_r': array([0.97277634, 0.98734523, 0.94423129, 0.98717719, 0.97937254,
       0.75354221, 0.98856811, 0.96107552, 0.97926632, 0.78968021]), 'test_pearson_p': array([-9.52023645e-17, -1.04410742e-20, -4.48627061e-13, -1.22213503e-20,
       -3.52642638e-18, -8.83398846e-06, -3.10328355e-21, -6.54318365e-15,
       -3.74857727e-18, -2.68524840e-06]), 'test_spearman_r': array([0.83607162, 0.95125707, 0.91997264, 0.98153846, 0.95400925,
       0.69666391, 0.96751032, 0.92318254, 0.97931272, 0.81515678]), 'test_spearman_p': array([-1.04871143e-07, -9.24672235e-14, -3.01268592e-11, -9.41926724e-19,
       -4.66970816e-14, -7.69546015e-05, -7.73521387e-16, -1.87472182e-11,
       -3.65001219e-18, -6.95777597e-07]), 'test_kendall_r': array([0.71940146, 0.8500783 , 0.78703704, 0.89538462, 0.83205029,
       0.60371806, 0.89197956, 0.80806503, 0.90601032, 0.76460874]), 'test_kendall_p': array([-3.04414301e-07, -1.31266214e-09, -1.87317729e-08, -9.63031270e-16,
       -2.63811153e-09, -1.68521113e-05, -1.85238768e-10, -8.44248026e-09,
       -9.06403612e-11, -8.80772910e-08]), 'test_rmse': array([-0.15524353, -0.09364492, -0.20524499, -0.0982985 , -0.13483538,
       -0.32622998, -0.11703845, -0.15042083, -0.12263809, -0.43709128]), 'test_mae': array([-0.09926213, -0.07588688, -0.1295049 , -0.07380585, -0.09481953,
       -0.17037783, -0.07757227, -0.0890928 , -0.09731919, -0.15789333]), 'test_r2': array([0.93746273, 0.97439742, 0.88827513, 0.97431878, 0.95681882,
       0.45761564, 0.97637872, 0.91979556, 0.95554438, 0.58953615]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05910037077104646, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([50.51048541, 54.94984889, 54.40779829, 50.44981647, 48.72283196,
       51.88653445, 47.26035714, 51.73058414, 50.0547483 , 55.5921545 ]), 'score_time': array([0.78019643, 0.74011397, 0.79414678, 0.79591846, 0.7590251 ,
       0.76536703, 0.77254868, 0.7548337 , 0.79088998, 0.71086431]), 'test_pearson_r': array([0.96571914, 0.96879902, 0.98571503, 0.9431904 , 0.99001525,
       0.95129257, 0.97233919, 0.98489822, 0.82183927, 0.95212857]), 'test_pearson_p': array([-1.45928441e-15, -4.79100396e-16, -4.43228354e-20, -5.57065926e-13,
       -6.16106739e-22, -9.16791272e-14, -1.14998630e-16, -8.60206094e-20,
       -2.63437537e-07, -2.49811751e-13]), 'test_spearman_r': array([0.96307692, 0.92507719, 0.99093255, 0.93759618, 0.96837068,
       0.90268515, 0.92815622, 0.99572578, 0.88398378, 0.93056359]), 'test_spearman_p': array([-3.50894707e-15, -1.40315469e-11, -1.94742596e-22, -1.67000866e-12,
       -5.63027008e-16, -2.87478645e-10, -8.61823685e-12, -2.40171684e-26,
       -2.14514089e-09, -1.61651490e-11]), 'test_kendall_r': array([0.85846154, 0.82044916, 0.93808499, 0.79507028, 0.87519364,
       0.77898084, 0.82844785, 0.96764368, 0.82481512, 0.80467558]), 'test_kendall_p': array([-9.72056644e-14, -5.01436552e-09, -2.29104699e-11, -1.28459101e-08,
       -3.81728436e-10, -2.72080062e-08, -3.37150235e-09, -4.43025504e-12,
       -4.32855057e-09, -1.80122866e-08]), 'test_rmse': array([-0.11562956, -0.17475858, -0.11827201, -0.17374338, -0.10225373,
       -0.18574479, -0.13177772, -0.12161762, -0.40474693, -0.21608558]), 'test_mae': array([-0.08863959, -0.10885313, -0.08399967, -0.10396239, -0.07522567,
       -0.11767274, -0.08135992, -0.08145659, -0.18091517, -0.16576444]), 'test_r2': array([0.93112732, 0.93426971, 0.96213148, 0.87048716, 0.98000228,
       0.87617746, 0.94307789, 0.96977566, 0.6679291 , 0.89778368]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03180197355225681, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([19.35846329, 19.59972978, 18.37407494, 18.35508347, 18.5956645 ,
       19.41658616, 18.95396328, 18.67792344, 20.84868479, 18.49211979]), 'score_time': array([0.3037467 , 0.30462313, 0.29707146, 0.3010385 , 0.31359482,
       0.32890701, 0.3059876 , 0.30756712, 0.30503631, 0.30822802]), 'test_pearson_r': array([0.98068006, 0.77910479, 0.9442476 , 0.97625759, 0.98278522,
       0.90252313, 0.97502066, 0.97067248, 0.92494205, 0.99012619]), 'test_pearson_p': array([-1.61794353e-18, -2.74229623e-06, -4.47093357e-13, -1.87649950e-17,
       -4.09629246e-19, -2.93023423e-10, -3.42977646e-17, -2.30090077e-16,
       -1.43281278e-11, -3.92664042e-21]), 'test_spearman_r': array([0.97482561, 0.77325586, 0.92842602, 0.97195622, 0.97315782,
       0.84541729, 0.96986444, 0.9565664 , 0.94188034, 0.97769231]), 'test_spearman_p': array([-3.76154834e-17, -3.63117209e-06, -8.24943975e-12, -1.35362189e-16,
       -8.05293957e-17, -5.45581938e-08, -3.17497626e-16, -2.38178472e-14,
       -7.27378683e-13, -4.34920782e-17]), 'test_kendall_r': array([0.90827007, 0.71913923, 0.79817129, 0.88580247, 0.88752031,
       0.68827488, 0.89755448, 0.86728808, 0.79692308, 0.89333333]), 'test_kendall_p': array([-1.10916408e-10, -2.77414734e-07, -1.37364552e-08, -2.46761673e-10,
       -2.16002957e-10, -8.75868567e-07, -1.73129467e-10, -5.76640000e-10,
       -3.76435185e-11, -6.24333368e-15]), 'test_rmse': array([-0.11491869, -0.47624793, -0.19375215, -0.11611412, -0.10760419,
       -0.25729715, -0.14579348, -0.15624059, -0.22060503, -0.09128383]), 'test_mae': array([-0.07635476, -0.19062582, -0.12349182, -0.07653411, -0.07858894,
       -0.16304449, -0.09868156, -0.11235516, -0.14997767, -0.06537037]), 'test_r2': array([0.95943694, 0.58217573, 0.88621714, 0.95172169, 0.96530634,
       0.81215378, 0.94448898, 0.94119045, 0.85196588, 0.9795383 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 751, 'regressor__learning_rate': 0.05497972147035383, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 Mordred_Polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 Mordred_Polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 Mordred_Polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n02>
Subject: Job 295217: <NGB_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:09:31 2025
Job was executed on host(s) <8*c205n02>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 16:27:05 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 16:27:05 2025
Terminated at Sat Mar 15 17:31:55 2025
Results reported at Sat Mar 15 17:31:55 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 Mordred_Polysize cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   1166641.00 sec.
    Max Memory :                                 3 GB
    Average Memory :                             2.84 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              26
    Max Threads :                                29
    Run time :                                   263090 sec.
    Turnaround time :                            339744 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.err> for stderr output of this job.

