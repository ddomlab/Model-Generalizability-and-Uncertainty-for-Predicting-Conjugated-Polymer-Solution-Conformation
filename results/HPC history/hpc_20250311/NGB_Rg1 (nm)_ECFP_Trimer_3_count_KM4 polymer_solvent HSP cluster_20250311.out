


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 469), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.040778491738675385), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 835), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03895066937223124), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027924316820633777), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1426), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0982138442020522), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 340), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00028441070340576855), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04262196089202727), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 174), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04077561206853436), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 723), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.046478867286473775), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 743), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026812701789082002), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1695), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05372135056193147), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07930842508169918), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 510), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02802946487481492), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 750), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017425441726044367), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1413), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023922932379823583), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 436), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09774766077819741), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 881), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.932751436119241e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06417006877508087), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 730), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1302), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04455491898550879), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 148), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 222), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 114), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06099122859484493), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 539), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04732839085313858), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 879), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07220819960067762), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 876), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.045618906591177615), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 983), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0632581968748835), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1190), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1291), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02696997979451368), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1095), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06352625123716403), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08070010746929553), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 744), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0654354440483093), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 277), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.277047279922142e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 265), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1953), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04233563604744482), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 942), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 732), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07278841097398277), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1114), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.043839547947231786), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 156), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 440), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06401305619367212), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1216), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0295232728556477), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1353), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05297900677528356), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 829), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028593488058741134), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.86950860798558e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0935156903385705), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 602), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 343), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 790), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1752), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02092309391721683), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06967139805191243), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03127310711637085), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 904), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09557674663573557), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 848), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.7988338306357485e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 92), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057345077183222626), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1372), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01968820342577102), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 952), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 390), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011934737312393215), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 755), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06961291460365795), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1357), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04869109884101474), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 616), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014110325829013204), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 220), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1278), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09385306427316144), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 215), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04115635510650462), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 564), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.045242482030826155), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06406456205795824), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 632), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1030), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 114), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 186), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08263651900443651), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1230), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.1062441860948253e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03917961305217899), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1189), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014447904125505711), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 623), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008050975971174355), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1387), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.341321384768644e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04608029820718919), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 333), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0028557887873083e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.38169747683069e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1354), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1348), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 693), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023803749106020074), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051834804478457695), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008910073649782755), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028336877898542227), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023941567681081004), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1048), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044707969735571326), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03028895905871312), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 773), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 858), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 819), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07441141090638533), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016812449520272846), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 604), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 68), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03323457778230428), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 606), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09244999052076192), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 830), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4667533486727208e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028765545186987682), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041567270219071036), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05299838303070917), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03558023729327846), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024670354751644946), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 880), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 290), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07583698098818178), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05019683038104987), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1413), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04410133606231344), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06017731980024884), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 885), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008976946686048055), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08758212794188358), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 888), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00032681355681042537), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04256427710322149), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 796), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026743524061169175), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 702), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.568644702120083e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.003612651878170708), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09553650431832253), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1933), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005250628555251198), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05168884768073294), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 268), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02944286105896428), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 421), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057759545974645055), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 120), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09451465387968194), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1104), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02599070704934855), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03417422800475382), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03384571331109743), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 599), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054183698028338154), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 73), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1747), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02789103457718823), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 196), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00799852384422031), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02722444434341304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 632), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0257369630623866e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054447454986951395), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 371), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 219), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 86), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05678145779258077), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 203), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028205244981869996), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05705489530331452), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 989), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015380436749406113), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1545), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 68), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.039995235361947455), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 838), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 155), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0202670871914534), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 401), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017301982250541918), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09214363677545287), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 518), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 258), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.062262387154306965), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03336029056281953), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 315), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07121507719471436), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010524433139623979), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 852), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026785750809876597), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 521), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07656721516800831), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 880), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014698103674033864), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1094), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06303058868534582), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04338695957658736), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0376871251521963), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 807), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012114391871429927), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03490706095836569), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1319), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08414470563140648), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 295), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09524640507156387), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1923), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.132095380932108e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02784398886004625), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 614), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04630020272466024), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1378), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.847118247114267e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1180), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056394630373055664), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027890551397435022), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04672835690758772), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 207), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008641561024622588), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 940), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022262068423739248), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03615444215817928), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1108), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.1985491486977563e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00590604600874835), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1635), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04068234502623798), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 373), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07269548030441066), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 555), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.1094592321600646e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015620394702671802), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1014), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 142), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04535953775401802), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 555), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6838573385854306e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012045119899642479), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1686), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 269), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025041499136197735), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 349), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005147024286785698), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0258841713929342), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 134), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3449123419687378e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011311750738931274), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008222507961661931), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0394009136380155), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 458), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 474), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0497567488082172), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 223), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08743691930725404), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1158), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 374), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02953699817491538), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 597), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03620694020279166), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 991), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00043185953832714115), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07992136542898855), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014987637090178292), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 170), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04577647543772829), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 95), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012445352974120886), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031544846329897416), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 73), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1206), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04880628989403859), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 365), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021580776361428283), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07105164346126319), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 789), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026580526674324173), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 880), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.046355358722289804), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 403), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025839821283775818), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023938222106657824), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015843539201441756), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01019781017836961), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1231), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 127), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010131703392973365), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0512727601361697), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028127881834638675), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1259), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09274405290122052), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034813420085722684), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07229872816341645), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 314), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 37, 6: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 65.08083101264987, 'test_rmse': 171.70325215612976, 'test_r2': -0.08629329544665243, 'test_pearson_r': array([-0.01676489]), 'test_pearson_p_value': array([0.87052948]), 'test_spearman_r': -0.3901834613325537, 'test_spearman_p_value': 7.787861022731519e-05, 'test_kendall_r': -0.23492043228480278, 'test_kendall_p_value': 0.0008247883600338928, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03895066937223124, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 72.56866766951039, 'test_rmse': 173.55620923713505, 'test_r2': -0.10986554367903767, 'test_pearson_r': array([-0.07315292]), 'test_pearson_p_value': array([0.47641049]), 'test_spearman_r': -0.3731796412707316, 'test_spearman_p_value': 0.0001667502753256735, 'test_kendall_r': -0.19201227880135124, 'test_kendall_p_value': 0.006195753976088569, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 510, 'regressor__learning_rate': 0.07930842508169918, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 58.07490912763232, 'test_rmse': 172.3364446450158, 'test_r2': -0.09431994621762896, 'test_pearson_r': array([0.03291427]), 'test_pearson_p_value': array([0.74892867]), 'test_spearman_r': -0.2526289131665389, 'test_spearman_p_value': 0.01254303259632976, 'test_kendall_r': -0.14774556233086522, 'test_kendall_p_value': 0.03473340758582238, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 59.96208727270846, 'test_rmse': 170.8886675709331, 'test_r2': -0.07601068554209744, 'test_pearson_r': array([0.01646356]), 'test_pearson_p_value': array([0.87283687]), 'test_spearman_r': -0.2901849754879146, 'test_spearman_p_value': 0.0039358922581612475, 'test_kendall_r': -0.1849005114377396, 'test_kendall_p_value': 0.008231116966314015, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 539, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 65.74856755297851, 'test_rmse': 171.42625249602278, 'test_r2': -0.08279120501336057, 'test_pearson_r': array([-0.03410429]), 'test_pearson_p_value': array([0.74016834]), 'test_spearman_r': -0.35517013877984704, 'test_spearman_p_value': 0.0003572518224363754, 'test_kendall_r': -0.19508615334377813, 'test_kendall_p_value': 0.005287008858750871, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06352625123716403, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 74.9791617873982, 'test_rmse': 173.8948928032825, 'test_r2': -0.1142014298731584, 'test_pearson_r': array([-0.06430318]), 'test_pearson_p_value': array([0.53147832]), 'test_spearman_r': -0.4032449097837342, 'test_spearman_p_value': 4.2159059077895856e-05, 'test_kendall_r': -0.2477604480975286, 'test_kendall_p_value': 0.00038911478942659796, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1114, 'regressor__learning_rate': 0.07278841097398277, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 57.125636264069726, 'test_rmse': 173.48194717387997, 'test_r2': -0.1089159576948151, 'test_pearson_r': array([0.00683801]), 'test_pearson_p_value': array([0.94700024]), 'test_spearman_r': 0.2089463576055772, 'test_spearman_p_value': 0.03998195798482493, 'test_kendall_r': 0.13550628497801248, 'test_kendall_p_value': 0.05280164921418938, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1353, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 33, 6: {'fit_time': array([14.00721049, 14.83138204, 13.65027761]), 'score_time': array([0.39314866, 0.38392711, 0.40363503]), 'test_pearson_r': array([0.92857004, 0.97070548, 0.93683377]), 'test_pearson_p': array([-2.39754977e-38, -8.51632285e-54, -4.40950788e-40]), 'test_spearman_r': array([0.77230534, 0.88138329, 0.7959796 ]), 'test_spearman_p': array([-1.97347955e-18, -4.30603160e-29, -5.26843122e-20]), 'test_kendall_r': array([0.6447819 , 0.75747739, 0.65944674]), 'test_kendall_p': array([-1.12344792e-18, -7.04501341e-25, -2.92540233e-19]), 'test_rmse': array([-69.93650101, -25.3783557 , -27.78481605]), 'test_mae': array([-28.70637991, -12.9866709 , -15.45674152]), 'test_r2': array([0.80543348, 0.94193945, 0.87213365]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 847, 'regressor__learning_rate': 0.08646479880356304, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([37.66988349, 36.13439822, 36.22451234]), 'score_time': array([0.86851168, 0.90652299, 0.93008661]), 'test_pearson_r': array([0.93476913, 0.97011066, 0.97324644]), 'test_pearson_p': array([-5.76141861e-40, -1.95733062e-53, -1.98447925e-55]), 'test_spearman_r': array([0.72800102, 0.79883365, 0.86028255]), 'test_spearman_p': array([-1.36215959e-15, -3.10583952e-20, -2.66043201e-26]), 'test_kendall_r': array([0.5698582 , 0.65989619, 0.72385727]), 'test_kendall_p': array([-6.60269525e-15, -3.08871480e-19, -7.69688498e-23]), 'test_rmse': array([-41.88628528, -35.36563456, -27.85582462]), 'test_mae': array([-20.17735138, -20.04685331, -17.10965942]), 'test_r2': array([0.86039441, 0.92437286, 0.94240017]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([38.4000237 , 37.28863502, 36.14469671]), 'score_time': array([0.89002824, 0.88151932, 0.88308287]), 'test_pearson_r': array([0.9820532 , 0.64896549, 0.9372229 ]), 'test_pearson_p': array([-2.31998096e-63, -1.40337874e-11, -3.42897898e-40]), 'test_spearman_r': array([0.89281988, 0.75102848, 0.82633526]), 'test_spearman_p': array([-3.47478871e-31, -8.23438719e-17, -1.18387767e-22]), 'test_kendall_r': array([0.74943137, 0.62340612, 0.67446271]), 'test_kendall_p': array([-1.07946665e-24, -2.33782022e-17, -5.52193677e-20]), 'test_rmse': array([ -37.32373175, -114.48888274,  -24.87034204]), 'test_mae': array([-20.89409717, -32.21783177, -14.32814169]), 'test_r2': array([ 0.94467586, -0.09755155,  0.87740148]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([20.71729112, 21.19814968, 21.73545551]), 'score_time': array([0.5290885 , 0.51381683, 0.51354194]), 'test_pearson_r': array([0.5926003 , 0.94281476, 0.93895778]), 'test_pearson_p': array([-1.47850181e-09, -7.64711157e-42, -1.09529083e-40]), 'test_spearman_r': array([0.79508901, 0.84605224, 0.7985225 ]), 'test_spearman_p': array([-3.73986983e-20, -1.15095223e-24, -3.29137994e-20]), 'test_kendall_r': array([0.66210267, 0.69655914, 0.64958943]), 'test_kendall_p': array([-1.73960276e-19, -2.66380358e-21, -9.22511511e-19]), 'test_rmse': array([-73.63692286, -47.39688744, -49.15267979]), 'test_mae': array([-23.52411169, -22.6900011 , -23.76990047]), 'test_r2': array([-0.21936851,  0.88255975,  0.87143955]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1190, 'regressor__learning_rate': 0.0632581968748835, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([34.70976448, 35.86555481, 38.56569552]), 'score_time': array([0.88174415, 0.85596824, 0.85186648]), 'test_pearson_r': array([0.97943342, 0.97255642, 0.95584985]), 'test_pearson_p': array([-7.19686861e-61, -5.70236658e-55, -1.90934972e-46]), 'test_spearman_r': array([0.78793377, 0.75008964, 0.86426661]), 'test_spearman_p': array([-1.36911678e-19, -9.44111926e-17, -8.59693412e-27]), 'test_kendall_r': array([0.63518349, 0.61648161, 0.72572781]), 'test_kendall_p': array([-3.95429036e-18, -5.03479236e-17, -5.58089538e-23]), 'test_rmse': array([-22.64215778, -32.78148591, -31.31176475]), 'test_mae': array([-14.4509727 , -17.80879812, -16.3421898 ]), 'test_r2': array([0.95912074, 0.94313254, 0.91311963]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([34.37605906, 37.63454819, 34.0871017 ]), 'score_time': array([0.89456248, 0.84983706, 0.88913178]), 'test_pearson_r': array([0.9149557 , 0.92819611, 0.93644781]), 'test_pearson_p': array([-2.98713326e-35, -8.02834533e-38, -5.64992509e-40]), 'test_spearman_r': array([0.79640997, 0.8299398 , 0.79077345]), 'test_spearman_p': array([-2.92661934e-20, -5.30721031e-23, -1.35235962e-19]), 'test_kendall_r': array([0.64326066, 0.61730473, 0.68491177]), 'test_kendall_p': array([-1.36588748e-18, -4.58361466e-17, -1.46772092e-20]), 'test_rmse': array([-31.06360524, -43.01389985, -58.07106548]), 'test_mae': array([-19.16711801, -27.44731633, -24.53012144]), 'test_r2': array([0.81260087, 0.85337801, 0.86294204]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([33.38471913, 34.58255553, 32.80668378]), 'score_time': array([0.80992842, 0.84257603, 0.80174756]), 'test_pearson_r': array([0.9715877 , 0.60697411, 0.96712704]), 'test_pearson_p': array([-5.64782188e-55, -5.82273740e-10, -1.00199598e-51]), 'test_spearman_r': array([0.66388266, 0.78160193, 0.93266219]), 'test_spearman_p': array([-2.40611842e-12, -6.68127560e-19, -5.93551857e-39]), 'test_kendall_r': array([0.54345612, 0.66126941, 0.79117641]), 'test_kendall_p': array([-1.25689670e-13, -2.53900607e-19, -4.81871098e-27]), 'test_rmse': array([-40.05772842, -79.91516725, -32.52620944]), 'test_mae': array([-18.10692365, -24.75285539, -17.62489185]), 'test_r2': array([ 0.92767965, -0.15802124,  0.92768208]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06967139805191243, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 6, 6: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 150.86016903469627, 'test_rmse': 190.3033350481858, 'test_r2': -1.0699497958827444, 'test_pearson_r': array([-0.87335392]), 'test_pearson_p_value': array([2.11678295e-05]), 'test_spearman_r': -0.7919025410689721, 'test_spearman_p_value': 0.0004338057502902183, 'test_kendall_r': -0.6408461287109104, 'test_kendall_p_value': 0.0014519177871345269, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1372, 'regressor__learning_rate': 0.057345077183222626, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 139.79655809762406, 'test_rmse': 174.11442682028365, 'test_r2': -0.7327524781826318, 'test_pearson_r': array([-0.74111439]), 'test_pearson_p_value': array([0.00156997]), 'test_spearman_r': -0.8325129277904577, 'test_spearman_p_value': 0.00011744369278165315, 'test_kendall_r': -0.7442084075352509, 'test_kendall_p_value': 0.0002175662869972926, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 220, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 147.7621540286658, 'test_rmse': 196.17083067192294, 'test_r2': -1.1995603168762052, 'test_pearson_r': array([-0.83657347]), 'test_pearson_p_value': array([0.00010117]), 'test_spearman_r': -0.8240684956669598, 'test_spearman_p_value': 0.0001582377225418277, 'test_kendall_r': -0.7171952718112299, 'test_kendall_p_value': 0.0003877823865575599, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1230, 'regressor__learning_rate': 0.08263651900443651, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 142.44411938177285, 'test_rmse': 176.0877462115897, 'test_r2': -0.7722512174446095, 'test_pearson_r': array([-0.7212608]), 'test_pearson_p_value': array([0.00240719]), 'test_spearman_r': -0.8325129277904577, 'test_spearman_p_value': 0.00011744369278165315, 'test_kendall_r': -0.7442084075352509, 'test_kendall_p_value': 0.0002175662869972926, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 141.62096424330582, 'test_rmse': 184.05959058735476, 'test_r2': -0.9363502547321676, 'test_pearson_r': array([-0.78639773]), 'test_pearson_p_value': array([0.00050674]), 'test_spearman_r': -0.821437367775507, 'test_spearman_p_value': 0.00017309618870654293, 'test_kendall_r': -0.7028634960055147, 'test_kendall_p_value': 0.0004789387602649106, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.044707969735571326, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 144.7489215553572, 'test_rmse': 185.79575788812383, 'test_r2': -0.9730523188393125, 'test_pearson_r': array([-0.80650017]), 'test_pearson_p_value': array([0.0002808]), 'test_spearman_r': -0.821437367775507, 'test_spearman_p_value': 0.00017309618870654293, 'test_kendall_r': -0.7028634960055147, 'test_kendall_p_value': 0.0004789387602649106, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07441141090638533, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 141.55900539424522, 'test_rmse': 174.90090606199783, 'test_r2': -0.7484416054070557, 'test_pearson_r': array([-0.71146957]), 'test_pearson_p_value': array([0.00293475]), 'test_spearman_r': -0.8325129277904577, 'test_spearman_p_value': 0.00011744369278165315, 'test_kendall_r': -0.7442084075352509, 'test_kendall_p_value': 0.0002175662869972926, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 6, 6: {'fit_time': array([34.73331738, 36.0247407 , 39.68833303, 34.34849477, 33.36100101,
       37.95621514, 35.76027393, 39.18613529, 38.27745199, 34.42670631,
       37.11350632, 35.55379057, 37.67566824, 41.37052822, 38.03846836,
       32.84901452, 33.10914183]), 'score_time': array([0.45876694, 0.36343646, 0.33702254, 0.33479452, 0.33203602,
       0.32889867, 0.32085991, 0.31966877, 0.31930017, 0.33416104,
       0.36320877, 0.34210706, 0.35265541, 0.29210782, 0.32755804,
       0.32757163, 0.44952822]), 'test_pearson_r': array([0.94857425, 0.99152001, 0.99963276, 0.99332589, 0.99555568,
       0.95199303, 0.97267751, 0.97131358, 0.90909603, 0.98313563,
       0.9877023 , 0.96810204, 0.96186489, 0.97201777, 0.94943497,
       0.97769925, 0.84581873]), 'test_pearson_p': array([-2.22515854e-08, -8.26841098e-14, -2.41319274e-23, -1.55407994e-14,
       -9.98734446e-15, -4.69491115e-08, -1.26551180e-09, -1.73122343e-09,
       -2.68088334e-06, -5.63782579e-11, -7.31839084e-12, -3.42413697e-09,
       -1.07685639e-08, -1.47546487e-09, -6.53845366e-08, -3.42144822e-10,
       -7.09351885e-05]), 'test_spearman_r': array([0.62251672, 0.87270075, 0.90882353, 0.91979422, 0.925     ,
       0.78571429, 0.96428571, 0.93928571, 0.725     , 0.65831948,
       0.94275643, 0.85714286, 0.71671164, 0.875     , 0.91071429,
       0.76675634, 0.93928571]), 'test_spearman_p': array([-1.00114511e-02, -1.03076760e-05, -1.10058522e-06, -4.62206235e-07,
       -7.98746211e-07, -5.16454748e-04, -7.07230301e-09, -2.09458019e-07,
       -2.22703231e-03, -7.62317058e-03, -1.44081568e-07, -4.44600445e-05,
       -2.64192654e-03, -1.95226138e-05, -2.39502084e-06, -8.52761762e-04,
       -2.09458019e-07]), 'test_kendall_r': array([0.56067436, 0.79498604, 0.8       , 0.79498604, 0.80952381,
       0.65714286, 0.88571429, 0.82857143, 0.65714286, 0.54810226,
       0.83657714, 0.67619048, 0.59330823, 0.75238095, 0.79047619,
       0.70814208, 0.84761905]), 'test_kendall_p': array([-2.53133322e-03, -1.85653874e-05, -1.17934846e-06, -1.85653874e-05,
       -2.27466721e-06, -3.30370902e-04, -5.33772028e-08, -9.95137652e-07,
       -3.30370902e-04, -4.68834350e-03, -1.58906350e-05, -1.99899920e-04,
       -2.12652387e-03, -1.96940497e-05, -4.90647531e-06, -2.45851906e-04,
       -4.07346059e-07]), 'test_rmse': array([-23.80227863, -10.70058727,  -5.51544229, -31.92392293,
       -22.01727127, -18.95595764, -17.00066441, -21.12453055,
       -36.28385239, -10.54520872, -31.72218571, -12.40837993,
       -28.69556291, -26.44231389, -19.98954749, -12.16717685,
       -34.20631321]), 'test_mae': array([-15.55131251,  -8.2994302 ,  -4.40873312, -19.03310589,
       -17.0461777 , -14.24785616, -10.71310827, -12.45217949,
       -17.65653882,  -6.66370692, -18.10210101,  -9.5297601 ,
       -17.48659496, -18.03610675, -11.50261318,  -7.36535758,
       -18.80389095]), 'test_r2': array([0.88481634, 0.97201572, 0.99913986, 0.978099  , 0.98832205,
       0.89885819, 0.94576477, 0.92377394, 0.7837643 , 0.86912542,
       0.9745591 , 0.93586334, 0.90172145, 0.9391997 , 0.89380619,
       0.95404461, 0.67248372]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1357, 'regressor__learning_rate': 0.06961291460365795, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([47.50632787, 42.73175955, 46.40004444, 46.89036179, 47.99111485,
       48.37601495, 41.34311509, 50.72751617, 52.13988614, 44.2009418 ,
       47.96189904, 43.31311798, 50.00135183, 43.57385945, 50.42960191,
       42.6877327 , 45.94463229]), 'score_time': array([0.48393059, 0.4657495 , 0.59412384, 0.5866282 , 0.48812222,
       0.48896432, 1.08410215, 0.46907592, 0.43244791, 0.49838829,
       0.49469352, 0.47142124, 0.48525119, 0.4661026 , 0.45310068,
       0.80476284, 0.47283411]), 'test_pearson_r': array([0.96181451, 0.98896001, 0.93153962, 0.99856253, 0.99507908,
       0.98581668, 0.9834182 , 0.99015811, 0.96643543, 0.83091756,
       0.80642276, 0.9861416 , 0.97996921, 0.95322475, 0.96239055,
       0.95239473, 0.9673196 ]), 'test_pearson_p': array([-2.86916501e-09, -5.20600804e-13, -1.57497085e-07, -3.38761752e-19,
       -1.93429699e-14, -1.84142297e-11, -5.05481732e-11, -1.73030341e-12,
       -4.74866542e-09, -1.24400748e-04, -2.81470078e-04, -1.58514857e-11,
       -1.71214866e-10, -3.97697764e-08, -9.85207367e-09, -4.44970154e-08,
       -4.00073386e-09]), 'test_spearman_r': array([0.83776176, 0.76526879, 0.85945571, 0.75643876, 0.87857143,
       0.82395028, 0.94285714, 0.70357143, 0.88471885, 0.83109953,
       0.76428571, 0.92761431, 0.9097412 , 0.82142857, 0.97142857,
       0.83721064, 0.88214286]), 'test_spearman_p': array([-5.10712482e-05, -5.51268355e-04, -1.98663783e-05, -6.95829127e-04,
       -1.63152803e-05, -1.58881993e-04, -1.42476769e-07, -3.42433709e-03,
       -1.18198790e-05, -1.23590505e-04, -9.07310112e-04, -6.38323204e-07,
       -2.56368176e-06, -1.73147718e-04, -1.68707649e-09, -9.87919071e-05,
       -1.35582106e-05]), 'test_kendall_r': array([0.68359907, 0.62762056, 0.69456675, 0.61088401, 0.79047619,
       0.6890031 , 0.84761905, 0.63809524, 0.765559  , 0.65072515,
       0.56190476, 0.82297593, 0.74642003, 0.77142857, 0.88571429,
       0.72118719, 0.80952381]), 'test_kendall_p': array([-2.51770452e-04, -7.24551643e-04, -1.83536177e-04, -1.00194553e-03,
       -4.90647531e-06, -3.60476360e-04, -4.07346059e-07, -5.32021561e-04,
       -7.37568107e-05, -7.53715459e-04, -2.85822938e-03, -2.03407556e-05,
       -1.11210251e-04, -1.00560004e-05, -5.33772028e-08, -1.98702450e-04,
       -2.27466721e-06]), 'test_rmse': array([-10.59575271, -21.46641299, -25.27121256, -15.50440585,
        -8.68082812, -34.59004701, -15.7032049 , -28.40531801,
       -18.25785262, -24.30634308, -30.10822624, -39.1409464 ,
       -15.55068326, -23.25685542, -23.23960823, -25.33249376,
       -20.42857434]), 'test_mae': array([ -7.19745887, -14.00507648, -16.15319625, -10.18720424,
        -6.14027178, -22.28508017, -12.0310636 , -14.50952181,
       -12.35745898, -15.81293602, -20.17061062, -22.27843165,
       -11.56072965, -12.14285056, -15.21603463, -16.45130189,
       -12.08564819]), 'test_r2': array([0.92471913, 0.93080354, 0.85034394, 0.99454874, 0.9901517 ,
       0.97028924, 0.96159136, 0.97905182, 0.8857791 , 0.40759922,
       0.62749442, 0.96664929, 0.95292008, 0.88318473, 0.92428684,
       0.89335805, 0.92528907]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([36.5243156 , 34.76419759, 39.4087944 , 38.97278857, 37.21495867,
       40.18951726, 31.90267634, 39.52838087, 39.41133738, 41.88185549,
       41.65626478, 32.44851017, 37.33851528, 40.98552775, 39.93282533,
       32.09574866, 29.46213746]), 'score_time': array([0.36233902, 0.34737086, 0.48944402, 0.31534767, 0.31911945,
       0.32832623, 0.36938167, 0.40613461, 0.33114409, 0.3065412 ,
       0.31427336, 0.34969926, 0.32359838, 0.30469871, 0.33131766,
       0.35676336, 0.32619262]), 'test_pearson_r': array([0.91365567, 0.99692678, 0.911586  , 0.9989341 , 0.99432784,
       0.9434319 , 0.9927756 , 0.93067551, 0.9041307 , 0.86365441,
       0.99032625, 0.97932347, 0.9697997 , 0.97299731, 0.97920763,
       0.52504611, 0.98468534]), 'test_pearson_p': array([-7.61715622e-07, -6.88625483e-17, -8.94043137e-07, -4.17951324e-20,
       -4.86190190e-14, -1.33602692e-07, -2.33367908e-13, -4.85647862e-07,
       -3.74170781e-06, -3.33739354e-05, -1.54758026e-12, -2.10104166e-10,
       -2.40959713e-09, -1.17317912e-09, -2.17813391e-10, -4.44618235e-02,
       -3.02425316e-11]), 'test_spearman_r': array([0.86975741, 0.92647059, 0.87941176, 0.96470588, 0.95714286,
       0.93118893, 0.83928571, 0.93571429, 0.76785714, 0.51071429,
       0.96601228, 0.95357143, 0.76675634, 0.89285714, 0.78745186,
       0.47857143, 0.93560078]), 'test_spearman_p': array([-1.19981272e-05, -2.56139707e-07, -7.18727304e-06, -1.66620775e-09,
       -2.27367516e-08, -4.63322550e-07, -9.13693585e-05, -3.01064562e-07,
       -8.29329629e-04, -5.17254984e-02, -5.14628156e-09, -3.79244004e-08,
       -8.52761762e-04, -7.49473606e-06, -4.92053039e-04, -7.11308083e-02,
       -3.04452034e-07]), 'test_kendall_r': array([0.72803985, 0.78333333, 0.73333333, 0.88333333, 0.84761905,
       0.78469798, 0.71428571, 0.80952381, 0.6       , 0.40952381,
       0.89427211, 0.86666667, 0.59330823, 0.77142857, 0.6506081 ,
       0.44761905, 0.83657714]), 'test_kendall_p': array([-8.82060896e-05, -2.41022656e-06, -1.62687222e-05, -1.43717927e-08,
       -4.07346059e-07, -4.84614653e-05, -6.71036430e-05, -2.27466721e-06,
       -1.28586080e-03, -3.58972374e-02, -3.95717604e-06, -1.54339647e-07,
       -2.12652387e-03, -1.00560004e-05, -8.53759357e-04, -2.07906153e-02,
       -1.58906350e-05]), 'test_rmse': array([-30.1788235 , -14.66870761, -30.99339286, -23.87379803,
       -24.83746864, -14.66849192, -26.44832958, -26.78893353,
       -16.36384283, -26.33387694, -20.99423367, -14.8718362 ,
       -17.6182979 , -22.16973617, -14.0358841 , -38.61993297,
       -16.34100203]), 'test_mae': array([-19.42706251, -11.88416574, -19.35191464, -11.16619997,
       -17.30768936, -10.57676675, -17.942378  , -13.90003254,
       -10.7402952 , -18.19557345,  -9.96018706,  -8.96815037,
       -12.83500104, -14.49379784,  -9.53195994, -15.89844061,
        -8.67689581]), 'test_r2': array([ 0.82225675,  0.99368882,  0.80236561,  0.98785027,  0.98567259,
        0.88417777,  0.98335615,  0.85069154,  0.77753441,  0.52836994,
        0.96431709,  0.95755497,  0.88617453,  0.93413747,  0.95856582,
       -0.81242511,  0.95600529]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1354, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([44.44647312, 41.65386295, 45.58793139, 52.30825663, 46.84652352,
       43.23579717, 39.0022161 , 43.71291518, 42.79843283, 42.7261622 ,
       49.85959458, 43.60017037, 45.0420382 , 40.27249002, 39.50610662,
       42.09140229, 42.29540014]), 'score_time': array([0.47486567, 0.47876573, 0.44013286, 0.42099833, 0.45146537,
       0.50224352, 0.47087979, 0.47150922, 0.48482943, 0.47670794,
       0.45527029, 0.50432444, 0.4511652 , 0.54334116, 0.47802639,
       0.48962331, 0.48663116]), 'test_pearson_r': array([ 0.96475882,  0.96729916,  0.98391951,  0.99873111, -0.021472  ,
        0.94881884,  0.99593692,  0.99687068,  0.96431738,  0.99321202,
        0.65614792,  0.92920295,  0.99018174,  0.93293747,  0.99803145,
        0.96954109,  0.99120079]), 'test_pearson_p': array([-1.64902313e-09, -9.83383742e-10, -7.14561641e-12, -1.41530687e-19,
       -9.39455667e-01, -7.06339723e-08, -5.58048719e-15, -1.02449042e-15,
       -7.03218091e-09, -1.55811281e-13, -7.89635046e-03, -5.54739531e-07,
       -1.70357372e-12, -3.93626376e-07, -5.04926146e-17, -2.54532746e-09,
       -8.37685342e-13]), 'test_spearman_r': array([0.71376031, 0.92941176, 0.86176471, 0.83889941, 0.41860465,
       0.57857143, 0.93571429, 0.87857143, 0.91428571, 0.95706772,
       0.49285714, 0.75357143, 0.8918681 , 0.9097412 , 0.78928571,
       0.95714286, 0.88114423]), 'test_spearman_p': array([-1.90106275e-03, -1.94011895e-07, -1.78051844e-05, -4.87719394e-05,
       -1.20439845e-01, -2.38466588e-02, -3.01064562e-07, -1.63152803e-05,
       -1.85311213e-06, -2.29929148e-08, -6.19510067e-02, -1.17758302e-03,
       -7.93644802e-06, -2.56368176e-06, -4.67326756e-04, -2.27367516e-08,
       -1.42868450e-05]), 'test_kendall_r': array([0.61088401, 0.85      , 0.73333333, 0.73112616, 0.41346154,
       0.46666667, 0.82857143, 0.71428571, 0.75238095, 0.87504045,
       0.39047619, 0.54285714, 0.74642003, 0.74642003, 0.6952381 ,
       0.88571429, 0.765559  ]), 'test_kendall_p': array([-1.00194553e-03, -1.02027025e-07, -1.62687222e-05, -1.19358328e-04,
       -3.29121231e-02, -1.55108232e-02, -9.95137652e-07, -6.71036430e-05,
       -1.96940497e-05, -6.34958704e-06, -4.62924754e-02, -4.14288160e-03,
       -1.11210251e-04, -1.11210251e-04, -1.17603724e-04, -5.33772028e-08,
       -7.37568107e-05]), 'test_rmse': array([ -23.27323665,  -15.68504807,  -15.77043266,  -11.46321204,
       -180.4626392 ,  -22.32683808,  -34.31109788,  -16.26779344,
        -22.50890253,   -8.51009572,  -52.071736  ,  -21.81754151,
        -10.88971296,  -25.49412763,  -15.89354631,  -21.50735723,
        -31.91856176]), 'test_mae': array([-12.02446576,  -9.19430604, -10.9211079 ,  -5.76389395,
       -77.79389174, -14.39020096, -21.64937513, -12.47049968,
       -15.51585786,  -5.45680574, -32.97942221, -13.27629374,
        -7.25608079, -16.79822641, -11.79182785, -14.4125456 ,
       -23.48864066]), 'test_r2': array([  0.89188648,   0.93385687,   0.96768359,   0.9641956 ,
       -11.82488798,   0.89851707,   0.97546703,   0.99316947,
         0.91312507,   0.96922661,   0.33434232,   0.82798037,
         0.97590678,   0.86480382,   0.99366712,   0.9332617 ,
         0.9770259 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.028336877898542227, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([47.79553127, 50.5357728 , 47.79793715, 40.28562355, 43.04801583,
       43.14858508, 48.17929649, 39.45390701, 47.7685926 , 39.82390857,
       39.12937737, 49.09314251, 39.86982274, 48.8215642 , 41.5047121 ,
       46.83706069, 49.03676391]), 'score_time': array([0.47121   , 0.42358804, 0.46788645, 0.48730922, 0.46344662,
       0.46733761, 0.49007034, 0.46583652, 0.50451016, 0.47307158,
       0.46577334, 0.50905704, 0.45390654, 0.47685742, 0.47178411,
       0.47900844, 0.4769392 ]), 'test_pearson_r': array([0.97039115, 0.94853496, 0.97357227, 0.94927961, 0.99080479,
       0.98864511, 0.98286013, 0.9834505 , 0.79210694, 0.76655352,
       0.99701469, 0.99590224, 0.89148462, 0.90042707, 0.96039761,
       0.55044296, 0.99919827]), 'test_pearson_p': array([-4.94687510e-10, -2.23685058e-08, -2.25147061e-10, -2.02392879e-08,
       -1.11413240e-12, -4.36745656e-12, -6.25989717e-11, -4.99154170e-11,
       -4.31272375e-04, -8.57137080e-04, -7.54494329e-16, -5.89691620e-15,
       -8.11343706e-06, -4.74332998e-06, -1.37148577e-08, -3.34833320e-02,
       -1.47458598e-19]), 'test_spearman_r': array([0.7039772 , 0.78761405, 0.59749832, 0.83149397, 0.77390558,
       0.94285714, 0.91071429, 0.95357143, 0.8       , 0.63677361,
       0.94275492, 0.55227904, 0.97142857, 0.80786449, 0.92046507,
       0.47006274, 0.975     ]), 'test_spearman_p': array([-2.33647189e-03, -2.91880202e-04, -1.45184204e-02, -6.54277487e-05,
       -7.09709482e-04, -1.42476769e-07, -2.39502084e-06, -3.79244004e-08,
       -3.42269833e-04, -1.06884730e-02, -1.44105720e-07, -3.27773127e-02,
       -1.68707649e-09, -2.69118703e-04, -1.15689725e-06, -7.70422268e-02,
       -7.14370597e-10]), 'test_kendall_r': array([0.57144875, 0.6329621 , 0.47699162, 0.6443571 , 0.66986413,
       0.80952381, 0.79047619, 0.86666667, 0.63809524, 0.53400575,
       0.83653846, 0.3827795 , 0.9047619 , 0.59330823, 0.765559  ,
       0.42105745, 0.88571429]), 'test_kendall_p': array([-2.15672721e-03, -7.00693466e-04, -1.02025312e-02, -5.19968854e-04,
       -5.23662480e-04, -2.27466721e-06, -4.90647531e-06, -1.54339647e-07,
       -5.32021561e-04, -6.19297767e-03, -1.58942744e-05, -4.74887594e-02,
       -1.65377563e-08, -2.12652387e-03, -7.37568107e-05, -2.92495714e-02,
       -5.33772028e-08]), 'test_rmse': array([-18.35990238, -20.36020757, -17.57084593, -20.11856407,
       -29.58468067, -15.67698792, -15.88119523, -21.95503368,
       -27.95143778, -25.52169714, -21.99624605,  -8.38328029,
       -35.27029712, -35.89031008, -15.599429  , -32.30362095,
        -7.80542413]), 'test_mae': array([-12.08774706, -10.86872652,  -9.15885641, -12.73687087,
       -21.0240327 , -10.93168409,  -9.57869144, -14.35582536,
       -16.74995052, -15.35493988, -15.0895527 ,  -6.23654246,
       -15.49066751, -22.87680678, -12.22320937, -16.54315292,
        -5.91155672]), 'test_r2': array([ 0.94091774,  0.88256476,  0.9468957 ,  0.83641165,  0.98038304,
        0.96226262,  0.95943489,  0.96037776,  0.35763822,  0.17441074,
        0.99322064,  0.99168143,  0.77140743,  0.78207194,  0.91670081,
       -0.25684476,  0.99839379]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([34.0885253 , 37.80763197, 36.04158235, 35.93551278, 33.54350543,
       35.80383301, 39.56959605, 39.75001359, 37.36115551, 41.28305984,
       37.10605359, 39.53483462, 35.72635317, 40.82292914, 41.6739378 ,
       36.981318  , 38.71243501]), 'score_time': array([0.46069407, 0.46712708, 0.46625304, 0.49745536, 0.46472335,
       0.45741892, 0.49899244, 0.466676  , 0.60925007, 0.46313334,
       0.48292637, 0.4669466 , 0.48366642, 0.46438336, 0.47460532,
       0.52557397, 0.46018076]), 'test_pearson_r': array([0.97226608, 0.7970627 , 0.98980306, 0.95937909, 0.99819463,
       0.9576725 , 0.94129708, 0.99310975, 0.93369314, 0.95319306,
       0.90579666, 0.96831235, 0.99777194, 0.98905394, 0.87658065,
       0.96056774, 0.99244584]), 'test_pearson_p': array([-3.14499971e-10, -2.18071296e-04, -2.99211674e-13, -4.39433636e-09,
       -2.87822373e-17, -2.09982176e-08, -1.69093400e-07, -1.71674373e-13,
       -3.66351525e-07, -3.99421581e-08, -3.35255024e-06, -3.28169241e-09,
       -1.12858238e-16, -3.44461373e-12, -1.80440722e-05, -1.33418840e-08,
       -3.11673329e-13]), 'test_spearman_r': array([0.76764706, 0.69411765, 0.84536174, 0.94117647, 0.87713322,
       0.78571429, 0.85357143, 0.925     , 0.79642857, 0.81842576,
       0.8       , 0.91689045, 0.98214286, 0.93476355, 0.64164458,
       0.70135234, 0.66428571]), 'test_spearman_p': array([-5.16883524e-04, -2.85370590e-03, -3.72881931e-05, -5.58893763e-08,
       -1.75496608e-05, -5.16454748e-04, -5.17314357e-05, -7.98746211e-07,
       -3.80467679e-04, -1.91490022e-04, -3.42269833e-04, -1.52607666e-06,
       -8.15733351e-11, -3.30439854e-07, -9.92354525e-03, -3.57298785e-03,
       -6.91068298e-03]), 'test_kendall_r': array([0.66666667, 0.53333333, 0.73952191, 0.83333333, 0.76702644,
       0.6       , 0.6952381 , 0.77142857, 0.65714286, 0.64423077,
       0.67619048, 0.78469798, 0.92380952, 0.82297593, 0.55503028,
       0.57292355, 0.52380952]), 'test_kendall_p': array([-1.34937165e-04, -3.34096186e-03, -7.18614621e-05, -2.44193725e-07,
       -8.42840640e-05, -1.28586080e-03, -1.17603724e-04, -1.00560004e-05,
       -3.30370902e-04, -8.88154414e-04, -1.99899920e-04, -4.84614653e-05,
       -4.47206135e-09, -2.03407556e-05, -4.05595629e-03, -3.31862395e-03,
       -5.90158628e-03]), 'test_rmse': array([-17.09311787, -40.01488551, -12.93519965, -24.09929084,
        -4.3692337 , -19.14049446, -20.70064641, -34.87488612,
       -26.761048  , -18.74163343, -13.72896802, -22.4066201 ,
       -13.37307807, -16.59058919, -40.22893769, -14.77515673,
       -39.43983652]), 'test_mae': array([-11.68263705, -28.35455789,  -8.57743452, -15.78345315,
        -3.0837704 ,  -9.55275459, -12.30346125, -23.24939146,
       -16.41329999, -13.22139177,  -9.09114883, -13.41866983,
        -9.76229759, -12.57004285, -25.27992564,  -9.09975956,
       -26.27840891]), 'test_r2': array([0.94428327, 0.51686704, 0.97683188, 0.89226436, 0.99635473,
       0.82254662, 0.79007805, 0.97379616, 0.86664648, 0.84542172,
       0.80141509, 0.89146429, 0.99498076, 0.97062443, 0.76763302,
       0.90911657, 0.97927369]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.028765545186987682, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([65.18482947, 62.16953373, 57.21120095, 46.77288055, 60.04553723,
       44.74055147, 47.11461687, 59.55941296, 52.60922217, 67.21276927,
       43.99413419, 61.85365558, 61.04925418, 63.78883505, 60.52643871,
       61.90948248, 55.60069203]), 'score_time': array([0.48015451, 0.50433803, 0.63506985, 0.50480652, 0.46216774,
       0.47342467, 0.47893023, 0.46606135, 0.51348329, 0.43362236,
       0.4975791 , 0.47106719, 0.46544886, 0.43913865, 0.46777463,
       0.4921515 , 0.49365735]), 'test_pearson_r': array([0.99405582, 0.97940561, 0.99734683, 0.9472917 , 0.47415019,
       0.9545301 , 0.984167  , 0.97502677, 0.96021287, 0.9823518 ,
       0.8518738 , 0.97611427, 0.98112061, 0.98017838, 0.96680523,
       0.94409659, 0.99763318]), 'test_pearson_p': array([-6.92141489e-15, -3.99028302e-11, -2.46412894e-17, -2.63484975e-08,
       -7.41602039e-02, -3.31918102e-08, -3.75007565e-11, -7.09458902e-10,
       -1.41297795e-08, -7.56031975e-11, -5.55173076e-05, -5.32571697e-10,
       -1.16849285e-10, -1.60002218e-10, -4.42267020e-09, -1.23923202e-07,
       -1.67088841e-16]), 'test_spearman_r': array([0.6490068 , 0.66076984, 0.81677726, 0.83149397, 0.84182339,
       0.72028626, 0.93571429, 0.81071429, 0.93833818, 0.60714286,
       0.87042037, 0.95263666, 0.9419128 , 0.96428571, 0.93214286,
       0.91071429, 0.87857143]), 'test_spearman_p': array([-6.52447858e-03, -5.32639447e-03, -1.12789178e-04, -6.54277487e-05,
       -8.29228077e-05, -2.45601578e-03, -3.01064562e-07, -2.46007978e-04,
       -2.31103976e-07, -1.63813068e-02, -2.43848726e-05, -4.30728048e-08,
       -1.58129910e-07, -7.07230301e-09, -4.24121823e-07, -2.39502084e-06,
       -1.63152803e-05]), 'test_kendall_r': array([0.59414746, 0.6329621 , 0.76151294, 0.6778302 , 0.74642003,
       0.55503028, 0.82857143, 0.67619048, 0.82297593, 0.40952381,
       0.72728105, 0.88039285, 0.86125388, 0.86666667, 0.84761905,
       0.79047619, 0.75238095]), 'test_kendall_p': array([-1.37502262e-03, -7.00693466e-04, -4.10999309e-05, -2.61704221e-04,
       -1.11210251e-04, -4.05595629e-03, -9.95137652e-07, -1.99899920e-04,
       -2.03407556e-05, -3.58972374e-02, -1.66124056e-04, -5.15437155e-06,
       -8.22244396e-06, -1.54339647e-07, -4.07346059e-07, -4.90647531e-06,
       -1.96940497e-05]), 'test_rmse': array([-23.77545622, -42.63249125, -14.72731761, -20.53196312,
       -42.85268424, -17.8662558 , -16.38109469, -18.6333327 ,
       -19.38981382, -14.87893831, -34.44023297, -21.6680683 ,
       -19.46110841, -28.98414121, -21.99069628, -24.58481827,
       -26.76340468]), 'test_mae': array([-14.88439481, -17.55888693, -10.20308795, -13.20463885,
       -16.7249713 , -13.90270356, -10.19242623, -11.11852951,
       -14.24567085, -12.11743756, -20.96349237, -14.48465771,
       -11.36126144, -18.18110817, -13.89010716, -15.17667352,
       -14.6847239 ]), 'test_r2': array([ 0.98348605,  0.95664355,  0.99398121,  0.88998902, -0.44097752,
        0.89381559,  0.96325998,  0.94044267,  0.91663644,  0.96245937,
        0.70505426,  0.93789327,  0.95266814,  0.89217841,  0.926727  ,
        0.83879116,  0.98542824]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04410133606231344, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 32, 6: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 59.628635033799966, 'test_rmse': 82.0073290041719, 'test_r2': -0.17183113787829307, 'test_pearson_r': array([0.53302138]), 'test_pearson_p_value': array([2.13066754e-07]), 'test_spearman_r': 0.41878876607664295, 'test_spearman_p_value': 8.140982291206712e-05, 'test_kendall_r': 0.2944591079967877, 'test_kendall_p_value': 8.89802883362956e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 888, 'regressor__learning_rate': 0.08758212794188358, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 64.155119102528, 'test_rmse': 86.86065068715624, 'test_r2': -0.3146370163322172, 'test_pearson_r': array([0.41379576]), 'test_pearson_p_value': array([0.00010087]), 'test_spearman_r': 0.31886769510294904, 'test_spearman_p_value': 0.0033025979089150517, 'test_kendall_r': 0.19781183686357118, 'test_kendall_p_value': 0.008571774478619258, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 268, 'regressor__learning_rate': 0.05168884768073294, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 62.281653486674294, 'test_rmse': 85.05072460651581, 'test_r2': -0.2604213059536604, 'test_pearson_r': array([0.466033]), 'test_pearson_p_value': array([8.99307801e-06]), 'test_spearman_r': 0.3657284604408491, 'test_spearman_p_value': 0.0006738259508872117, 'test_kendall_r': 0.24915286918037302, 'test_kendall_p_value': 0.0009339446729917783, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1246, 'regressor__learning_rate': 0.07352481813242628, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 64.30725939878653, 'test_rmse': 86.76714556926116, 'test_r2': -0.31180813757167014, 'test_pearson_r': array([0.44985978]), 'test_pearson_p_value': array([1.98382755e-05]), 'test_spearman_r': 0.2892092488470965, 'test_spearman_p_value': 0.0080066800725285, 'test_kendall_r': 0.16948247574370534, 'test_kendall_p_value': 0.025023831777646426, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 203, 'regressor__learning_rate': 0.05678145779258077, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 63.85779312046311, 'test_rmse': 86.60551721199347, 'test_r2': -0.30692546189312475, 'test_pearson_r': array([0.47871908]), 'test_pearson_p_value': array([4.69814545e-06]), 'test_spearman_r': 0.3673265174875548, 'test_spearman_p_value': 0.0006354858352034487, 'test_kendall_r': 0.23644902167474777, 'test_kendall_p_value': 0.0016865682336822969, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 838, 'regressor__learning_rate': 0.039995235361947455, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 64.79155361804453, 'test_rmse': 88.2659697880462, 'test_r2': -0.3575201798299159, 'test_pearson_r': array([0.42410267]), 'test_pearson_p_value': array([6.45651937e-05]), 'test_spearman_r': 0.3430236900889003, 'test_spearman_p_value': 0.001500387158776121, 'test_kendall_r': 0.20101267802020917, 'test_kendall_p_value': 0.007625723150551879, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 521, 'regressor__learning_rate': 0.026785750809876597, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 63.08613481068177, 'test_rmse': 85.92005513197817, 'test_r2': -0.2863193235570134, 'test_pearson_r': array([0.46746911]), 'test_pearson_p_value': array([8.36657723e-06]), 'test_spearman_r': 0.33663014913778777, 'test_spearman_p_value': 0.0018602099014090542, 'test_kendall_r': 0.20633803892841163, 'test_kendall_p_value': 0.0060957872489300355, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 295, 'regressor__learning_rate': 0.08414470563140648, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 33, 6: {'fit_time': array([32.54143476, 34.29059505, 34.04386854]), 'score_time': array([0.86425519, 0.89544201, 0.81197643]), 'test_pearson_r': array([0.91962064, 0.97236007, 0.93444776]), 'test_pearson_p': array([-2.99733622e-36, -7.66232895e-55, -1.99201250e-39]), 'test_spearman_r': array([0.77241015, 0.88131716, 0.7708181 ]), 'test_spearman_p': array([-1.93985471e-18, -4.40182674e-29, -3.97237344e-18]), 'test_kendall_r': array([0.64799777, 0.7592011 , 0.62287523]), 'test_kendall_p': array([-7.57602315e-19, -5.97227461e-25, -2.41759751e-17]), 'test_rmse': array([-75.48061514, -24.64331724, -28.1502423 ]), 'test_mae': array([-28.97462129, -12.80509533, -16.50098067]), 'test_r2': array([0.77336281, 0.94525399, 0.86874813]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([29.4786706 , 33.4799242 , 31.25047374]), 'score_time': array([0.89720321, 0.89532256, 0.87574291]), 'test_pearson_r': array([0.93222414, 0.96005048, 0.9674255 ]), 'test_pearson_p': array([-2.77854215e-39, -3.12246643e-48, -6.87289294e-52]), 'test_spearman_r': array([0.69535419, 0.79974336, 0.85450198]), 'test_spearman_p': array([-7.82403956e-14, -2.61969748e-20, -1.28970920e-25]), 'test_kendall_r': array([0.55863838, 0.65423263, 0.7028175 ]), 'test_kendall_p': array([-2.14914715e-14, -5.72790087e-19, -1.28288916e-21]), 'test_rmse': array([-42.65198011, -38.46790115, -30.81383122]), 'test_mae': array([-20.35412255, -20.57863288, -19.64889261]), 'test_r2': array([0.85524369, 0.91052293, 0.92951762]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.054183698028338154, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([35.67378235, 34.23561335, 32.85534668]), 'score_time': array([0.79079342, 0.82586217, 1.11774468]), 'test_pearson_r': array([0.98358733, 0.72713948, 0.93990455]), 'test_pearson_p': array([-5.36752728e-65, -2.23747376e-15, -5.79270890e-41]), 'test_spearman_r': array([0.90146865, 0.75773717, 0.8285437 ]), 'test_spearman_p': array([-1.16966546e-32, -3.04389853e-17, -7.25745800e-23]), 'test_kendall_r': array([0.75693104, 0.63383281, 0.67611243]), 'test_kendall_p': array([-3.70915742e-25, -6.84900738e-18, -4.48688302e-20]), 'test_rmse': array([-36.53996905, -93.9744641 , -24.33723849]), 'test_mae': array([-20.31464799, -28.59073551, -14.16019282]), 'test_r2': array([0.94697497, 0.26053434, 0.88260102]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([33.3881917 , 35.96438789, 34.30726123]), 'score_time': array([0.89767957, 0.8417573 , 0.85935903]), 'test_pearson_r': array([0.51858433, 0.93874754, 0.95035062]), 'test_pearson_p': array([-2.67136028e-07, -1.25998068e-40, -2.36156469e-44]), 'test_spearman_r': array([0.81607023, 0.8264806 , 0.82166798]), 'test_spearman_p': array([-6.06183576e-22, -1.14660158e-22, -3.25651505e-22]), 'test_kendall_r': array([0.69115878, 0.67151644, 0.69049599]), 'test_kendall_p': array([-4.31069413e-21, -6.93197499e-20, -5.27729889e-21]), 'test_rmse': array([-89.13962045, -49.05787613, -44.07895385]), 'test_mae': array([-24.56786129, -24.10843754, -20.36864777]), 'test_r2': array([-0.78683839,  0.87418431,  0.89661072]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05705489530331452, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([7.35398364, 8.1367209 , 7.93073297]), 'score_time': array([0.25519419, 0.24762988, 0.2412622 ]), 'test_pearson_r': array([0.97742245, 0.97225359, 0.96086479]), 'test_pearson_p': array([-3.64023163e-59, -8.98586594e-55, -1.33681291e-48]), 'test_spearman_r': array([0.78066567, 0.74655482, 0.88104006]), 'test_spearman_p': array([-4.86549469e-19, -1.57146381e-16, -4.82633710e-29]), 'test_kendall_r': array([0.63375645, 0.6217591 , 0.76405638]), 'test_kendall_p': array([-4.64764525e-18, -2.83182396e-17, -3.28573568e-25]), 'test_rmse': array([-23.68511276, -33.09467033, -29.70513569]), 'test_mae': array([-14.88286959, -17.92873159, -15.55526711]), 'test_r2': array([0.955268  , 0.94204076, 0.92180668]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 518, 'regressor__learning_rate': 0.09214363677545287, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([13.17195487, 14.44813442, 12.8508234 ]), 'score_time': array([0.38696885, 0.38510609, 0.38697386]), 'test_pearson_r': array([0.92204062, 0.92866305, 0.90671377]), 'test_pearson_p': array([-8.60286879e-37, -6.16348076e-38, -3.04986041e-33]), 'test_spearman_r': array([0.83498371, 0.81904771, 0.79960176]), 'test_spearman_p': array([-9.14937605e-24, -5.67410886e-22, -2.69018772e-20]), 'test_kendall_r': array([0.65907669, 0.61639741, 0.67759336]), 'test_kendall_p': array([-1.88142339e-19, -5.04394298e-17, -4.01266654e-20]), 'test_rmse': array([-29.67129806, -42.83608902, -70.7172407 ]), 'test_mae': array([-18.81317506, -26.49749169, -26.66584478]), 'test_r2': array([0.8290233 , 0.85458772, 0.79674779]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 880, 'regressor__learning_rate': 0.07656721516800831, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([29.83370304, 33.26805091, 32.53525448]), 'score_time': array([0.8517406 , 0.85360861, 0.82527328]), 'test_pearson_r': array([0.96343267, 0.53130973, 0.972948  ]), 'test_pearson_p': array([-2.16966179e-50, -1.41577273e-07, -3.14313945e-55]), 'test_spearman_r': array([0.65913499, 0.7947178 , 0.93451525]), 'test_spearman_p': array([-3.89429282e-12, -6.63727208e-20, -1.91033988e-39]), 'test_kendall_r': array([0.55360832, 0.67609238, 0.78443285]), 'test_kendall_p': array([-4.87188308e-14, -3.98256218e-20, -1.31854163e-26]), 'test_rmse': array([-43.64903725, -94.37343915, -30.86225172]), 'test_mae': array([-18.76548435, -26.75558998, -17.26757049]), 'test_r2': array([ 0.91413084, -0.61494473,  0.93489201]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.027890551397435022, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 25, 6: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 83.30412874903189, 'test_rmse': 131.33735524726737, 'test_r2': -7.531354453163205, 'test_pearson_r': array([0.60821462]), 'test_pearson_p_value': array([9.77688453e-08]), 'test_spearman_r': 0.49824162782495407, 'test_spearman_p_value': 2.794608230139172e-05, 'test_kendall_r': 0.3424534333974051, 'test_kendall_p_value': 7.462072335997015e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04672835690758772, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 89.4778688455799, 'test_rmse': 137.39548018385065, 'test_r2': -8.336548235766532, 'test_pearson_r': array([0.5817676]), 'test_pearson_p_value': array([4.61541748e-07]), 'test_spearman_r': 0.3952119777642646, 'test_spearman_p_value': 0.0012290558742755321, 'test_kendall_r': 0.2694107266497191, 'test_kendall_p_value': 0.0018102105334111217, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 35.66164159670988, 'test_rmse': 52.794806766768694, 'test_r2': -0.3785542520045182, 'test_pearson_r': array([0.62308948]), 'test_pearson_p_value': array([3.83110724e-08]), 'test_spearman_r': 0.5132281628251822, 'test_spearman_p_value': 1.4471453441820098e-05, 'test_kendall_r': 0.36459717809867087, 'test_kendall_p_value': 2.3735191106717747e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.011311750738931274, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 83.39483548176199, 'test_rmse': 130.04750931915774, 'test_r2': -7.364606801636988, 'test_pearson_r': array([0.58799216]), 'test_pearson_p_value': array([3.24308505e-07]), 'test_spearman_r': 0.42271045345548924, 'test_spearman_p_value': 0.0005020232255102032, 'test_kendall_r': 0.2923721341827393, 'test_kendall_p_value': 0.0007088246432550374, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 223, 'regressor__learning_rate': 0.0497567488082172, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 87.52539130038296, 'test_rmse': 141.74881497147328, 'test_r2': -8.937572875417947, 'test_pearson_r': array([0.53989987]), 'test_pearson_p_value': array([4.14162688e-06]), 'test_spearman_r': 0.46577997572759716, 'test_spearman_p_value': 0.00010506556229108319, 'test_kendall_r': 0.3327663530516848, 'test_kendall_p_value': 0.00012290903229012385, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 50, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 85.21254837835446, 'test_rmse': 136.92259392144635, 'test_r2': -8.272389976296948, 'test_pearson_r': array([0.57304156]), 'test_pearson_p_value': array([7.47764867e-07]), 'test_spearman_r': 0.4131959440586793, 'test_spearman_p_value': 0.0006902609873192871, 'test_kendall_r': 0.28843973708222714, 'test_kendall_p_value': 0.0008375564537822196, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 79.45579622354794, 'test_rmse': 128.46902816185062, 'test_r2': -7.162784485810096, 'test_pearson_r': array([0.57288723]), 'test_pearson_p_value': array([7.54079051e-07]), 'test_spearman_r': 0.44574261725591185, 'test_spearman_p_value': 0.00022320211714330708, 'test_kendall_r': 0.327917376523449, 'test_kendall_p_value': 0.00014592746567424877, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0512727601361697, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 25, 6: {'fit_time': array([13.114748  , 14.72751498, 13.19915676, 14.36504078]), 'score_time': array([0.29892945, 0.30038524, 0.28372264, 0.28024149]), 'test_pearson_r': array([0.98898579, 0.97851368, 0.96655261, 0.95431465]), 'test_pearson_p': array([-5.41553343e-54, -6.41904112e-45, -6.08114792e-39, -3.14452296e-34]), 'test_spearman_r': array([0.79231427, 0.87405206, 0.80901482, 0.88881003]), 'test_spearman_p': array([-3.78988867e-15, -2.02119752e-21, -3.54851154e-16, -1.10476279e-22]), 'test_kendall_r': array([0.66216494, 0.76004869, 0.65652549, 0.74888199]), 'test_kendall_p': array([-7.83364322e-15, -3.88680833e-19, -1.39537518e-14, -2.61403191e-18]), 'test_rmse': array([-24.69157761, -24.58622943, -30.91361236, -23.04516786]), 'test_mae': array([-14.07183615, -14.05217608, -16.850386  , -13.0374982 ]), 'test_r2': array([0.97367914, 0.95705027, 0.92954624, 0.90811017]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 847, 'regressor__learning_rate': 0.08646479880356304, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([4.43320799, 3.4623363 , 3.59238458, 3.78741288]), 'score_time': array([0.10134935, 0.10411477, 0.09979963, 0.0999279 ]), 'test_pearson_r': array([0.91703088, 0.9841568 , 0.96509524, 0.93830459]), 'test_pearson_p': array([-7.68411975e-27, -4.74195742e-49, -2.28000636e-38, -2.74570492e-30]), 'test_spearman_r': array([0.69066745, 0.86918316, 0.85372041, 0.89569429]), 'test_spearman_p': array([-1.93405639e-10, -6.18352990e-21, -1.63477993e-19, -1.69256046e-23]), 'test_kendall_r': array([0.50917898, 0.768308  , 0.67470792, 0.75118185]), 'test_kendall_p': array([-2.38419057e-09, -2.12627567e-19, -2.32108914e-15, -2.02874557e-18]), 'test_rmse': array([-50.3296716 , -27.12246424, -31.85423887, -27.67104036]), 'test_mae': array([-24.37536038, -13.47900256, -19.27360462, -17.89523492]), 'test_r2': array([0.8233368 , 0.96697055, 0.92740321, 0.86628915]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 269, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([32.9143889 , 34.05970168, 32.85354781, 33.8710289 ]), 'score_time': array([0.66007304, 0.66768193, 0.63858891, 0.72293401]), 'test_pearson_r': array([0.98347719, 0.98796645, 0.91517032, 0.92830594]), 'test_pearson_p': array([-1.76261302e-48, -8.66813094e-53, -1.50157619e-26, -2.48686729e-28]), 'test_spearman_r': array([0.8945643 , 0.8872947 , 0.72631108, 0.82234246]), 'test_spearman_p': array([-1.03024223e-23, -7.51430351e-23, -7.52453171e-12, -7.98677447e-17]), 'test_kendall_r': array([0.75855501, 0.74211467, 0.58154798, 0.70260539]), 'test_kendall_p': array([-4.97468669e-19, -2.65774048e-18, -8.23353068e-12, -3.27570456e-16]), 'test_rmse': array([-28.84259572, -23.74660729, -30.62189161, -27.24961233]), 'test_mae': array([-17.67459487, -13.88917045, -18.11712695, -13.79180863]), 'test_r2': array([0.96409697, 0.97475876, 0.82236773, 0.86019426]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([29.66876268, 29.78304291, 32.39880872, 33.68550158]), 'score_time': array([0.67072392, 0.60952926, 0.68563747, 0.62196803]), 'test_pearson_r': array([0.96980463, 0.91620286, 0.91261427, 0.9179991 ]), 'test_pearson_p': array([-2.54618998e-40, -1.03731712e-26, -3.67762455e-26, -1.36952648e-26]), 'test_spearman_r': array([0.89947863, 0.79018282, 0.81388386, 0.75353161]), 'test_spearman_p': array([-2.47238097e-24, -5.04831469e-15, -1.70230169e-16, -6.72646286e-13]), 'test_kendall_r': array([0.74838122, 0.66024562, 0.6544513 , 0.64613874]), 'test_kendall_p': array([-2.04908664e-18, -8.31865518e-15, -1.53582881e-14, -4.76432705e-14]), 'test_rmse': array([-18.41062126, -62.77692626, -26.97476105, -62.40625658]), 'test_mae': array([-11.3453198 , -22.77375056, -14.63387646, -28.63501772]), 'test_r2': array([0.93412059, 0.83245961, 0.82627714, 0.83264583]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03620694020279166, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([32.2002449 , 33.26686001, 33.25554562, 34.13430905]), 'score_time': array([0.69562221, 0.65732384, 0.65735602, 0.62464929]), 'test_pearson_r': array([0.98860755, 0.97454203, 0.98465619, 0.96086551]), 'test_pearson_p': array([-1.55992533e-53, -1.26482997e-42, -1.74194995e-49, -2.85758951e-36]), 'test_spearman_r': array([0.71067103, 0.91178495, 0.81467234, 0.83200916]), 'test_spearman_p': array([-3.32004059e-11, -4.88914007e-26, -1.50834535e-16, -1.64250765e-17]), 'test_kendall_r': array([0.55287713, 0.77737668, 0.69435258, 0.71837046]), 'test_kendall_p': array([-8.87797794e-11, -6.02568719e-20, -3.81518818e-16, -5.61019196e-17]), 'test_rmse': array([-18.45155767, -20.98869388, -27.5101792 , -31.15033868]), 'test_mae': array([-11.59994198, -13.52365635, -16.5540119 , -16.47879599]), 'test_r2': array([0.97607499, 0.94045199, 0.96705083, 0.92030246]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([35.76641512, 32.63486552, 34.4363234 , 33.98935795]), 'score_time': array([0.62294674, 0.7349453 , 0.68771744, 0.64585018]), 'test_pearson_r': array([0.89566795, 0.98045086, 0.99061618, 0.95183954]), 'test_pearson_p': array([-7.52379678e-24, -3.36851303e-46, -3.56925891e-56, -1.55562945e-33]), 'test_spearman_r': array([0.81782518, 0.85557547, 0.89509405, 0.7693471 ]), 'test_spearman_p': array([-9.24508452e-17, -1.12626655e-19, -8.86354921e-24, -1.11490714e-13]), 'test_kendall_r': array([0.64547326, 0.66666762, 0.73227343, 0.66733997]), 'test_kendall_p': array([-3.26615044e-14, -4.83393259e-15, -8.22781543e-18, -8.78083033e-15]), 'test_rmse': array([-33.42916125, -25.36162435, -15.4053974 , -48.40841662]), 'test_mae': array([-22.090896  , -14.61529531, -11.8342904 , -23.77202286]), 'test_r2': array([0.78856262, 0.95836588, 0.97960832, 0.90319996]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([4.04626465, 5.00305438, 4.57114363, 3.96797299]), 'score_time': array([0.11858487, 0.11555266, 0.1191237 , 0.12277293]), 'test_pearson_r': array([0.98596803, 0.90327342, 0.95392603, 0.98271787]), 'test_pearson_p': array([-1.06379211e-50, -7.80213732e-25, -1.21012705e-34, -3.90773520e-47]), 'test_spearman_r': array([0.73751017, 0.80896744, 0.89786776, 0.91209634]), 'test_spearman_p': array([-2.43834719e-12, -3.57359591e-16, -3.97877224e-24, -1.08046370e-25]), 'test_kendall_r': array([0.63858276, 0.64960702, 0.73390107, 0.75899729]), 'test_kendall_p': array([-8.01896442e-14, -2.57592761e-14, -7.08076106e-18, -8.08120055e-19]), 'test_rmse': array([-31.67648088, -30.59771611, -24.93869024, -25.76160537]), 'test_mae': array([-15.03601206, -18.12109152, -15.53184478, -16.07778187]), 'test_r2': array([0.96526173, 0.79693543, 0.90735807, 0.959584  ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 314, 'regressor__learning_rate': 0.07229872816341645, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 522)}}
Trimer_scaler
Filename: (ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 polymer_solvent HSP cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 polymer_solvent HSP cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 polymer_solvent HSP cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c010n02>
Subject: Job 294635: <NGB_Rg1 (nm)_ECFP_Trimer_KM4 polymer_solvent HSP cluster_20250311> in cluster <Hazel> Done

Job <NGB_Rg1 (nm)_ECFP_Trimer_KM4 polymer_solvent HSP cluster_20250311> was submitted from host <c040n04> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 18:16:47 2025
Job was executed on host(s) <6*c010n02>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 02:57:56 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 02:57:56 2025
Terminated at Fri Mar 14 12:54:08 2025
Results reported at Fri Mar 14 12:54:08 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_Rg1 (nm)_ECFP_Trimer_KM4 polymer_solvent HSP cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_KM4 polymer_solvent HSP cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_KM4 polymer_solvent HSP cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "Rg1 (nm)"                                       --representation "ECFP"                                       --regressor_type "NGB"                                       --radius "3"                                       --vector "count"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 polymer_solvent HSP cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   810719.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.54 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   1 GB
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   208573 sec.
    Turnaround time :                            239841 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_ECFP_Trimer_3_count_KM4 polymer_solvent HSP cluster_20250311.err> for stderr output of this job.

