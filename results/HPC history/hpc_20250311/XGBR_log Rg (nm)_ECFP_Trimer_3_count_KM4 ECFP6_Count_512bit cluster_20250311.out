


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002570655926981066), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 127), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010483463085143509), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 487), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 385), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020905283578751613), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 177), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03774462230484414), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 268), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005309250297061447), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 282), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__max_depth', 25), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__max_depth', 2287), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05082576163662753), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05920658006461146), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03427544215886672), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 484), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0379946260355663), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 180), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1017), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 810), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06086861431562898), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 662), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027302412075409857), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 393), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__max_depth', 1264), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06338953571615334), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 149), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06048574530226919), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 240), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03252108800594495), ('regressor__regressor__max_depth', 4466), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 344), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0022420809114951697), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.039865111338345575), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 294), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048262405321526314), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1470), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09000940286097947), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1303), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03645472998492917), ('regressor__regressor__max_depth', 397), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 398), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06165697655748211), ('regressor__regressor__max_depth', 37), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002157166904588675), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1308), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06942094706700487), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00876824589538263), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 331), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0040965464593683675), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 217), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006340735028726025), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1365), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02716363473603697), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.003733987964678198), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007822694349900915), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 538), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011195530108082438), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 271), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031061518378147693), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 252), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011168840949099307), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06481759366785282), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 294), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07361284524199999), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 184), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 73), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06449854041502759), ('regressor__regressor__max_depth', 11), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03507372269231158), ('regressor__regressor__max_depth', 5007), ('regressor__regressor__n_estimators', 124), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06163281946791306), ('regressor__regressor__max_depth', 8857), ('regressor__regressor__n_estimators', 949), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 830), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0029313474843246806), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1452), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048094379354093816), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 115), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0024976164891197103), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1877), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025110050741759458), ('regressor__regressor__max_depth', 19), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.060937463348246824), ('regressor__regressor__max_depth', 11), ('regressor__regressor__n_estimators', 817), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07298032739721552), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06997142340107657), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 712), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008335258720839973), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 364), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 112), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0015039363284612632), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1911), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05992734954599357), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 681), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0064346824732958744), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 530), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020305633571662353), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020868588179403853), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 208), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06784353772013563), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 74), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017344118564415933), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 236), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03774462230484414), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 268), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07413373697976967), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 87), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1165), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__max_depth', 25), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02202982654669622), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 271), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05082576163662753), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05920658006461146), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03427544215886672), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 484), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0379946260355663), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 180), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1017), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032308780318251705), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016101257335413476), ('regressor__regressor__max_depth', 9205), ('regressor__regressor__n_estimators', 224), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04592252888438345), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1303), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06137826518135169), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03364257682778194), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 213), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06048574530226919), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 240), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03252108800594495), ('regressor__regressor__max_depth', 4466), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 344), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0022420809114951697), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06740845701752003), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 349), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008302401162193392), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1154), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 87), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0031816487987430327), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03516431032563851), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 463), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 398), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06165697655748211), ('regressor__regressor__max_depth', 37), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002157166904588675), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1308), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06942094706700487), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00876824589538263), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 331), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0020262827850445076), ('regressor__regressor__max_depth', 13), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03770052924189587), ('regressor__regressor__max_depth', 549), ('regressor__regressor__n_estimators', 220), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008868219622670214), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 582), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06406486158843212), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 99), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.003733987964678198), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007822694349900915), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 538), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011195530108082438), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 271), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031061518378147693), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 252), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025950740288033167), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 248), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03507372269231158), ('regressor__regressor__max_depth', 5007), ('regressor__regressor__n_estimators', 124), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06163281946791306), ('regressor__regressor__max_depth', 8857), ('regressor__regressor__n_estimators', 949), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 830), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0029313474843246806), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1452), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048094379354093816), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 115), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047972250104818925), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 645), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010401797879523179), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 315), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0687898445764326), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 115), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06355608747938933), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 211), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008335258720839973), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 364), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 112), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0015039363284612632), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1911), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05992734954599357), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 681), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0064346824732958744), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 530), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0037003284803760967), ('regressor__regressor__max_depth', 101), ('regressor__regressor__n_estimators', 1724), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0044348010071956784), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 595), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0561921375915404), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03774462230484414), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 268), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016878614415805834), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1149), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07437474808673655), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 62), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013010708210236656), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 249), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009825026137761565), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03743532214336409), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05082576163662753), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05920658006461146), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03427544215886672), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 484), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0379946260355663), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 180), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1017), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0026103956907938984), ('regressor__regressor__max_depth', 3918), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05295319559525034), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015143347257303808), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 148), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__max_depth', 1264), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06048574530226919), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 240), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03252108800594495), ('regressor__regressor__max_depth', 4466), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 344), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0022420809114951697), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0668439833039979), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 588), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06698416584114683), ('regressor__regressor__max_depth', 4823), ('regressor__regressor__n_estimators', 259), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06390467964811695), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 467), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032260461368251704), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 84), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031717635747241006), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 110), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 398), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06165697655748211), ('regressor__regressor__max_depth', 37), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002157166904588675), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1308), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06942094706700487), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00876824589538263), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 331), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0197257406212588), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 198), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06771289788486548), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 94), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 293), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025575383134161443), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 130), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.003733987964678198), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007822694349900915), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 538), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011195530108082438), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 271), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031061518378147693), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 252), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02884541185892818), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 334), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0685022665220835), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1373), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06387272801477249), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 72), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0019748009263928445), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03507372269231158), ('regressor__regressor__max_depth', 5007), ('regressor__regressor__n_estimators', 124), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06163281946791306), ('regressor__regressor__max_depth', 8857), ('regressor__regressor__n_estimators', 949), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 830), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0029313474843246806), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1452), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048094379354093816), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 115), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002165864720669128), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1798), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.003918125935533523), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1396), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 71), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06695688964263345), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08363276189644905), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 64), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008335258720839973), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 364), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 112), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0015039363284612632), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1911), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05992734954599357), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 681), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0064346824732958744), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 530), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07160039919810078), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 86), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05017267068460056), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1309), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008713413072249411), ('regressor__regressor__max_depth', 2053), ('regressor__regressor__n_estimators', 1258), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04552978257761681), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 201), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03774462230484414), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 268), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03438327860362217), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1461), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00900638187615356), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038132689825889445), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 310), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005112708446039583), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05082576163662753), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05920658006461146), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03427544215886672), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 484), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0379946260355663), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 180), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1017), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 249), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017263830347461852), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 193), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03486200136217974), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06336012159738731), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 87), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03576282604724668), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1069), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06048574530226919), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 240), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03252108800594495), ('regressor__regressor__max_depth', 4466), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 344), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0022420809114951697), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06315066368543608), ('regressor__regressor__max_depth', 26), ('regressor__regressor__n_estimators', 786), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 329), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06372381674926157), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 489), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 398), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06165697655748211), ('regressor__regressor__max_depth', 37), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002157166904588675), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1308), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06942094706700487), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00876824589538263), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 331), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07543490025387102), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 664), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02808287184621455), ('regressor__regressor__max_depth', 236), ('regressor__regressor__n_estimators', 102), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 6378), ('regressor__regressor__n_estimators', 1227), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056151204533980086), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 147), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.003733987964678198), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007822694349900915), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 538), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011195530108082438), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 271), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031061518378147693), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 252), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04730033509743822), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 183), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02308830224387939), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 379), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06845179929042158), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 159), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020031899014204917), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1527), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03507372269231158), ('regressor__regressor__max_depth', 5007), ('regressor__regressor__n_estimators', 124), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06163281946791306), ('regressor__regressor__max_depth', 8857), ('regressor__regressor__n_estimators', 949), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 830), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0029313474843246806), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1452), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048094379354093816), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 115), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06190577108202342), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1313), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008698795916951428), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0638465820201669), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 512), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__max_depth', 36), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008335258720839973), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 364), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 112), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0015039363284612632), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1911), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05992734954599357), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 681), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0064346824732958744), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 530), ('regressor__regressor__n_jobs', -2)])


{'CO_0': {'cluster size (%)': 55, 6: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.40716973190077793, 'test_rmse': 0.62590674885138, 'test_r2': -0.20296305603548404, 'test_pearson_r': array([0.38662878]), 'test_pearson_p_value': array([2.00775263e-06]), 'test_spearman_r': 0.4566200653723797, 'test_spearman_p_value': 1.1197147967078385e-08, 'test_kendall_r': 0.31091646137210055, 'test_kendall_p_value': 8.178186667936132e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.002570655926981066, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.43103655175599653, 'test_rmse': 0.6495205946437688, 'test_r2': -0.29544468431019766, 'test_pearson_r': array([0.37560073]), 'test_pearson_p_value': array([4.10426529e-06]), 'test_spearman_r': 0.4118192474827348, 'test_spearman_p_value': 3.5465866448099306e-07, 'test_kendall_r': 0.2738400871467451, 'test_kendall_p_value': 1.9486365837838173e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 282, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.4209266109158211, 'test_rmse': 0.6381640223424099, 'test_r2': -0.2505401911356442, 'test_pearson_r': array([0.39634755]), 'test_pearson_p_value': array([1.04604777e-06]), 'test_spearman_r': 0.45835935792856153, 'test_spearman_p_value': 9.691007807502912e-09, 'test_kendall_r': 0.32382693254602346, 'test_kendall_p_value': 2.4249598299048628e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.027302412075409857, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 393, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.42093283180960667, 'test_rmse': 0.6355710095189749, 'test_r2': -0.24039835056224867, 'test_pearson_r': array([0.38997034]), 'test_pearson_p_value': array([1.60831036e-06]), 'test_spearman_r': 0.43660093322603494, 'test_spearman_p_value': 5.578646817649883e-08, 'test_kendall_r': 0.29823509654836555, 'test_kendall_p_value': 3.144103881876054e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.03645472998492917, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 397, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 168, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.4234059428518489, 'test_rmse': 0.6417237092492807, 'test_r2': -0.26453015841039895, 'test_pearson_r': array([0.39631019]), 'test_pearson_p_value': array([1.04871463e-06]), 'test_spearman_r': 0.5045881883580315, 'test_spearman_p_value': 1.525824015982156e-10, 'test_kendall_r': 0.35265431763395266, 'test_kendall_p_value': 8.942675688156824e-10, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.02716363473603697, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1217, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.4226176025517791, 'test_rmse': 0.6395288289469793, 'test_r2': -0.25589483512720324, 'test_pearson_r': array([0.39646828]), 'test_pearson_p_value': array([1.03747368e-06]), 'test_spearman_r': 0.44990280258592397, 'test_spearman_p_value': 1.941523925195655e-08, 'test_kendall_r': 0.31766352292207506, 'test_kendall_p_value': 3.4036369167479315e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.011168840949099307, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.42225308114588084, 'test_rmse': 0.6397427103733726, 'test_r2': -0.2567350083404416, 'test_pearson_r': array([0.39786824]), 'test_pearson_p_value': array([9.42810632e-07]), 'test_spearman_r': 0.45740235287531267, 'test_spearman_p_value': 1.0493797751836806e-08, 'test_kendall_r': 0.3127093687502772, 'test_kendall_p_value': 5.7690356261139315e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.025110050741759458, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 19, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 849, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 50, 6: {'fit_time': array([1.4748826, 1.4364922]), 'score_time': array([0.13145828, 0.13469267]), 'test_pearson_r': array([0.86093576, 0.89657196]), 'test_pearson_p': array([-2.18753549e-39, -9.47033815e-47]), 'test_spearman_r': array([0.85517701, 0.88912638]), 'test_spearman_p': array([-2.42367690e-38, -6.14467588e-45]), 'test_kendall_r': array([0.74177866, 0.78297648]), 'test_kendall_p': array([-9.19098321e-36, -2.87488263e-39]), 'test_rmse': array([-0.34401456, -0.27606727]), 'test_mae': array([-0.16201411, -0.13301418]), 'test_r2': array([0.72568295, 0.78736406]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([2.91997385, 2.84487581]), 'score_time': array([0.13486457, 0.12691998]), 'test_pearson_r': array([0.89436715, 0.82863454]), 'test_pearson_p': array([-1.49961717e-46, -8.48173945e-34]), 'test_spearman_r': array([0.8785091 , 0.82035262]), 'test_spearman_p': array([-6.88031765e-43, -1.28577175e-32]), 'test_kendall_r': array([0.77317192, 0.69716515]), 'test_kendall_p': array([-1.14426543e-38, -1.53362895e-31]), 'test_rmse': array([-0.31014387, -0.3478178 ]), 'test_mae': array([-0.14368757, -0.1907668 ]), 'test_r2': array([0.77770803, 0.65701544]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.05920658006461146, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([6.35358334, 7.39409971]), 'score_time': array([0.13276839, 0.17532682]), 'test_pearson_r': array([0.76404656, 0.88101109]), 'test_pearson_p': array([-3.97688550e-26, -4.18550972e-43]), 'test_spearman_r': array([0.83880171, 0.89997961]), 'test_spearman_p': array([-1.32963284e-35, -1.25992466e-47]), 'test_kendall_r': array([0.75435318, 0.80207709]), 'test_kendall_p': array([-6.47015758e-37, -4.72673260e-41]), 'test_rmse': array([-0.4163782 , -0.30295135]), 'test_mae': array([-0.17232387, -0.13794403]), 'test_r2': array([0.56203114, 0.76469862]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.0022420809114951697, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([1.03818059, 1.04173136]), 'score_time': array([0.15007114, 0.14811993]), 'test_pearson_r': array([0.88065456, 0.88073472]), 'test_pearson_p': array([-2.36086697e-43, -4.80629834e-43]), 'test_spearman_r': array([0.90690208, 0.89100442]), 'test_spearman_p': array([-6.95638452e-50, -2.20736851e-45]), 'test_kendall_r': array([0.8026841 , 0.78690913]), 'test_kendall_p': array([-1.57659843e-41, -9.71396196e-40]), 'test_rmse': array([-0.31336225, -0.31101675]), 'test_mae': array([-0.14195243, -0.14087337]), 'test_r2': array([0.75140437, 0.75498852]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06942094706700487, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 306, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([0.81356692, 0.79480839]), 'score_time': array([0.13842416, 0.13881469]), 'test_pearson_r': array([0.90672036, 0.85010726]), 'test_pearson_p': array([-7.83467896e-50, -3.52775607e-37]), 'test_spearman_r': array([0.90655555, 0.85389265]), 'test_spearman_p': array([-8.72490272e-50, -7.88106775e-38]), 'test_kendall_r': array([0.79389964, 0.76473611]), 'test_kendall_p': array([-1.09886365e-40, -1.36677476e-37]), 'test_rmse': array([-0.27735654, -0.34117279]), 'test_mae': array([-0.14116391, -0.14623065]), 'test_r2': array([0.80523202, 0.70464956]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 252, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([0.53441215, 0.56267285]), 'score_time': array([0.12080216, 0.12709284]), 'test_pearson_r': array([0.91069261, 0.89174204]), 'test_pearson_p': array([-5.50093478e-51, -1.46896679e-45]), 'test_spearman_r': array([0.88634207, 0.89606653]), 'test_spearman_p': array([-1.25046355e-44, -1.26967164e-46]), 'test_kendall_r': array([0.74593365, 0.78825254]), 'test_kendall_p': array([-4.16559757e-36, -9.49565425e-40]), 'test_rmse': array([-0.27003927, -0.29238547]), 'test_mae': array([-0.15348141, -0.14213231]), 'test_r2': array([0.80875327, 0.79115857]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.048094379354093816, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 115, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([2.53441763, 2.51100183]), 'score_time': array([0.12353039, 0.11959291]), 'test_pearson_r': array([0.850056  , 0.92243086]), 'test_pearson_p': array([-1.88825120e-37, -2.53180993e-54]), 'test_spearman_r': array([0.87681996, 0.91847044]), 'test_spearman_p': array([-1.57473000e-42, -5.26810418e-53]), 'test_kendall_r': array([0.79193204, 0.78812042]), 'test_kendall_p': array([-1.94386005e-40, -7.81075102e-40]), 'test_rmse': array([-0.35774139, -0.24254412]), 'test_mae': array([-0.14897497, -0.1343666 ]), 'test_r2': array([0.66662178, 0.84927983]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 112, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 7, 6: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.46355913509205715, 'test_rmse': 0.7470235115328044, 'test_r2': -2.9596479502209356, 'test_pearson_r': array([-0.24205275]), 'test_pearson_p_value': array([0.318083]), 'test_spearman_r': 0.03866432337434095, 'test_spearman_p_value': 0.8751264319986308, 'test_kendall_r': 0.01183431952662722, 'test_kendall_p_value': 0.9440805953996252, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.020305633571662353, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.474447426124748, 'test_rmse': 0.755132126162551, 'test_r2': -3.04607498752926, 'test_pearson_r': array([-0.26067755]), 'test_pearson_p_value': array([0.28107748]), 'test_spearman_r': 0.046593411094642025, 'test_spearman_p_value': 0.8497714336013508, 'test_kendall_r': 0.017804232687933682, 'test_kendall_p_value': 0.9161559443384972, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.07413373697976967, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 87, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.4609845469689364, 'test_rmse': 0.7442680138448857, 'test_r2': -2.930490426747149, 'test_pearson_r': array([-0.23326553]), 'test_pearson_p_value': array([0.33650153]), 'test_spearman_r': 0.03690685413005272, 'test_spearman_p_value': 0.8807629981897686, 'test_kendall_r': 0.0, 'test_kendall_p_value': 1.0, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.04592252888438345, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1303, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.45949183647896064, 'test_rmse': 0.7456542528478949, 'test_r2': -2.945145559529385, 'test_pearson_r': array([-0.2341117]), 'test_pearson_p_value': array([0.33470132]), 'test_spearman_r': 0.04393673110720563, 'test_spearman_p_value': 0.858252261585065, 'test_kendall_r': 0.01183431952662722, 'test_kendall_p_value': 0.9440805953996252, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06740845701752003, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 349, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.4668150887673792, 'test_rmse': 0.7486115143653232, 'test_r2': -2.9765004733973277, 'test_pearson_r': array([-0.25871758]), 'test_pearson_p_value': array([0.28484102]), 'test_spearman_r': -0.01934917195151481, 'test_spearman_p_value': 0.9373332015162439, 'test_kendall_r': -0.047619891232869964, 'test_kendall_p_value': 0.7787795127934056, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06406486158843212, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 99, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.46743606588100084, 'test_rmse': 0.7527137939245556, 'test_r2': -3.020201143033474, 'test_pearson_r': array([-0.24855957]), 'test_pearson_p_value': array([0.30483957]), 'test_spearman_r': 0.004395604820249249, 'test_spearman_p_value': 0.9857511711470932, 'test_kendall_r': -0.02967372114655614, 'test_kendall_p_value': 0.8607167759192286, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.46947299187446845, 'test_rmse': 0.7520743315535873, 'test_r2': -3.013373380908347, 'test_pearson_r': array([-0.25543343]), 'test_pearson_p_value': array([0.2912163]), 'test_spearman_r': 0.03076923374174474, 'test_spearman_p_value': 0.9004890315221792, 'test_kendall_r': -0.005934744229311228, 'test_kendall_p_value': 0.9720060918008692, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.0687898445764326, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 115, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 7, 6: {'fit_time': array([1.74020934, 1.90768957, 1.8794477 , 1.89369607, 1.7648437 ,
       1.9786346 , 1.93207216, 1.73973179, 1.89745283, 1.91059661,
       1.85603547, 1.88856101, 1.90045285, 1.71334505]), 'score_time': array([0.2075808 , 0.17474723, 0.12801003, 0.17407036, 0.13346267,
       0.13104439, 0.12649369, 0.12719083, 0.12923932, 0.1318059 ,
       0.13754439, 0.13006735, 0.17935371, 0.12098265]), 'test_pearson_r': array([0.89922446, 0.99439865, 0.98813854, 0.98068747, 0.60485717,
       0.99315127, 0.86880341, 0.97545673, 0.93758411, 0.95068608,
       0.99066589, 0.93640919, 0.98255175, 0.98146302]), 'test_pearson_p': array([-1.65049307e-07, -4.91366231e-18, -2.83096781e-15, -1.73966771e-13,
       -6.07691210e-03, -2.70256735e-17, -1.39599027e-06, -6.13011096e-12,
       -9.51194549e-09, -1.50584976e-09, -2.81376230e-15, -1.10010260e-08,
       -4.08972606e-13, -6.61467135e-13]), 'test_spearman_r': array([0.89298246, 0.9833187 , 0.94912281, 0.95087719, 0.71403509,
       0.98245614, 0.86666667, 0.96797572, 0.94372754, 0.93188854,
       0.99122367, 0.87145081, 0.98243854, 0.96491228]), 'test_spearman_p': array([-2.69128335e-07, -5.05416645e-14, -5.88308946e-10, -4.39213996e-10,
       -5.95020140e-04, -7.73558991e-14, -1.58937749e-06, -5.03056755e-11,
       -4.23430894e-09, -1.87828793e-08, -1.72171485e-15, -2.48583141e-06,
       -4.30535934e-13, -1.03472876e-10]), 'test_kendall_r': array([0.8245614 , 0.92352941, 0.87134503, 0.87134503, 0.68421053,
       0.91812865, 0.78947368, 0.88817712, 0.86557842, 0.83006536,
       0.9573822 , 0.73443018, 0.92765165, 0.86928105]), 'test_kendall_p': array([-1.17067315e-08, -3.80976840e-08, -4.58322529e-10, -4.58322529e-10,
       -1.01712688e-05, -7.20796807e-12, -8.90628326e-08, -3.04174616e-07,
       -5.63141283e-07, -2.71335027e-08, -3.12802418e-08, -2.18253405e-05,
       -8.87180979e-08, -2.15825858e-09]), 'test_rmse': array([-0.26775094, -0.07872972, -0.13013342, -0.13257544, -0.49424313,
       -0.08019299, -0.35865887, -0.14381716, -0.2300049 , -0.18607002,
       -0.08862483, -0.21948083, -0.11529669, -0.0917978 ]), 'test_mae': array([-0.11045805, -0.04738939, -0.07935642, -0.07840201, -0.19448379,
       -0.05647862, -0.14421342, -0.06937123, -0.09467064, -0.10995095,
       -0.05682805, -0.13920211, -0.07171893, -0.06725507]), 'test_r2': array([0.79242217, 0.9862506 , 0.96446972, 0.96170111, 0.13479639,
       0.98416118, 0.72286144, 0.95033753, 0.86888653, 0.89572799,
       0.97952458, 0.85439494, 0.96086296, 0.95962928]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([4.46994734, 3.86699367, 4.30107427, 4.94071221, 5.21747661,
       4.4056263 , 3.78791809, 4.58090091, 3.57645774, 4.6182065 ,
       4.74013495, 4.45759463, 3.61644316, 4.35915995]), 'score_time': array([0.13225341, 0.13627219, 0.13016605, 0.12936258, 0.11632776,
       0.1383481 , 0.23950815, 0.1936717 , 0.18284869, 0.12760019,
       0.12865472, 0.13627672, 0.16080451, 0.13674688]), 'test_pearson_r': array([0.98980473, 0.9173125 , 0.98847584, 0.96398259, 0.74810018,
       0.84702759, 0.9939845 , 0.98985822, 0.96084076, 0.98901782,
       0.99099549, 0.95834243, 0.98322244, 0.96146677]), 'test_pearson_p': array([-7.86298512e-16, -3.27136028e-08, -2.21786257e-15, -3.28522062e-11,
       -2.30177684e-04, -4.76486821e-06, -8.99752123e-18, -5.45153989e-15,
       -2.45851600e-10, -1.02795594e-14, -2.11265884e-15, -4.00053216e-10,
       -2.99517441e-13, -2.16542005e-10]), 'test_spearman_r': array([0.9499561 , 0.89074164, 0.95610184, 0.92631579, 0.73979823,
       0.92280702, 0.99122807, 0.97263823, 0.93395253, 0.95818288,
       0.98709358, 0.9504644 , 0.9876161 , 0.94579259]), 'test_spearman_p': array([-5.12723828e-10, -3.18448548e-07, -1.71919507e-10, -1.26686179e-08,
       -2.93937089e-04, -1.85857755e-08, -2.20085178e-16, -1.44981731e-11,
       -1.47814823e-08, -4.12268255e-10, -3.71793251e-14, -1.55976502e-09,
       -2.67561271e-14, -3.16038098e-09]), 'test_kendall_r': array([0.84117647, 0.77419688, 0.86470588, 0.80116959, 0.69208509,
       0.83625731, 0.95321637, 0.89180807, 0.83006536, 0.87869325,
       0.93115255, 0.85620915, 0.94771242, 0.83934877]), 'test_kendall_p': array([-5.46983525e-07, -3.82034206e-06, -2.61645931e-07, -4.67377304e-08,
       -3.61461714e-05, -5.55516932e-09, -1.16815227e-13, -2.53540670e-07,
       -2.71335027e-08, -3.78914056e-07, -7.34599652e-08, -5.28843419e-09,
       -1.81026609e-12, -1.22329014e-06]), 'test_rmse': array([-0.07337785, -0.26807853, -0.09791766, -0.16917986, -0.5230414 ,
       -0.37564675, -0.07540849, -0.07851991, -0.16754254, -0.09460319,
       -0.10095872, -0.15202363, -0.1155869 , -0.15637536]), 'test_mae': array([-0.04753599, -0.12212314, -0.06566907, -0.08165658, -0.20843072,
       -0.17500121, -0.0501297 , -0.06098699, -0.11407916, -0.06034236,
       -0.07074649, -0.11214658, -0.06662309, -0.10429414]), 'test_r2': array([0.97873995, 0.83472333, 0.97644491, 0.91644368, 0.45447764,
       0.68421999, 0.98751156, 0.97420897, 0.92208343, 0.97634306,
       0.97556802, 0.91592983, 0.96666512, 0.91314186]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.05920658006461146, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([10.7589004 , 10.77288151, 10.64219475, 11.03276372, 10.77559996,
       11.09192991, 10.0381453 , 10.15329289, 11.28220296, 10.6315558 ,
       10.70747662, 10.75890851, 11.05145717, 10.92965531]), 'score_time': array([0.13508916, 0.12983894, 0.1363349 , 0.1234715 , 0.15300131,
       0.12220407, 0.13224316, 0.139714  , 0.11925817, 0.14045024,
       0.13431549, 0.13699794, 0.17867112, 0.14817882]), 'test_pearson_r': array([0.93015526, 0.94311042, 0.98980426, 0.98700386, 0.95646783,
       0.97556235, 0.98534031, 0.43358453, 0.98298797, 0.97156465,
       0.99021563, 0.90467684, 0.83642127, 0.994418  ]), 'test_pearson_p': array([-8.14608127e-09, -1.48927936e-09, -7.86605561e-16, -6.13084888e-15,
       -1.60310795e-10, -1.26415951e-12, -1.69715158e-14, -7.22413904e-02,
       -3.34442024e-13, -1.96589653e-11, -4.09596483e-15, -2.53249758e-07,
       -1.52196590e-05, -4.65698640e-17]), 'test_spearman_r': array([0.91355867, 0.93111023, 0.98903037, 0.96972366, 0.93725327,
       0.94866179, 0.9837649 , 0.58853906, 0.97004184, 0.95665635,
       0.98915862, 0.88716784, 0.84726522, 0.98553772]), 'test_spearman_p': array([-4.70927404e-08, -7.27043428e-09, -1.46115981e-15, -7.65719604e-12,
       -3.35715126e-09, -6.34189344e-10, -4.01991254e-14, -1.01868397e-02,
       -2.96982597e-11, -5.46578066e-10, -9.27540331e-15, -9.21970008e-07,
       -9.11494735e-06, -9.19675963e-14]), 'test_kendall_r': array([0.85630867, 0.86803892, 0.93842046, 0.90322969, 0.80938764,
       0.84457841, 0.9266902 , 0.56393746, 0.9013353 , 0.86928105,
       0.94426737, 0.81074309, 0.75163399, 0.92765165]), 'test_kendall_p': array([-3.20420144e-07, -2.20656528e-07, -2.12970819e-08, -7.00361385e-08,
       -1.35872010e-06, -4.63085373e-07, -3.18217344e-08, -1.11482317e-03,
       -2.02850566e-07, -2.15825858e-09, -4.80698932e-08, -3.48443378e-06,
       -1.44239308e-06, -8.87180979e-08]), 'test_rmse': array([-0.24325796, -0.22344908, -0.11363378, -0.11229195, -0.14286445,
       -0.15210669, -0.09312606, -0.53551089, -0.12870619, -0.14430697,
       -0.09898329, -0.29787737, -0.37318102, -0.06825213]), 'test_mae': array([-0.11261276, -0.08575774, -0.0873456 , -0.06929071, -0.09571044,
       -0.0954907 , -0.06390301, -0.23275665, -0.08567809, -0.0878868 ,
       -0.05906935, -0.12221879, -0.15285043, -0.0496345 ]), 'test_r2': array([ 0.8577763 ,  0.88206775,  0.97542067,  0.97100902,  0.90162916,
        0.94924082,  0.96792311, -0.49996552,  0.96232166,  0.93451191,
        0.97957735,  0.79630665,  0.68187864,  0.98806962]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.0022420809114951697, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([1.68744254, 1.97227645, 1.37493491, 1.92339277, 1.93911481,
       2.13063216, 1.59549356, 1.42596436, 1.89153218, 1.39476013,
       1.48446846, 1.47863889, 1.43889546, 1.84371161]), 'score_time': array([0.19562387, 0.13236403, 0.13345289, 0.15055203, 0.14050817,
       0.11642885, 0.12729073, 0.1372726 , 0.13350296, 0.13852978,
       0.12951159, 0.13164282, 0.14003515, 0.14013815]), 'test_pearson_r': array([0.99410304, 0.99265459, 0.98044011, 0.44397142, 0.96451723,
       0.97727815, 0.98817614, 0.96690134, 0.74356895, 0.97782428,
       0.99409808, 0.9071196 , 0.97119389, 0.97965713]), 'test_pearson_p': array([-7.60014712e-18, -4.89217204e-17, -1.93679511e-13, -5.68818383e-02,
       -2.89833555e-11, -6.84846057e-13, -2.75594059e-15, -6.52821770e-11,
       -4.04756972e-04, -2.74321832e-12, -7.26608418e-17, -2.07389643e-07,
       -2.17802500e-11, -1.38367887e-12]), 'test_spearman_r': array([0.99165935, 0.98947368, 0.96621334, 0.68616858, 0.94736842,
       0.93859649, 0.97715441, 0.96177737, 0.81156438, 0.92363261,
       0.9876161 , 0.85964912, 0.94840041, 0.97936017]), 'test_spearman_p': array([-1.43585872e-16, -1.03053958e-15, -1.92238776e-11, -1.17908358e-03,
       -7.80082922e-10, -2.80606429e-09, -7.16901319e-13, -2.03165199e-10,
       -4.34228742e-05, -4.56845669e-08, -2.67561271e-14, -4.82799743e-06,
       -2.14803595e-09, -1.55232323e-12]), 'test_kendall_r': array([0.94705882, 0.94152047, 0.90322969, 0.64072027, 0.84795322,
       0.8245614 , 0.89679028, 0.87501894, 0.73443018, 0.84313725,
       0.93464052, 0.77777778, 0.85620915, 0.92156863]), 'test_kendall_p': array([-1.70481486e-08, -5.27929196e-13, -7.00361385e-08, -1.77476468e-04,
       -2.53233265e-09, -1.17067315e-08, -9.83316810e-08, -4.53574602e-07,
       -2.18253405e-05, -1.22726897e-08, -7.81116540e-12, -4.36097754e-07,
       -5.28843419e-09, -2.92550870e-11]), 'test_rmse': array([-0.07025277, -0.06456943, -0.12075412, -0.69957007, -0.15934538,
       -0.15937319, -0.10583855, -0.15122623, -0.43537131, -0.12583683,
       -0.06167493, -0.34694251, -0.13921712, -0.14772977]), 'test_mae': array([-0.05669361, -0.03985334, -0.07756197, -0.25892561, -0.10140599,
       -0.10402849, -0.07066297, -0.08641971, -0.1929281 , -0.07224591,
       -0.04568889, -0.19254528, -0.08576687, -0.09100553]), 'test_r2': array([ 0.98816141,  0.98519899,  0.95987999, -0.85232494,  0.92385695,
        0.95283977,  0.97457623,  0.92562615,  0.45765311,  0.95372108,
        0.98323524,  0.7653393 ,  0.94148433,  0.95845161]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06942094706700487, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 306, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([1.03574848, 1.00205731, 1.05720329, 1.02039671, 0.93020988,
       1.08085608, 1.5734179 , 1.37349248, 1.5127821 , 1.15371251,
       1.15693331, 0.95464325, 1.6011765 , 1.57583976]), 'score_time': array([0.19985008, 0.20135665, 0.13555336, 0.19307351, 0.12432671,
       0.2034204 , 0.12882423, 0.13343501, 0.13103199, 0.13726115,
       0.13896155, 0.13745546, 0.12357521, 0.1216588 ]), 'test_pearson_r': array([0.97608255, 0.89724191, 0.98757993, 0.97974573, 0.97394966,
       0.98156228, 0.64989489, 0.90516319, 0.99436913, 0.99368434,
       0.90144583, 0.9788481 , 0.84789075, 0.99662481]), 'test_pearson_p': array([-1.05472336e-12, -1.93426292e-07, -4.17828751e-15, -2.59919685e-13,
       -2.16438652e-12, -1.17660061e-13, -2.59553961e-03, -2.43478625e-07,
       -4.99258802e-17, -1.24780338e-16, -3.27202120e-07, -1.88551685e-12,
       -8.83886943e-06, -8.37838834e-19]), 'test_spearman_r': array([0.9122807 , 0.91212795, 0.97233211, 0.97849944, 0.98596491,
       0.98070175, 0.75438596, 0.89669421, 0.95041322, 0.96231298,
       0.85493042, 0.98142415, 0.89680083, 0.99380805]), 'test_spearman_p': array([-5.31127364e-08, -5.38754051e-08, -3.59198212e-12, -4.29972653e-13,
       -1.17464029e-14, -1.72884140e-13, -1.90096285e-04, -4.69587755e-07,
       -1.57244679e-09, -1.81783414e-10, -6.19280424e-06, -6.72563970e-13,
       -4.65886148e-07, -1.06556886e-16]), 'test_kendall_r': array([0.8245614 , 0.8023913 , 0.87905987, 0.90322969, 0.92982456,
       0.89473684, 0.71929825, 0.75657895, 0.83552632, 0.8524636 ,
       0.81311912, 0.90849673, 0.83006536, 0.97385621]), 'test_kendall_p': array([-1.17067315e-08, -1.85371850e-06, -1.76609611e-07, -7.00361385e-08,
       -2.06767062e-12, -6.63913300e-11, -2.51270610e-06, -1.28773955e-05,
       -1.45468681e-06, -8.32299419e-07, -2.59896801e-06, -9.76656516e-11,
       -2.71335027e-08, -5.31053037e-14]), 'test_rmse': array([-0.13290269, -0.28394907, -0.07756113, -0.12422265, -0.14452677,
       -0.13989553, -0.50324968, -0.20921455, -0.08052353, -0.07892921,
       -0.22977259, -0.12452043, -0.34707865, -0.05868893]), 'test_mae': array([-0.07623014, -0.1275377 , -0.06571779, -0.08086067, -0.07484187,
       -0.08939646, -0.17150872, -0.1369239 , -0.05149271, -0.05884807,
       -0.09287388, -0.09193208, -0.13529315, -0.04139717]), 'test_r2': array([0.95023573, 0.78876631, 0.97529807, 0.95002385, 0.94620692,
       0.95947519, 0.17899618, 0.79045787, 0.98827279, 0.98653258,
       0.77848384, 0.95686024, 0.68741477, 0.99163718]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 252, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([0.779881  , 1.07516432, 0.82189131, 0.84061503, 0.85743642,
       1.38412237, 1.34778118, 1.00927067, 0.83200932, 1.21518016,
       1.33864307, 1.35363078, 0.789747  , 1.16091752]), 'score_time': array([0.19273973, 0.14326596, 0.13540387, 0.19487906, 0.1959734 ,
       0.12606215, 0.12851048, 0.13909841, 0.13375401, 0.12435031,
       0.12882471, 0.12811446, 0.13271594, 0.13268209]), 'test_pearson_r': array([0.81705157, 0.9461623 , 0.9986706 , 0.99224629, 0.98676419,
       0.96652992, 0.99834927, 0.9489898 , 0.96681323, 0.99472709,
       0.97814161, 0.86822068, 0.99163929, 0.76334847]), 'test_pearson_p': array([-1.95756472e-05, -9.41855876e-10, -2.44472578e-23, -7.73749941e-17,
       -7.15530843e-15, -1.77646512e-11, -1.53793205e-22, -1.96309462e-09,
       -6.66668718e-11, -2.95533974e-17, -2.44690721e-12, -2.99975658e-06,
       -1.16941348e-15, -2.28029836e-04]), 'test_spearman_r': array([0.81546699, 0.92807018, 0.99209871, 0.98242682, 0.98947368,
       0.97368421, 0.9877193 , 0.8488631 , 0.97316821, 0.97470328,
       0.98502853, 0.87764596, 0.97624019, 0.76716582]), 'test_spearman_p': array([-2.09437609e-05, -1.03850543e-08, -9.07791577e-17, -7.84537518e-14,
       -1.03053958e-15, -2.35705500e-12, -3.79790244e-15, -8.42395626e-06,
       -1.24188235e-11, -7.78922481e-12, -1.21105572e-13, -1.70877825e-06,
       -4.74047396e-12, -2.02857391e-04]), 'test_kendall_r': array([0.7197922 , 0.75438596, 0.95884012, 0.9321899 , 0.94152047,
       0.90643275, 0.91812865, 0.68441938, 0.89542484, 0.89180807,
       0.94426737, 0.77377465, 0.9013353 , 0.73443018]), 'test_kendall_p': array([-1.88707169e-05, -5.24238695e-07, -1.13214749e-08, -3.02184546e-08,
       -5.27929196e-13, -2.27996852e-11, -7.20796807e-12, -8.95515357e-05,
       -2.96242626e-10, -2.53540670e-07, -4.80698932e-08, -7.72097590e-06,
       -2.02850566e-07, -2.18253405e-05]), 'test_rmse': array([-0.2809697 , -0.16497216, -0.047657  , -0.0736982 , -0.09294426,
       -0.18574964, -0.04283729, -0.13351829, -0.16708434, -0.07195114,
       -0.13827768, -0.35934563, -0.09921375, -0.51537996]), 'test_mae': array([-0.12682503, -0.11139025, -0.03760778, -0.04916538, -0.06072092,
       -0.09047092, -0.03318847, -0.0969702 , -0.11074396, -0.05341841,
       -0.07417952, -0.15804827, -0.08210519, -0.19217985]), 'test_r2': array([0.65817105, 0.87167855, 0.99594816, 0.9837595 , 0.96773957,
       0.93336678, 0.99572955, 0.88942365, 0.91481748, 0.98916296,
       0.95002479, 0.72856538, 0.97473369, 0.49443188]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.048094379354093816, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 115, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([3.66771507, 3.69192243, 3.99419069, 3.19582415, 3.04818416,
       3.09876442, 4.2736218 , 4.92977977, 5.10152435, 4.57505727,
       3.53152275, 4.95047402, 4.85398674, 3.20944905]), 'score_time': array([0.14540696, 0.1452775 , 0.14055085, 0.13027406, 0.13886929,
       0.13682604, 0.13131356, 0.19603443, 0.12154508, 0.12802029,
       0.21885967, 0.1375258 , 0.12792373, 0.1295948 ]), 'test_pearson_r': array([0.99043645, 0.84553421, 0.98450574, 0.96713312, 0.47181688,
       0.99479876, 0.93750736, 0.88838758, 0.98225831, 0.99273101,
       0.99085533, 0.95661185, 0.96263781, 0.99674863]), 'test_pearson_p': array([-4.57497108e-16, -5.14743960e-06, -2.70950392e-14, -1.52515149e-11,
       -4.14021315e-02, -2.62063941e-18, -3.24617555e-09, -8.48556929e-07,
       -4.66917091e-13, -3.83083617e-16, -2.38948989e-15, -5.51005388e-10,
       -1.69794913e-10, -6.21553222e-19]), 'test_spearman_r': array([0.9521721 , 0.78734744, 0.96706276, 0.96972366, 0.57017544,
       0.99298246, 0.92584476, 0.84297566, 0.94579259, 0.98913937,
       0.98089843, 0.98555212, 0.9504644 , 0.97729618]), 'test_spearman_p': array([-3.51549176e-10, -6.30985397e-05, -1.55275433e-11, -7.65719604e-12,
       -1.08054541e-02, -3.32215984e-17, -1.33519389e-08, -1.12150301e-05,
       -3.16038098e-09, -9.40746531e-15, -8.39423191e-13, -9.12417033e-14,
       -1.55976502e-09, -3.30605345e-12]), 'test_kendall_r': array([0.85630867, 0.75519181, 0.89679028, 0.86803892, 0.61403509,
       0.95321637, 0.8211179 , 0.7697535 , 0.82623395, 0.94710295,
       0.93115255, 0.93464052, 0.84313725, 0.93464052]), 'test_kendall_p': array([-3.20420144e-07, -7.18153512e-06, -9.95204999e-08, -2.20656528e-07,
       -1.11108349e-04, -1.16815227e-13, -9.53596222e-07, -9.07720685e-06,
       -1.78800684e-06, -5.48777592e-08, -7.34599652e-08, -7.81116540e-12,
       -1.22726897e-08, -7.81116540e-12]), 'test_rmse': array([-0.09052276, -0.38019572, -0.12469511, -0.14406842, -0.54606875,
       -0.06715707, -0.19305887, -0.28519209, -0.10315937, -0.080362  ,
       -0.0942653 , -0.20237751, -0.14872458, -0.0592439 ]), 'test_mae': array([-0.06601206, -0.13694234, -0.0679269 , -0.08428782, -0.21493615,
       -0.04994336, -0.12174555, -0.13001234, -0.07469624, -0.05785005,
       -0.07594235, -0.09769248, -0.11170637, -0.04423954]), 'test_r2': array([ 0.97917926,  0.6906838 ,  0.96578977,  0.92978261, -0.31585833,
        0.98947557,  0.85682102,  0.78373918,  0.96219104,  0.9829817 ,
        0.9796369 ,  0.91105774,  0.92066441,  0.99277174]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 112, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 10, 6: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.6806228887486329, 'test_rmse': 0.795477275686395, 'test_r2': -3.879171965790766, 'test_pearson_r': array([0.08721123]), 'test_pearson_p_value': array([0.67849106]), 'test_spearman_r': 0.05237768283072129, 'test_spearman_p_value': 0.8036306712132228, 'test_kendall_r': -0.0798919395666547, 'test_kendall_p_value': 0.5872819727857694, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.6602117144513001, 'test_rmse': 0.7733358506897942, 'test_r2': -3.61133695142221, 'test_pearson_r': array([0.09923172]), 'test_pearson_p_value': array([0.63698045]), 'test_spearman_r': 0.054705579845420016, 'test_spearman_p_value': 0.795080880886916, 'test_kendall_r': -0.0729448143869456, 'test_kendall_p_value': 0.6201901825310485, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.016878614415805834, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1149, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.6895504176068177, 'test_rmse': 0.7956730685486268, 'test_r2': -3.8815741075986896, 'test_pearson_r': array([0.15728344]), 'test_pearson_p_value': array([0.45274429]), 'test_spearman_r': 0.05042791656290385, 'test_spearman_p_value': 0.8108086341039771, 'test_kendall_r': -0.08321703275611853, 'test_kendall_p_value': 0.5712425075369343, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.679258152191626, 'test_rmse': 0.791436551155551, 'test_r2': -3.829729154333445, 'test_pearson_r': array([0.06294905]), 'test_pearson_p_value': array([0.76499502]), 'test_spearman_r': 0.04425599226553807, 'test_spearman_p_value': 0.833625697433088, 'test_kendall_r': -0.10109501578517655, 'test_kendall_p_value': 0.49342142551396806, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.031717635747241006, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 110, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.6738817011761536, 'test_rmse': 0.7808209259957881, 'test_r2': -3.7010347057333037, 'test_pearson_r': array([0.0903191]), 'test_pearson_p_value': array([0.66766496]), 'test_spearman_r': 0.07955202643122919, 'test_spearman_p_value': 0.705433350663588, 'test_kendall_r': -0.059156294755035393, 'test_kendall_p_value': 0.6882031295806711, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.0197257406212588, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 198, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.6881757914471497, 'test_rmse': 0.7913355819970256, 'test_r2': -3.8284969075255573, 'test_pearson_r': array([0.17940809]), 'test_pearson_p_value': array([0.39083229]), 'test_spearman_r': 0.046955098527701127, 'test_spearman_p_value': 0.823630118950315, 'test_kendall_r': -0.09395411519917385, 'test_kendall_p_value': 0.5238965747491067, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 72, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.692006376926886, 'test_rmse': 0.7966289294511529, 'test_r2': -3.8933098537701154, 'test_pearson_r': array([0.16353142]), 'test_pearson_p_value': array([0.43475776]), 'test_spearman_r': 0.05043776865180568, 'test_spearman_p_value': 0.8107723263024014, 'test_kendall_r': -0.08336550215650926, 'test_kendall_p_value': 0.5711367868026446, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 71, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 10, 6: {'fit_time': array([1.92342162, 1.92883897, 1.90196395, 1.65138316, 1.83027506,
       1.71187758, 1.88773227, 1.90722966, 1.67534184, 1.67848611]), 'score_time': array([0.13271666, 0.14002156, 0.13109183, 0.11918163, 0.12134576,
       0.12580442, 0.13463187, 0.12624693, 0.11822748, 0.12304187]), 'test_pearson_r': array([0.92826926, 0.97774171, 0.98087471, 0.77444429, 0.87785847,
       0.93633289, 0.99212577, 0.9553829 , 0.95766343, 0.96318089]), 'test_pearson_p': array([-8.46192901e-12, -8.71481723e-18, -1.43424072e-18, -3.43211198e-06,
       -3.84906008e-09, -2.11010122e-12, -3.60395775e-23, -3.26850041e-14,
       -1.76216125e-14, -1.28881649e-14]), 'test_spearman_r': array([0.93075741, 0.97913817, 0.9808547 , 0.80307692, 0.9165812 ,
       0.96049269, 0.98273211, 0.92510265, 0.9124487 , 0.93594924]), 'test_spearman_p': array([-5.61234097e-12, -4.03361248e-18, -1.45220631e-18, -7.89766261e-07,
       -4.86976361e-11, -7.79719312e-15, -4.24939920e-19, -1.39763006e-11,
       -8.51197512e-11, -6.56125276e-12]), 'test_kendall_r': array([0.88135698, 0.90432099, 0.92      , 0.75384615, 0.84615385,
       0.86554253, 0.92450033, 0.83642374, 0.78703704, 0.83806461]), 'test_kendall_p': array([-2.87422002e-10, -1.03800840e-10, -2.27082443e-17, -1.03850094e-09,
       -3.70435003e-13, -6.56891251e-10, -3.73889545e-11, -2.28452519e-09,
       -1.87317729e-08, -4.52674682e-09]), 'test_rmse': array([-0.23704169, -0.14934289, -0.12899732, -0.41975413, -0.32991893,
       -0.22364795, -0.07899791, -0.18449045, -0.17464057, -0.14051478]), 'test_mae': array([-0.09700971, -0.07985767, -0.07503273, -0.15312746, -0.11885296,
       -0.09535273, -0.05805164, -0.09968254, -0.11949485, -0.07839243]), 'test_r2': array([0.85242959, 0.95399088, 0.96119835, 0.52565012, 0.7487915 ,
       0.8588243 , 0.9843064 , 0.9118217 , 0.90862865, 0.9242347 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([3.38710213, 3.09698725, 3.09457016, 3.10147333, 3.06162286,
       3.21143484, 3.16058421, 3.1607821 , 3.15254617, 3.06172752]), 'score_time': array([0.12562561, 0.12234974, 0.16571593, 0.12083626, 0.11987758,
       0.13195086, 0.18806362, 0.13192677, 0.12066483, 0.12072039]), 'test_pearson_r': array([0.99279324, 0.92495607, 0.97798966, 0.7790557 , 0.79269702,
       0.98397141, 0.94744413, 0.98984523, 0.98073144, 0.95131366]), 'test_pearson_p': array([-1.24922048e-23, -1.42970871e-11, -7.62833452e-18, -2.74886075e-06,
       -1.38084509e-06, -1.74964615e-19, -2.23824516e-13, -7.53827737e-22,
       -1.56746909e-18, -3.02113648e-13]), 'test_spearman_r': array([0.96628457, 0.88691222, 0.95879639, 0.76654696, 0.84390495,
       0.96631904, 0.92373466, 0.98939814, 0.97948718, 0.93133297]), 'test_spearman_p': array([-1.19875102e-15, -1.60329071e-09, -1.28004411e-14, -4.96133064e-06,
       -6.08169767e-08, -1.18433566e-15, -1.72426145e-11, -1.26132064e-21,
       -3.30024079e-18, -1.42756099e-11]), 'test_kendall_r': array([0.87888623, 0.77091261, 0.86903031, 0.72643054, 0.80739695,
       0.86903031, 0.79321365, 0.93518964, 0.90769231, 0.80467558]), 'test_kendall_p': array([-4.16147357e-10, -3.91645036e-08, -5.06015047e-10, -2.17718736e-07,
       -7.63658832e-09, -5.06015047e-10, -1.44953027e-08, -2.35965562e-11,
       -1.60555143e-16, -1.80122866e-08]), 'test_rmse': array([-0.07059054, -0.25602894, -0.13347672, -0.45058219, -0.44406762,
       -0.11089342, -0.21761197, -0.08966182, -0.12246516, -0.1764409 ]), 'test_mae': array([-0.04927709, -0.12699846, -0.06707011, -0.17196921, -0.15970238,
       -0.07832321, -0.13289409, -0.06496237, -0.08207352, -0.10588892]), 'test_r2': array([0.9855973 , 0.84691795, 0.94663103, 0.52676785, 0.60992606,
       0.9548867 , 0.89575175, 0.97849137, 0.95397711, 0.8969028 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.05920658006461146, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([10.47533727, 10.24196005,  9.80872083,  9.89656281, 10.00274467,
       10.3328259 , 10.83424187,  9.88762593, 10.71566486, 10.40715885]), 'score_time': array([0.13413596, 0.14295101, 0.12540817, 0.12823534, 0.12446618,
       0.15263653, 0.1257081 , 0.12662196, 0.14813328, 0.12506342]), 'test_pearson_r': array([0.95040819, 0.95283976, 0.98716139, 0.98464931, 0.94780509,
       0.66802899, 0.98319817, 0.9833754 , 0.9313579 , 0.86675064]), 'test_pearson_p': array([-1.13254455e-13, -6.27370085e-14, -1.24023139e-20, -1.04531230e-19,
       -2.06445249e-13, -1.92015454e-04, -3.06738929e-19, -2.70333418e-19,
       -5.07125553e-12, -2.10871162e-08]), 'test_spearman_r': array([0.94389348, 0.94528044, 0.97042231, 0.97110619, 0.93007353,
       0.74679433, 0.97656152, 0.98734616, 0.90644538, 0.92304739]), 'test_spearman_p': array([-4.81498646e-13, -3.59153254e-13, -2.54452060e-16, -1.92850314e-16,
       -6.29229120e-12, -1.17562329e-05, -1.61020606e-17, -1.04318951e-20,
       -1.82762291e-10, -5.07709592e-11]), 'test_kendall_r': array([0.87172498, 0.83641975, 0.89984698, 0.88752031, 0.81972362,
       0.69029358, 0.89475399, 0.93518964, 0.81131242, 0.84281408]), 'test_kendall_p': array([-4.93175012e-10, -2.28458786e-09, -1.21299979e-10, -2.16002957e-10,
       -4.50549884e-09, -7.87228920e-07, -1.80305988e-10, -2.35965562e-11,
       -9.02785734e-09, -3.89327973e-09]), 'test_rmse': array([-0.20665537, -0.2133584 , -0.11672747, -0.11240738, -0.15637842,
       -0.45660158, -0.11573898, -0.12799798, -0.24380801, -0.3308449 ]), 'test_mae': array([-0.09361309, -0.10630574, -0.07592588, -0.07659564, -0.09946039,
       -0.18450097, -0.0769615 , -0.07217825, -0.10334169, -0.11996433]), 'test_r2': array([0.89983335, 0.90128012, 0.96858099, 0.96810302, 0.89284768,
       0.21650059, 0.96497522, 0.96271061, 0.85820238, 0.73289332]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.0022420809114951697, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([1.24464869, 1.27305722, 1.36461473, 1.34553909, 1.30288434,
       1.33647513, 1.31437635, 1.40775061, 1.38192654, 1.2938695 ]), 'score_time': array([0.16257286, 0.11691022, 0.12655759, 0.1308341 , 0.1158793 ,
       0.11406207, 0.11644197, 0.11870289, 0.11557913, 0.12703156]), 'test_pearson_r': array([0.99323916, 0.98439631, 0.52596533, 0.9716526 , 0.97348158,
       0.92683949, 0.71218769, 0.92777096, 0.97478216, 0.9754903 ]), 'test_pearson_p': array([-5.81765402e-24, -1.27022110e-19, -5.78366699e-03, -1.53794163e-16,
       -6.97322953e-17, -1.06431983e-11, -4.48356083e-05, -9.17093834e-12,
       -3.83935079e-17, -1.27028906e-16]), 'test_spearman_r': array([0.99418507, 0.9738417 , 0.76265494, 0.95350427, 0.95879639,
       0.93839885, 0.7872777 , 0.92870578, 0.98136435, 0.98076923]), 'test_spearman_p': array([-9.58012571e-25, -5.92899520e-17, -5.91864675e-06, -5.30962333e-14,
       -1.28004411e-14, -1.43571822e-12, -1.82600714e-06, -7.88226536e-12,
       -1.05329481e-18, -8.01043174e-18]), 'test_kendall_r': array([0.95827008, 0.88752031, 0.71626298, 0.84      , 0.8505403 ,
       0.84963793, 0.73148148, 0.85670364, 0.91217366, 0.91333333]), 'test_kendall_p': array([-8.03874897e-12, -2.16002957e-10, -4.66963471e-07, -7.01114107e-13,
       -1.16530353e-09, -1.46914147e-09, -1.72857768e-07, -8.84108293e-10,
       -6.76014225e-11, -3.83758895e-16]), 'test_rmse': array([-0.07399424, -0.10544679, -0.59670997, -0.15916071, -0.1639531 ,
       -0.22558402, -0.4632804 , -0.22774993, -0.16601391, -0.1467002 ]), 'test_mae': array([-0.05652203, -0.06678757, -0.19784718, -0.10255296, -0.09746524,
       -0.10569988, -0.17757956, -0.09112769, -0.09709323, -0.09040303]), 'test_r2': array([ 0.98614263,  0.96853543, -0.45155618,  0.94364217,  0.9438192 ,
        0.83285437,  0.39068283,  0.84888538,  0.94234081,  0.94947959]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06942094706700487, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 306, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([1.01034093, 0.96823931, 0.89324093, 0.89117074, 0.91995406,
       0.97106147, 1.29336834, 0.88432407, 0.88105559, 0.85830593]), 'score_time': array([0.12988305, 0.13133502, 0.11730576, 0.11725831, 0.1187582 ,
       0.12892389, 0.11845422, 0.11614037, 0.1242466 , 0.11621356]), 'test_pearson_r': array([0.92593967, 0.9803444 , 0.96941539, 0.97264943, 0.82396836,
       0.92167094, 0.9958192 , 0.93111429, 0.98138844, 0.7845773 ]), 'test_pearson_p': array([-1.22667622e-11, -1.98601947e-18, -3.78285577e-16, -1.00601121e-16,
       -2.30729968e-07, -2.34987135e-11, -1.84316479e-26, -5.28476049e-12,
       -1.03720010e-18, -3.44303356e-06]), 'test_spearman_r': array([0.83490193, 0.97451686, 0.97332421, 0.97281588, 0.84820513,
       0.90162544, 0.98666216, 0.89656353, 0.97726108, 0.82823621]), 'test_spearman_p': array([-1.13484048e-07, -4.34717285e-17, -7.48029676e-17, -9.35753093e-17,
       -4.45240813e-08, -3.25544413e-10, -1.95525033e-20, -5.78670777e-10,
       -1.12337123e-17, -3.20364209e-07]), 'test_kendall_r': array([0.72756813, 0.87480785, 0.88580247, 0.88752031, 0.78461538,
       0.75851757, 0.92901677, 0.80123362, 0.91833699, 0.81803119]), 'test_kendall_p': array([-2.15267104e-07, -4.31182303e-10, -2.46761673e-10, -2.16002957e-10,
       -1.03018238e-10, -6.43400417e-08, -3.18545553e-11, -9.91387321e-09,
       -5.03226074e-11, -1.04334108e-08]), 'test_rmse': array([-0.24340936, -0.11788196, -0.15474616, -0.14436579, -0.39815984,
       -0.18654851, -0.07118193, -0.20361108, -0.11228648, -0.44881354]), 'test_mae': array([-0.10920871, -0.07999651, -0.09510565, -0.0868571 , -0.13953074,
       -0.11564178, -0.04886573, -0.09549736, -0.08147295, -0.12915702]), 'test_r2': array([0.84626016, 0.95942954, 0.93648965, 0.94460757, 0.62346818,
       0.82264519, 0.99126253, 0.85304469, 0.96273245, 0.56722464]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 252, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([0.66843247, 0.75518107, 0.70770264, 0.68031979, 0.68138027,
       0.70068598, 0.77226472, 0.68094563, 0.70960498, 0.7405889 ]), 'score_time': array([0.11322141, 0.12605929, 0.11303067, 0.11546922, 0.11416459,
       0.11318374, 0.12739658, 0.15512228, 0.11568451, 0.13122582]), 'test_pearson_r': array([0.83921023, 0.9824563 , 0.99412766, 0.96750381, 0.99625117,
       0.94454477, 0.9872772 , 0.98697945, 0.79121737, 0.8029863 ]), 'test_pearson_p': array([-8.45955066e-08, -5.13211966e-19, -1.07757120e-24, -7.75355047e-16,
       -4.99050129e-27, -4.19968914e-13, -1.11310478e-20, -1.46700803e-20,
       -1.49151836e-06, -1.35875578e-06]), 'test_spearman_r': array([0.85020525, 0.96835997, 0.99298559, 0.97589333, 0.98409986,
       0.88862287, 0.97331532, 0.98974014, 0.85831642, 0.8199308 ]), 'test_spearman_p': array([-3.83870932e-08, -5.65286954e-16, -9.03810104e-24, -2.24846675e-17,
       -1.58965776e-19, -1.34753449e-09, -7.50995123e-17, -8.52504671e-22,
       -2.05656443e-08, -5.28013072e-07]), 'test_kendall_r': array([0.75617644, 0.88408987, 0.96285291, 0.89984698, 0.91833699,
       0.72558924, 0.87790743, 0.94753538, 0.7814038 , 0.77592407]), 'test_kendall_p': array([-6.56066176e-08, -2.81784648e-10, -6.75753611e-12, -1.21299979e-10,
       -5.03226074e-11, -2.41749305e-07, -3.71909193e-10, -1.28741482e-11,
       -2.66523382e-08, -5.91636805e-08]), 'test_rmse': array([-0.24488412, -0.13018785, -0.06670464, -0.13077323, -0.06500308,
       -0.20062962, -0.08918914, -0.11610932, -0.43852769, -0.43951346]), 'test_mae': array([-0.11543438, -0.07308639, -0.04449265, -0.06863899, -0.04652878,
       -0.12446376, -0.06553569, -0.06691251, -0.18034812, -0.15753301]), 'test_r2': array([0.69109106, 0.96352213, 0.98795446, 0.92662739, 0.99191854,
       0.85553704, 0.9739252 , 0.9724515 , 0.61018575, 0.57712401]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.048094379354093816, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 115, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([2.71012592, 3.05246305, 2.7665472 , 2.8336494 , 2.73758936,
       2.7093749 , 3.05197859, 2.73088837, 2.74557757, 3.06927514]), 'score_time': array([0.11263394, 0.11884689, 0.11320257, 0.11415935, 0.11482239,
       0.11378598, 0.12765622, 0.15116096, 0.11310744, 0.12859225]), 'test_pearson_r': array([0.9881663 , 0.72559847, 0.92258891, 0.7155651 , 0.93459662,
       0.91066282, 0.97808426, 0.99145221, 0.9288532 , 0.98994115]), 'test_pearson_p': array([-4.68768022e-21, -2.73244154e-05, -2.04975656e-11, -3.96814692e-05,
       -2.88792411e-12, -1.07441480e-10, -7.24757793e-18, -9.61692218e-23,
       -7.69482204e-12, -4.85690712e-21]), 'test_spearman_r': array([0.95632927, 0.73635613, 0.9195219 , 0.77667579, 0.9430672 ,
       0.88577297, 0.97191923, 0.98751105, 0.9341768 , 0.97      ]), 'test_spearman_p': array([-2.53948111e-14, -1.79855984e-05, -3.21510576e-11, -3.08453132e-06,
       -5.71370423e-13, -1.79725315e-09, -1.37494261e-16, -8.92009863e-21,
       -3.11156377e-12, -1.26402700e-15]), 'test_kendall_r': array([0.87094391, 0.68422364, 0.81680564, 0.7808642 , 0.84437697,
       0.78704079, 0.90376593, 0.94429055, 0.83821363, 0.89333333]), 'test_kendall_p': array([-6.16514724e-10, -1.07867593e-06, -6.27830961e-09, -2.41600375e-08,
       -1.53302077e-09, -1.87313165e-08, -1.29602425e-10, -1.69305710e-11,
       -2.01294843e-09, -6.24333368e-15]), 'test_rmse': array([-0.09227313, -0.55703714, -0.23850097, -0.42724713, -0.21612203,
       -0.2484097 , -0.13118919, -0.08552433, -0.21577321, -0.09185521]), 'test_mae': array([-0.06484307, -0.1877076 , -0.1121634 , -0.13986951, -0.1133782 ,
       -0.12035213, -0.07755542, -0.06760397, -0.10766782, -0.05937621]), 'test_r2': array([0.97384831, 0.42839535, 0.82758936, 0.34635743, 0.86004456,
       0.82490666, 0.95505316, 0.98237864, 0.85837951, 0.97928135]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 112, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 28, 6: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.6036248478819634, 'test_rmse': 0.70678828655535, 'test_r2': -0.23769114684246717, 'test_pearson_r': array([0.14964843]), 'test_pearson_p_value': array([0.2063528]), 'test_spearman_r': 0.030834387867182535, 'test_spearman_p_value': 0.7956633179943629, 'test_kendall_r': 0.025964201179133273, 'test_kendall_p_value': 0.7460062676379173, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.008713413072249411, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2053, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1258, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.6007864325778817, 'test_rmse': 0.7036838441500142, 'test_r2': -0.22684234656409052, 'test_pearson_r': array([0.16237991]), 'test_pearson_p_value': array([0.16989002]), 'test_spearman_r': 0.0294056389801117, 'test_spearman_p_value': 0.8049400384504397, 'test_kendall_r': 0.007247769594898857, 'test_kendall_p_value': 0.9278916965353844, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.00900638187615356, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.6049744179026852, 'test_rmse': 0.7062518120667152, 'test_r2': -0.23581296707294586, 'test_pearson_r': array([0.15160055]), 'test_pearson_p_value': array([0.20042764]), 'test_spearman_r': 0.009015562115706394, 'test_spearman_p_value': 0.9396569737299678, 'test_kendall_r': -0.008516732119778839, 'test_kendall_p_value': 0.9164000019833058, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06336012159738731, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 87, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.6061688949839841, 'test_rmse': 0.7081368605907475, 'test_r2': -0.24241875917255928, 'test_pearson_r': array([0.14367791]), 'test_pearson_p_value': array([0.22524437]), 'test_spearman_r': 0.01021494618995427, 'test_spearman_p_value': 0.9316473655883979, 'test_kendall_r': -0.009554811689622246, 'test_kendall_p_value': 0.9051966286893287, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06372381674926157, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 489, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.6078319304915502, 'test_rmse': 0.7060801885204925, 'test_r2': -0.23521241970413143, 'test_pearson_r': array([0.14035084]), 'test_pearson_p_value': array([0.236281]), 'test_spearman_r': 0.02634056104827242, 'test_spearman_p_value': 0.8249306181274597, 'test_kendall_r': -0.007648251223270065, 'test_kendall_p_value': 0.9240896803755733, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.601337604554914, 'test_rmse': 0.7040138022267691, 'test_r2': -0.2279931515786473, 'test_pearson_r': array([0.15246988]), 'test_pearson_p_value': array([0.19782851]), 'test_spearman_r': 0.03379671084466517, 'test_spearman_p_value': 0.7765204379731705, 'test_kendall_r': 0.013745753565423497, 'test_kendall_p_value': 0.8638450198050174, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.020031899014204917, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1527, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.60293832301883, 'test_rmse': 0.7052069903695987, 'test_r2': -0.23215917367406003, 'test_pearson_r': array([0.16168497]), 'test_pearson_p_value': array([0.17174935]), 'test_spearman_r': 0.05496023107482501, 'test_spearman_p_value': 0.6442069035667968, 'test_kendall_r': 0.03515496524667747, 'test_kendall_p_value': 0.6611972204909793, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06190577108202342, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1123, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 25, 6: {'fit_time': array([1.57808375, 1.60039258, 1.62895513, 1.59737754]), 'score_time': array([0.12059116, 0.11687827, 0.11718488, 0.11731243]), 'test_pearson_r': array([0.93863353, 0.79127192, 0.95858066, 0.97388639]), 'test_pearson_p': array([-8.00015912e-31, -4.36215587e-15, -4.53301726e-36, -1.23873611e-41]), 'test_spearman_r': array([0.91541617, 0.83216592, 0.94313724, 0.96190924]), 'test_spearman_p': array([-1.37558151e-26, -8.80101516e-18, -7.76397538e-32, -1.25535666e-36]), 'test_kendall_r': array([0.82364584, 0.77034264, 0.84921792, 0.85273801]), 'test_kendall_p': array([-4.15025497e-22, -1.31429842e-19, -2.12857499e-23, -2.99983454e-23]), 'test_rmse': array([-0.23254324, -0.42387818, -0.18317472, -0.13112974]), 'test_mae': array([-0.10962369, -0.14757673, -0.09366796, -0.08372831]), 'test_r2': array([0.87521932, 0.5768942 , 0.91409104, 0.94712339]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([2.9262259 , 3.06880713, 2.85480618, 2.83896875]), 'score_time': array([0.12066531, 0.12566137, 0.11761332, 0.11777472]), 'test_pearson_r': array([0.94503809, 0.84085206, 0.96663696, 0.93260542]), 'test_pearson_p': array([-2.73831694e-32, -1.89638794e-18, -5.62331541e-39, -3.90029128e-29]), 'test_spearman_r': array([0.92394619, 0.87505329, 0.94627325, 0.92495622]), 'test_spearman_p': array([-5.50998121e-28, -1.59680430e-21, -1.36356842e-32, -9.73949665e-28]), 'test_kendall_r': array([0.81563707, 0.81669316, 0.81927949, 0.80387892]), 'test_kendall_p': array([-1.06392641e-21, -9.05237240e-22, -6.15427547e-22, -7.25933290e-21]), 'test_rmse': array([-0.21678929, -0.38522306, -0.16055355, -0.2099153 ]), 'test_mae': array([-0.10900342, -0.1332432 , -0.09644983, -0.11915596]), 'test_r2': array([0.87821233, 0.67516341, 0.93051909, 0.86797883]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.05920658006461146, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([8.09468436, 8.1513958 , 8.5973208 , 8.84875822]), 'score_time': array([0.11713457, 0.12692523, 0.11548495, 0.16290092]), 'test_pearson_r': array([0.97779376, 0.97632235, 0.86007296, 0.92574206]), 'test_pearson_p': array([-1.79331178e-44, -1.32376909e-43, -4.46464053e-20, -7.11129103e-28]), 'test_spearman_r': array([0.97676504, 0.9632819 , 0.89567898, 0.94012155]), 'test_spearman_p': array([-7.35341143e-44, -1.09384046e-37, -7.50006561e-24, -1.11687872e-30]), 'test_kendall_r': array([0.88803461, 0.85659397, 0.809068  , 0.85544738]), 'test_kendall_p': array([-2.00817923e-25, -8.11952292e-24, -2.06224070e-21, -3.03557380e-23]), 'test_rmse': array([-0.14900586, -0.1295052 , -0.3084215 , -0.26045784]), 'test_mae': array([-0.09176068, -0.08823539, -0.13278767, -0.10543995]), 'test_r2': array([0.94884732, 0.95271553, 0.70672132, 0.85144374]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.0022420809114951697, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([1.17120576, 1.10884452, 1.2322073 , 1.08293653]), 'score_time': array([0.12015915, 0.11960936, 0.11859512, 0.16119361]), 'test_pearson_r': array([0.9838257 , 0.84129979, 0.86409924, 0.92638783]), 'test_pearson_p': array([-9.05262430e-49, -1.74779886e-18, -1.89673901e-20, -5.47745397e-28]), 'test_spearman_r': array([0.97426051, 0.85876953, 0.903388  , 0.92372329]), 'test_spearman_p': array([-1.78095948e-42, -5.85694518e-20, -7.52955332e-25, -1.58439605e-27]), 'test_kendall_r': array([0.88718465, 0.78149864, 0.83136718, 0.82165962]), 'test_kendall_p': array([-3.03731225e-25, -4.14642410e-20, -1.71440007e-22, -9.36083810e-22]), 'test_rmse': array([-0.10763538, -0.393762  , -0.31961642, -0.253283  ]), 'test_mae': array([-0.07007235, -0.15045545, -0.11632456, -0.12877496]), 'test_r2': array([0.96721044, 0.64483943, 0.71049985, 0.84864261]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06942094706700487, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 306, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([0.8119359 , 0.79774499, 0.83096027, 0.86279941]), 'score_time': array([0.11796355, 0.11540031, 0.15994644, 0.11659575]), 'test_pearson_r': array([0.95113942, 0.89637552, 0.8718384 , 0.86055376]), 'test_pearson_p': array([-7.37696776e-34, -6.13928168e-24, -3.37950435e-21, -7.98708514e-20]), 'test_spearman_r': array([0.92059332, 0.9121327 , 0.82179476, 0.87833135]), 'test_spearman_p': array([-2.03702366e-27, -4.34036272e-26, -4.92441145e-17, -1.53399572e-21]), 'test_kendall_r': array([0.82134847, 0.83457744, 0.74493067, 0.81043541]), 'test_kendall_p': array([-5.74895053e-22, -9.96898093e-23, -2.46725753e-18, -3.36850853e-21]), 'test_rmse': array([-0.19219417, -0.29054084, -0.32495722, -0.32930436]), 'test_mae': array([-0.09988139, -0.12295477, -0.14106937, -0.12732436]), 'test_r2': array([0.90295454, 0.7917649 , 0.73666423, 0.71971771]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 252, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([0.67832994, 0.66166496, 0.68046951, 0.68927383]), 'score_time': array([0.11808538, 0.11712456, 0.11877131, 0.12064123]), 'test_pearson_r': array([0.90604763, 0.98819809, 0.97041574, 0.77923649]), 'test_pearson_p': array([-3.25653816e-25, -4.71537719e-53, -1.34946882e-40, -3.36532041e-14]), 'test_spearman_r': array([0.91933775, 0.97687634, 0.96330056, 0.82082703]), 'test_spearman_p': array([-3.27521529e-27, -6.33173097e-44, -1.07677350e-37, -1.01458881e-16]), 'test_kendall_r': array([0.8020295 , 0.87587495, 0.85645558, 0.74745291]), 'test_kendall_p': array([-4.63953006e-21, -7.92724769e-25, -9.01041901e-24, -3.66695676e-18]), 'test_rmse': array([-0.26181851, -0.10001909, -0.15546319, -0.45212258]), 'test_mae': array([-0.14187609, -0.06781299, -0.09841554, -0.19406808]), 'test_r2': array([0.79545032, 0.97594227, 0.93047573, 0.56397745]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.048094379354093816, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 115, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([2.64515877, 2.62766099, 2.72392702, 2.69009376]), 'score_time': array([0.11775541, 0.11531329, 0.1205411 , 0.11781597]), 'test_pearson_r': array([0.86052594, 0.85687934, 0.95346138, 0.96002893]), 'test_pearson_p': array([-4.06012416e-20, -8.64070740e-20, -1.64837617e-34, -5.43739778e-36]), 'test_spearman_r': array([0.87728679, 0.88530466, 0.94101321, 0.94786969]), 'test_spearman_p': array([-9.36953360e-22, -1.26426782e-22, -2.38651697e-31, -1.70859170e-32]), 'test_kendall_r': array([0.80766055, 0.79701478, 0.84404467, 0.8516129 ]), 'test_kendall_p': array([-3.18173561e-21, -7.20234256e-21, -4.17534056e-23, -2.72765350e-23]), 'test_rmse': array([-0.36394354, -0.32050287, -0.18435707, -0.17920188]), 'test_mae': array([-0.12978546, -0.13126191, -0.09392466, -0.09214596]), 'test_r2': array([0.69582001, 0.67998172, 0.90865253, 0.92145207]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 112, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 522)}}
Trimer_scaler
Filename: (ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 ECFP6_Count_512bit cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 ECFP6_Count_512bit cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 ECFP6_Count_512bit cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c023n01>
Subject: Job 295230: <XGBR_log Rg (nm)_ECFP_Trimer_KM4 ECFP6_Count_512bit cluster_20250311> in cluster <Hazel> Done

Job <XGBR_log Rg (nm)_ECFP_Trimer_KM4 ECFP6_Count_512bit cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:12:45 2025
Job was executed on host(s) <8*c023n01>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 17:00:56 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 17:00:56 2025
Terminated at Thu Mar 13 05:20:27 2025
Results reported at Thu Mar 13 05:20:27 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "XGBR_log Rg (nm)_ECFP_Trimer_KM4 ECFP6_Count_512bit cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_ECFP_Trimer_3_count_KM4 ECFP6_Count_512bit cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_ECFP_Trimer_3_count_KM4 ECFP6_Count_512bit cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "ECFP"                                       --regressor_type "XGBR"                                       --radius "3"                                       --vector "count"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 ECFP6_Count_512bit cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   170749.00 sec.
    Max Memory :                                 6 GB
    Average Memory :                             5.69 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               10.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   44385 sec.
    Turnaround time :                            122862 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_ECFP_Trimer_3_count_KM4 ECFP6_Count_512bit cluster_20250311.err> for stderr output of this job.

