


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05756616480501612), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 252), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 398), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 604), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 200), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09905449267376921), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1963), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4533572533078535e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0836710225144054), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 336), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 71), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06202566549225395), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036414837025290095), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1360), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06107966681006521), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1555), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09945875464130216), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 140), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0861446837189381e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05367422434241167), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1053), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 224), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025376536462949337), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 588), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08085853647865074), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.033338040645534056), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 836), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03667792576732762), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 657), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09761425222002393), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 175), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007828719049371165), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02983002261635047), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 867), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09782337498512109), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1903), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1065480874924181e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04836958908224958), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 495), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04449751789107366), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 704), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 383), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 349), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06371179551658947), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1969), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000801379370782023), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09891167091568198), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1986), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00053669030410338), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05848964600813727), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 365), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06255433404534483), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 129), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06595085432208288), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 181), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.099759754964393), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 638), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.655367735970647e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0537058540075986), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09793524157222984), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1054), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.9331098688144353e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048553372688698006), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1598), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09941358597400098), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1420), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.54823111653054e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09897334931646781), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 914), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3996251095207366e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05857531961941732), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05687527769084357), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 447), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1030), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027782329900668284), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03056845773063245), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 657), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09848437642373038), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 185), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000998454358864668), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07681511788673608), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.040989397439100426), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1073), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 514), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017315293782684912), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 184), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0439974467368201), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 179), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006896917539105346), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02773703937514508), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 664), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009569171649519402), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0999910980452215), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 512), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001438476996303924), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 225), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09610098666260941), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1365), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005628748995219345), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03962649437004333), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 640), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09816837735655853), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1344), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4715996166362874e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05006766797961749), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1580), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 234), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05861151569697514), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 452), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4518593574905874e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0564331314259523), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1343), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03145287571665011), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 973), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06901005447794523), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09877445171327477), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1226), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4961368645301707e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034803789598773116), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09632094536588383), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2106421268704611e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03671732139280295), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 788), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05150863199924692), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0523352824505995), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 760), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04995431480082922), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 596), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027991836936131068), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1282), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.075847915265515e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015344897810687447), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08012091509649705), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051323080463184824), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1029), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2358113854021217e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03896572139753916), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 835), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04294277319118653), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 936), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009522476528998199), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05633687420403481), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09925529857310478), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1341), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000889955944871127), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04162498264637951), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 306), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 597), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0911027961179286), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1968), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0191048318327284e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02232166307047874), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0676699811658147), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 848), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016662576210662593), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 793), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020286364666518612), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027740822825190095), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1340), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09814357638210683), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 386), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008355367964125623), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06007290700719593), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 376), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07538477221685355), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1173), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.93958544554924e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06818501359560183), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1362), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0377402305646863), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03610469027042915), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 274), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029145469761080456), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 391), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04217238015062632), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061632814641690986), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0235669579496261), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05851909602030879), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09909127379711895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1038), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00040065357640661726), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03300983580024063), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 633), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028068940729086268), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 806), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020939586970753744), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1306), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07085949958189774), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1268), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3946622573682617e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028236966712766695), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 797), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1097), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1417), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026027269076990125), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09986529879467336), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1984), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006766151577177176), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06953369741390861), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 600), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008697934076502203), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09245362551599873), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 175), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2825621556638484e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.099603049995339), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 324), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005795469487180346), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06890156001426621), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 234), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1414), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1528), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09994970970607275), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 278), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00015605578742766669), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016256391427133473), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1982), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.133969352697037e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 904), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030333391269447615), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1136), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.060434617631168266), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1480), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.046442961570010786), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04661617499823674), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 282), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04914913413226186), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 890), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06408032693486766), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 186), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06758086416395405), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 311), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.7928725695936337e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0709183496547039), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1420), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030666190213354462), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03344395146849536), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061479795050007585), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 273), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00023574327992557999), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06539160786983472), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1011), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1269), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03518409092261886), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.033177518828588146), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1263), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0994500131233693), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1354), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.3552564666067794e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 807), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 131), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06763996974939021), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.049011978349644686), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054341272039000764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 505), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 574), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08781407295135955), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 263), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09984160850557258), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1016), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6680932085388465e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012550966665902418), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1334), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008118194373281908), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055968563133307246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 409), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 864), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06989171758559784), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 300), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09906454203072741), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 413), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.971272896718669e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08100562498483004), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1279), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.8811887769731685e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05139106854574973), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1182), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055312014431076924), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03555164478498919), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061506733758663494), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 251), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005888970915274739), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0647295877616676), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05299007838520731), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 141), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.312031687303078e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03770052924189587), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 220), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00026582794314867315), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04295564927093324), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06363666855161346), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1905), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009597240531127432), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04327209171334564), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0384444297844169), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 694), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.467286323988708e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05251897361955621), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 573), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015283988057024812), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5373651697553624e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04540142629705617), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 722), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1002), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030638833809019737), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05923100303660489), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 283), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005039211013304168), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06527139321164395), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 367), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1590), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05238641109665637), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09986529879467336), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1984), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006766151577177176), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025110050741759458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2881294633636083e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025110050741759458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2881294633636083e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022689890531965753), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 356), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5509333574956727e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0503566575141299), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0997669772471772), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 446), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.658030448506821e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055472651182985715), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 936), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 310), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07240493546011474), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1258), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1287335220569398e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 496), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 292), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06424641162714956), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1413), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.8746732221568904e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008790118612348461), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 560), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.058997826292104406), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1422), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02889358892310508), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 673), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.061636241248690986), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0160019644794307), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0188601678694528), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1974), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005566557795981908), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04383408869263104), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 447), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09996287013008157), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 405), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00030711975515090726), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01657407676181168), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048330466327014446), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04703705152506136), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1214), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09984160850557258), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1016), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6680932085388465e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025041499136197735), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 349), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005147024286785698), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 315), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050800478237020816), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 173), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 651), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 414), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06351303178715499), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1238), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2208908709110601e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05977654549076347), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 595), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04949694462857141), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 673), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0999298097384997), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 283), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0576791575844794e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0611103498040035), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1443), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06436220694914596), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 965), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05696606106684542), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04057087297405396), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03193115527714806), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 764), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09996140198742454), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1973), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.3179724378458545e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07473131981860011), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 750), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06692299856023), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 364), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03671875959063817), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0004808700594113659), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04172164745565523), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1991), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.127342615484921e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 385), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07121079333568257), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 195), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04062141003632072), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0472036435241774), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1083), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04157210493877934), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1054), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051902014695989096), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06278628703520209), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 943), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.161695025759343e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 131), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 925), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00040333807877999104), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029098364105194972), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1114), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05953212389122677), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008290941938720118), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0974402863906493), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 669), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00045180427863903127), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09986529879467336), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1984), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006766151577177176), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048249347141309386), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010466913033551399), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0986494649767513), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 353), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00013066693073876393), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05478965948152621), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 979), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0192722284076572e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011204131912833398), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1096), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009336770406730826), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.096779305765386), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 726), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007067990093521717), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05466534157416037), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 379), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007236907838442751), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1279), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03774846118412326), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 659), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 37, 6: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.48512913560355425, 'test_rmse': 0.7335526976322776, 'test_r2': -0.6336919349867707, 'test_pearson_r': array([0.03178738]), 'test_pearson_p_value': array([0.75725386]), 'test_spearman_r': -0.12815122529822098, 'test_spearman_p_value': 0.2109540451531692, 'test_kendall_r': -0.03672190887332219, 'test_kendall_p_value': 0.5997575920324549, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 200, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.4511222317968778, 'test_rmse': 0.6922143018735573, 'test_r2': -0.4547509988201943, 'test_pearson_r': array([0.05491358]), 'test_pearson_p_value': array([0.59318365]), 'test_spearman_r': -0.15711164410422254, 'test_spearman_p_value': 0.12432463168439802, 'test_kendall_r': -0.07952882113861987, 'test_kendall_p_value': 0.2555966550737707, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 224, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.5406351205187685, 'test_rmse': 0.6918436970947326, 'test_r2': -0.4531936968511914, 'test_pearson_r': array([-0.07382776]), 'test_pearson_p_value': array([0.47234146]), 'test_spearman_r': -0.2920901006761642, 'test_spearman_p_value': 0.003695463885564226, 'test_kendall_r': -0.18058596040911415, 'test_kendall_p_value': 0.009721682072737763, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1246, 'regressor__learning_rate': 0.07352481813242628, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.49836528703312294, 'test_rmse': 0.6505277137119498, 'test_r2': -0.2848106684002767, 'test_pearson_r': array([-0.00711351]), 'test_pearson_p_value': array([0.94486819]), 'test_spearman_r': -0.2984477246881527, 'test_spearman_p_value': 0.0029853083075612754, 'test_kendall_r': -0.1980776775600856, 'test_kendall_p_value': 0.004576601733295611, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 129, 'regressor__learning_rate': 0.06255433404534483, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.5213199134836461, 'test_rmse': 0.6720412930119356, 'test_r2': -0.37119570883302266, 'test_pearson_r': array([-0.04921583]), 'test_pearson_p_value': array([0.63213342]), 'test_spearman_r': -0.32255692010870346, 'test_spearman_p_value': 0.0012720259740736178, 'test_kendall_r': -0.19602632571684045, 'test_kendall_p_value': 0.0050407675876106995, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05857531961941732, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.48525068107661645, 'test_rmse': 0.6829535272481216, 'test_r2': -0.4160866636456151, 'test_pearson_r': array([0.00490534]), 'test_pearson_p_value': array([0.96196653]), 'test_spearman_r': -0.1752015364546572, 'test_spearman_p_value': 0.08607621420078046, 'test_kendall_r': -0.07219648140611606, 'test_kendall_p_value': 0.3026106781045582, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.017315293782684912, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.471413734311726, 'test_ystd': 0.5739132295666852, 'test_mae': 0.4751065712827106, 'test_rmse': 0.6831553772200895, 'test_r2': -0.4169238488483129, 'test_pearson_r': array([0.0237582]), 'test_pearson_p_value': array([0.81732231]), 'test_spearman_r': -0.18490821952199532, 'test_spearman_p_value': 0.06980160832895298, 'test_kendall_r': -0.09648511800316646, 'test_kendall_p_value': 0.16747959904590193, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 225, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 33, 6: {'fit_time': array([32.53172827, 33.95534992, 31.00692225]), 'score_time': array([0.84772015, 0.81036496, 0.82644129]), 'test_pearson_r': array([0.9392714 , 0.90160837, 0.8508171 ]), 'test_pearson_p': array([-3.02937360e-41, -2.56840525e-32, -3.40590725e-25]), 'test_spearman_r': array([0.92055377, 0.91510663, 0.840832  ]), 'test_spearman_p': array([-1.86101669e-36, -6.93208673e-35, -4.17124785e-24]), 'test_kendall_r': array([0.8030557 , 0.81893155, 0.73876141]), 'test_kendall_p': array([-4.31510459e-28, -8.41235822e-29, -8.89794051e-24]), 'test_rmse': array([-0.22492371, -0.28581095, -0.31797798]), 'test_mae': array([-0.12218676, -0.12254127, -0.15452626]), 'test_r2': array([0.87846862, 0.81018   , 0.6979987 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06202566549225395, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([33.48478794, 34.04755211, 33.7859776 ]), 'score_time': array([0.82930064, 0.8329339 , 0.81822968]), 'test_pearson_r': array([0.88764959, 0.88966295, 0.86893686]), 'test_pearson_p': array([-2.30387635e-30, -2.45698586e-30, -2.18300277e-27]), 'test_spearman_r': array([0.83341156, 0.9016139 , 0.85213881]), 'test_spearman_p': array([-1.32245231e-23, -2.56264150e-32, -2.41144425e-25]), 'test_kendall_r': array([0.69427706, 0.80372883, 0.71397526]), 'test_kendall_p': array([-2.16609651e-21, -7.65037429e-28, -2.89819606e-22]), 'test_rmse': array([-0.31285311, -0.29916935, -0.3046219 ]), 'test_mae': array([-0.16432154, -0.13316095, -0.17633578]), 'test_r2': array([0.74711492, 0.78371651, 0.74400064]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([30.56222939, 34.1145339 , 32.66012311]), 'score_time': array([0.78634501, 0.85488272, 0.80618906]), 'test_pearson_r': array([0.96703839, 0.88266828, 0.92500162]), 'test_pearson_p': array([-2.83507647e-52, -2.80051222e-29, -4.67522354e-37]), 'test_spearman_r': array([0.96181905, 0.85324062, 0.93705942]), 'test_spearman_p': array([-1.31506292e-49, -1.80364988e-25, -3.81185043e-40]), 'test_kendall_r': array([0.85419772, 0.74667483, 0.83888533]), 'test_kendall_p': array([-1.33607763e-31, -3.17344273e-24, -4.98266123e-30]), 'test_rmse': array([-0.16579331, -0.28065909, -0.24873907]), 'test_mae': array([-0.11114578, -0.14357033, -0.11733576]), 'test_r2': array([0.93490741, 0.76421996, 0.85389946]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1986, 'regressor__learning_rate': 0.09891167091568198, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([27.5911274 , 23.86299491, 24.16902852]), 'score_time': array([0.7270155 , 0.70005465, 0.69431257]), 'test_pearson_r': array([0.91159719, 0.83849405, 0.9365023 ]), 'test_pearson_p': array([-1.44309767e-34, -7.31528649e-24, -5.45616162e-40]), 'test_spearman_r': array([0.91793084, 0.84379718, 0.93085262]), 'test_spearman_p': array([-7.00269190e-36, -2.01899263e-24, -1.74139041e-38]), 'test_kendall_r': array([0.81868282, 0.7322098 , 0.81281684]), 'test_kendall_p': array([-6.13785948e-29, -2.27839090e-23, -1.73892201e-28]), 'test_rmse': array([-0.24404442, -0.36986769, -0.23537941]), 'test_mae': array([-0.12097449, -0.18293066, -0.12877818]), 'test_r2': array([0.82571112, 0.66481628, 0.8711802 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1598, 'regressor__learning_rate': 0.048553372688698006, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([7.71530843, 7.53401995, 8.33884263]), 'score_time': array([0.30945158, 0.29659104, 0.29120111]), 'test_pearson_r': array([0.95980352, 0.86090383, 0.89218068]), 'test_pearson_p': array([-1.12297478e-48, -2.23588258e-26, -9.82780969e-31]), 'test_spearman_r': array([0.93222072, 0.83623154, 0.91165301]), 'test_spearman_p': array([-2.78431466e-39, -1.24927776e-23, -3.44264592e-34]), 'test_kendall_r': array([0.78980347, 0.73803976, 0.8307066 ]), 'test_kendall_p': array([-3.88142337e-27, -9.96072290e-24, -1.27067247e-29]), 'test_rmse': array([-0.17701871, -0.33356865, -0.28671868]), 'test_mae': array([-0.11996775, -0.16497896, -0.1241542 ]), 'test_r2': array([0.92042155, 0.71822948, 0.79184969]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 657, 'regressor__learning_rate': 0.03056845773063245, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([6.98430848, 6.56155753, 7.67812228]), 'score_time': array([0.23574328, 0.23795843, 0.22839689]), 'test_pearson_r': array([0.92569295, 0.89634856, 0.88807659]), 'test_pearson_p': array([-1.20887820e-37, -2.04895147e-31, -4.32730835e-30]), 'test_spearman_r': array([0.9167711 , 0.87752801, 0.90514241]), 'test_spearman_p': array([-1.24061313e-35, -1.52028759e-28, -5.95201064e-33]), 'test_kendall_r': array([0.76286308, 0.72313621, 0.79731345]), 'test_kendall_p': array([-1.64394138e-25, -7.54571732e-23, -2.83065381e-27]), 'test_rmse': array([-0.23807948, -0.27999567, -0.31663582]), 'test_mae': array([-0.14974033, -0.17894587, -0.16160798]), 'test_r2': array([0.83989622, 0.78542288, 0.78479872]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 512, 'regressor__learning_rate': 0.0999910980452215, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([3.18502331, 2.91757178, 3.42559147]), 'score_time': array([0.12640643, 0.13044834, 0.12423635]), 'test_pearson_r': array([0.88615408, 0.86697594, 0.96036638]), 'test_pearson_p': array([-3.91391512e-30, -3.90608857e-27, -2.25157900e-48]), 'test_spearman_r': array([0.8864362 , 0.8705445 , 0.95285138]), 'test_spearman_p': array([-3.54357017e-30, -1.34535377e-27, -2.83645781e-45]), 'test_kendall_r': array([0.78596535, 0.74746226, 0.82545081]), 'test_kendall_p': array([-8.54848949e-27, -3.03745400e-24, -2.95702109e-29]), 'test_rmse': array([-0.29706136, -0.2988305 , -0.18282099]), 'test_mae': array([-0.13840912, -0.16447779, -0.12104139]), 'test_r2': array([0.77693128, 0.73776157, 0.91790076]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 234, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 6, 6: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 1.291557416778518, 'test_rmse': 1.5292918455172957, 'test_r2': -1.7752474972407923, 'test_pearson_r': array([0.70716629]), 'test_pearson_p_value': array([0.00319402]), 'test_spearman_r': 0.6676524600110535, 'test_spearman_p_value': 0.006532416172959506, 'test_kendall_r': 0.3972149547533681, 'test_kendall_p_value': 0.05038516608631582, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1226, 'regressor__learning_rate': 0.09877445171327477, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 1.1903888656599932, 'test_rmse': 1.4738501155434212, 'test_r2': -1.577671760731684, 'test_pearson_r': array([0.5018067]), 'test_pearson_p_value': array([0.05665794]), 'test_spearman_r': 0.43379276725223403, 'test_spearman_p_value': 0.10620651358646603, 'test_kendall_r': 0.268741924943285, 'test_kendall_p_value': 0.18178515992965683, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.015344897810687447, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 1.2006813504632383, 'test_rmse': 1.4923005978963437, 'test_r2': -1.6426132004947833, 'test_pearson_r': array([0.3839341]), 'test_pearson_p_value': array([0.15771146]), 'test_spearman_r': 0.43748462059055093, 'test_spearman_p_value': 0.10293213141085446, 'test_kendall_r': 0.2894143807081531, 'test_kendall_p_value': 0.15043620928330145, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04162498264637951, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 1.23409769157292, 'test_rmse': 1.4896198975433432, 'test_r2': -1.6331275896005617, 'test_pearson_r': array([0.66723149]), 'test_pearson_p_value': array([0.0065788]), 'test_spearman_r': 0.6676524600110535, 'test_spearman_p_value': 0.006532416172959506, 'test_kendall_r': 0.3972149547533681, 'test_kendall_p_value': 0.05038516608631582, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 793, 'regressor__learning_rate': 0.016662576210662593, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 1.1806888673043234, 'test_rmse': 1.4892755119112377, 'test_r2': -1.6319102233611917, 'test_pearson_r': array([0.02162025]), 'test_pearson_p_value': array([0.93903836]), 'test_spearman_r': -0.12933810470109236, 'test_spearman_p_value': 0.6459433397755421, 'test_kendall_r': -0.09354720936668216, 'test_kendall_p_value': 0.6434957075247478, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0377402305646863, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 1.192942680573672, 'test_rmse': 1.423253709554899, 'test_r2': -1.4037296633980887, 'test_pearson_r': array([0.82593034]), 'test_pearson_p_value': array([0.00014837]), 'test_spearman_r': 0.6848387942577824, 'test_spearman_p_value': 0.004847775942673157, 'test_kendall_r': 0.4547940268270977, 'test_kendall_p_value': 0.02383973037080235, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.8649260421603344, 'test_ystd': 0.9179933030716202, 'test_mae': 1.3198402676211158, 'test_rmse': 1.5836495649046036, 'test_r2': -1.976042614665185, 'test_pearson_r': array([0.36880906]), 'test_pearson_p_value': array([0.17613736]), 'test_spearman_r': 0.43379276725223403, 'test_spearman_p_value': 0.10620651358646603, 'test_kendall_r': 0.268741924943285, 'test_kendall_p_value': 0.18178515992965683, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 600, 'regressor__learning_rate': 0.06953369741390861, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 6, 6: {'fit_time': array([39.16005206, 44.96082687, 35.56882906, 46.14476418, 44.63989115,
       44.34851336, 46.00822258, 46.58510971, 40.91597676, 44.51667953,
       45.01769567, 44.00494194, 45.07349896, 37.4828589 , 39.19742632,
       46.49312162, 43.93031883]), 'score_time': array([0.52126765, 0.51410055, 0.56296587, 0.50215936, 0.49122238,
       0.49542451, 0.49779105, 0.51823521, 0.49573255, 0.50308633,
       0.49975848, 0.51427054, 0.50031686, 0.55030751, 0.4859035 ,
       0.51032519, 0.49318409]), 'test_pearson_r': array([0.96305521, 0.97871817, 0.99593409, 0.99518204, 0.96649452,
       0.94979347, 0.97412883, 0.98157558, 0.69079858, 0.95632972,
       0.97219048, 0.97207971, 0.94234757, 0.97833715, 0.98102635,
       0.89208748, 0.96066398]), 'test_pearson_p': array([-2.28442074e-09, -5.01226800e-11, -4.87305385e-16, -1.59544345e-15,
       -4.69525786e-09, -6.24839282e-08, -8.90650258e-10, -9.98248894e-11,
       -4.35184196e-03, -2.56407188e-08, -1.41785780e-09, -1.45458140e-09,
       -1.50752987e-07, -2.83760131e-10, -1.20666477e-10, -7.83664757e-06,
       -1.31346965e-08]), 'test_spearman_r': array([0.94411765, 0.94039761, 0.97941176, 0.98749107, 0.96428571,
       0.94285714, 0.925     , 0.96785714, 0.78928571, 0.95527881,
       0.97050977, 0.95357143, 0.9       , 0.96785714, 0.97142857,
       0.84182339, 0.92857143]), 'test_spearman_p': array([-3.93392920e-08, -6.11516412e-08, -3.98200979e-11, -1.24331763e-12,
       -7.07230301e-09, -1.42476769e-07, -7.98746211e-07, -3.59653554e-09,
       -4.67326756e-04, -2.98504431e-08, -2.06786837e-09, -3.79244004e-08,
       -4.87197095e-06, -3.59653554e-09, -1.68707649e-09, -8.29228077e-05,
       -5.86793827e-07]), 'test_kendall_r': array([0.88333333, 0.86193223, 0.91666667, 0.94561497, 0.88571429,
       0.82857143, 0.82857143, 0.88571429, 0.75238095, 0.83657714,
       0.88039285, 0.86666667, 0.73333333, 0.88571429, 0.88571429,
       0.74642003, 0.80952381]), 'test_kendall_p': array([-1.43717927e-08, -3.45008795e-06, -1.38948965e-09, -3.52984089e-07,
       -5.33772028e-08, -9.95137652e-07, -9.95137652e-07, -5.33772028e-08,
       -1.96940497e-05, -1.58906350e-05, -5.15437155e-06, -1.54339647e-07,
       -3.70285640e-05, -5.33772028e-08, -5.33772028e-08, -1.11210251e-04,
       -2.27466721e-06]), 'test_rmse': array([-0.16422984, -0.14096147, -0.07317223, -0.07585889, -0.14559236,
       -0.1812588 , -0.14477505, -0.13693466, -0.50285164, -0.15887634,
       -0.16792865, -0.13263658, -0.18484048, -0.17100704, -0.11212694,
       -0.23235298, -0.13561252]), 'test_mae': array([-0.09597767, -0.08395541, -0.04719266, -0.06137394, -0.09781381,
       -0.13289299, -0.08315169, -0.09287772, -0.20126412, -0.08362995,
       -0.10763804, -0.08710814, -0.1475173 , -0.12626542, -0.07436706,
       -0.10993915, -0.09742967]), 'test_r2': array([0.92114538, 0.94449436, 0.98870197, 0.98923528, 0.92998481,
       0.89390701, 0.94523395, 0.96219708, 0.43360829, 0.90343877,
       0.93906465, 0.94259693, 0.88345074, 0.9452956 , 0.95705311,
       0.76447573, 0.91859506]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05150863199924692, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([40.55652881, 39.95176864, 40.6097846 , 39.36487365, 40.39560986,
       39.42069316, 38.96598697, 39.445467  , 39.46263671, 39.35849595,
       40.77249742, 39.62380815, 38.02580976, 37.47040844, 39.78657556,
       39.37448049, 39.42735887]), 'score_time': array([0.5027492 , 0.51138687, 0.49862313, 0.50088906, 0.50835514,
       0.49558926, 0.48752356, 0.50380635, 0.50670362, 0.4896152 ,
       0.4938643 , 0.50049591, 0.48591995, 0.4872551 , 0.49338174,
       0.49164081, 0.50560403]), 'test_pearson_r': array([0.98048778, 0.98846926, 0.99315978, 0.99193812, 0.98574117,
       0.95129561, 0.94769273, 0.73651703, 0.97843645, 0.93815939,
       0.97083947, 0.91768378, 0.98429586, 0.96166311, 0.9689276 ,
       0.97399398, 0.96585037]), 'test_pearson_p': array([-2.74253183e-11, -7.04956478e-13, -1.84508975e-14, -5.81013256e-14,
       -1.90574483e-11, -5.14761514e-08, -8.11448130e-08, -1.73892258e-03,
       -2.75476821e-10, -2.35391600e-07, -1.92366728e-09, -1.43664428e-06,
       -3.55718539e-11, -1.11389104e-08, -2.89329827e-09, -9.20963392e-10,
       -5.30566142e-09]), 'test_spearman_r': array([0.92862424, 0.95217097, 0.96247267, 0.95805765, 0.92857143,
       0.95263666, 0.95714286, 0.74285714, 0.95263666, 0.92403969,
       0.91689045, 0.87399499, 0.98123364, 0.96071429, 0.95      ,
       0.95885663, 0.96071429]), 'test_spearman_p': array([-2.09234458e-07, -1.35244908e-08, -2.54485499e-09, -5.47877174e-09,
       -5.86793827e-07, -4.30728048e-08, -2.27367516e-08, -1.50948888e-03,
       -4.30728048e-08, -8.65565027e-07, -1.52607666e-06, -2.05139452e-05,
       -1.12406985e-10, -1.30274898e-08, -6.08625796e-08, -1.75117844e-08,
       -1.30274898e-08]), 'test_kendall_r': array([0.81172259, 0.84519568, 0.86193223, 0.84519568, 0.82857143,
       0.8421149 , 0.88571429, 0.71428571, 0.8421149 , 0.80383695,
       0.78469798, 0.72728105, 0.9186708 , 0.86666667, 0.82857143,
       0.83657714, 0.88571429]), 'test_kendall_p': array([-1.23329686e-05, -5.31661458e-06, -3.45008795e-06, -5.31661458e-06,
       -9.95137652e-07, -1.29935955e-05, -5.33772028e-08, -6.71036430e-05,
       -1.29935955e-05, -3.15442760e-05, -4.84614653e-05, -1.66124056e-04,
       -1.96884727e-06, -1.54339647e-07, -9.95137652e-07, -1.58906350e-05,
       -5.33772028e-08]), 'test_rmse': array([-0.10507268, -0.10694908, -0.07006246, -0.10534669, -0.10155596,
       -0.23199003, -0.22023987, -0.53155355, -0.11398861, -0.19636971,
       -0.16072706, -0.28288799, -0.11130087, -0.16596544, -0.1408976 ,
       -0.15070295, -0.1391529 ]), 'test_mae': array([-0.0679679 , -0.0807671 , -0.05931664, -0.08220297, -0.06571216,
       -0.15290613, -0.14379586, -0.20002444, -0.07928903, -0.14875078,
       -0.11239739, -0.13776963, -0.07189027, -0.10305538, -0.1030893 ,
       -0.09605832, -0.09219891]), 'test_r2': array([0.96051043, 0.97126011, 0.98602841, 0.97678347, 0.97142276,
       0.9022468 , 0.86531204, 0.50707878, 0.95561203, 0.83561104,
       0.93684321, 0.81813883, 0.96483229, 0.92375621, 0.92820891,
       0.94414288, 0.92544157]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([41.92976642, 43.41991758, 40.30216885, 39.45023394, 46.67063737,
       42.79064274, 38.94576669, 43.24414945, 42.86916494, 46.19940042,
       40.69568133, 43.23587537, 45.49572182, 44.18542171, 42.57451487,
       41.58917618, 42.61748052]), 'score_time': array([0.4790771 , 0.48638725, 0.48988271, 0.49215293, 0.48740673,
       0.4901185 , 0.4859457 , 0.47546864, 0.48571324, 0.48591661,
       0.47992539, 0.50239182, 0.48976541, 0.49106598, 0.47913885,
       0.49346662, 0.4750886 ]), 'test_pearson_r': array([0.97315366, 0.98615095, 0.95845311, 0.9898571 , 0.95364817,
       0.94793203, 0.97917266, 0.95453577, 0.98015639, 0.89246233,
       0.99254984, 0.96314854, 0.98549579, 0.98114636, 0.98752657,
       0.52835075, 0.99228901]), 'test_pearson_p': array([-2.51050481e-10, -2.52606957e-12, -5.13266072e-09, -2.88327080e-13,
       -3.75257643e-08, -7.88079151e-08, -2.20187166e-10, -3.31653771e-08,
       -1.61151142e-10, -7.66853869e-06, -2.84888419e-13, -8.64668526e-09,
       -2.12801548e-11, -1.15824414e-10, -8.02202944e-12, -4.29001103e-02,
       -3.56074060e-13]), 'test_spearman_r': array([0.99043441, 0.95588235, 0.94705882, 0.97352941, 0.93571429,
       0.93118893, 0.975     , 0.94285714, 0.975     , 0.88571429,
       0.9839014 , 0.93928571, 0.97050977, 0.96428571, 0.9417135 ,
       0.70357143, 0.96780119]), 'test_spearman_p': array([-1.91599035e-13, -7.76027446e-09, -2.71573117e-08, -2.27689766e-10,
       -3.01064562e-07, -4.63322550e-07, -7.14370597e-10, -1.42476769e-07,
       -7.14370597e-10, -1.11998219e-05, -4.17567304e-11, -2.09458019e-07,
       -2.06786837e-09, -7.07230301e-09, -1.61611228e-07, -3.42433709e-03,
       -3.63693345e-09]), 'test_kendall_r': array([0.94561497, 0.85      , 0.85      , 0.91666667, 0.84761905,
       0.80383695, 0.9047619 , 0.80952381, 0.92380952, 0.75238095,
       0.93273543, 0.82857143, 0.88039285, 0.84761905, 0.88366175,
       0.6952381 , 0.89427211]), 'test_kendall_p': array([-3.52984089e-07, -1.02027025e-07, -1.02027025e-07, -1.38948965e-09,
       -4.07346059e-07, -3.15442760e-05, -1.65377563e-08, -2.27466721e-06,
       -4.47206135e-09, -1.96940497e-05, -1.49386838e-06, -9.95137652e-07,
       -5.15437155e-06, -4.07346059e-07, -5.91827496e-06, -1.17603724e-04,
       -3.95717604e-06]), 'test_rmse': array([-0.15666756, -0.11098926, -0.20690036, -0.10206473, -0.22408179,
       -0.16234341, -0.15090396, -0.14536048, -0.1002594 , -0.21395295,
       -0.09200095, -0.16146703, -0.12311754, -0.13257691, -0.10957228,
       -0.52049343, -0.09026402]), 'test_mae': array([-0.10083814, -0.09052761, -0.13750189, -0.07277337, -0.14089651,
       -0.12215821, -0.10844463, -0.09850279, -0.05717624, -0.14432269,
       -0.06290954, -0.12035485, -0.08226643, -0.09016232, -0.06555399,
       -0.1936643 , -0.06660707]), 'test_r2': array([0.94267835, 0.97211877, 0.89184624, 0.97697598, 0.89013166,
       0.87578016, 0.95715591, 0.90432468, 0.9568042 , 0.78619258,
       0.98173735, 0.92444912, 0.96111718, 0.95490436, 0.97483183,
       0.05080194, 0.98174752]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1968, 'regressor__learning_rate': 0.0911027961179286, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([25.66468024, 23.69385409, 24.88388491, 24.90490079, 23.40539384,
       25.8105216 , 25.03307748, 23.24336243, 25.12405658, 24.52945781,
       25.05579257, 26.44278288, 24.64618325, 24.68304873, 25.94140911,
       23.70023155, 24.33241796]), 'score_time': array([0.34162903, 0.33675575, 0.33283043, 0.33889914, 0.33723831,
       0.34231615, 0.3529067 , 0.3334372 , 0.33897901, 0.34582067,
       0.33280468, 0.3449955 , 0.33840942, 0.33996177, 0.34372878,
       0.34234142, 0.33958197]), 'test_pearson_r': array([0.99086594, 0.98074048, 0.96850539, 0.99580318, 0.67278289,
       0.8616661 , 0.97495911, 0.97916692, 0.99479219, 0.98825477,
       0.57266534, 0.98116293, 0.97821637, 0.97347068, 0.98317539,
       0.97744113, 0.97057849]), 'test_pearson_p': array([-1.38852314e-13, -2.50503690e-11, -7.58327620e-10, -6.08119751e-16,
       -5.98755629e-03, -3.64838180e-05, -7.21928299e-10, -2.20578988e-10,
       -2.79373011e-14, -5.43542067e-12, -2.56686468e-02, -1.15168997e-10,
       -2.94116960e-10, -1.04696822e-09, -5.55251662e-11, -3.68491122e-10,
       -2.03708349e-09]), 'test_spearman_r': array([0.9757177 , 0.98529412, 0.94117647, 0.98518437, 0.71735242,
       0.86071429, 0.95357143, 0.94642857, 0.99285714, 0.96422337,
       0.63928571, 0.98214286, 0.96071429, 0.96693515, 0.93571429,
       0.95      , 0.96428571]), 'test_spearman_p': array([-1.25183504e-10, -3.83671954e-12, -5.58893763e-08, -4.04052904e-12,
       -2.60779827e-03, -3.80552502e-05, -3.79244004e-08, -9.44793851e-08,
       -2.16812149e-13, -7.15186135e-09, -1.02884466e-02, -8.15733351e-11,
       -1.30274898e-08, -4.31271816e-09, -3.01064562e-07, -6.08625796e-08,
       -7.07230301e-09]), 'test_kendall_r': array([0.91214188, 0.91666667, 0.81666667, 0.95742711, 0.625     ,
       0.79047619, 0.84761905, 0.84761905, 0.96190476, 0.87504045,
       0.58095238, 0.92380952, 0.9047619 , 0.86125388, 0.80952381,
       0.86666667, 0.88571429]), 'test_kendall_p': array([-8.99518934e-07, -1.38948965e-09, -5.50848432e-07, -4.69648705e-07,
       -1.26177607e-03, -4.90647531e-06, -4.07346059e-07, -4.07346059e-07,
       -1.82002497e-10, -6.34958704e-06, -1.93596272e-03, -4.47206135e-09,
       -1.65377563e-08, -8.22244396e-06, -2.27466721e-06, -1.54339647e-07,
       -5.33772028e-08]), 'test_rmse': array([-0.09443259, -0.10208278, -0.15390387, -0.05838914, -0.46738404,
       -0.3022423 , -0.19367591, -0.13829013, -0.06929217, -0.08361726,
       -0.51410801, -0.12163626, -0.11855304, -0.16220227, -0.13120777,
       -0.11845372, -0.18294771]), 'test_mae': array([-0.06669371, -0.07254303, -0.09942716, -0.03739474, -0.24425003,
       -0.17263135, -0.12021346, -0.1017933 , -0.05816529, -0.06081643,
       -0.23339623, -0.08956489, -0.06435896, -0.12141543, -0.09109794,
       -0.09661633, -0.13103268]), 'test_r2': array([0.97870744, 0.96128654, 0.92290286, 0.99007595, 0.21083647,
       0.7214462 , 0.9415979 , 0.95300594, 0.98671145, 0.97565869,
       0.25181754, 0.9592747 , 0.95424002, 0.93658046, 0.96284194,
       0.94903412, 0.94011769]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1362, 'regressor__learning_rate': 0.06818501359560183, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([39.87242198, 38.92749572, 38.13778615, 37.46559525, 38.37455153,
       36.47029972, 37.87202883, 38.58165145, 39.16492581, 38.13920212,
       38.02937365, 41.0371635 , 36.71860313, 38.44688535, 37.78925109,
       38.4371624 , 38.47218657]), 'score_time': array([0.49572778, 0.49515033, 0.49435139, 0.49024844, 0.48449779,
       0.48124647, 0.51543498, 0.4773984 , 0.50787878, 0.48492599,
       0.48191476, 0.4911685 , 0.48006129, 0.4887073 , 0.49234915,
       0.4869895 , 0.49502802]), 'test_pearson_r': array([0.98518566, 0.95572848, 0.97994086, 0.96135672, 0.95048398,
       0.98884725, 0.98561123, 0.97835977, 0.66275508, 0.91417126,
       0.99121191, 0.98579749, 0.98178637, 0.93740062, 0.98080906,
       0.45740062, 0.99548729]), 'test_pearson_p': array([-4.03806436e-12, -7.94846433e-09, -3.32324929e-11, -3.11497961e-09,
       -5.72009840e-08, -3.88805544e-12, -2.02086606e-11, -2.81854917e-10,
       -7.08825420e-03, -1.86872814e-06, -8.30849329e-13, -1.85759496e-11,
       -9.26777451e-11, -2.54338117e-07, -1.29869017e-10, -8.64779231e-02,
       -1.10277147e-14]), 'test_spearman_r': array([0.93235294, 0.84071162, 0.89183247, 0.90802085, 0.94370011,
       0.96785714, 0.97857143, 0.96785714, 0.53928571, 0.83767119,
       0.94812165, 0.93023405, 0.97142857, 0.93548988, 0.96336053,
       0.59285714, 0.98571429]), 'test_spearman_p': array([-1.45175444e-07, -4.52882807e-05, -3.47493726e-06, -1.16766988e-06,
       -1.29623310e-07, -3.59653554e-09, -2.64545601e-10, -3.59653554e-09,
       -3.80216563e-02, -9.71030822e-05, -7.69965411e-08, -5.05558266e-07,
       -1.68707649e-09, -3.07792633e-07, -8.33271134e-09, -1.98464220e-02,
       -1.92909487e-11]), 'test_kendall_r': array([0.81666667, 0.71735705, 0.77824949, 0.79498604, 0.82297593,
       0.88571429, 0.9047619 , 0.88571429, 0.52380952, 0.6505161 ,
       0.85576923, 0.83657714, 0.9047619 , 0.81167945, 0.88039285,
       0.6       , 0.94285714]), 'test_kendall_p': array([-5.50848432e-07, -1.22426651e-04, -2.77306574e-05, -1.85653874e-05,
       -2.03407556e-05, -5.33772028e-08, -1.65377563e-08, -5.33772028e-08,
       -5.90158628e-03, -8.54121722e-04, -1.00948376e-05, -1.58906350e-05,
       -1.65377563e-08, -2.97055048e-05, -5.15437155e-06, -1.28586080e-03,
       -1.01554334e-09]), 'test_rmse': array([-0.10817464, -0.1865188 , -0.12607691, -0.13586714, -0.23347345,
       -0.08979916, -0.11611963, -0.14764785, -0.42210274, -0.16183905,
       -0.10230655, -0.11717929, -0.10812865, -0.21236353, -0.11227058,
       -0.55368903, -0.05946616]), 'test_mae': array([-0.07124607, -0.10523391, -0.08360825, -0.09672981, -0.15088035,
       -0.06537031, -0.08688292, -0.10291808, -0.21143164, -0.11009327,
       -0.07420389, -0.08182545, -0.07498238, -0.13858606, -0.08828647,
       -0.24529293, -0.0458627 ]), 'test_r2': array([ 0.96731223,  0.90820328,  0.95877678,  0.92085717,  0.89802311,
        0.97679586,  0.97060621,  0.95160563,  0.07249232,  0.82772489,
        0.9815933 ,  0.9698743 ,  0.96199267,  0.85255747,  0.96055342,
       -0.04452891,  0.99071759]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.061632814641690986, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([37.19822383, 36.62396693, 38.19888139, 39.83656859, 39.53492379,
       36.88349056, 37.48839903, 39.28777671, 38.73861456, 38.16308904,
       39.72671485, 38.343817  , 38.98160863, 38.78360796, 38.05796242,
       38.66087604, 37.7600112 ]), 'score_time': array([0.48701382, 0.49196792, 0.48349047, 0.50040197, 0.5016892 ,
       0.48593926, 0.48412919, 0.47897482, 0.47558808, 0.47599387,
       0.49388146, 0.47917342, 0.51705694, 0.48297334, 0.48350215,
       0.48277688, 0.48404145]), 'test_pearson_r': array([0.93173445, 0.91870589, 0.98557431, 0.99151937, 0.99503911,
       0.88039376, 0.97747292, 0.99714467, 0.98072792, 0.9459411 ,
       0.92974072, 0.9812034 , 0.98174399, 0.99166945, 0.74035449,
       0.98094708, 0.97264558]), 'test_pearson_p': array([-1.54467481e-07, -5.06439093e-07, -3.35582286e-12, -8.27273024e-14,
       -2.03852849e-14, -1.48555692e-05, -3.65156357e-10, -5.65105725e-16,
       -1.33453591e-10, -1.00090390e-07, -5.28611887e-07, -1.13581283e-10,
       -9.40789436e-11, -5.87574199e-13, -1.59694193e-03, -1.23957586e-10,
       -1.27505761e-09]), 'test_spearman_r': array([0.92058824, 0.90213417, 0.96318219, 0.99411765, 0.99105546,
       0.9       , 0.93214286, 0.95      , 0.96785714, 0.87567084,
       0.92857143, 0.93118893, 0.99285714, 0.98480826, 0.79642857,
       0.97850091, 0.96428571]), 'test_spearman_p': array([-4.32041043e-07, -1.77392711e-06, -2.23077439e-09, -6.43399749e-15,
       -9.31479423e-13, -4.87197095e-06, -4.24121823e-07, -6.08625796e-08,
       -3.59653554e-09, -1.88832918e-05, -5.86793827e-07, -4.63322550e-07,
       -2.16812149e-13, -2.87075990e-11, -3.80467679e-04, -2.70210142e-10,
       -7.07230301e-09]), 'test_kendall_r': array([0.78333333, 0.74477639, 0.89078776, 0.96666667, 0.95192308,
       0.79047619, 0.79047619, 0.84761905, 0.88571429, 0.74038462,
       0.80952381, 0.82297593, 0.96190476, 0.93780978, 0.77142857,
       0.90830796, 0.88571429]), 'test_kendall_p': array([-2.41022656e-06, -6.04438410e-05, -1.73481918e-06, -1.29045888e-11,
       -9.05141252e-07, -4.90647531e-06, -4.90647531e-06, -4.07346059e-07,
       -5.33772028e-08, -1.33541898e-04, -2.27466721e-06, -2.03407556e-05,
       -1.82002497e-10, -1.19967260e-06, -1.00560004e-05, -2.97090790e-06,
       -5.33772028e-08]), 'test_rmse': array([-0.18332266, -0.18327693, -0.12460911, -0.1026137 , -0.06684136,
       -0.2695921 , -0.12052214, -0.06325271, -0.11749039, -0.15553377,
       -0.21478042, -0.12176308, -0.13430253, -0.09813948, -0.51043962,
       -0.11477749, -0.20998443]), 'test_mae': array([-0.09597672, -0.1447547 , -0.08377728, -0.08115544, -0.04473344,
       -0.14003855, -0.08382528, -0.04844922, -0.0890977 , -0.10361822,
       -0.14836177, -0.08479887, -0.09322541, -0.05907343, -0.22494008,
       -0.09032321, -0.16240506]), 'test_r2': array([0.86019578, 0.82041854, 0.9673348 , 0.97426088, 0.98772422,
       0.72706681, 0.94914069, 0.99270721, 0.96124925, 0.84422753,
       0.84503772, 0.9617704 , 0.9564514 , 0.98042135, 0.53180612,
       0.95797056, 0.9154427 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1984, 'regressor__learning_rate': 0.09986529879467336, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([20.4928627 , 19.04782176, 21.11808324, 25.8862226 , 24.70764494,
       17.05407977, 20.55476999, 17.90148997, 17.58192706, 18.10829043,
       17.69882393, 25.0445435 , 22.30078101, 22.97810006, 22.25453377,
       25.17315674, 17.58239388]), 'score_time': array([0.24297428, 0.23859453, 0.23741198, 0.2356813 , 0.24154377,
       0.23432899, 0.23512435, 0.23571396, 0.23615217, 0.23259234,
       0.2385304 , 0.23203254, 0.23477578, 0.23955965, 0.23515797,
       0.24108338, 0.23933935]), 'test_pearson_r': array([0.9839568 , 0.71477987, 0.97998851, 0.96104597, 0.9276941 ,
       0.94433055, 0.99334068, 0.96612463, 0.96891775, 0.95868252,
       0.9253012 , 0.9948672 , 0.96025256, 0.96749227, 0.98075717,
       0.98081343, 0.9944127 ]), 'test_pearson_p': array([-7.03113856e-12, -1.85976923e-03, -3.26879018e-11, -3.29187744e-09,
       -6.33887510e-07, -1.20659495e-07, -1.37629040e-13, -5.03807629e-09,
       -2.89920115e-09, -1.79915398e-08, -7.78700417e-07, -2.54275952e-14,
       -1.40397620e-08, -3.86692539e-09, -1.32152022e-10, -1.29678378e-10,
       -4.40903665e-14]), 'test_spearman_r': array([0.961001  , 0.75516553, 0.94922763, 0.97277436, 0.89544272,
       0.925     , 0.98571429, 0.96428571, 0.93833818, 0.87142857,
       0.90616658, 0.99553212, 0.95263666, 0.97857143, 0.93476355,
       0.98928571, 0.96428571]), 'test_spearman_p': array([-3.31817876e-09, -7.19028626e-04, -2.03820935e-08, -2.76678019e-10,
       -6.43563639e-06, -7.98746211e-07, -1.92909487e-11, -7.07230301e-09,
       -2.31103976e-07, -2.32364778e-05, -3.27089173e-06, -1.03359251e-14,
       -4.30728048e-08, -2.64545601e-10, -3.30439854e-07, -2.99893426e-12,
       -7.07230301e-09]), 'test_kendall_r': array([0.87866878, 0.73423604, 0.84519568, 0.89540533, 0.80383695,
       0.79047619, 0.94285714, 0.88571429, 0.80383695, 0.73333333,
       0.78469798, 0.97608773, 0.88039285, 0.88571429, 0.80383695,
       0.94285714, 0.88571429]), 'test_kendall_p': array([-2.22140114e-06, -8.43834769e-05, -5.31661458e-06, -1.41912826e-06,
       -3.15442760e-05, -4.90647531e-06, -1.01554334e-09, -5.33772028e-08,
       -3.15442760e-05, -3.70285640e-05, -4.84614653e-05, -4.32916538e-07,
       -5.15437155e-06, -5.33772028e-08, -3.15442760e-05, -1.01554334e-09,
       -5.33772028e-08]), 'test_rmse': array([-0.12372642, -0.55127295, -0.13935539, -0.19370614, -0.20158269,
       -0.16736125, -0.0757567 , -0.15064745, -0.14153213, -0.16505711,
       -0.23542828, -0.08263805, -0.17032357, -0.18517179, -0.11813489,
       -0.12071838, -0.07924148]), 'test_mae': array([-0.07681814, -0.19570341, -0.09794653, -0.12831035, -0.10090836,
       -0.09895705, -0.0488086 , -0.09867427, -0.11077088, -0.11971787,
       -0.13907567, -0.06585552, -0.11879136, -0.14080192, -0.08614882,
       -0.08635779, -0.06124291]), 'test_r2': array([0.9616143 , 0.42448381, 0.95401995, 0.90650123, 0.85975165,
       0.87248725, 0.98459008, 0.93071894, 0.93842837, 0.91396377,
       0.8037966 , 0.98490441, 0.9188778 , 0.93124231, 0.94535421,
       0.96154586, 0.98722068]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 904, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 32, 6: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.5194455019290277, 'test_rmse': 0.6966049834672381, 'test_r2': -0.7946267628683195, 'test_pearson_r': array([0.29499839]), 'test_pearson_p_value': array([0.00678256]), 'test_spearman_r': 0.3163854763084388, 'test_spearman_p_value': 0.0035689326059202883, 'test_kendall_r': 0.21601085985759752, 'test_kendall_p_value': 0.00407313864079171, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 186, 'regressor__learning_rate': 0.06408032693486766, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.5126907419140737, 'test_rmse': 0.6688162739153904, 'test_r2': -0.6543014480366673, 'test_pearson_r': array([0.32422873]), 'test_pearson_p_value': array([0.00278709]), 'test_spearman_r': 0.3485852472450888, 'test_spearman_p_value': 0.0012399216420683464, 'test_kendall_r': 0.2312604434485231, 'test_kendall_p_value': 0.0020912450422957, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 273, 'regressor__learning_rate': 0.061479795050007585, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.5432222171268019, 'test_rmse': 0.7151741151047971, 'test_r2': -0.8915793335333304, 'test_pearson_r': array([0.26823486]), 'test_pearson_p_value': array([0.01421494]), 'test_spearman_r': 0.3067312228873092, 'test_spearman_p_value': 0.004796362047496736, 'test_kendall_r': 0.19174662628455233, 'test_kendall_p_value': 0.010778985631039443, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06763996974939021, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.5388097965437098, 'test_rmse': 0.7053514509668428, 'test_r2': -0.8399758125767418, 'test_pearson_r': array([0.26680179]), 'test_pearson_p_value': array([0.01476107]), 'test_spearman_r': 0.30358889007114315, 'test_spearman_p_value': 0.005269916150583125, 'test_kendall_r': 0.20074320383900038, 'test_kendall_p_value': 0.007631187070827865, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 409, 'regressor__learning_rate': 0.055968563133307246, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.4882304921289523, 'test_rmse': 0.656149093419492, 'test_r2': -0.592230915507332, 'test_pearson_r': array([0.35768311]), 'test_pearson_p_value': array([0.00090088]), 'test_spearman_r': 0.3995338511693189, 'test_spearman_p_value': 0.0001826873928260549, 'test_kendall_r': 0.26479586622148676, 'test_kendall_p_value': 0.00042884665669058514, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0647295877616676, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.5409903622997052, 'test_rmse': 0.7231142585272999, 'test_r2': -0.9338146062598491, 'test_pearson_r': array([0.29307391]), 'test_pearson_p_value': array([0.0071698]), 'test_spearman_r': 0.3637032025892651, 'test_spearman_p_value': 0.000725443931297335, 'test_kendall_r': 0.24238246976661074, 'test_kendall_p_value': 0.0012700273631697462, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.015283988057024812, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.45093437358172256, 'test_ystd': 0.5199954063053398, 'test_mae': 0.594302807664479, 'test_rmse': 0.785044510168206, 'test_r2': -1.2792373218279187, 'test_pearson_r': array([0.16443152]), 'test_pearson_p_value': array([0.13742335]), 'test_spearman_r': 0.2434785050936421, 'test_spearman_p_value': 0.026551558271698413, 'test_kendall_r': 0.15359768230631377, 'test_kendall_p_value': 0.041131356580535794, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 82, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 33, 6: {'fit_time': array([22.69035792, 23.26268435, 21.60532975]), 'score_time': array([0.60254812, 0.57356596, 0.62495685]), 'test_pearson_r': array([0.94158696, 0.90122455, 0.85533195]), 'test_pearson_p': array([-6.09239450e-42, -3.00038246e-32, -1.03251863e-25]), 'test_spearman_r': array([0.92182061, 0.91827348, 0.84353992]), 'test_spearman_p': array([-9.65266647e-37, -1.49999836e-35, -2.15146431e-24]), 'test_kendall_r': array([0.80573523, 0.82325611, 0.73437544]), 'test_kendall_p': array([-2.87266000e-28, -4.13101102e-29, -1.62793868e-23]), 'test_rmse': array([-0.2207572 , -0.28663008, -0.31184887]), 'test_mae': array([-0.12234076, -0.1212947 , -0.15896282]), 'test_r2': array([0.88292943, 0.80909039, 0.70952881]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1420, 'regressor__learning_rate': 0.0709183496547039, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([34.83312774, 35.07117748, 35.32594109]), 'score_time': array([0.86925435, 0.84383035, 0.8419807 ]), 'test_pearson_r': array([0.88774479, 0.88847565, 0.87161938]), 'test_pearson_p': array([-2.22689329e-30, -3.75604614e-30, -9.69865521e-28]), 'test_spearman_r': array([0.833767  , 0.8999533 , 0.85753652]), 'test_spearman_p': array([-1.21717994e-23, -4.99838906e-32, -5.68034641e-26]), 'test_kendall_r': array([0.69695767, 0.7998911 , 0.72275927]), 'test_kendall_p': array([-1.52236767e-21, -1.35893626e-27, -8.92641920e-23]), 'test_rmse': array([-0.31300064, -0.30112042, -0.3008457 ]), 'test_mae': array([-0.16598014, -0.13563171, -0.17580095]), 'test_r2': array([0.74687636, 0.78088627, 0.75030822]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([17.09045911, 18.29712987, 18.2573483 ]), 'score_time': array([0.47397637, 0.47726512, 0.46588492]), 'test_pearson_r': array([0.96390047, 0.87437215, 0.90041175]), 'test_pearson_p': array([-1.26746111e-50, -4.13830769e-28, -4.16140661e-32]), 'test_spearman_r': array([0.96709105, 0.85524094, 0.91078891]), 'test_spearman_p': array([-2.65169906e-52, -1.05808247e-25, -5.08842444e-34]), 'test_kendall_r': array([0.86314993, 0.73789688, 0.7919775 ]), 'test_kendall_p': array([-3.18603276e-32, -1.07128280e-23, -6.14095776e-27]), 'test_rmse': array([-0.17710088, -0.28566746, -0.28446135]), 'test_mae': array([-0.11771655, -0.15760325, -0.14334012]), 'test_r2': array([0.92572563, 0.75572987, 0.80892215]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1016, 'regressor__learning_rate': 0.09984160850557258, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([35.21614408, 34.03797412, 32.87500215]), 'score_time': array([0.90258503, 0.85370231, 0.89818573]), 'test_pearson_r': array([0.91645702, 0.83456143, 0.93353169]), 'test_pearson_p': array([-1.44636582e-35, -1.84490713e-23, -3.50111508e-39]), 'test_spearman_r': array([0.9223441 , 0.84647683, 0.92687115]), 'test_spearman_p': array([-7.33543247e-37, -1.03434201e-24, -1.68346332e-37]), 'test_kendall_r': array([0.81437821, 0.73879146, 0.81007824]), 'test_kendall_p': array([-1.18607572e-28, -9.22162671e-24, -2.63487681e-28]), 'test_rmse': array([-0.23588747, -0.37296171, -0.24053159]), 'test_mae': array([-0.12064465, -0.18351585, -0.13244096]), 'test_r2': array([0.83716728, 0.65918506, 0.86547904]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.055312014431076924, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([36.56341004, 31.78140974, 32.80209208]), 'score_time': array([0.85168958, 0.87000322, 0.8372407 ]), 'test_pearson_r': array([0.94304882, 0.8602439 , 0.8941162 ]), 'test_pearson_p': array([-2.13906989e-42, -2.68928993e-26, -4.78381064e-31]), 'test_spearman_r': array([0.91783377, 0.83801405, 0.9176908 ]), 'test_spearman_p': array([-7.34841116e-36, -8.20049563e-24, -1.99711577e-35]), 'test_kendall_r': array([0.7686567 , 0.73183441, 0.83877238]), 'test_kendall_p': array([-8.39156009e-26, -2.36714678e-23, -3.67903374e-30]), 'test_rmse': array([-0.20931705, -0.33678335, -0.28920768]), 'test_mae': array([-0.13918924, -0.1634073 , -0.11626312]), 'test_r2': array([0.88873301, 0.7127723 , 0.7882201 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04327209171334564, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([40.05245447, 39.60521054, 37.51573253]), 'score_time': array([0.90536642, 0.86948013, 0.92253399]), 'test_pearson_r': array([0.92614011, 0.91101803, 0.88518816]), 'test_pearson_p': array([-9.44182765e-38, -4.58942498e-34, -1.18693220e-29]), 'test_spearman_r': array([0.9180239 , 0.89884609, 0.88964609]), 'test_spearman_p': array([-6.68614706e-36, -7.75306069e-32, -2.47192251e-30]), 'test_kendall_r': array([0.76698534, 0.75092564, 0.77839631]), 'test_kendall_p': array([-9.18990610e-26, -1.66134426e-24, -4.37401049e-26]), 'test_rmse': array([-0.23737418, -0.25786522, -0.32110155]), 'test_mae': array([-0.14798165, -0.16109928, -0.16273217]), 'test_r2': array([0.84084341, 0.81800213, 0.77868565]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1984, 'regressor__learning_rate': 0.09986529879467336, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([4.80048347, 4.57844996, 5.32055211]), 'score_time': array([0.15787387, 0.15936184, 0.15468812]), 'test_pearson_r': array([0.88818774, 0.85991262, 0.95994679]), 'test_pearson_p': array([-1.90039047e-30, -2.94941846e-26, -3.47423154e-48]), 'test_spearman_r': array([0.88972791, 0.85533387, 0.95266267]), 'test_spearman_p': array([-1.08930284e-30, -1.03198583e-25, -3.34161986e-45]), 'test_kendall_r': array([0.79080868, 0.73977628, 0.82545081]), 'test_kendall_p': array([-4.17820782e-27, -8.81836982e-24, -2.95702109e-29]), 'test_rmse': array([-0.29442058, -0.30706436, -0.18357699]), 'test_mae': array([-0.13613683, -0.16481163, -0.12192716]), 'test_r2': array([0.78087967, 0.72311125, 0.91722036]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 310, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 25, 6: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.25381845612049037, 'test_rmse': 0.38091219839851964, 'test_r2': 0.49656075764739405, 'test_pearson_r': array([0.77545429]), 'test_pearson_p_value': array([5.35904608e-14]), 'test_spearman_r': 0.7257423935201893, 'test_spearman_p_value': 1.1654158697693788e-11, 'test_kendall_r': 0.5254798353596598, 'test_kendall_p_value': 1.071584686359199e-09, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1413, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.2381727103014965, 'test_rmse': 0.3424601583891044, 'test_r2': 0.5930721536368126, 'test_pearson_r': array([0.84208351]), 'test_pearson_p_value': array([2.82967319e-18]), 'test_spearman_r': 0.7952406446249566, 'test_spearman_p_value': 4.226611090087204e-15, 'test_kendall_r': 0.5990574599952199, 'test_kendall_p_value': 3.6365827133342296e-12, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1974, 'regressor__learning_rate': 0.0188601678694528, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.2573576075808293, 'test_rmse': 0.3889932286579249, 'test_r2': 0.4749733040277013, 'test_pearson_r': array([0.76569751]), 'test_pearson_p_value': array([1.70906415e-13]), 'test_spearman_r': 0.7238414051444462, 'test_spearman_p_value': 1.398667079015366e-11, 'test_kendall_r': 0.5214837909843012, 'test_kendall_p_value': 1.4306721749903016e-09, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 315, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.19340497755997008, 'test_rmse': 0.28819036478058185, 'test_r2': 0.7118250562955509, 'test_pearson_r': array([0.88293699]), 'test_pearson_p_value': array([4.97833946e-22]), 'test_spearman_r': 0.823906684826641, 'test_spearman_p_value': 6.224002659414488e-17, 'test_kendall_r': 0.6403661111512204, 'test_kendall_p_value': 1.0724446680509572e-13, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 595, 'regressor__learning_rate': 0.05977654549076347, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.23959513693003237, 'test_rmse': 0.34421605007310935, 'test_r2': 0.5888885837719458, 'test_pearson_r': array([0.84790882]), 'test_pearson_p_value': array([9.6683182e-19]), 'test_spearman_r': 0.7849936818099211, 'test_spearman_p_value': 1.628248222837741e-14, 'test_kendall_r': 0.5874185231777186, 'test_kendall_p_value': 9.284212390123043e-12, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1997, 'regressor__learning_rate': 0.03671875959063817, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.2621617613494823, 'test_rmse': 0.39782327655529215, 'test_r2': 0.45086682265736333, 'test_pearson_r': array([0.77170085]), 'test_pearson_p_value': array([8.42913296e-14]), 'test_spearman_r': 0.7345602311667092, 'test_spearman_p_value': 4.899676674915575e-12, 'test_kendall_r': 0.5384669795795755, 'test_kendall_p_value': 4.12862565251363e-10, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 943, 'regressor__learning_rate': 0.06278628703520209, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.46478597195208315, 'test_ystd': 0.536848010783258, 'test_mae': 0.24186294055790153, 'test_rmse': 0.3511953657304949, 'test_r2': 0.5720482009381374, 'test_pearson_r': array([0.84033701]), 'test_pearson_p_value': array([3.87176788e-18]), 'test_spearman_r': 0.791337944220534, 'test_spearman_p_value': 7.127204391421864e-15, 'test_kendall_r': 0.5904155564592376, 'test_kendall_p_value': 7.284194189712273e-12, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1096, 'regressor__learning_rate': 0.011204131912833398, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 25, 6: {'fit_time': array([25.89655566, 26.12111473, 26.21435595, 29.50480151]), 'score_time': array([0.52043819, 0.54771352, 0.5105536 , 0.5136075 ]), 'test_pearson_r': array([0.95741007, 0.90030347, 0.95901181, 0.92218049]), 'test_pearson_p': array([-1.07149306e-35, -1.93176037e-24, -3.28139930e-36, -2.87974574e-27]), 'test_spearman_r': array([0.91856388, 0.92213213, 0.95326675, 0.91302308]), 'test_spearman_p': array([-4.37218354e-27, -1.12601025e-27, -1.87443398e-34, -7.88894045e-26]), 'test_kendall_r': array([0.81399563, 0.82743742, 0.8245262 , 0.77543017]), 'test_kendall_p': array([-1.24695422e-21, -2.18483526e-22, -3.93481417e-22, -1.65013075e-19]), 'test_rmse': array([-0.19714876, -0.28459208, -0.17812805, -0.22084795]), 'test_mae': array([-0.1070936 , -0.12291532, -0.11452272, -0.1412768 ]), 'test_r2': array([0.9103133 , 0.80927286, 0.91875961, 0.85001496]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1422, 'regressor__learning_rate': 0.058997826292104406, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([38.59517837, 39.14730096, 39.67732453, 39.64443874]), 'score_time': array([0.74870706, 0.73889399, 0.74588156, 0.7118094 ]), 'test_pearson_r': array([0.87263089, 0.90970635, 0.95322453, 0.95650894]), 'test_pearson_p': array([-2.81455808e-21, -9.86083153e-26, -1.92728790e-34, -7.06336179e-35]), 'test_spearman_r': array([0.84260109, 0.92392932, 0.93782177, 0.94502576]), 'test_spearman_p': array([-1.37681610e-18, -5.54716565e-28, -1.19538675e-30, -8.49889367e-32]), 'test_kendall_r': array([0.71783734, 0.82911663, 0.79595244, 0.82902677]), 'test_kendall_p': array([-3.73158227e-17, -2.04545585e-22, -9.23414278e-21, -4.23479599e-22]), 'test_rmse': array([-0.34239596, -0.28703828, -0.18665503, -0.1690169 ]), 'test_mae': array([-0.17143834, -0.12197429, -0.11925401, -0.10326377]), 'test_r2': array([0.69620198, 0.81964839, 0.90609147, 0.91441145]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([39.8987658 , 38.76718688, 38.38164496, 39.69937706]), 'score_time': array([0.75680661, 0.7601757 , 0.73931098, 0.78978157]), 'test_pearson_r': array([0.97425199, 0.95985526, 0.91161538, 0.89772538]), 'test_pearson_p': array([-1.79938662e-42, -1.72636181e-36, -5.18046909e-26, -9.49004888e-24]), 'test_spearman_r': array([0.96924792, 0.95375672, 0.8970921 , 0.91011762]), 'test_spearman_p': array([-4.48940983e-40, -1.35487648e-34, -4.98911051e-24, -2.09061678e-25]), 'test_kendall_r': array([0.85975993, 0.82483166, 0.79065471, 0.82136966]), 'test_kendall_p': array([-5.41485556e-24, -2.89234879e-22, -1.51598297e-20, -1.39436795e-21]), 'test_rmse': array([-0.15681025, -0.18150418, -0.23918431, -0.30023049]), 'test_mae': array([-0.11039704, -0.12532103, -0.12742145, -0.12297244]), 'test_r2': array([0.94334861, 0.90712103, 0.82361707, 0.80260976]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06351303178715499, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([38.3625412 , 35.72268462, 36.93050194, 35.51052046]), 'score_time': array([0.75434875, 0.70190144, 0.75940514, 0.7422657 ]), 'test_pearson_r': array([0.9802181 , 0.91420193, 0.88997085, 0.94481165]), 'test_pearson_p': array([-4.87361196e-46, -2.11522306e-26, -3.67505063e-23, -9.55670719e-32]), 'test_spearman_r': array([0.97625058, 0.89630002, 0.91187079, 0.9378513 ]), 'test_spearman_p': array([-1.45462138e-43, -6.27440360e-24, -4.74776240e-26, -3.42186409e-30]), 'test_kendall_r': array([0.88621611, 0.77804526, 0.80685116, 0.81529305]), 'test_kendall_p': array([-3.41993338e-25, -5.71037007e-20, -2.69388145e-21, -1.83693939e-21]), 'test_rmse': array([-0.11932759, -0.27253027, -0.27815842, -0.21700855]), 'test_mae': array([-0.07796424, -0.14501255, -0.12400309, -0.13408738]), 'test_r2': array([0.9596998 , 0.82986776, 0.78073209, 0.88889202]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05696606106684542, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([2.81126213, 3.10997415, 2.89521646, 3.00366282]), 'score_time': array([0.09125757, 0.08837032, 0.10314608, 0.08756232]), 'test_pearson_r': array([0.96303751, 0.96185366, 0.87768498, 0.85191643]), 'test_pearson_p': array([-1.34311090e-37, -3.56172788e-37, -8.51073464e-22, -4.49825281e-19]), 'test_spearman_r': array([0.91171813, 0.96166707, 0.82834005, 0.88049364]), 'test_spearman_p': array([-5.00199898e-26, -4.14187058e-37, -1.68344822e-17, -9.09640970e-22]), 'test_kendall_r': array([0.77499371, 0.8570053 , 0.73303092, 0.79622355]), 'test_kendall_p': array([-9.88450128e-20, -6.89542669e-24, -8.53738075e-18, -1.65186846e-20]), 'test_rmse': array([-0.16669759, -0.17892683, -0.31447261, -0.33426691]), 'test_mae': array([-0.10975223, -0.12401495, -0.16172137, -0.14474048]), 'test_r2': array([0.92699486, 0.92102485, 0.75338294, 0.71120645]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 195, 'regressor__learning_rate': 0.07121079333568257, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([37.88000488, 37.26207995, 36.41704607, 36.16713285]), 'score_time': array([0.75826645, 0.75023055, 0.78397918, 0.7416718 ]), 'test_pearson_r': array([0.90496847, 0.98104868, 0.9744527 , 0.8857103 ]), 'test_pearson_p': array([-4.58930885e-25, -1.27771689e-46, -1.41050028e-42, -2.47058433e-22]), 'test_spearman_r': array([0.90803782, 0.96263756, 0.96844844, 0.90428593]), 'test_spearman_p': array([-1.71085244e-25, -1.87383118e-37, -9.95615085e-40, -1.34317732e-24]), 'test_kendall_r': array([0.74024311, 0.84433823, 0.86155491, 0.78426134]), 'test_kendall_p': array([-3.38540324e-18, -3.39252050e-23, -4.78680891e-24, -7.31840886e-20]), 'test_rmse': array([-0.2627176 , -0.1271144 , -0.14172918, -0.32566256]), 'test_mae': array([-0.16756395, -0.09057595, -0.09467005, -0.1733634 ]), 'test_r2': array([0.79404305, 0.96114218, 0.94221703, 0.77377937]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1984, 'regressor__learning_rate': 0.09986529879467336, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([23.02674246, 22.24171662, 23.31821918, 22.73776221]), 'score_time': array([0.50288105, 0.47126889, 0.46913528, 0.45872736]), 'test_pearson_r': array([0.89307552, 0.9565544 , 0.96585656, 0.95057728]), 'test_pearson_p': array([-1.56566442e-23, -1.97927072e-35, -1.15137058e-38, -3.40462154e-33]), 'test_spearman_r': array([0.90196825, 0.94548197, 0.95724407, 0.95036516]), 'test_spearman_p': array([-1.16625003e-24, -2.13538766e-32, -1.20814589e-35, -3.87575554e-33]), 'test_kendall_r': array([0.8198434 , 0.8333342 , 0.83563339, 0.82679901]), 'test_kendall_p': array([-7.72841748e-22, -1.17647884e-22, -1.09007077e-22, -4.79724256e-22]), 'test_rmse': array([-0.30221229, -0.16629618, -0.16137922, -0.19859325]), 'test_mae': array([-0.1315876 , -0.10029944, -0.11062708, -0.12080435]), 'test_r2': array([0.7902573 , 0.91384599, 0.93000418, 0.90353303]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1279, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 522)}}
Trimer_scaler
Filename: (ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 polymer_solvent HSP cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 polymer_solvent HSP cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 polymer_solvent HSP cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c036n04>
Subject: Job 295239: <NGB_log Rg (nm)_ECFP_Trimer_KM4 polymer_solvent HSP cluster_20250311> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_ECFP_Trimer_KM4 polymer_solvent HSP cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:12:47 2025
Job was executed on host(s) <8*c036n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Thu Mar 13 10:42:01 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Thu Mar 13 10:42:01 2025
Terminated at Sat Mar 15 16:51:29 2025
Results reported at Sat Mar 15 16:51:29 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_ECFP_Trimer_KM4 polymer_solvent HSP cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_KM4 polymer_solvent HSP cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_KM4 polymer_solvent HSP cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "ECFP"                                       --regressor_type "NGB"                                       --radius "3"                                       --vector "count"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 polymer_solvent HSP cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   863513.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.96 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   1 GB
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   194992 sec.
    Turnaround time :                            337122 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_KM4 polymer_solvent HSP cluster_20250311.err> for stderr output of this job.

