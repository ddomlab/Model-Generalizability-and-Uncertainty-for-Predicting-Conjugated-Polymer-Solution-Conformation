


-------------------------------------------------- 
OOD TEST ON Fluorene



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016331391883374655), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 902), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008921937753766583), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1507), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05805252757865521), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025812368668951275), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1194), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010532531317605399), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03280945561133495), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06930452505699197), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1953), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.5295012042618616e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 81), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06198541052016667), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 520), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05363436956730499), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1330), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029424681844858223), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 476), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 143), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3297959198909186e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05256868386302085), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 559), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06454882510467919), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 311), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04554727509656497), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05201973761040905), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09701762666231041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003180614538446503), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09851457652725225), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 670), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.8320204239411625e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 137), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034656260723012325), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 917), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05964132506901334), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 833), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06371179551658947), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1969), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000801379370782023), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1330), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 505), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0965989713043816), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1138), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008621378774252025), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0984626087194166), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1402), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009386683710847848), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05339507826824914), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1940), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1027603633626681e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04835689658467024), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057210514372644676), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1978), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001303613981100004), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00957014518148363), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07490211281104564), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 112), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09803564928701641), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 242), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009615194733001132), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06649936517141262), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.040968332370966774), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04946389176109618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 915), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.414684148827279e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0654585031201464), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 158), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04003401192651799), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 282), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01500389040114458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 513), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06314245597248114), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1982), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1813744511853096e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1092), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04723824567177111), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1311), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03797777682704644), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.041115132320491826), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09981554538393804), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 177), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001853978220346315), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04900688599315204), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1135), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021285363806124807), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09738378901277296), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4733072463880757e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09738378901277296), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4733072463880757e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02477447521288663), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1372), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.7116950770789448e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1653), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07523101429321705), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 276), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09738378901277296), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4733072463880757e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09973247553185692), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 883), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007921083340466922), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008011713758097524), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06746679797901478), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 481), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05037679833451282), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056520459000457046), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 818), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09797434732768684), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1404), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.1783426493352743e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025110050741759458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2881294633636083e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05689239008504041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 374), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06440951706933074), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 198), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006046123939466193), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON PPV



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 172), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 395), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05660767271346947), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 286), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008774859361445058), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03884459006234783), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09957390377299868), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 85), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.085396444766895e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06296400807319842), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04823618844923281), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07006082259154747), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1337), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051265450334014806), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1495), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06883956045863078), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1456), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1109981240135991e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1281), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00030083308106832493), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09877897106785827), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1922), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.197035646074596e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026367427955061574), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1972), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008779114262476115), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.7069645778411267e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050078975946548074), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09701762666231041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003180614538446503), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03977907986131307), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09883139261481141), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1958), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00022207750456034464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0991478553501055), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 832), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00039135521960345204), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09390430313188167), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1958), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.872890882564305e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02457677634870043), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0992922092759184), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 279), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005311672169824166), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 371), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09891167091568198), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1986), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00053669030410338), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03107262038778334), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1053), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07732822549329584), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1339), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 353), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057499940932877344), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 878), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09781493660099363), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 715), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005922239101154383), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02789814667729122), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05171865738066923), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04554566679641136), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1084), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09902740142312189), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 391), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006470749872558478), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09977534331706249), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1867), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005839286807023654), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011086292657432172), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06137609809003581), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 204), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 570), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1729), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04566497238329113), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051562627922289356), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03246656810234292), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1370), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05261012776021825), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1722), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09984275777683262), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 227), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007113738183161378), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06493060803639093), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1366), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07005145971576544), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1987), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1069344687206072e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06324986046659765), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005204549282768313), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0607250953776731), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1157), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0985370147455964), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 632), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4994267464824157e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020147170673931965), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 369), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1583), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06982688518267587), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1147), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09986529879467336), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1984), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006766151577177176), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07469657010999829), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1990), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.796338350270206e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 501), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00012296173173215766), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09971278241078912), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 883), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007921064071352468), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012994330399506924), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09982274338219312), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 423), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.071875584343194e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0612022710476211), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 642), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 298), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055048603351318656), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 805), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON Thiophene



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04335111243596279), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1018), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029656372914822995), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1068), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04724270658543824), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 634), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 176), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05855274500695994), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09940686158156206), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 76), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.510605769185097e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0603096469202955), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1194), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05281224313557434), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 959), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07981088760358637), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1575), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003800308131922769), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038894168356179634), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 319), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056258459483713844), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 769), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06624064258777886), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1364), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07248568232764495), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1325), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009791236317587418), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1588), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036682223381380635), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09738146421894224), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1151), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2813805102864265e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09639111536051685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 51), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.36527903831227e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06370220909571025), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 538), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 199), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 484), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029067482193236696), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 834), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.038767101809132e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.904912982102247e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09833738913061539), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 878), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007763498475250155), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09782337498512109), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1903), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1065480874924181e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09740524916085616), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1881), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1627812615084256e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06678368647321947), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 466), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0384383233474176e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06374147640254961), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 359), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016589882001579983), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1407), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03265644036926662), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 822), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09574709693701737), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.1508488790402618e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05623963126383368), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1364), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04603841442291532), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1032), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09628645932341273), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 370), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003552177589549609), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05068808398774125), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09927391580526852), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 371), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.021634770132596e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03466239783891661), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02260749192794466), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 961), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 214), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019241894427371415), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09846261796027077), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1219), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3652531173363976e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06539781398573839), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1995), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006664369610960978), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.058174314236766965), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05852241064478436), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 447), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008677184829506213), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02942257567477877), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06345631581736023), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 296), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050804095369668796), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 138), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 174), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05610894507211348), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06947186890722921), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1032), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008985617911863521), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03110102858033927), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 668), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02072729577632459), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1308), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005434803847511277), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09986529879467336), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1984), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006766151577177176), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026145849151306248), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 222), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011387719175380154), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 405), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08124997163957036), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1278), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06548126301872186), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1148), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.043334689561782255), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1192), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])


{'CO_Fluorene': {'cluster size (%)': 27, 6: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.696112024099989, 'test_rmse': 0.854411912051448, 'test_r2': -0.7602931973625635, 'test_pearson_r': array([-0.25766658]), 'test_pearson_p_value': array([0.03005431]), 'test_spearman_r': -0.272352179768844, 'test_spearman_p_value': 0.02157498420921197, 'test_kendall_r': -0.18215169408937298, 'test_kendall_p_value': 0.025440228596771242, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 902, 'regressor__learning_rate': 0.016331391883374655, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.6507859013752937, 'test_rmse': 0.7852347932337147, 'test_r2': -0.48678951862585707, 'test_pearson_r': array([-0.03010801]), 'test_pearson_p_value': array([0.80316894]), 'test_spearman_r': -0.05724134850309572, 'test_spearman_p_value': 0.6353915126970625, 'test_kendall_r': -0.048593558665546266, 'test_kendall_p_value': 0.5512111148223714, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 143, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.6482589186759716, 'test_rmse': 0.7913088344930028, 'test_r2': -0.5098800619798953, 'test_pearson_r': array([-0.01482943]), 'test_pearson_p_value': array([0.90230999]), 'test_spearman_r': -0.06338170395390647, 'test_spearman_p_value': 0.59950494200678, 'test_kendall_r': -0.05590535987005689, 'test_kendall_p_value': 0.49311986265908614, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 137, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.6773494616457503, 'test_rmse': 0.8410798235308794, 'test_r2': -0.7057872004507832, 'test_pearson_r': array([-0.21652715]), 'test_pearson_p_value': array([0.06972585]), 'test_spearman_r': -0.24434735851102082, 'test_spearman_p_value': 0.04001408133705345, 'test_kendall_r': -0.17486562632579808, 'test_kendall_p_value': 0.031927392963393315, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1940, 'regressor__learning_rate': 0.05339507826824914, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.693611445484809, 'test_rmse': 0.8204783145975706, 'test_r2': -0.6232470997646165, 'test_pearson_r': array([-0.12497686]), 'test_pearson_p_value': array([0.29905598]), 'test_spearman_r': -0.25688959522548604, 'test_spearman_p_value': 0.03057172307966629, 'test_kendall_r': -0.18810865850113123, 'test_kendall_p_value': 0.02093633554309767, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 915, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.6875525374783101, 'test_rmse': 0.8437854939625533, 'test_r2': -0.7167795494282807, 'test_pearson_r': array([-0.2503735]), 'test_pearson_p_value': array([0.03521256]), 'test_spearman_r': -0.29189803396953906, 'test_spearman_p_value': 0.013512532841992182, 'test_kendall_r': -0.19923359052873968, 'test_kendall_p_value': 0.01454879788701656, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.021285363806124807, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.5421775082951878, 'test_ystd': 0.6439835728766167, 'test_mae': 0.6801656059319913, 'test_rmse': 0.8222047862987006, 'test_r2': -0.6300856442281373, 'test_pearson_r': array([-0.21505333]), 'test_pearson_p_value': array([0.07169594]), 'test_spearman_r': -0.31130509594551825, 'test_spearman_p_value': 0.008228300246767082, 'test_kendall_r': -0.18832198395780653, 'test_kendall_p_value': 0.020683814341493488, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 818, 'regressor__learning_rate': 0.056520459000457046, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_Fluorene': {'cluster size (%)': 25, 6: {'fit_time': array([7.93583751, 8.21195555, 9.35715389, 7.97872567]), 'score_time': array([0.20532537, 0.23016477, 0.20953512, 0.21053147]), 'test_pearson_r': array([0.94807052, 0.89562082, 0.95106762, 0.95417296]), 'test_pearson_p': array([-4.79781874e-33, -7.62600540e-24, -7.71784638e-34, -3.45405534e-34]), 'test_spearman_r': array([0.91113178, 0.91859169, 0.9409894 , 0.93837084]), 'test_spearman_p': array([-6.10629445e-26, -4.32724046e-27, -2.41616411e-31, -2.65839886e-30]), 'test_kendall_r': array([0.8082055 , 0.82358664, 0.79217605, 0.81920045]), 'test_kendall_p': array([-2.39810922e-21, -3.40734897e-22, -1.64966172e-20, -1.37051392e-21]), 'test_rmse': array([-0.21803157, -0.29040586, -0.19385358, -0.17181942]), 'test_mae': array([-0.11401425, -0.12671689, -0.13187984, -0.11132978]), 'test_r2': array([0.89030706, 0.80140075, 0.90378229, 0.90921676]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 520, 'regressor__learning_rate': 0.06198541052016667, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([36.66451335, 36.70203829, 36.28445315, 36.36598229]), 'score_time': array([0.75551891, 0.74408174, 0.688416  , 0.69980979]), 'test_pearson_r': array([0.87154986, 0.90963183, 0.95358844, 0.95036511]), 'test_pearson_p': array([-3.61116514e-21, -1.01087979e-25, -1.51526739e-34, -3.87588922e-33]), 'test_spearman_r': array([0.83844809, 0.92113172, 0.93773434, 0.9384087 ]), 'test_spearman_p': array([-2.92644170e-18, -1.65773021e-27, -1.24782665e-30, -2.60970322e-30]), 'test_kendall_r': array([0.71687185, 0.81851165, 0.79595244, 0.81511025]), 'test_kendall_p': array([-4.11013968e-17, -6.91555260e-22, -9.23414278e-21, -2.03873055e-21]), 'test_rmse': array([-0.34141787, -0.28768216, -0.18616273, -0.18085173]), 'test_mae': array([-0.16966373, -0.12499784, -0.11951518, -0.10909805]), 'test_r2': array([0.69793518, 0.81883836, 0.90658617, 0.90200572]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([23.41461372, 22.3643477 , 23.90200663, 24.52127314]), 'score_time': array([0.47008634, 0.46457601, 0.48117185, 0.45221758]), 'test_pearson_r': array([0.9736572 , 0.95510807, 0.91182115, 0.90009672]), 'test_pearson_p': array([-3.66170894e-42, -5.43293678e-35, -4.82904043e-26, -4.75495867e-24]), 'test_spearman_r': array([0.96454878, 0.94310222, 0.90251233, 0.91421777]), 'test_spearman_p': array([-3.68880007e-38, -7.91180460e-32, -9.86996830e-25, -5.23201908e-26]), 'test_kendall_r': array([0.8472298 , 0.81684738, 0.79354559, 0.83035183]), 'test_kendall_p': array([-2.40463055e-23, -7.38711242e-22, -1.10101841e-20, -5.06899473e-22]), 'test_rmse': array([-0.15884356, -0.18867128, -0.23848525, -0.29645146]), 'test_mae': array([-0.11068492, -0.12685601, -0.13058089, -0.12371233]), 'test_r2': array([0.94186992, 0.89964113, 0.82464659, 0.80754762]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1402, 'regressor__learning_rate': 0.0984626087194166, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([33.47321725, 34.36305714, 34.46938825, 31.87436223]), 'score_time': array([0.78773499, 0.76940966, 0.78862739, 0.66866231]), 'test_pearson_r': array([0.98234392, 0.9187123 , 0.89208239, 0.95144383]), 'test_pearson_p': array([-1.40070221e-47, -4.13746125e-27, -2.06282368e-23, -1.99305193e-33]), 'test_spearman_r': array([0.97569318, 0.91267907, 0.91036263, 0.94924102]), 'test_spearman_p': array([-2.99569212e-43, -3.59627188e-26, -7.91620553e-26, -7.63142684e-33]), 'test_kendall_r': array([0.88357948, 0.79894055, 0.79624105, 0.82791183]), 'test_kendall_p': array([-4.60625463e-25, -5.81542394e-21, -8.81516661e-21, -4.50736370e-22]), 'test_rmse': array([-0.11193001, -0.26675247, -0.2753647 , -0.20500685]), 'test_mae': array([-0.07189201, -0.14484357, -0.12928111, -0.12499246]), 'test_r2': array([0.96454165, 0.83700509, 0.78511446, 0.90084187]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04946389176109618, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([18.89571619, 18.21234202, 18.25492239, 18.49644041]), 'score_time': array([0.37288928, 0.3633275 , 0.37862301, 0.35099173]), 'test_pearson_r': array([0.97763624, 0.97238905, 0.88538995, 0.85899952]), 'test_pearson_p': array([-2.23528166e-44, -1.57997032e-41, -1.23663296e-22, -1.09930266e-19]), 'test_spearman_r': array([0.92908519, 0.97391684, 0.83144424, 0.89073341]), 'test_spearman_p': array([-6.57993115e-29, -2.69070284e-42, -9.95869156e-18, -6.62435097e-23]), 'test_kendall_r': array([0.79111992, 0.87653432, 0.74752724, 0.80457643]), 'test_kendall_p': array([-1.73886982e-20, -6.33639733e-25, -1.91741386e-18, -6.84754161e-21]), 'test_rmse': array([-0.13140261, -0.1506629 , -0.3094586 , -0.32670486]), 'test_mae': array([-0.09143654, -0.10749297, -0.14130287, -0.13850705]), 'test_r2': array([0.95463689, 0.94400462, 0.76118446, 0.72412528]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1092, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([35.35028219, 36.78688097, 36.25650716, 35.70812321]), 'score_time': array([0.68409634, 0.64829731, 0.67835712, 0.66590309]), 'test_pearson_r': array([0.93662583, 0.98085063, 0.97161817, 0.88158501]), 'test_pearson_p': array([-2.13908640e-30, -1.76757147e-46, -3.71833418e-41, -6.96066665e-22]), 'test_spearman_r': array([0.93333333, 0.95510775, 0.96415458, 0.90672993]), 'test_spearman_p': array([-1.00302975e-29, -5.43409974e-35, -5.19505273e-38, -6.25222417e-25]), 'test_kendall_r': array([0.78344598, 0.8363473 , 0.85631719, 0.80329996]), 'test_kendall_p': array([-3.04321955e-20, -8.84524766e-23, -8.55816517e-24, -9.81062371e-21]), 'test_rmse': array([-0.20966442, -0.1281421 , -0.14390085, -0.32888678]), 'test_mae': array([-0.1417309 , -0.08710541, -0.09433425, -0.17299272]), 'test_r2': array([0.86882605, 0.96051132, 0.94043269, 0.76927781]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1996, 'regressor__learning_rate': 0.09738378901277296, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([37.58532643, 36.6994822 , 36.98849344, 37.29028273]), 'score_time': array([0.69323254, 0.81479335, 0.76119161, 0.72182798]), 'test_pearson_r': array([0.90125322, 0.95682955, 0.96445598, 0.95216896]), 'test_pearson_p': array([-1.45010593e-24, -1.62702225e-35, -3.99985661e-38, -1.26365278e-33]), 'test_spearman_r': array([0.91106513, 0.9505524 , 0.95802142, 0.95050253]), 'test_spearman_p': array([-6.24579123e-26, -1.06512523e-33, -6.85798771e-36, -3.56395911e-33]), 'test_kendall_r': array([0.83532127, 0.84393152, 0.8419838 , 0.82679901]), 'test_kendall_p': array([-1.30863626e-22, -3.40332505e-23, -4.97654150e-23, -4.79724256e-22]), 'test_rmse': array([-0.29101919, -0.16573015, -0.16298285, -0.19540072]), 'test_mae': array([-0.12758902, -0.09908416, -0.10841355, -0.12058166]), 'test_r2': array([0.80550616, 0.91443148, 0.92860617, 0.90660966]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_PPV': {'cluster size (%)': 11, 6: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.5401712473663903, 'test_rmse': 0.7267806386744984, 'test_r2': -2.823930649322711, 'test_pearson_r': array([-0.48588897]), 'test_pearson_p_value': array([0.00875783]), 'test_spearman_r': -0.3720274076658425, 'test_spearman_p_value': 0.05124128733449509, 'test_kendall_r': -0.25962486927333756, 'test_kendall_p_value': 0.05864225157437442, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03884459006234783, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.4485387819769624, 'test_rmse': 0.6281163647703057, 'test_r2': -1.8561665322139542, 'test_pearson_r': array([-0.21446337]), 'test_pearson_p_value': array([0.27311932]), 'test_spearman_r': -0.09830776057491177, 'test_spearman_p_value': 0.6187044356960779, 'test_kendall_r': -0.04099340041157962, 'test_kendall_p_value': 0.765277492071555, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1281, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.5510426174984485, 'test_rmse': 0.7019871838587601, 'test_r2': -2.567481054682884, 'test_pearson_r': array([-0.31651029]), 'test_pearson_p_value': array([0.10080637]), 'test_spearman_r': -0.3185611809026982, 'test_spearman_p_value': 0.09849800021611542, 'test_kendall_r': -0.2619921070381107, 'test_kendall_p_value': 0.056082329478436985, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 832, 'regressor__learning_rate': 0.0991478553501055, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.43551029831197574, 'test_rmse': 0.6377704382877154, 'test_r2': -1.9446391306950326, 'test_pearson_r': array([-0.24452432]), 'test_pearson_p_value': array([0.20982332]), 'test_spearman_r': -0.10381519814213372, 'test_spearman_p_value': 0.5990848482996587, 'test_kendall_r': -0.05192497385466752, 'test_kendall_p_value': 0.7053019524370843, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 353, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.4923967185271233, 'test_rmse': 0.6283284976047881, 'test_r2': -1.8580960760018326, 'test_pearson_r': array([-0.24937291]), 'test_pearson_p_value': array([0.20064106]), 'test_spearman_r': -0.26817509956718066, 'test_spearman_p_value': 0.16765453783541173, 'test_kendall_r': -0.20195224917521037, 'test_kendall_p_value': 0.14085989247819658, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.011086292657432172, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.48903571431954923, 'test_rmse': 0.6691279935472474, 'test_r2': -2.241318496480214, 'test_pearson_r': array([-0.28696102]), 'test_pearson_p_value': array([0.13872145]), 'test_spearman_r': -0.15446224934002908, 'test_spearman_p_value': 0.4325705717726721, 'test_kendall_r': -0.06549802675952768, 'test_kendall_p_value': 0.6329357589487391, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1987, 'regressor__learning_rate': 0.07005145971576544, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.31487869777884736, 'test_ystd': 0.3716621591613293, 'test_mae': 0.4929155124531247, 'test_rmse': 0.6510470627938574, 'test_r2': -2.0685137709351054, 'test_pearson_r': array([-0.3127832]), 'test_pearson_p_value': array([0.10510484]), 'test_spearman_r': -0.20019535556851778, 'test_spearman_p_value': 0.3070534566529824, 'test_kendall_r': -0.1175144145131949, 'test_kendall_p_value': 0.3920721224399879, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.012994330399506924, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_PPV': {'cluster size (%)': 11, 6: {'fit_time': array([39.91008234, 37.98284793, 38.16012406, 38.26673031, 38.72282958,
       40.14027786, 39.5588963 , 39.34792638, 39.91691494]), 'score_time': array([0.52889967, 0.57457018, 0.56263518, 0.53372931, 0.57615447,
       0.51686811, 0.50492191, 0.48558521, 0.49572825]), 'test_pearson_r': array([0.98704733, 0.99120781, 0.96910296, 0.97532643, 0.82991316,
       0.96910972, 0.95617041, 0.973022  , 0.92872334]), 'test_pearson_p': array([-5.37239527e-23, -2.94572863e-25, -6.04509989e-18, -3.01009690e-19,
       -2.59138740e-08, -6.02750849e-18, -6.28288795e-16, -4.37651828e-18,
       -1.03938520e-12]), 'test_spearman_r': array([0.9716679 , 0.97585612, 0.9453202 , 0.94765366, 0.85270936,
       0.96077123, 0.94900225, 0.95236792, 0.91118107]), 'test_spearman_p': array([-1.90483586e-18, -2.25266409e-19, -1.16663883e-14, -6.56563867e-15,
       -4.28290633e-09, -1.44478929e-16, -4.65305142e-15, -6.30801536e-15,
       -1.64077963e-11]), 'test_kendall_r': array([0.9037037 , 0.89382716, 0.82758621, 0.83107338, 0.80295567,
       0.87427658, 0.82963216, 0.84880637, 0.79205367]), 'test_kendall_p': array([-6.51700114e-12, -1.09973215e-11, -6.63213517e-14, -2.57232964e-10,
       -8.74230985e-13, -4.15582994e-11, -2.88328550e-10, -2.53968233e-10,
       -3.45545976e-09]), 'test_rmse': array([-0.10471617, -0.09406351, -0.15323208, -0.14035055, -0.38830136,
       -0.15068498, -0.17996392, -0.15388711, -0.20231443]), 'test_mae': array([-0.07403628, -0.06859716, -0.10078969, -0.09675799, -0.15046482,
       -0.09596401, -0.12727057, -0.11493589, -0.10746913]), 'test_r2': array([0.97004825, 0.98211059, 0.93785403, 0.94965226, 0.66384101,
       0.93491125, 0.91123446, 0.9378738 , 0.83904016]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06296400807319842, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([34.22950792, 34.7536881 , 30.93444729, 34.24537086, 36.3704989 ,
       40.30763674, 35.94452596, 39.22877288, 35.27748227]), 'score_time': array([0.59029889, 0.55970883, 0.56487608, 0.57919717, 0.51577425,
       0.48409343, 0.51671958, 0.47662497, 0.48710084]), 'test_pearson_r': array([0.98314642, 0.98795575, 0.9849898 , 0.82244362, 0.97190601,
       0.92436882, 0.94971832, 0.96025626, 0.96013497]), 'test_pearson_p': array([-1.83542622e-21, -2.02372188e-23, -3.88420237e-22, -4.41664797e-08,
       -1.70209436e-18, -8.20784775e-13, -3.86084016e-15, -6.26831575e-16,
       -6.51711521e-16]), 'test_spearman_r': array([0.95870831, 0.96228743, 0.95665025, 0.85943083, 0.96747178,
       0.8707969 , 0.95671564, 0.96496034, 0.92771098]), 'test_spearman_p': array([-2.85088817e-16, -8.56251449e-17, -5.43068455e-16, -2.37692644e-09,
       -1.19911361e-17, -8.16971935e-10, -5.32318756e-16, -1.25171758e-16,
       -1.24128695e-12]), 'test_kendall_r': array([0.86352623, 0.85997588, 0.84236453, 0.76637883, 0.8627995 ,
       0.72256528, 0.88202092, 0.85411441, 0.79416301]), 'test_kendall_p': array([-6.34174405e-11, -7.24337330e-11, -1.21301076e-14, -5.95325058e-09,
       -5.72332020e-11, -3.86133049e-08, -2.54992542e-11, -1.96458876e-10,
       -3.39148362e-09]), 'test_rmse': array([-0.10876839, -0.10378392, -0.12068996, -0.42625748, -0.13480926,
       -0.22012687, -0.20031227, -0.17474984, -0.18177082]), 'test_mae': array([-0.07230145, -0.07609938, -0.08152354, -0.19755765, -0.09027592,
       -0.14628   , -0.09911593, -0.12441205, -0.11342027]), 'test_r2': array([0.96583619, 0.97388791, 0.96357626, 0.65955457, 0.9440216 ,
       0.8533427 , 0.90183758, 0.92028399, 0.88614755]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1972, 'regressor__learning_rate': 0.026367427955061574, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([41.30157232, 43.37575102, 42.88260794, 41.24595737, 42.93678451,
       41.70660639, 47.55079436, 42.41636753, 41.75302219]), 'score_time': array([0.61104321, 0.63818049, 0.61162162, 0.6152997 , 0.61004615,
       0.60047913, 0.57568145, 0.60217738, 0.60264421]), 'test_pearson_r': array([0.97375146, 0.97729501, 0.9649288 , 0.98021068, 0.96230565,
       0.96557652, 0.98048245, 0.96532643, 0.83753807]), 'test_pearson_p': array([-6.87611664e-19, -9.91088642e-20, -3.26329829e-17, -1.57662760e-20,
       -8.50777790e-17, -2.54697428e-17, -1.31023408e-20, -1.09423182e-16,
       -2.72730238e-08]), 'test_spearman_r': array([0.95810756, 0.97598227, 0.93632221, 0.98016998, 0.95947778,
       0.91560928, 0.9820153 , 0.90360811, 0.85913765]), 'test_spearman_p': array([-3.45238852e-16, -2.10041423e-19, -8.64499501e-14, -1.62058772e-20,
       -2.22164107e-16, -3.41825943e-12, -4.38231825e-21, -4.54893346e-11,
       -4.85567021e-09]), 'test_kendall_r': array([0.84796628, 0.89025962, 0.81627682, 0.8951918 , 0.88039524,
       0.77874454, 0.90864475, 0.79363699, 0.81009939]), 'test_kendall_p': array([-1.20922745e-10, -1.26268113e-11, -5.29808566e-10, -9.73448539e-12,
       -2.11571094e-11, -3.38162088e-09, -5.00632392e-12, -4.54012958e-09,
       -1.64702442e-09]), 'test_rmse': array([-0.14560634, -0.17037498, -0.16311637, -0.12797555, -0.14264316,
       -0.15286484, -0.13715497, -0.18057963, -0.36032536]), 'test_mae': array([-0.10004228, -0.11830086, -0.11215757, -0.09606503, -0.08921751,
       -0.10874725, -0.09119025, -0.09517088, -0.12989434]), 'test_r2': array([0.94593443, 0.94610765, 0.92053884, 0.95656122, 0.92172834,
       0.93191933, 0.95235897, 0.92915917, 0.68608901]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1986, 'regressor__learning_rate': 0.09891167091568198, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([18.58827353, 20.36131501, 17.78256607, 20.50855565, 18.32287431,
       19.95103383, 19.38637924, 17.87858105, 17.42149806]), 'score_time': array([0.31901193, 0.28778911, 0.3234067 , 0.27505422, 0.28129745,
       0.28970599, 0.30124116, 0.32376242, 0.32622266]), 'test_pearson_r': array([0.98809542, 0.97862965, 0.81350506, 0.94793928, 0.9802293 ,
       0.71615314, 0.98610463, 0.93027232, 0.96824999]), 'test_pearson_p': array([-1.73028707e-23, -4.40897153e-20, -8.10070494e-08, -6.10853598e-15,
       -1.55688767e-20, -1.25053970e-05, -1.37932285e-22, -7.88125702e-13,
       -3.53978530e-17]), 'test_spearman_r': array([0.99001974, 0.97164069, 0.82772279, 0.94482759, 0.97068246,
       0.79595862, 0.97327258, 0.86054469, 0.96278051]), 'test_spearman_p': array([-1.61911727e-24, -1.92937136e-18, -3.03788457e-08, -1.31293696e-14,
       -3.00464053e-18, -2.43921456e-07, -8.75224155e-19, -4.29730652e-09,
       -2.70946768e-16]), 'test_kendall_r': array([0.93069592, 0.88339917, 0.71802627, 0.85714286, 0.87407674,
       0.727725  , 0.88532743, 0.74966953, 0.86772487]), 'test_kendall_p': array([-1.68927318e-12, -2.26124587e-11, -5.62566186e-08, -1.94128616e-15,
       -3.08005811e-11, -3.41423237e-08, -1.63559119e-11, -2.24227783e-08,
       -1.96986639e-15]), 'test_rmse': array([-0.09950244, -0.1277668 , -0.32403766, -0.23630552, -0.1126675 ,
       -0.41858651, -0.10706987, -0.25735917, -0.16808861]), 'test_mae': array([-0.06750744, -0.07647515, -0.16217273, -0.14497517, -0.08125122,
       -0.17606594, -0.07140258, -0.14769906, -0.11841505]), 'test_r2': array([0.97344707, 0.9555494 , 0.58906485, 0.89736657, 0.96026138,
       0.45702147, 0.97000131, 0.8415366 , 0.93349371]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1084, 'regressor__learning_rate': 0.04554566679641136, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([23.84901381, 23.14307475, 24.91144514, 23.25875926, 22.28456783,
       26.71516323, 24.3455472 , 23.40565181, 23.64026475]), 'score_time': array([0.35216141, 0.40293837, 0.35455871, 0.39966106, 0.40373182,
       0.35257411, 0.39338827, 0.37396836, 0.34920955]), 'test_pearson_r': array([0.95486063, 0.98380151, 0.95349257, 0.97433891, 0.82294101,
       0.98390378, 0.96616954, 0.96725617, 0.81476062]), 'test_pearson_p': array([-9.27730196e-16, -1.07886266e-21, -1.37703675e-15, -5.08321981e-19,
       -4.26587296e-08, -9.91048057e-22, -2.02145382e-17, -5.25473474e-17,
       -1.30882819e-07]), 'test_spearman_r': array([0.86369262, 0.93642191, 0.94690157, 0.96600985, 0.74630542,
       0.95661831, 0.95455106, 0.96578159, 0.8364582 ]), 'test_spearman_p': array([-1.61055198e-09, -8.46910255e-14, -7.92443611e-15, -2.15210251e-17,
       -3.34896197e-06, -5.48391147e-16, -1.01553595e-15, -9.23898884e-17,
       -2.95341596e-08]), 'test_kendall_r': array([0.71624671, 0.81435893, 0.83807233, 0.86206897, 0.69950739,
       0.84511117, 0.87053087, 0.88594476, 0.76556359]), 'test_kendall_p': array([-5.74722342e-08, -6.58534951e-10, -1.98707699e-10, -1.01962005e-15,
       -3.83363549e-09, -1.52478515e-10, -3.52550588e-11, -4.07692648e-11,
       -1.12480199e-08]), 'test_rmse': array([-0.18693431, -0.10157168, -0.19598136, -0.14468255, -0.32276119,
       -0.12951146, -0.156252  , -0.14916372, -0.39749082]), 'test_mae': array([-0.10707968, -0.07911667, -0.13043375, -0.09737306, -0.1588993 ,
       -0.08158784, -0.08236001, -0.10338219, -0.15217802]), 'test_r2': array([0.90753166, 0.96783043, 0.90765254, 0.94906891, 0.6016697 ,
       0.96619603, 0.9329989 , 0.93384028, 0.63843077]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1370, 'regressor__learning_rate': 0.03246656810234292, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([42.55405331, 42.59107065, 43.98402834, 42.55517554, 43.62905025,
       41.92880702, 44.18370104, 41.6825819 , 43.91550946]), 'score_time': array([0.61734772, 0.62364578, 0.60999131, 0.63609219, 0.6067791 ,
       0.61637568, 0.59838295, 0.62676144, 0.59454751]), 'test_pearson_r': array([0.92344208, 0.97607626, 0.98463803, 0.98495648, 0.97812764,
       0.94843789, 0.98277575, 0.85138546, 0.94927732]), 'test_pearson_p': array([-9.62081002e-13, -1.99322053e-19, -5.29935110e-22, -4.00146296e-22,
       -6.01439707e-20, -5.38027401e-15, -2.45664988e-21, -9.30452774e-09,
       -1.40341057e-14]), 'test_spearman_r': array([0.95085602, 0.94838001, 0.98213192, 0.96686785, 0.96033509,
       0.94592931, 0.98028597, 0.90687496, 0.94687856]), 'test_spearman_p': array([-2.85389276e-15, -5.46049562e-15, -4.01661487e-21, -1.53167857e-17,
       -1.67304583e-16, -1.00655058e-14, -1.49820855e-20, -2.96136715e-11,
       -2.52420350e-14]), 'test_kendall_r': array([0.81627682, 0.84796628, 0.91089388, 0.8606665 , 0.86913845,
       0.83107338, 0.91718801, 0.84421446, 0.84728428]), 'test_kendall_p': array([-5.29808566e-10, -1.21526331e-10, -4.89348808e-12, -5.84238274e-11,
       -3.97082077e-11, -2.57232964e-10, -3.31368620e-12, -3.61648440e-10,
       -2.84781818e-10]), 'test_rmse': array([-0.17860206, -0.15210395, -0.10081405, -0.12382393, -0.12070404,
       -0.18908831, -0.12460352, -0.37324029, -0.22519462]), 'test_mae': array([-0.10988374, -0.0965656 , -0.0691321 , -0.08541945, -0.06685374,
       -0.13285223, -0.08327738, -0.15684684, -0.14826553]), 'test_r2': array([0.84941011, 0.95114869, 0.96926466, 0.96690054, 0.9552377 ,
       0.87958995, 0.9641801 , 0.71968122, 0.89323638]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1984, 'regressor__learning_rate': 0.09986529879467336, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([4.65957904, 5.36725998, 4.99916911, 4.42958307, 4.36948466,
       5.56102109, 4.43453074, 5.77331042, 5.65420055]), 'score_time': array([0.10803986, 0.10562038, 0.10981607, 0.10743546, 0.10904455,
       0.10278893, 0.10820889, 0.10649681, 0.10507703]), 'test_pearson_r': array([0.83331827, 0.97951376, 0.92570449, 0.98457274, 0.9558794 ,
       0.97403713, 0.97688652, 0.94419765, 0.98203872]), 'test_pearson_p': array([-2.01489717e-08, -2.50539300e-20, -6.50507665e-13, -5.60948566e-22,
       -6.85816294e-16, -5.94177275e-19, -1.25781268e-19, -4.71470118e-14,
       -2.32498515e-20]), 'test_spearman_r': array([0.84597413, 0.95144221, 0.92978569, 0.9847253 , 0.94197364,
       0.95810756, 0.97573002, 0.94307608, 0.96661193]), 'test_spearman_p': array([-7.51050573e-09, -2.43555315e-15, -3.10924563e-13, -4.90955145e-22,
       -2.55001496e-14, -3.45238852e-16, -2.41500245e-19, -6.06767002e-14,
       -6.74484564e-17]), 'test_kendall_r': array([0.80746899, 0.85999172, 0.8148173 , 0.91851852, 0.81335044,
       0.85785509, 0.9122436 , 0.80952381, 0.86243386]), 'test_kendall_p': array([-1.01681166e-09, -7.24255419e-11, -5.92776403e-10, -2.94230651e-12,
       -6.63073389e-10, -7.35417537e-11, -4.34803762e-12, -1.37579443e-12,
       -3.89029836e-15]), 'test_rmse': array([-0.39420365, -0.12948003, -0.21323139, -0.10775995, -0.16534569,
       -0.14078825, -0.13781906, -0.20834782, -0.12639923]), 'test_mae': array([-0.14430003, -0.08479747, -0.12115781, -0.07519652, -0.12470043,
       -0.09506495, -0.09825752, -0.14039772, -0.08100272]), 'test_r2': array([0.66522888, 0.95829565, 0.85612304, 0.96726232, 0.91037469,
       0.94748149, 0.94937326, 0.89100358, 0.96247961]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 298, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_Thiophene': {'cluster size (%)': 62, 6: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.5614705816624449, 'test_rmse': 0.6991018112695631, 'test_r2': -0.5920424486599496, 'test_pearson_r': array([-0.13924798]), 'test_pearson_p_value': array([0.07906815]), 'test_spearman_r': -0.04393559172227781, 'test_spearman_p_value': 0.5811846092136561, 'test_kendall_r': -0.022681576722078396, 'test_kendall_p_value': 0.6737738919823428, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1018, 'regressor__learning_rate': 0.04335111243596279, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.5508791126060085, 'test_rmse': 0.6890717287284298, 'test_r2': -0.5466877738360314, 'test_pearson_r': array([-0.03630378]), 'test_pearson_p_value': array([0.64856239]), 'test_spearman_r': 0.03211349263068911, 'test_spearman_p_value': 0.6868554099772024, 'test_kendall_r': 0.018670087223239044, 'test_kendall_p_value': 0.728538319893636, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 769, 'regressor__learning_rate': 0.056258459483713844, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.5178642160940543, 'test_rmse': 0.6839865400055415, 'test_r2': -0.5239436175159935, 'test_pearson_r': array([-0.05262728]), 'test_pearson_p_value': array([0.5086591]), 'test_spearman_r': 0.052086010610979255, 'test_spearman_p_value': 0.5130344148002537, 'test_kendall_r': 0.02941432845378779, 'test_kendall_p_value': 0.5847403361134706, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 199, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.46842793996532406, 'test_rmse': 0.649585474250999, 'test_r2': -0.37450523477768516, 'test_pearson_r': array([0.09737162]), 'test_pearson_p_value': array([0.22060529]), 'test_spearman_r': 0.12863688876469734, 'test_spearman_p_value': 0.10499044578391546, 'test_kendall_r': 0.09259909366279888, 'test_kendall_p_value': 0.08556728077338575, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 466, 'regressor__learning_rate': 0.06678368647321947, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.5947301426689032, 'test_rmse': 0.7089409298445525, 'test_r2': -0.637170421045989, 'test_pearson_r': array([-0.18275486]), 'test_pearson_p_value': array([0.02071842]), 'test_spearman_r': -0.14147182274631812, 'test_spearman_p_value': 0.07435092967851412, 'test_kendall_r': -0.07656597235222985, 'test_kendall_p_value': 0.1549344137876473, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.5256079768843145, 'test_rmse': 0.6603180734374655, 'test_r2': -0.42030022995593486, 'test_pearson_r': array([0.00155005]), 'test_pearson_p_value': array([0.98447967]), 'test_spearman_r': 0.10254729464907386, 'test_spearman_p_value': 0.19692354333629816, 'test_kendall_r': 0.07927557478406165, 'test_kendall_p_value': 0.14050697566971693, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 138, 'regressor__learning_rate': 0.050804095369668796, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.46397167010225804, 'test_ystd': 0.5540680476927946, 'test_mae': 0.6333027046501313, 'test_rmse': 0.7447844017082285, 'test_r2': -0.8069033932687315, 'test_pearson_r': array([-0.21097385]), 'test_pearson_p_value': array([0.00740813]), 'test_spearman_r': -0.20389496142408556, 'test_spearman_p_value': 0.009707054768705635, 'test_kendall_r': -0.1396951333570798, 'test_kendall_p_value': 0.00945837881576753, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 222, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_Thiophene': {'cluster size (%)': 50, 6: {'fit_time': array([19.0856874 , 21.22204876]), 'score_time': array([0.75991321, 0.75877547]), 'test_pearson_r': array([0.89110837, 0.88755949]), 'test_pearson_p': array([-9.42308650e-46, -1.42354811e-44]), 'test_spearman_r': array([0.89251328, 0.8812656 ]), 'test_spearman_p': array([-4.29756208e-46, -3.68388994e-43]), 'test_kendall_r': array([0.77038078, 0.76559497]), 'test_kendall_p': array([-1.75745388e-38, -1.22070068e-37]), 'test_rmse': array([-0.30378273, -0.28221659]), 'test_mae': array([-0.16004222, -0.14607041]), 'test_r2': array([0.78609285, 0.77778575]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1194, 'regressor__learning_rate': 0.0603096469202955, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([34.18496418, 40.18478131]), 'score_time': array([1.26414323, 1.26935458]), 'test_pearson_r': array([0.90822435, 0.78891105]), 'test_pearson_p': array([-2.90688666e-50, -1.23902558e-28]), 'test_spearman_r': array([0.89373584, 0.80002657]), 'test_spearman_p': array([-2.15098453e-46, -5.83656423e-30]), 'test_kendall_r': array([0.77272807, 0.67068255]), 'test_kendall_p': array([-1.17843619e-38, -2.82104186e-29]), 'test_rmse': array([-0.28671296, -0.3841949 ]), 'test_mae': array([-0.14227232, -0.20733044]), 'test_r2': array([0.81002693, 0.58152053]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.036682223381380635, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([35.95485568, 35.89760613]), 'score_time': array([1.20638204, 1.15007973]), 'test_pearson_r': array([0.775436  , 0.88515998]), 'test_pearson_p': array([-2.49484248e-27, -5.03234110e-44]), 'test_spearman_r': array([0.83938512, 0.89502988]), 'test_spearman_p': array([-1.07516885e-35, -2.30570814e-46]), 'test_kendall_r': array([0.74103781, 0.77535004]), 'test_kendall_p': array([-9.47630641e-36, -1.43433499e-38]), 'test_rmse': array([-0.40721968, -0.29431156]), 'test_mae': array([-0.18278473, -0.15880585]), 'test_r2': array([0.58108608, 0.77792824]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1881, 'regressor__learning_rate': 0.09740524916085616, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([37.21751046, 33.39613199]), 'score_time': array([1.30211329, 1.22824597]), 'test_pearson_r': array([0.91099489, 0.88700233]), 'test_pearson_p': array([-4.47150849e-51, -1.91343024e-44]), 'test_spearman_r': array([0.90553649, 0.89712016]), 'test_spearman_p': array([-1.68988861e-49, -6.87883337e-47]), 'test_kendall_r': array([0.77350504, 0.77707772]), 'test_kendall_p': array([-1.07092302e-38, -8.11749378e-39]), 'test_rmse': array([-0.26686347, -0.29871898]), 'test_mae': array([-0.15122104, -0.14867246]), 'test_r2': array([0.8197072 , 0.77398122]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05068808398774125, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([36.69681144, 36.618613  ]), 'score_time': array([1.21793079, 1.25393844]), 'test_pearson_r': array([0.92672706, 0.87070046]), 'test_pearson_p': array([-2.91657184e-56, -5.84690474e-41]), 'test_spearman_r': array([0.90496202, 0.87942529]), 'test_spearman_p': array([-2.44492436e-49, -9.21226345e-43]), 'test_kendall_r': array([0.77751339, 0.78735819]), 'test_kendall_p': array([-4.08763509e-39, -1.04011400e-39]), 'test_rmse': array([-0.23782031, -0.31300955]), 'test_mae': array([-0.13959952, -0.1498412 ]), 'test_r2': array([0.85680145, 0.75139835]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.058174314236766965, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([35.86534309, 35.04860616]), 'score_time': array([1.21508932, 1.18744636]), 'test_pearson_r': array([0.93916867, 0.89861232]), 'test_pearson_p': array([-2.92309821e-61, -2.85479880e-47]), 'test_spearman_r': array([0.92536588, 0.90873486]), 'test_spearman_p': array([-9.06688520e-56, -4.97448962e-50]), 'test_kendall_r': array([0.79124713, 0.78738775]), 'test_kendall_p': array([-1.84718784e-40, -9.58100197e-40]), 'test_rmse': array([-0.21773973, -0.28572062]), 'test_mae': array([-0.13285086, -0.14550301]), 'test_r2': array([0.87565867, 0.80057103]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1984, 'regressor__learning_rate': 0.09986529879467336, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([20.84160686, 19.47982669]), 'score_time': array([0.73330879, 0.7214551 ]), 'test_pearson_r': array([0.88766973, 0.91238698]), 'test_pearson_p': array([-6.15746645e-45, -4.18310906e-51]), 'test_spearman_r': array([0.89484399, 0.90816996]), 'test_spearman_p': array([-1.14024056e-46, -7.22804645e-50]), 'test_kendall_r': array([0.77590507, 0.77382654]), 'test_kendall_p': array([-7.11355791e-39, -1.62548995e-38]), 'test_rmse': array([-0.29679628, -0.25875221]), 'test_mae': array([-0.14780691, -0.15255533]), 'test_r2': array([0.77053537, 0.82846292]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1148, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 522)}}
Trimer_scaler
Filename: (ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/substructure cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/substructure cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/substructure cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c027n02>
Subject: Job 295236: <NGB_log Rg (nm)_ECFP_Trimer_substructure cluster_20250311> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_ECFP_Trimer_substructure cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:12:46 2025
Job was executed on host(s) <8*c027n02>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Thu Mar 13 10:01:27 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Thu Mar 13 10:01:27 2025
Terminated at Sat Mar 15 05:34:24 2025
Results reported at Sat Mar 15 05:34:24 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_ECFP_Trimer_substructure cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_substructure cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_substructure cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "ECFP"                                       --regressor_type "NGB"                                       --radius "3"                                       --vector "count"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "substructure cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   681212.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.92 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   156780 sec.
    Turnaround time :                            296498 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_substructure cluster_20250311.err> for stderr output of this job.

