


-------------------------------------------------- 
OOD TEST ON ionic-EG



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014219083423772191), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1030), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 220), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1328), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0667111840371928), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 629), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06768153877807709), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00572326441431493), ('regressor__regressor__max_depth', 38), ('regressor__regressor__n_estimators', 1015), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09900421675060575), ('regressor__regressor__max_depth', 2249), ('regressor__regressor__n_estimators', 216), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 114), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__max_depth', 2326), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1106), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__max_depth', 269), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1515), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06713772164125167), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 78), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07258072215817768), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1532), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.054549093256385045), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.044142961484786865), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 163), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__max_depth', 269), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0804508281160057), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 85), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 422), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00867121039549729), ('regressor__regressor__max_depth', 13), ('regressor__regressor__n_estimators', 630), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0039923390168288), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1687), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 948), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011650046328232631), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 330), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004690118729295944), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1291), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06430391604663739), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 9433), ('regressor__regressor__n_estimators', 127), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 350), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0028610582616459155), ('regressor__regressor__max_depth', 3169), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0646504851956634), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 85), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08113520663847572), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 61), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009799482845095983), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06834820384530285), ('regressor__regressor__max_depth', 17), ('regressor__regressor__n_estimators', 309), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07688121919890013), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1255), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05341928006405658), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0023878802071886857), ('regressor__regressor__max_depth', 6612), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__max_depth', 4800), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006113684760288781), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 529), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017267609806250632), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015893010201873555), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 347), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06390124827042983), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 433), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__max_depth', 41), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__max_depth', 2125), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03955825152029377), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 103), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0045534856540677985), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013304008078876122), ('regressor__regressor__max_depth', 9272), ('regressor__regressor__n_estimators', 1542), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0026230717087912456), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03195879519366223), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03443608774840101), ('regressor__regressor__max_depth', 8140), ('regressor__regressor__n_estimators', 104), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 105), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0018906632446593942), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03173131934281433), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07158394113391477), ('regressor__regressor__max_depth', 6387), ('regressor__regressor__n_estimators', 482), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 71), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06449854041502759), ('regressor__regressor__max_depth', 11), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__n_jobs', -2)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009369930634624057), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 619), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.018596608299181056), ('regressor__regressor__max_depth', 15), ('regressor__regressor__n_estimators', 179), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06782094521972792), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 77), ('regressor__regressor__n_jobs', -2)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.018596608299181056), ('regressor__regressor__max_depth', 15), ('regressor__regressor__n_estimators', 179), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0016777667875326962), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04063744139158494), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 307), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00963325216017026), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 305), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031008138313143287), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 67), ('regressor__regressor__n_jobs', -2)])


{'CO_ionic-EG': {'cluster size (%)': 6, 6: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.6926376532248055, 'test_rmse': 0.7739719274670244, 'test_r2': 0.27590602672009723, 'test_pearson_r': array([0.57535186]), 'test_pearson_p_value': array([0.0197075]), 'test_spearman_r': 0.43806034499815993, 'test_spearman_p_value': 0.08967282953475358, 'test_kendall_r': 0.1996866881862366, 'test_kendall_p_value': 0.30526089342285023, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1328, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.685455006682018, 'test_rmse': 0.7648181199852684, 'test_r2': 0.2929325375233016, 'test_pearson_r': array([0.58129487]), 'test_pearson_p_value': array([0.01819268]), 'test_spearman_r': 0.43806034499815993, 'test_spearman_p_value': 0.08967282953475358, 'test_kendall_r': 0.1996866881862366, 'test_kendall_p_value': 0.30526089342285023, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1106, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.683290355973581, 'test_rmse': 0.7557569708262362, 'test_r2': 0.30958719351625086, 'test_pearson_r': array([0.58612577]), 'test_pearson_p_value': array([0.01702924]), 'test_spearman_r': 0.43806034499815993, 'test_spearman_p_value': 0.08967282953475358, 'test_kendall_r': 0.1996866881862366, 'test_kendall_p_value': 0.30526089342285023, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.004690118729295944, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1291, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.6942531700662171, 'test_rmse': 0.7728264411465278, 'test_r2': 0.27804777352539645, 'test_pearson_r': array([0.57297961]), 'test_pearson_p_value': array([0.0203387]), 'test_spearman_r': 0.43806034499815993, 'test_spearman_p_value': 0.08967282953475358, 'test_kendall_r': 0.1996866881862366, 'test_kendall_p_value': 0.30526089342285023, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.009799482845095983, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.7004612583151852, 'test_rmse': 0.7808965834944862, 'test_r2': 0.2628912599763372, 'test_pearson_r': array([0.56896625]), 'test_pearson_p_value': array([0.02144203]), 'test_spearman_r': 0.43806034499815993, 'test_spearman_p_value': 0.08967282953475358, 'test_kendall_r': 0.1996866881862366, 'test_kendall_p_value': 0.30526089342285023, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.05913781436124809, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2125, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 1123, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.685147297703365, 'test_rmse': 0.7640780349931271, 'test_r2': 0.2943002792646674, 'test_pearson_r': array([0.58153527]), 'test_pearson_p_value': array([0.01813336]), 'test_spearman_r': 0.43806034499815993, 'test_spearman_p_value': 0.08967282953475358, 'test_kendall_r': 0.1996866881862366, 'test_kendall_p_value': 0.30526089342285023, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.1, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 105, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.8669253953438698, 'test_ystd': 0.9095524381766688, 'test_mae': 0.6888638559213673, 'test_rmse': 0.7613610989748558, 'test_r2': 0.29931006105879365, 'test_pearson_r': array([0.58383455]), 'test_pearson_p_value': array([0.0175736]), 'test_spearman_r': 0.43806034499815993, 'test_spearman_p_value': 0.08967282953475358, 'test_kendall_r': 0.1996866881862366, 'test_kendall_p_value': 0.30526089342285023, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.009369930634624057, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10000, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 619, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_ionic-EG': {'cluster size (%)': 6, 6: {'fit_time': array([4.6215415 , 4.62963057, 4.81492209, 4.67869329, 4.593045  ,
       4.49290085, 4.74430203, 4.69790626, 4.61979246, 4.67367101,
       4.73683715, 4.71784902, 4.70512652, 4.68043923, 4.48113823,
       4.57989407]), 'score_time': array([0.15241194, 0.15357852, 0.15226793, 0.15869451, 0.15647101,
       0.15270567, 0.16764808, 0.15394044, 0.15392113, 0.15082979,
       0.15667629, 0.14998031, 0.15333247, 0.15076971, 0.15342093,
       0.15455508]), 'test_pearson_r': array([0.8855183 , 0.97199993, 0.99544519, 0.92500915, 0.97519681,
       0.70398852, 0.9926275 , 0.84787365, 0.96677166, 0.91138069,
       0.99366546, 0.96958421, 0.95366878, 0.95233834, 0.98577445,
       0.98447336]), 'test_pearson_p': array([-2.28516196e-06, -7.63851236e-11, -9.93648178e-17, -2.92812787e-07,
       -1.45034763e-10, -2.33592490e-03, -3.11332856e-14, -3.34837530e-05,
       -1.09840305e-09, -9.08169478e-07, -1.07923009e-14, -5.95857432e-10,
       -1.08676777e-08, -1.32025829e-08, -3.04478382e-12, -5.59916331e-12]), 'test_spearman_r': array([0.87009804, 0.9417537 , 0.98957713, 0.84411765, 0.96176471,
       0.71764706, 0.99411765, 0.81176471, 0.94334095, 0.87058824,
       0.99337775, 0.9256809 , 0.93451092, 0.95294118, 0.97496424,
       0.95294118]), 'test_spearman_p': array([-5.62745161e-06, -1.70014816e-08, -4.85604035e-14, -3.93024274e-05,
       -2.89508013e-09, -1.74753506e-03, -6.43399749e-15, -1.34322375e-04,
       -4.32397330e-08, -1.14989348e-05, -1.47168758e-14, -2.75438509e-07,
       -1.16375217e-07, -1.20965793e-08, -1.54730831e-10, -1.20965793e-08]), 'test_kendall_r': array([0.79411765, 0.83395402, 0.952036  , 0.73333333, 0.88333333,
       0.71666667, 0.96666667, 0.73333333, 0.86193223, 0.73333333,
       0.96235152, 0.82845913, 0.87866878, 0.86666667, 0.90759507,
       0.85      ]), 'test_kendall_p': array([-5.45407093e-07, -3.18179868e-06, -1.04704970e-07, -1.62687222e-05,
       -1.43717927e-08, -2.87624658e-05, -1.29045888e-11, -1.62687222e-05,
       -3.45008795e-06, -1.62687222e-05, -2.18526649e-07, -8.12917002e-06,
       -2.22140114e-06, -3.98309214e-08, -1.10296350e-06, -1.02027025e-07]), 'test_rmse': array([-0.28291057, -0.15843515, -0.07730707, -0.26542575, -0.11021063,
       -0.53849409, -0.08312057, -0.39485685, -0.18016658, -0.25338777,
       -0.06615993, -0.16085813, -0.2070983 , -0.19857406, -0.09343472,
       -0.08776711]), 'test_mae': array([-0.12317124, -0.08226873, -0.05008994, -0.14898474, -0.07614975,
       -0.18014073, -0.06073588, -0.16153383, -0.0819189 , -0.11158605,
       -0.04445627, -0.08993758, -0.10079376, -0.14029865, -0.05555695,
       -0.06162891]), 'test_r2': array([0.76205819, 0.9337161 , 0.98917935, 0.83738212, 0.94328063,
       0.34870862, 0.97907784, 0.68356297, 0.93226873, 0.81274431,
       0.98716423, 0.93182746, 0.90248654, 0.83358984, 0.96892042,
       0.9671354 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.08646479880356304, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 2326, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 847, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([3.68468475, 4.0284121 , 3.73969817, 3.84606934, 3.8166976 ,
       3.92957568, 3.54401612, 4.13832331, 3.66799498, 3.90546775,
       3.38199615, 3.74822211, 3.9986701 , 3.7340591 , 4.12952447,
       3.68564963]), 'score_time': array([0.14986229, 0.15127969, 0.16496205, 0.15378547, 0.15822673,
       0.15449572, 0.16393232, 0.15569735, 0.16812515, 0.15900946,
       0.15722895, 0.15536499, 0.15690088, 0.16042113, 0.20042777,
       0.15381122]), 'test_pearson_r': array([0.98001824, 0.90539749, 0.97997489, 0.99340311, 0.65706496,
       0.9367392 , 0.81420255, 0.99493898, 0.97254545, 0.98184504,
       0.96457543, 0.99076574, 0.99205607, 0.97207414, 0.99201415,
       0.92558219]), 'test_pearson_p': array([-6.22518020e-12, -5.80119846e-07, -6.32640617e-12, -1.43278237e-14,
       -5.68298581e-03, -9.18816822e-08, -1.23458789e-04, -2.25022557e-15,
       -2.93200800e-10, -1.66161945e-11, -1.70920538e-09, -1.49831794e-13,
       -5.24221905e-14, -3.29888492e-10, -5.43832193e-14, -2.77935239e-07]), 'test_spearman_r': array([0.90128772, 0.86082174, 0.95823385, 0.97277436, 0.66961019,
       0.92273756, 0.85882353, 0.98823529, 0.961001  , 0.98307606,
       0.92273756, 0.97647059, 0.99117647, 0.95588235, 0.98085526,
       0.86470588]), 'test_spearman_p': array([-7.88324131e-07, -9.17831042e-06, -1.47267682e-09, -2.76678019e-10,
       -4.54744509e-03, -3.58624443e-07, -2.04643957e-05, -8.10888105e-13,
       -3.31817876e-09, -1.01973765e-11, -3.58624443e-07, -1.00615044e-10,
       -1.09082915e-13, -7.76027446e-09, -2.40310904e-11, -1.54423405e-05]), 'test_kendall_r': array([0.78967327, 0.76015278, 0.86994258, 0.91214188, 0.69456675,
       0.82845913, 0.75      , 0.95      , 0.86193223, 0.92887842,
       0.79498604, 0.93333333, 0.96666667, 0.85      , 0.92440239,
       0.7       ]), 'test_kendall_p': array([-1.02725536e-05, -2.17189123e-05, -1.33413173e-06, -8.99518934e-07,
       -1.83536177e-04, -8.12917002e-06, -8.91848950e-06, -7.63760478e-11,
       -3.45008795e-06, -5.65704076e-07, -1.85653874e-05, -3.55879882e-10,
       -1.29045888e-11, -1.02027025e-07, -6.95749778e-07, -4.94106357e-05]), 'test_rmse': array([-0.10301672, -0.28310448, -0.12110779, -0.09134597, -0.53216659,
       -0.24823008, -0.42034322, -0.07359404, -0.11320368, -0.11877233,
       -0.16128446, -0.09688115, -0.07317662, -0.15225867, -0.0860799 ,
       -0.24205661]), 'test_mae': array([-0.05643168, -0.11963899, -0.089482  , -0.0488697 , -0.17845801,
       -0.10783801, -0.1928437 , -0.04862579, -0.08706925, -0.08320126,
       -0.11716645, -0.06608785, -0.04755288, -0.10524056, -0.05594696,
       -0.13787712]), 'test_r2': array([0.96003401, 0.80831896, 0.95678566, 0.98240229, 0.23685961,
       0.86955799, 0.63187683, 0.98959426, 0.94344465, 0.95434491,
       0.9284547 , 0.97968063, 0.9834315 , 0.93428558, 0.98111326,
       0.76679785]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.044142961484786865, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 163, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([51.76651216, 46.97325015, 53.40709782, 48.91475987, 50.39598441,
       48.24548101, 46.59062982, 49.5671885 , 64.50784683, 51.04248762,
       49.70697665, 55.40120554, 49.26627374, 52.44204783, 61.12850881,
       65.40871739]), 'score_time': array([0.16193008, 0.16781926, 0.16120648, 0.15955687, 0.16340852,
       0.16477489, 0.17063713, 0.16405988, 0.17215943, 0.16526604,
       0.16329765, 0.16044784, 0.17226577, 0.16484427, 0.16491199,
       0.16008067]), 'test_pearson_r': array([0.91404881, 0.99390501, 0.93126296, 0.97802246, 0.99126709,
       0.97873557, 0.98063557, 0.98252088, 0.54795673, 0.98329131,
       0.98215744, 0.98089301, 0.91044298, 0.98473372, 0.80833418,
       0.99420026]), 'test_pearson_p': array([-2.89948098e-07, -8.79192739e-16, -5.70814257e-08, -6.26648723e-11,
       -1.01502317e-13, -4.98388441e-11, -2.60140431e-11, -1.27637018e-11,
       -2.79906673e-02, -9.32872398e-12, -1.47273224e-11, -2.37037669e-11,
       -9.75118509e-07, -4.97751297e-12, -1.50946436e-04, -5.82876691e-15]), 'test_spearman_r': array([0.89883524, 0.99202962, 0.92892157, 0.93235294, 0.95      ,
       0.95588235, 0.98454773, 0.98380077, 0.67941176, 0.9757177 ,
       0.96983102, 0.96764706, 0.96688768, 0.90332718, 0.87941176,
       0.97938251]), 'test_spearman_p': array([-9.40713499e-07, -6.53940522e-15, -7.28779911e-08, -1.45175444e-07,
       -1.83461727e-08, -7.76027446e-09, -5.41517846e-12, -7.52089449e-12,
       -3.79343267e-03, -1.25183504e-10, -5.63193822e-10, -9.13289481e-10,
       -1.07216639e-09, -1.63329218e-06, -7.18727304e-06, -4.02148125e-11]), 'test_kendall_r': array([0.81919377, 0.952036  , 0.79411765, 0.85      , 0.83333333,
       0.85      , 0.92887842, 0.92440239, 0.71666667, 0.89540533,
       0.89540533, 0.88333333, 0.91214188, 0.79672462, 0.81666667,
       0.90759507]), 'test_kendall_p': array([-4.73348832e-06, -1.04704970e-07, -5.45407093e-07, -1.02027025e-07,
       -2.44193725e-07, -1.02027025e-07, -5.65704076e-07, -6.95749778e-07,
       -2.87624658e-05, -1.41912826e-06, -1.41912826e-06, -1.43717927e-08,
       -8.99518934e-07, -2.11608369e-05, -5.50848432e-07, -1.10296350e-06]), 'test_rmse': array([-0.27283903, -0.07849613, -0.24651209, -0.12475116, -0.09376365,
       -0.13363982, -0.1095658 , -0.10165801, -0.54629651, -0.13178417,
       -0.11983793, -0.1271058 , -0.30046656, -0.11516083, -0.38568247,
       -0.07157086]), 'test_mae': array([-0.12793639, -0.05089288, -0.1262876 , -0.07870102, -0.05918077,
       -0.09353881, -0.08114702, -0.06824105, -0.20619636, -0.10023722,
       -0.07962831, -0.08065013, -0.1294913 , -0.07349199, -0.15308767,
       -0.05019957]), 'test_r2': array([ 0.82644505,  0.98628203,  0.8494175 ,  0.95192322,  0.98078009,
        0.95542166,  0.95882766,  0.95714114, -0.19859566,  0.94532566,
        0.96249652,  0.95011213,  0.81386371,  0.96929618,  0.61992473,
        0.98813976]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.0028610582616459155, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 3169, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([3.01055479, 3.12203407, 3.0264008 , 3.12006998, 2.78428316,
       2.99948287, 2.88092136, 3.10942459, 3.01663637, 2.9975512 ,
       3.02868986, 3.09360743, 3.03757024, 3.05662966, 2.94352937,
       3.08071446]), 'score_time': array([0.15223455, 0.15882945, 0.14932942, 0.15688038, 0.15576196,
       0.15134907, 0.20751095, 0.16367531, 0.1513176 , 0.20473051,
       0.19225454, 0.22587109, 0.15161085, 0.15361977, 0.16104054,
       0.15624738]), 'test_pearson_r': array([0.99218713, 0.98810188, 0.982712  , 0.99701051, 0.41020955,
       0.99339858, 0.9747851 , 0.98627078, 0.95573176, 0.75392498,
       0.99204344, 0.98780116, 0.84415328, 0.98750932, 0.98931502,
       0.98069331]), 'test_pearson_p': array([-5.63273107e-15, -1.30502735e-13, -2.11770166e-12, -5.67679898e-17,
       -1.14536721e-01, -1.43966973e-14, -1.62572108e-10, -2.37772995e-12,
       -7.94440981e-09, -7.42239651e-04, -5.30067631e-14, -1.04382347e-12,
       -3.92434909e-05, -1.23073613e-12, -4.14521613e-13, -2.54797881e-11]), 'test_spearman_r': array([0.98588957, 0.99019608, 0.97240975, 0.99261983, 0.63328424,
       0.98529412, 0.97352941, 0.95805765, 0.96241945, 0.83738065,
       0.98749107, 0.96470588, 0.87941176, 0.97058824, 0.93235294,
       0.97058824]), 'test_spearman_p': array([-4.65923278e-13, -3.07362545e-14, -6.84697631e-11, -3.13601186e-14,
       -8.45074340e-03, -3.83671954e-12, -2.27689766e-10, -5.47877174e-09,
       -2.56986058e-09, -5.18614608e-05, -1.24331763e-12, -1.66620775e-09,
       -7.18727304e-06, -4.72340113e-10, -1.45175444e-07, -4.72340113e-10]), 'test_kendall_r': array([0.93333333, 0.94117647, 0.89299501, 0.97467943, 0.60504202,
       0.93333333, 0.91666667, 0.84519568, 0.88614695, 0.74477639,
       0.94561497, 0.9       , 0.75      , 0.9       , 0.81666667,
       0.9       ]), 'test_kendall_p': array([-2.00290194e-07, -2.62815024e-11, -6.08366508e-07, -2.23973215e-07,
       -1.16143904e-03, -3.55879882e-10, -1.38948965e-09, -5.31661458e-06,
       -2.11823604e-06, -6.04438410e-05, -3.52984089e-07, -4.72556483e-09,
       -8.91848950e-06, -4.72556483e-09, -5.50848432e-07, -4.72556483e-09]), 'test_rmse': array([-0.08175277, -0.07317061, -0.12184816, -0.05131826, -0.75537134,
       -0.07397298, -0.19217143, -0.10419396, -0.16778127, -0.41358496,
       -0.07919674, -0.10427168, -0.30122888, -0.12350061, -0.09364268,
       -0.14584191]), 'test_mae': array([-0.06566196, -0.04798129, -0.08113329, -0.03429051, -0.31086369,
       -0.05739039, -0.10199589, -0.07379578, -0.09234401, -0.1951052 ,
       -0.06304024, -0.05998547, -0.15077085, -0.07879649, -0.06938114,
       -0.0853756 ]), 'test_r2': array([ 0.98401459,  0.97608398,  0.95885263,  0.99104217, -1.36927694,
        0.98618232,  0.9406817 ,  0.96890726,  0.90253475,  0.43583508,
        0.97700645,  0.97533327,  0.66072322,  0.96752706,  0.97164427,
        0.96096622]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.09939793013929618, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 4800, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 161, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([17.66068053, 16.75157142, 17.25629306, 16.72187638, 15.98646331,
       17.06937194, 17.31517601, 16.93503809, 16.13800359, 17.12457728,
       17.68867087, 17.5981102 , 17.16413283, 16.7838881 , 16.79602551,
       17.35273099]), 'score_time': array([0.1537025 , 0.159374  , 0.15302515, 0.15902448, 0.18287206,
       0.15708232, 0.15686727, 0.15545607, 0.20446682, 0.15531683,
       0.15310144, 0.14919806, 0.15807629, 0.15982103, 0.22032237,
       0.15478468]), 'test_pearson_r': array([0.96926918, 0.86321775, 0.99434025, 0.98931898, 0.96457674,
       0.97722021, 0.96099071, 0.62691413, 0.92575492, 0.90134847,
       0.9925487 , 0.99357803, 0.87137418, 0.98946171, 0.82835339,
       0.99218785]), 'test_pearson_p': array([-1.52292778e-10, -8.11634495e-06, -5.05023853e-16, -4.13450716e-13,
       -1.70876775e-09, -8.03702787e-11, -3.32422030e-09, -9.34875080e-03,
       -2.73578744e-07, -1.87202881e-06, -3.35317528e-14, -1.18763672e-14,
       -1.10428984e-05, -3.76432840e-13, -7.38005703e-05, -4.66458611e-14]), 'test_spearman_r': array([0.93382353, 0.85328379, 0.98773006, 0.96394434, 0.98749107,
       0.97647059, 0.96176471, 0.73823529, 0.91176471, 0.88365243,
       0.95511431, 0.97941176, 0.84956122, 0.9256809 , 0.85588235,
       0.98529412]), 'test_spearman_p': array([-4.32632699e-08, -1.33229485e-05, -1.64204527e-13, -1.93084048e-09,
       -1.24331763e-12, -1.00615044e-10, -2.89508013e-09, -1.09285081e-03,
       -8.81898574e-07, -5.65986076e-06, -8.73885027e-09, -3.98200979e-11,
       -3.11149595e-05, -2.75438509e-07, -2.34491569e-05, -3.83671954e-12]), 'test_kendall_r': array([0.83823529, 0.72198821, 0.94074074, 0.86193223, 0.94561497,
       0.91666667, 0.85      , 0.7       , 0.76666667, 0.80672269,
       0.87866878, 0.9       , 0.76799402, 0.82845913, 0.8       ,
       0.93333333]), 'test_kendall_p': array([-5.63431609e-08, -6.77950945e-05, -1.60289263e-07, -3.45008795e-06,
       -3.52984089e-07, -1.38948965e-09, -1.02027025e-07, -4.94106357e-05,
       -4.72451181e-06, -1.48492509e-05, -2.22140114e-06, -4.72556483e-09,
       -3.91635038e-05, -8.12917002e-06, -1.17934846e-06, -3.55879882e-10]), 'test_rmse': array([-0.1520865 , -0.33168287, -0.06722451, -0.10501738, -0.19467925,
       -0.11617007, -0.20534898, -0.55031017, -0.1856665 , -0.34055215,
       -0.08791531, -0.06886504, -0.26421604, -0.09220611, -0.35216441,
       -0.07697679]), 'test_mae': array([-0.0860672 , -0.15935354, -0.05622876, -0.08356108, -0.09431751,
       -0.07185029, -0.12527555, -0.20807111, -0.12614375, -0.12875092,
       -0.05614394, -0.05285704, -0.13165244, -0.07299668, -0.15268651,
       -0.04557736]), 'test_r2': array([0.93740395, 0.68841559, 0.98756569, 0.96724194, 0.92259152,
       0.95198909, 0.91705778, 0.12445696, 0.82339742, 0.78922038,
       0.98490907, 0.98655168, 0.70538391, 0.97715153, 0.63860498,
       0.9834815 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.014798641065097335, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 41, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 720, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([2.67000151, 2.97316527, 1.9991827 , 2.66865158, 2.06847763,
       1.9932394 , 2.25593114, 2.04924536, 2.2007637 , 1.89735103,
       2.17180061, 2.39272785, 2.64022636, 2.29466867, 2.82436323,
       2.87168503]), 'score_time': array([0.15198636, 0.15124655, 0.15523601, 0.15340161, 0.16201472,
       0.21978903, 0.15750432, 0.18173862, 0.18192077, 0.16666269,
       0.16607594, 0.16136312, 0.1978085 , 0.16817427, 0.14655471,
       0.19368029]), 'test_pearson_r': array([0.81767804, 0.97059122, 0.98405972, 0.99467971, 0.99557579,
       0.98688713, 0.95133048, 0.99693243, 0.92540919, 0.9440421 ,
       0.96983311, 0.99383685, 0.99561141, 0.88425884, 0.99217636,
       0.7355874 ]), 'test_pearson_p': array([-6.09273955e-05, -1.09930325e-10, -1.15661403e-12, -3.19014311e-15,
       -8.79298796e-16, -1.72675987e-12, -1.52441266e-08, -6.79827441e-17,
       -2.82357618e-07, -3.97050418e-08, -5.62923653e-10, -8.91089476e-15,
       -8.31009863e-16, -5.46568052e-06, -4.71266584e-14, -1.16355920e-03]), 'test_spearman_r': array([0.77696078, 0.94852941, 0.97177987, 0.99043441, 0.98749107,
       0.97352941, 0.93451092, 0.98823529, 0.82352941, 0.96688768,
       0.95      , 0.99115475, 0.98969179, 0.92941176, 0.97345556,
       0.70787363]), 'test_spearman_p': array([-2.43315331e-04, -6.85959526e-09, -8.09524658e-11, -1.91599035e-13,
       -1.24331763e-12, -2.27689766e-10, -1.16375217e-07, -8.10888105e-13,
       -8.83913936e-05, -1.07216639e-09, -1.83461727e-08, -1.10969762e-13,
       -3.22732424e-13, -1.94011895e-07, -2.32128210e-10, -2.15429806e-03]), 'test_kendall_r': array([0.66176471, 0.82352941, 0.9037285 , 0.96235152, 0.94561497,
       0.91666667, 0.87866878, 0.93333333, 0.65      , 0.87866878,
       0.86666667, 0.9536629 , 0.95801702, 0.8       , 0.90302594,
       0.6778302 ]), 'test_kendall_p': array([-8.21617886e-05, -1.25716600e-07, -4.80224875e-07, -2.18526649e-07,
       -3.52984089e-07, -1.38948965e-09, -2.22140114e-06, -3.55879882e-10,
       -2.15302431e-04, -2.22140114e-06, -3.98309214e-08, -3.28081900e-07,
       -2.70381998e-07, -1.17934846e-06, -1.32869973e-06, -2.61704221e-04]), 'test_rmse': array([-0.28373002, -0.12549932, -0.13138707, -0.06831247, -0.0600163 ,
       -0.09749251, -0.2242891 , -0.05974475, -0.19350518, -0.23638263,
       -0.12568869, -0.08131211, -0.07621465, -0.346042  , -0.09351635,
       -0.55317736]), 'test_mae': array([-0.1166182 , -0.09980815, -0.06776183, -0.04676734, -0.04205053,
       -0.06072234, -0.09822021, -0.04282641, -0.11357762, -0.16281422,
       -0.08277663, -0.05341205, -0.0554047 , -0.17289299, -0.07435961,
       -0.22265505]), 'test_r2': array([0.6617528 , 0.91792542, 0.96647441, 0.98759889, 0.99051185,
       0.96684672, 0.90244422, 0.99095829, 0.85035058, 0.80238725,
       0.93991127, 0.98719392, 0.98642172, 0.76732563, 0.97587159,
       0.42893766]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.06449854041502759, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 11, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 82, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([6.24757886, 6.06888628, 6.44903874, 5.73833156, 6.26229501,
       6.15437698, 6.44825649, 5.76473713, 6.89687657, 6.14396858,
       7.01462054, 6.30021214, 6.58004642, 6.30373549, 6.10367465,
       6.36753654]), 'score_time': array([0.15093112, 0.15341544, 0.15806842, 0.16628242, 0.16309881,
       0.20195079, 0.15134716, 0.1588552 , 0.15815902, 0.15382934,
       0.16443419, 0.1525948 , 0.16263413, 0.19547391, 0.16048217,
       0.14887691]), 'test_pearson_r': array([0.99312714, 0.71559923, 0.979175  , 0.92982634, 0.90824633,
       0.57341606, 0.99408778, 0.92164716, 0.85014201, 0.9660112 ,
       0.9850249 , 0.99288812, 0.99247591, 0.97150502, 0.96862354,
       0.99625303]), 'test_pearson_p': array([-2.15947358e-15, -1.23799975e-03, -8.46698501e-12, -1.86383371e-07,
       -1.14848520e-06, -2.02214140e-02, -6.66566725e-15, -3.94421738e-07,
       -3.03329271e-05, -1.28431734e-09, -4.35313666e-12, -2.42163396e-14,
       -3.58860147e-14, -3.79352972e-10, -7.38869044e-10, -2.75313155e-16]), 'test_spearman_r': array([0.95769485, 0.73218894, 0.96196391, 0.84915402, 0.91390753,
       0.63429009, 0.99117647, 0.89705882, 0.76436018, 0.93156758,
       0.99410462, 0.97417637, 0.98529412, 0.96688768, 0.95      ,
       0.97941176]), 'test_spearman_p': array([-1.61879123e-09, -8.32107073e-04, -7.38099260e-10, -3.16732673e-05,
       -7.46809230e-07, -8.31542258e-03, -1.09082915e-13, -2.49237597e-06,
       -5.64892036e-04, -1.57059247e-07, -6.53417850e-15, -1.91806935e-10,
       -3.83671954e-12, -1.07216639e-09, -1.83461727e-08, -3.98200979e-11]), 'test_kendall_r': array([0.87823476, 0.75097607, 0.87409806, 0.72803985, 0.86193223,
       0.69456675, 0.95      , 0.75      , 0.65548533, 0.81172259,
       0.97054189, 0.91538573, 0.91666667, 0.91214188, 0.86666667,
       0.93333333]), 'test_kendall_p': array([-9.29113866e-07, -3.00010062e-05, -1.12164993e-06, -8.82060896e-05,
       -3.45008795e-06, -1.83536177e-04, -7.63760478e-11, -8.91848950e-06,
       -4.33345797e-04, -1.23329686e-05, -2.02597451e-07, -1.03117352e-06,
       -1.38948965e-09, -8.99518934e-07, -3.98309214e-08, -3.55879882e-10]), 'test_rmse': array([-0.0748991 , -0.56372732, -0.13782952, -0.22399614, -0.24808839,
       -0.52090282, -0.0710676 , -0.22137165, -0.31540259, -0.16961424,
       -0.11495148, -0.08644168, -0.07933536, -0.13588687, -0.15569777,
       -0.06272348]), 'test_mae': array([-0.05172098, -0.18500258, -0.08238258, -0.12460004, -0.10053458,
       -0.17360938, -0.05680823, -0.14957707, -0.1663049 , -0.0980238 ,
       -0.06072168, -0.0673173 , -0.06335359, -0.0602288 , -0.12196065,
       -0.04438618]), 'test_r2': array([ 0.98526095,  0.41601493,  0.95425348,  0.8615218 ,  0.80518037,
       -0.02706595,  0.9870858 ,  0.81972204,  0.71350083,  0.90084373,
        0.96878696,  0.98112917,  0.98494912,  0.93558471,  0.92877781,
        0.99176624]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__objective': 'reg:squarederror', 'regressor__base_score': None, 'regressor__booster': None, 'regressor__callbacks': None, 'regressor__colsample_bylevel': None, 'regressor__colsample_bynode': None, 'regressor__colsample_bytree': None, 'regressor__device': None, 'regressor__early_stopping_rounds': None, 'regressor__enable_categorical': False, 'regressor__eval_metric': None, 'regressor__feature_types': None, 'regressor__gamma': None, 'regressor__grow_policy': None, 'regressor__importance_type': None, 'regressor__interaction_constraints': None, 'regressor__learning_rate': 0.04063744139158494, 'regressor__max_bin': None, 'regressor__max_cat_threshold': None, 'regressor__max_cat_to_onehot': None, 'regressor__max_delta_step': None, 'regressor__max_depth': 10, 'regressor__max_leaves': None, 'regressor__min_child_weight': None, 'regressor__missing': nan, 'regressor__monotone_constraints': None, 'regressor__multi_strategy': None, 'regressor__n_estimators': 307, 'regressor__n_jobs': -2, 'regressor__num_parallel_tree': None, 'regressor__random_state': None, 'regressor__reg_alpha': None, 'regressor__reg_lambda': None, 'regressor__sampling_method': None, 'regressor__scale_pos_weight': None, 'regressor__subsample': None, 'regressor__tree_method': None, 'regressor__validate_parameters': None, 'regressor__verbosity': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/EG-Ionic-Based Cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/EG-Ionic-Based Cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/EG-Ionic-Based Cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n03>
Subject: Job 295213: <XGBR_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311> in cluster <Hazel> Done

Job <XGBR_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:09:31 2025
Job was executed on host(s) <8*c205n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 07:14:08 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 07:14:08 2025
Terminated at Wed Mar 12 15:28:51 2025
Results reported at Wed Mar 12 15:28:51 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "XGBR_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "Mordred"                                       --regressor_type "XGBR"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "EG-Ionic-Based Cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   126950.50 sec.
    Max Memory :                                 6 GB
    Average Memory :                             4.90 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               10.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   29710 sec.
    Turnaround time :                            73160 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/XGBR_log Rg (nm)_Mordred_Trimer_EG-Ionic-Based Cluster_20250311.err> for stderr output of this job.

