


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037648243994668915), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.053780033620375235), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05028882395440104), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 689), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.053181056130842404), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1279), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08765172016915634), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 907), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002982813414076723), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09895906624421877), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 547), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.008869373795062e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059283523998748054), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 517), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 133), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06678326835004382), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 384), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02457164301341467), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 795), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 736), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09791425392343003), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 416), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.412584156736623e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000999999999999999), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 454), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05187182653636748), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 900), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 893), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03825646518716607), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09154307087473378), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1353), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005450994054316639), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08454374739691561), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1342), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.95973874161402e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.042643147342428925), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 384), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05942093220680307), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 143), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031435006221018046), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03844917619084737), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1517), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04129339139680381), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1194), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.043943510918937244), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 498), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.040086101629649165), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 860), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05707195075510223), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 478), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0450368898726829), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 763), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03270773885756035), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 817), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 9.353054573614766e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03648641670711656), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015606398852095653), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1261), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 260), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07544364498438869), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02244633985899998), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1278), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026614264004635724), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1262), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.069264117192433e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04425334114777568), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 389), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 193), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06743677159596716), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009101523960144065), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 866), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1229), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0780027978511777e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04449196338612525), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06958666223315721), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 919), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016208766934780874), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1094), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09448375555797635), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 455), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 128), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04114275568327361), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 312), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06254499187799303), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 301), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07398585884668384), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06827194552416803), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1804), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08679207956274305), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 673), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 391), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0958667401476242), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1665), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.608069074414161e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1169), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07065882549494959), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 323), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.389900189582546e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1159), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1318), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 454), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 414), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 88), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08053275856433584), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 282), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07113086019599159), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1095), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 446), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07916446380262593), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 568), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027364528220782454), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 454), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.7081473573792404e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06271870078424736), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1224), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08923621906379793), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 474), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006129994625062277), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 831), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07497624251989514), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0323064062836688), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 568), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09888759246811762), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3192633591921642e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 221), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 826), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027429324082132948), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 771), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020809303915245412), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04178479165827932), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1269), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1332), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0733729321526901), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 750), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0002720931892739402), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05081677496955501), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 456), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1022), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1007), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06634255278464385), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034743049078222975), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019377777590380795), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1575), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04308713509587144), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030227313517542088), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1238), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09222014080172836), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010792165496185547), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010937310490704732), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1192), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07307481036259943), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014044590250285796), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.5871897255499115e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032140095884176864), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07536529105637854), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 401), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 637), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 874), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 388), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 466), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02146199240478993), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 252), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03212964067647341), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1046), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05503433662071061), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 323), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021347274375419986), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.040603230371591165), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 171), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007742714534846418), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 362), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.033020325608739624), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08660822288705294), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 839), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00018263129135074281), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08830917507142588), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 912), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00027776135058248287), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 199), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 829), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1191), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037337949824485246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05795237161001075), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1126), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 154), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0207807708023907), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 848), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 525), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03910781405799067), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006344737233235765), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 133), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008195833690263842), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05941731175203791), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 336), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030093233243235915), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 931), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09456722489200085), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1511), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008864813644983824), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047526691139520544), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.792095225693102e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 149), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 791), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07057397889378351), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 111), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047204135713996224), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1191), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03548740408329543), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03065294581965204), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 887), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09395645670041573), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 105), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.45592592094051e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 475), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04248509762635561), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 809), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06675789678590618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008967042277596633), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1478), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05869710362516647), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 465), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.641163664938714e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0216681640472585), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1150), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06671529399038646), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 176), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05117859113314651), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1546), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017533993326680063), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 664), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.452083766588143e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 104), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014502354088947901), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.042341266087515136), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07759893575600174), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 320), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.1364354756324245e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09390325206888854), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 135), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007311986230371783), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04040401762191518), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 917), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0005046447339145553), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 684), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.61804819948614e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022671822170589558), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 921), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.9846518925912595e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 856), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09958416970902308), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 62), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.134764933412455e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 437), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 445), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1390), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 338), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03452652645024162), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1085), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06789988797087648), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04949385096244504), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 735), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 128), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007702956854887491), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048231774683857205), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 263), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00015502495579342284), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 257), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02863928133147156), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 872), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005432033789026776), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 974), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.6131709495871705e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03923258948264205), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1192), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4476355729858726e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0446084816247877), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024399675867619715), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 335), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008846287746808565), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 234), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00036469668537268414), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1984), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009355543139394852), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06253283635222225), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020947280889101055), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 792), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08525773940022452), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03111306763917886), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.039226067229951575), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 776), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05325605187986169), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 147), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04342106114681348), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 154), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1165), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006008630638990338), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03206460302533233), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022143263666994647), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1107), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09928557705462257), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.5614100443448455e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 531), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09558145772817908), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012021390259518785), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019955775224522933), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04084189280851203), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 115), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012653593914324562), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 883), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008293145413054948), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04536314892846101), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 834), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015601304899480176), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0611203002968105), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 410), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 957), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07617963330451032), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 214), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014044590250285796), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.5871897255499115e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014953037129543297), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1057), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 146), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07162326395279618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 299), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 270), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0865909678093537), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008403022518319437), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.948083073867074e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025947989926719008), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 325), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 90), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 74), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057557506471683256), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 411), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 131), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08092013242454617), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0568388407393631), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 37, 6: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 61.016691193992955, 'test_rmse': 169.84020886617148, 'test_r2': -0.06284782354797236, 'test_pearson_r': array([-0.00021953]), 'test_pearson_p_value': array([0.99829725]), 'test_spearman_r': -0.3628357617522443, 'test_spearman_p_value': 0.0002597138217572144, 'test_kendall_r': -0.2210546464926805, 'test_kendall_p_value': 0.001543971405537134, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 847, 'regressor__learning_rate': 0.08646479880356304, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 65.16572865146532, 'test_rmse': 171.64060167304027, 'test_r2': -0.0855007142611659, 'test_pearson_r': array([-0.04161636]), 'test_pearson_p_value': array([0.68567186]), 'test_spearman_r': -0.3680800223606271, 'test_spearman_p_value': 0.0002078468253203472, 'test_kendall_r': -0.22635126016376422, 'test_kendall_p_value': 0.0012128198811260677, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 66.81957867500704, 'test_rmse': 171.9231283618191, 'test_r2': -0.08907720286714649, 'test_pearson_r': array([-0.05542946]), 'test_pearson_p_value': array([0.58971114]), 'test_spearman_r': -0.3917266130718918, 'test_spearman_p_value': 7.252811022848131e-05, 'test_kendall_r': -0.22343218174174712, 'test_kendall_p_value': 0.0013847746691527428, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03825646518716607, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 61.668729937408244, 'test_rmse': 170.60851827798803, 'test_r2': -0.07248562389089885, 'test_pearson_r': array([-0.0071919]), 'test_pearson_p_value': array([0.94426162]), 'test_spearman_r': -0.21657442601394608, 'test_spearman_p_value': 0.03311248140781567, 'test_kendall_r': -0.09962951219563367, 'test_kendall_p_value': 0.15438895414802542, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 161, 'regressor__learning_rate': 0.09939793013929618, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 65.93192320276002, 'test_rmse': 172.37537169290627, 'test_r2': -0.09481436811538302, 'test_pearson_r': array([-0.04425926]), 'test_pearson_p_value': array([0.66685866]), 'test_spearman_r': -0.37052400783348244, 'test_spearman_p_value': 0.00018710603244620502, 'test_kendall_r': -0.22941006097678807, 'test_kendall_p_value': 0.0010396335854285634, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 260, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 69.21799807627164, 'test_rmse': 172.68975935224654, 'test_r2': -0.09881157496818949, 'test_pearson_r': array([-0.06012311]), 'test_pearson_p_value': array([0.55854962]), 'test_spearman_r': -0.4571109217289291, 'test_spearman_p_value': 2.517769920419732e-06, 'test_kendall_r': -0.3015103658552072, 'test_kendall_p_value': 1.630337112461125e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 71.69790676586247, 'test_ystd': 164.7422417759401, 'test_mae': 59.048423896551874, 'test_rmse': 171.5541570344006, 'test_r2': -0.08440759192902125, 'test_pearson_r': array([0.05268645]), 'test_pearson_p_value': array([0.60827961]), 'test_spearman_r': -0.06332937728564147, 'test_spearman_p_value': 0.537725984744023, 'test_kendall_r': -0.058912782295187226, 'test_kendall_p_value': 0.39913255188409613, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06958666223315721, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 33, 6: {'fit_time': array([22.61408377, 22.95470715, 21.10033464]), 'score_time': array([0.48223734, 0.51251888, 0.46670699]), 'test_pearson_r': array([0.95543589, 0.96984028, 0.93799298]), 'test_pearson_p': array([-8.22244437e-47, -2.84145757e-53, -2.07458194e-40]), 'test_spearman_r': array([0.81576909, 0.79402718, 0.78894305]), 'test_spearman_p': array([-6.45495688e-22, -7.52654300e-20, -1.87192889e-19]), 'test_kendall_r': array([0.68426816, 0.63676386, 0.64462285]), 'test_kendall_p': array([-7.88687157e-21, -4.77683396e-18, -1.89791040e-18]), 'test_rmse': array([-64.06743909, -26.19961689, -27.5073925 ]), 'test_mae': array([-25.5607111 , -14.87268943, -15.5986617 ]), 'test_r2': array([0.83671923, 0.93812089, 0.87467432]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 907, 'regressor__learning_rate': 0.08765172016915634, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([50.77558732, 54.7364645 , 50.02265954]), 'score_time': array([1.00234699, 1.00665998, 1.02433705]), 'test_pearson_r': array([0.92258934, 0.95202555, 0.97279662]), 'test_pearson_p': array([-6.44595016e-37, -5.78297368e-45, -3.96112725e-55]), 'test_spearman_r': array([0.70536687, 0.76613476, 0.83355275]), 'test_spearman_p': array([-2.39528267e-14, -8.36135560e-18, -2.32983155e-23]), 'test_kendall_r': array([0.55498977, 0.6349817 , 0.69842489]), 'test_kendall_p': array([-3.28249853e-14, -6.54890006e-18, -2.27873825e-21]), 'test_rmse': array([-45.38930381, -43.34521524, -27.82834445]), 'test_mae': array([-22.23276781, -22.14787578, -17.69240941]), 'test_r2': array([0.83606709, 0.88639509, 0.94251376]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([52.5983963 , 50.09493542, 50.64860296]), 'score_time': array([1.01004195, 0.99405313, 1.01308656]), 'test_pearson_r': array([0.98459334, 0.86991083, 0.92933761]), 'test_pearson_p': array([-3.72553533e-66, -1.62940969e-27, -4.19367888e-38]), 'test_spearman_r': array([0.895081  , 0.726475  , 0.83600196]), 'test_spearman_p': array([-1.47347455e-31, -2.44053516e-15, -1.31839885e-23]), 'test_kendall_r': array([0.7551215 , 0.58318541, 0.70325213]), 'test_kendall_p': array([-4.67413180e-25, -2.17590725e-15, -1.40710353e-21]), 'test_rmse': array([-37.87283901, -58.76039499, -26.41712755]), 'test_mae': array([-19.56054128, -24.87905532, -14.37588818]), 'test_r2': array([0.94303602, 0.71088694, 0.86167747]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([19.86026406, 19.88237548, 21.04858327]), 'score_time': array([0.46628475, 0.43582392, 0.43270254]), 'test_pearson_r': array([0.57615486, 0.93967361, 0.9211012 ]), 'test_pearson_p': array([-5.24975191e-09, -6.77294198e-41, -3.62551999e-36]), 'test_spearman_r': array([0.78134416, 0.81626549, 0.79862251]), 'test_spearman_p': array([-4.33121913e-19, -1.01326875e-21, -3.23059746e-20]), 'test_kendall_r': array([0.62731193, 0.66804079, 0.6684019 ]), 'test_kendall_p': array([-1.17626583e-17, -1.08299260e-19, -8.91446471e-20]), 'test_rmse': array([-76.54302621, -48.92885426, -56.19914621]), 'test_mae': array([-23.91812602, -24.06002576, -23.45785904]), 'test_r2': array([-0.31751318,  0.87484523,  0.83193689]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 860, 'regressor__learning_rate': 0.040086101629649165, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([50.01350212, 51.84456301, 53.50009775]), 'score_time': array([0.98460484, 1.03002191, 1.02355123]), 'test_pearson_r': array([0.97821524, 0.96839195, 0.96524838]), 'test_pearson_p': array([-8.09870241e-60, -1.97840224e-52, -9.95364412e-51]), 'test_spearman_r': array([0.78835139, 0.78720845, 0.88808161]), 'test_spearman_p': array([-1.27099984e-19, -2.53988478e-19, -4.31962001e-30]), 'test_kendall_r': array([0.63626838, 0.66310166, 0.7682826 ]), 'test_kendall_p': array([-3.37017542e-18, -1.88015659e-19, -1.53437582e-25]), 'test_rmse': array([-23.25336414, -34.48784193, -28.11841734]), 'test_mae': array([-15.06994048, -18.29704952, -14.91447823]), 'test_r2': array([0.95688395, 0.93705828, 0.92993707]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([19.69656682, 24.29102135, 26.6216383 ]), 'score_time': array([0.49098492, 0.53465986, 0.5133605 ]), 'test_pearson_r': array([0.93126565, 0.91390065, 0.79915189]), 'test_pearson_p': array([-4.94642138e-39, -1.22244001e-34, -2.92657453e-20]), 'test_spearman_r': array([0.87412381, 0.78055799, 0.73083627]), 'test_spearman_p': array([-2.15964425e-28, -7.97458851e-19, -1.37351308e-15]), 'test_kendall_r': array([0.71937125, 0.5672381 , 0.619057  ]), 'test_kendall_p': array([-8.47396963e-23, -1.18269002e-14, -4.74295469e-17]), 'test_rmse': array([ -27.67973107,  -47.08295167, -112.57614784]), 'test_mae': array([-17.5016039 , -29.25024951, -38.49981894]), 'test_r2': array([0.85120526, 0.82432546, 0.48491674]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 866, 'regressor__learning_rate': 0.009101523960144065, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([53.48899984, 52.16623521, 54.67150998]), 'score_time': array([1.02659583, 1.03684425, 1.06213784]), 'test_pearson_r': array([0.97908557, 0.70493592, 0.96950355]), 'test_pearson_p': array([-1.45754571e-60, -3.57774792e-14, -4.49876345e-53]), 'test_spearman_r': array([0.68599132, 0.79976599, 0.93492782]), 'test_spearman_p': array([-2.26755210e-13, -2.60859436e-20, -1.47750683e-39]), 'test_kendall_r': array([0.55925373, 0.68377837, 0.78948126]), 'test_kendall_p': array([-2.40205157e-14, -1.50021088e-20, -5.91719821e-27]), 'test_rmse': array([-33.81939807, -65.24329633, -31.63299145]), 'test_mae': array([-15.32105849, -22.4906831 , -17.30244544]), 'test_r2': array([0.94845107, 0.22815537, 0.93159945]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06827194552416803, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 6, 6: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 151.73511761501632, 'test_rmse': 187.20612065963775, 'test_r2': -1.0031206184004877, 'test_pearson_r': array([-0.84585377]), 'test_pearson_p_value': array([7.08367555e-05]), 'test_spearman_r': -0.7686378793664917, 'test_spearman_p_value': 0.0008130292699972544, 'test_kendall_r': -0.5924656593223203, 'test_kendall_p_value': 0.003376847833703112, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1665, 'regressor__learning_rate': 0.0958667401476242, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 146.68941247688574, 'test_rmse': 183.0964072033761, 'test_r2': -0.9161374480344022, 'test_pearson_r': array([-0.85021837]), 'test_pearson_p_value': array([5.94266327e-05]), 'test_spearman_r': -0.8325129277904577, 'test_spearman_p_value': 0.00011744369278165315, 'test_kendall_r': -0.7442084075352509, 'test_kendall_p_value': 0.0002175662869972926, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 414, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 148.65299102783555, 'test_rmse': 180.82707208979963, 'test_r2': -0.8689337827012436, 'test_pearson_r': array([-0.84083242]), 'test_pearson_p_value': array([8.61410487e-05]), 'test_spearman_r': -0.8288210744521408, 'test_spearman_p_value': 0.0001340552110412758, 'test_kendall_r': -0.7235359517703828, 'test_kendall_p_value': 0.0003244152381403842, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 147.4793164652919, 'test_rmse': 182.40667997890307, 'test_r2': -0.9017283952698936, 'test_pearson_r': array([-0.8490047]), 'test_pearson_p_value': array([6.24349055e-05]), 'test_spearman_r': -0.8103618077605564, 'test_spearman_p_value': 0.00024877501130782264, 'test_kendall_r': -0.6821910402406466, 'test_kendall_p_value': 0.0007000654061105579, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 221, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 142.07689812993843, 'test_rmse': 175.5347500414286, 'test_r2': -0.7611373352255328, 'test_pearson_r': array([-0.75903373]), 'test_pearson_p_value': array([0.00103268]), 'test_spearman_r': -0.8288210744521408, 'test_spearman_p_value': 0.0001340552110412758, 'test_kendall_r': -0.7235359517703828, 'test_kendall_p_value': 0.0003244152381403842, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 140.1407568051491, 'test_rmse': 181.334194537754, 'test_r2': -0.8794311851921675, 'test_pearson_r': array([-0.79037636]), 'test_pearson_p_value': array([0.00045311]), 'test_spearman_r': -0.7871147514666478, 'test_spearman_p_value': 0.0004967122852706799, 'test_kendall_r': -0.6340421968186235, 'test_kendall_p_value': 0.0017076226698716187, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1238, 'regressor__learning_rate': 0.030227313517542088, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 126.72399999999996, 'test_ystd': 132.27156534947335, 'test_mae': 140.7966590451066, 'test_rmse': 174.17432466936626, 'test_r2': -0.7339448664371107, 'test_pearson_r': array([-0.73181014]), 'test_pearson_p_value': array([0.00192675]), 'test_spearman_r': -0.8251292211138239, 'test_spearman_p_value': 0.00015255203815288357, 'test_kendall_r': -0.7235359517703828, 'test_kendall_p_value': 0.0003244152381403842, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 6, 6: {'fit_time': array([71.38212228, 80.01462054, 83.99515462, 79.95768595, 79.96740222,
       82.99054956, 83.56873417, 82.47579384, 82.42450023, 75.19168663,
       83.90273142, 75.12167335, 80.16682148, 84.89290285, 80.28801179,
       78.71859074, 70.12768292]), 'score_time': array([1.18553662, 0.55124068, 0.51251674, 0.74343204, 0.53766966,
       0.5243125 , 0.53393364, 0.51228452, 0.56521726, 0.55037689,
       0.50838113, 0.63195753, 0.55170679, 0.51678467, 0.5574069 ,
       1.11876726, 0.58064127]), 'test_pearson_r': array([0.97473756, 0.99555222, 0.9992234 , 0.99485259, 0.99335254,
       0.96604978, 0.96600923, 0.98067263, 0.92114053, 0.85448447,
       0.97082375, 0.96757049, 0.97888979, 0.96541924, 0.95111171,
       0.99521142, 0.83163762]), 'test_pearson_p': array([-1.64708757e-10, -9.12561487e-16, -4.55852486e-21, -2.53270517e-15,
       -1.36048056e-13, -5.10994971e-09, -5.14924971e-09, -1.35944243e-10,
       -1.09632725e-06, -4.97851941e-05, -1.93034485e-09, -3.80756031e-09,
       -2.40203274e-10, -5.75046008e-09, -5.27290930e-08, -1.62070167e-14,
       -1.21219912e-04]), 'test_spearman_r': array([0.7       , 0.92273756, 0.92058824, 0.95217097, 0.89285714,
       0.85      , 0.97142857, 0.95357143, 0.70714286, 0.50447308,
       0.88114423, 0.875     , 0.78105482, 0.8757823 , 0.71785714,
       0.94906204, 0.93571429]), 'test_spearman_p': array([-2.53509460e-03, -3.58624443e-07, -4.32041043e-07, -1.35244908e-08,
       -7.49473606e-06, -5.99588853e-05, -1.68707649e-09, -3.79244004e-08,
       -3.19548126e-03, -5.51468871e-02, -1.42868450e-05, -1.95226138e-05,
       -5.86793038e-04, -1.87787743e-05, -2.58116531e-03, -6.85211474e-08,
       -3.01064562e-07]), 'test_kendall_r': array([0.6       , 0.81172259, 0.81666667, 0.86193223, 0.75238095,
       0.71428571, 0.88571429, 0.86666667, 0.61904762, 0.49040729,
       0.765559  , 0.73333333, 0.65072515, 0.74642003, 0.6       ,
       0.86125388, 0.82857143]), 'test_kendall_p': array([-7.73831095e-04, -1.23329686e-05, -5.50848432e-07, -3.45008795e-06,
       -1.96940497e-05, -6.71036430e-05, -5.33772028e-08, -1.54339647e-07,
       -8.36408388e-04, -1.14046564e-02, -7.37568107e-05, -3.70285640e-05,
       -7.53715459e-04, -1.11210251e-04, -1.28586080e-03, -8.22244396e-06,
       -9.95137652e-07]), 'test_rmse': array([-17.78953172,  -8.17907441,  -8.28435028, -25.20900414,
       -24.73257583, -16.96373246, -19.48364943, -16.31271262,
       -34.71463914, -19.73271027, -48.05779558, -12.56972294,
       -21.33814652, -28.74550815, -19.24615978,  -6.10727701,
       -37.26073644]), 'test_mae': array([-11.80850926,  -5.46081726,  -6.2646572 , -13.85059873,
       -19.24632198, -12.93819537, -13.38930431, -10.54013302,
       -18.79405455, -10.24981011, -23.47050134,  -9.72964163,
       -13.48173603, -19.97393241, -13.95846146,  -4.41241076,
       -21.55368378]), 'test_r2': array([0.93565973, 0.9836504 , 0.99805945, 0.98634339, 0.98526404,
       0.91900055, 0.92876551, 0.95454499, 0.80206349, 0.54173318,
       0.94161061, 0.93418459, 0.94565712, 0.92814669, 0.90155777,
       0.98842151, 0.61138172]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1318, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([104.62871337, 114.01613545, 115.51842189, 113.29870415,
       110.27669883,  85.97132134, 111.12095094, 114.03669953,
       114.94715595, 116.45565701,  86.32411075, 115.38475347,
       116.83435106, 116.12784815, 115.25163722,  87.03572965,
       107.93441176]), 'score_time': array([1.20983338, 0.7673173 , 0.75054646, 0.74869847, 0.92113161,
       1.23595095, 0.75111818, 0.76648498, 0.78403878, 0.73074412,
       0.85563087, 0.75552177, 0.74786139, 0.71858954, 0.81318235,
       0.77276802, 0.83666396]), 'test_pearson_r': array([0.96562736, 0.98161152, 0.96299737, 0.99815618, 0.99080733,
       0.98778411, 0.97631612, 0.97970394, 0.98507871, 0.79945735,
       0.76761813, 0.98794844, 0.9872522 , 0.94584849, 0.96257874,
       0.96461888, 0.97808466]), 'test_pearson_p': array([-1.38793231e-09, -1.81600687e-11, -2.30921668e-09, -1.93312540e-18,
       -1.11213424e-12, -7.00901337e-12, -5.04234738e-10, -1.86381815e-10,
       -2.55605311e-11, -3.47862687e-04, -8.34372475e-04, -6.42090055e-12,
       -9.23463356e-12, -1.01187390e-07, -9.54036572e-09, -6.65967284e-09,
       -3.05773075e-10]), 'test_spearman_r': array([0.84621068, 0.65489348, 0.89477581, 0.61074336, 0.825     ,
       0.82395028, 0.89642857, 0.59285714, 0.96336053, 0.81680104,
       0.74173399, 0.91331582, 0.88471885, 0.81428571, 0.93214286,
       0.87298887, 0.875     ]), 'test_spearman_p': array([-3.59639386e-05, -5.90068619e-03, -2.88790476e-06, -1.19692931e-02,
       -1.53235571e-04, -1.58881993e-04, -6.06614302e-06, -1.98464220e-02,
       -8.33271134e-09, -2.02060461e-04, -1.54824624e-03, -1.98895645e-06,
       -1.18198790e-05, -2.19365828e-04, -4.24121823e-07, -2.15478338e-05,
       -1.95226138e-05]), 'test_kendall_r': array([0.6778302 , 0.54393782, 0.79498604, 0.44351853, 0.71428571,
       0.70814208, 0.79047619, 0.56190476, 0.88039285, 0.66986413,
       0.57416925, 0.78469798, 0.74642003, 0.75238095, 0.77142857,
       0.7596505 , 0.79047619]), 'test_kendall_p': array([-2.61704221e-04, -3.39579783e-03, -1.85653874e-05, -1.69119907e-02,
       -6.71036430e-05, -2.45851906e-04, -4.90647531e-06, -2.85822938e-03,
       -5.15437155e-06, -5.23662480e-04, -2.95027035e-03, -4.84614653e-05,
       -1.11210251e-04, -1.96940497e-05, -1.00560004e-05, -8.88818298e-05,
       -4.90647531e-06]), 'test_rmse': array([-10.91286683, -25.1991156 , -18.15345231, -13.20851949,
       -12.06759448, -32.82024466, -19.0861668 , -40.86932243,
       -11.90031558, -27.79933742, -34.4017455 , -36.1433924 ,
       -11.9241457 , -25.82268008, -22.95592991, -22.92292362,
       -17.35119249]), 'test_mae': array([ -7.34217953, -15.39737117, -13.01078476,  -7.65995431,
        -8.70772632, -20.45034807, -14.32225946, -16.77256266,
        -7.31184892, -16.83853773, -21.08880427, -21.09857529,
        -9.10209479, -13.19807508, -14.78350919, -15.83130434,
       -11.6926182 ]), 'test_r2': array([0.92014562, 0.90464674, 0.92277452, 0.99604364, 0.98096817,
       0.97325177, 0.94325995, 0.95663476, 0.95147527, 0.22510071,
       0.51367857, 0.97156192, 0.97231839, 0.85598748, 0.92612397,
       0.91268031, 0.94610274]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([83.33926344, 80.60962367, 88.80019855, 83.15059328, 87.80667639,
       62.45932794, 61.06053162, 86.44410229, 75.8959527 , 81.56089115,
       62.27800155, 81.83899212, 79.84565115, 82.53578591, 87.94888163,
       82.90626717, 74.31588459]), 'score_time': array([0.71120739, 0.75145769, 0.77928424, 0.72967982, 0.71852779,
       0.72581053, 1.12929368, 0.74283409, 0.7689507 , 0.74002862,
       0.81436944, 0.80179596, 0.73871446, 0.77585101, 0.73096371,
       0.73426294, 0.77667928]), 'test_pearson_r': array([0.9320489 , 0.9977568 , 0.91940557, 0.99852657, 0.99607025,
       0.90701201, 0.99585885, 0.94779117, 0.83345088, 0.87786381,
       0.99211685, 0.97234471, 0.98035791, 0.96292639, 0.97857469,
       0.42505392, 0.98983254]), 'test_pearson_p': array([-1.49682060e-07, -7.61828687e-18, -4.77609887e-07, -4.02679149e-19,
       -4.49388780e-15, -3.09047649e-06, -6.31419411e-15, -8.01765863e-08,
       -1.13505192e-04, -1.69132784e-05, -4.10863591e-13, -1.36802684e-09,
       -1.50879183e-10, -8.98631921e-09, -2.64286281e-10, -1.14244612e-01,
       -2.13626367e-12]), 'test_spearman_r': array([0.84621068, 0.94117647, 0.87647059, 0.93529412, 0.89642857,
       0.7596071 , 0.95714286, 0.925     , 0.73928571, 0.54642857,
       0.9230784 , 0.88571429, 0.81322642, 0.85714286, 0.71928974,
       0.53619324, 0.88193343]), 'test_spearman_p': array([-3.59639386e-05, -5.58893763e-08, -8.43911858e-06, -1.07201672e-07,
       -6.06614302e-06, -1.01834916e-03, -2.27367516e-08, -7.98746211e-07,
       -1.63551114e-03, -3.50666602e-02, -9.37073975e-07, -1.11998219e-05,
       -2.27008259e-04, -4.44600445e-05, -2.50675503e-03, -3.93570626e-02,
       -1.37083975e-05]), 'test_kendall_r': array([0.69456675, 0.83333333, 0.75      , 0.83333333, 0.75238095,
       0.65072515, 0.86666667, 0.79047619, 0.61904762, 0.40952381,
       0.81734548, 0.6952381 , 0.70814208, 0.71428571, 0.53408128,
       0.49761335, 0.74041884]), 'test_kendall_p': array([-1.83536177e-04, -2.44193725e-07, -8.91848950e-06, -2.44193725e-07,
       -1.96940497e-05, -7.53715459e-04, -1.54339647e-07, -4.90647531e-06,
       -8.36408388e-04, -3.58972374e-02, -2.47850122e-05, -1.17603724e-04,
       -2.45851906e-04, -6.71036430e-05, -6.19115400e-03, -9.98092520e-03,
       -1.33517664e-04]), 'test_rmse': array([-26.8771543 , -12.71820374, -30.19302495, -20.22454953,
       -19.99926909, -19.0819432 , -20.65174908, -23.91883063,
       -21.34667526, -24.7864011 , -18.88107769, -17.2728305 ,
       -13.34001216, -24.60300319, -14.38174477, -41.76531989,
       -14.14664267]), 'test_mae': array([-17.0748916 , -10.57132986, -19.28556731, -11.12958912,
       -14.12338651, -13.24473014, -13.74095372, -11.07129146,
       -11.02725427, -16.71055704, -11.20729732, -11.8219565 ,
        -9.53356301, -17.9224608 ,  -9.98851297, -15.7805098 ,
        -8.06929148]), 'test_r2': array([ 0.85902079,  0.99525563,  0.81244116,  0.99128071,  0.99071074,
        0.80399544,  0.98985222,  0.88097081,  0.62142431,  0.58217076,
        0.97113884,  0.94274352,  0.93474346,  0.91888642,  0.95649869,
       -1.11967201,  0.96702766]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([79.65300894, 84.82814598, 88.24889827, 78.40019774, 83.14558721,
       85.15233898, 76.43272018, 69.52412772, 64.5878973 , 66.86121535,
       77.92929173, 66.49489045, 74.77270341, 86.71402884, 74.9580512 ,
       68.23506379, 76.69154835]), 'score_time': array([0.72370768, 0.76542211, 0.74401927, 0.77198267, 0.72412443,
       0.7883954 , 0.71494341, 0.83576894, 0.82331657, 0.84223199,
       0.75466204, 0.8060081 , 0.76031804, 0.74169636, 0.73446178,
       0.76532674, 0.71540928]), 'test_pearson_r': array([0.96927435, 0.97727219, 0.9809213 , 0.99770762, 0.12437273,
       0.95123109, 0.99574823, 0.99668886, 0.97407906, 0.99174629,
       0.73018392, 0.92627624, 0.99106149, 0.92030577, 0.99745249,
       0.96044528, 0.99407485]), 'test_pearson_p': array([-6.39144091e-10, -7.91063744e-11, -2.34609100e-11, -8.86595846e-18,
       -6.58759710e-01, -5.19128711e-08, -7.49240334e-15, -1.47823000e-15,
       -9.01738266e-10, -5.53326791e-13, -1.99531094e-03, -7.16671996e-07,
       -9.27414485e-13, -1.17158188e-06, -2.69421834e-16, -1.36094804e-08,
       -6.45243573e-14]), 'test_spearman_r': array([0.70493029, 0.92941176, 0.87058824, 0.83889941, 0.40429338,
       0.69642857, 0.96071429, 0.88571429, 0.92857143, 0.92486731,
       0.47142857, 0.8       , 0.89544272, 0.87042037, 0.825     ,
       0.91785714, 0.92857143]), 'test_spearman_p': array([-2.29079931e-03, -1.94011895e-07, -1.14989348e-05, -4.87719394e-05,
       -1.35003094e-01, -3.92119051e-03, -1.30274898e-08, -1.11998219e-05,
       -5.86793827e-07, -8.07713014e-07, -7.60704292e-02, -3.42269833e-04,
       -6.43563639e-06, -2.43848726e-05, -1.53235571e-04, -1.41769685e-06,
       -5.86793827e-07]), 'test_kendall_r': array([0.57741091, 0.85      , 0.76666667, 0.73112616, 0.375     ,
       0.56190476, 0.86666667, 0.73333333, 0.77142857, 0.79811382,
       0.35238095, 0.6       , 0.765559  , 0.70814208, 0.6952381 ,
       0.84761905, 0.82857143]), 'test_kendall_p': array([-1.87273015e-03, -1.02027025e-07, -4.72451181e-06, -1.19358328e-04,
       -5.30245713e-02, -2.85822938e-03, -1.54339647e-07, -3.70285640e-05,
       -1.00560004e-05, -3.82953198e-05, -7.43349808e-02, -1.28586080e-03,
       -7.37568107e-05, -2.45851906e-04, -1.17603724e-04, -4.07346059e-07,
       -9.95137652e-07]), 'test_rmse': array([ -21.18815295,  -12.99014127,  -17.27401823,   -9.16301871,
       -125.54609767,  -21.65988105,  -30.4092867 ,  -17.43575499,
        -20.89594519,   -6.37282756,  -45.36316748,  -22.27049281,
        -10.67623069,  -27.89637844,  -17.42420542,  -23.68699872,
        -24.16425079]), 'test_mae': array([-11.68167392,  -7.40439216, -10.97765303,  -5.37616101,
       -55.69595801, -13.74957832, -20.90574279, -13.01944155,
       -15.78476614,  -5.2682782 , -26.80225778, -12.89272167,
        -7.43191735, -18.44607372, -12.36294964, -15.22634512,
       -18.00176564]), 'test_r2': array([ 0.91039079,  0.95463292,  0.9612276 ,  0.97712291, -5.20705234,
        0.9044896 ,  0.98072948,  0.99215345,  0.92512965,  0.98274278,
        0.49481136,  0.82076367,  0.97684217,  0.838125  ,  0.99238858,
        0.9190492 ,  0.98683265]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.020809303915245412, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([101.01444554, 102.15676594,  95.6256063 ,  99.3531661 ,
        99.52525592,  98.09130073, 100.41021299,  90.84011841,
        92.06709456, 106.15684485, 100.81558895,  95.11611915,
        95.84099364, 100.14517713,  99.48250937, 100.81768966,
        98.66305542]), 'score_time': array([0.73406124, 0.76204085, 0.77310491, 0.76854181, 0.83015537,
       0.71810937, 0.74169827, 1.84643769, 1.43718123, 0.73466468,
       0.77186632, 1.56632328, 1.03705931, 0.79915881, 0.74324179,
       0.73896527, 0.71608782]), 'test_pearson_r': array([0.9790593 , 0.96965504, 0.9864894 , 0.93590923, 0.98708576,
       0.98851887, 0.98950986, 0.97723116, 0.73651615, 0.80976005,
       0.9980754 , 0.99564321, 0.96741519, 0.93113104, 0.96948036,
       0.39841697, 0.99908802]), 'test_pearson_p': array([-4.48023961e-11, -5.86322942e-10, -2.12625930e-12, -1.00434668e-07,
       -1.00430543e-11, -4.69146015e-12, -2.61527598e-12, -3.91166234e-10,
       -1.73895615e-03, -2.53557821e-04, -4.36050991e-17, -8.77783103e-15,
       -3.92618289e-09, -4.65796276e-07, -2.57811799e-09, -1.41314584e-01,
       -3.40637468e-19]), 'test_spearman_r': array([0.74613707, 0.76991485, 0.62537145, 0.72259034, 0.70241315,
       0.92142857, 0.91071429, 0.93214286, 0.76071429, 0.82332137,
       0.94991055, 0.54382913, 0.98571429, 0.85305207, 0.96336053,
       0.46648812, 0.97142857]), 'test_spearman_p': array([-9.02425637e-04, -4.85760493e-04, -9.57716431e-03, -1.56699574e-03,
       -3.50129935e-03, -1.07131730e-06, -2.39502084e-06, -4.24121823e-07,
       -9.91128612e-04, -1.62346039e-04, -6.15603841e-08, -3.61213984e-02,
       -1.92909487e-11, -5.28662561e-05, -8.33271134e-09, -7.96275901e-02,
       -1.68707649e-09]), 'test_kendall_r': array([0.62762056, 0.58232514, 0.4810512 , 0.54393782, 0.55503028,
       0.77142857, 0.77142857, 0.80952381, 0.61904762, 0.68935288,
       0.83653846, 0.39424899, 0.94285714, 0.71505094, 0.88039285,
       0.40191848, 0.88571429]), 'test_kendall_p': array([-7.24551643e-04, -1.81982099e-03, -9.99871268e-03, -3.39579783e-03,
       -4.05595629e-03, -1.00560004e-05, -1.00560004e-05, -2.27466721e-06,
       -8.36408388e-04, -4.09762473e-04, -1.58942744e-05, -4.19555231e-02,
       -1.01554334e-09, -2.34514334e-04, -5.15437155e-06, -3.74329260e-02,
       -5.33772028e-08]), 'test_rmse': array([-15.68976431, -16.08452135, -12.70933035, -22.6489083 ,
       -33.87120095, -17.62292123, -13.10094622, -25.50959904,
       -31.30393083, -21.3156526 , -19.85079823,  -8.57586162,
       -19.60797935, -29.89516704, -13.77853302, -39.03884438,
        -9.40592595]), 'test_mae': array([-10.34574546,  -9.57896737,  -6.64343141, -13.98651542,
       -25.56910323, -12.05790463, -10.0831609 , -15.36716895,
       -18.90047327, -13.18551021, -14.59944656,  -6.03043724,
       -12.51484555, -19.41597737, -10.05772087, -19.91383233,
        -6.63568762]), 'test_r2': array([ 0.95685314,  0.92670905,  0.97221632,  0.79267439,  0.97428663,
        0.95231274,  0.97239475,  0.94650933,  0.19430784,  0.42410647,
        0.99447862,  0.99129485,  0.92935043,  0.84879689,  0.93501257,
       -0.83557923,  0.99766755]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([13.49534655, 17.08001304, 13.92847919, 14.23871899, 14.80831456,
       14.80677342, 13.55875635, 14.2473793 , 17.78576565, 15.006989  ,
       15.47463799, 12.59238052, 14.98273563, 16.44908714, 11.51344466,
       14.85393834, 13.95798612]), 'score_time': array([0.17312169, 0.15861344, 0.16287613, 0.16580296, 0.16803169,
       0.16770077, 0.1625452 , 0.16280437, 0.16175699, 0.1606729 ,
       0.16579366, 0.17072153, 0.17592525, 0.17818689, 0.17245507,
       0.17097902, 0.18338227]), 'test_pearson_r': array([0.98675461, 0.80447525, 0.99287132, 0.96855015, 0.99782993,
       0.94824837, 0.92841185, 0.99479326, 0.97645305, 0.9827888 ,
       0.89278692, 0.9788447 , 0.9967878 , 0.99223104, 0.87867689,
       0.96897632, 0.99245614]), 'test_pearson_p': array([-1.85203763e-12, -1.71654694e-04, -2.46185730e-14, -7.50905782e-10,
       -9.50926203e-17, -7.58055896e-08, -5.95134545e-07, -2.79000253e-14,
       -4.85744207e-10, -6.43008605e-11, -7.52540593e-06, -2.43531547e-10,
       -1.21397934e-15, -3.73786258e-13, -1.62276757e-05, -2.86427594e-09,
       -3.08928204e-13]), 'test_spearman_r': array([0.82352941, 0.67058824, 0.84241623, 0.93529412, 0.92101132,
       0.53571429, 0.86785714, 0.96428571, 0.77857143, 0.82931222,
       0.79642857, 0.8918681 , 0.95714286, 0.96693515, 0.6452192 ,
       0.74081462, 0.72857143]), 'test_spearman_p': array([-8.83913936e-05, -4.46720870e-03, -4.22038472e-05, -1.07201672e-07,
       -1.10770355e-06, -3.95669722e-02, -2.75180640e-05, -7.07230301e-09,
       -6.27350129e-04, -1.31740013e-04, -3.80467679e-04, -7.93644802e-06,
       -2.27367516e-08, -4.31271816e-09, -9.38991607e-03, -1.58056437e-03,
       -2.06520974e-03]), 'test_kendall_r': array([0.73333333, 0.46666667, 0.72271459, 0.8       , 0.8293571 ,
       0.39047619, 0.67619048, 0.86666667, 0.6       , 0.66986413,
       0.67619048, 0.765559  , 0.86666667, 0.89953183, 0.57416925,
       0.61176583, 0.6       ]), 'test_kendall_p': array([-1.62687222e-05, -1.14805971e-02, -1.04538557e-04, -1.17934846e-06,
       -2.27837340e-05, -4.62924754e-02, -1.99899920e-04, -1.54339647e-07,
       -1.28586080e-03, -5.23662480e-04, -1.99899920e-04, -7.37568107e-05,
       -1.54339647e-07, -3.20072183e-06, -2.95027035e-03, -1.71467279e-03,
       -1.28586080e-03]), 'test_rmse': array([-12.44791914, -39.69389846, -11.43235781, -22.5976048 ,
        -4.80039302, -21.22896463, -21.61449109, -27.03878396,
       -17.68716119, -12.35395261, -14.63016839, -18.71301373,
       -17.81815235, -12.80876824, -39.91744195, -13.18109475,
       -38.4181334 ]), 'test_mae': array([ -8.28736682, -28.18883354,  -8.9492934 , -15.83152253,
        -3.83598852, -11.65542429, -11.68271991, -16.87000309,
       -13.6465687 ,  -9.33851294,  -8.82477725, -10.93875829,
       -12.33529622,  -9.70861695, -24.84365866,  -8.1592622 ,
       -26.24905555]), 'test_r2': array([0.97045142, 0.52458704, 0.9819026 , 0.90527259, 0.99559979,
       0.78170912, 0.77113464, 0.9842488 , 0.94174751, 0.93283462,
       0.77448828, 0.92429798, 0.99108952, 0.98249035, 0.77121756,
       0.92766916, 0.98033362]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 401, 'regressor__learning_rate': 0.07536529105637854, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([58.70635438, 59.2949388 , 60.46858191, 59.53706264, 56.55453563,
       56.23388457, 57.37571073, 57.60471582, 58.55617785, 59.46279812,
       60.50748205, 53.93223572, 55.33789873, 60.40461564, 59.68482637,
       58.52618837, 60.39713335]), 'score_time': array([0.73788857, 0.75655699, 0.79135633, 0.73575759, 0.76958609,
       0.74692416, 0.76582098, 0.72888112, 0.77646017, 0.72682118,
       0.74454761, 0.71269178, 0.74267197, 0.74296379, 0.71988964,
       0.72846889, 0.71849036]), 'test_pearson_r': array([0.99482919, 0.98154546, 0.99724493, 0.91941118, 0.72009915,
       0.95509921, 0.98489   , 0.97752467, 0.97255589, 0.98254862,
       0.85217623, 0.97483436, 0.97378243, 0.97539027, 0.96864745,
       0.96153606, 0.99791873]), 'test_pearson_p': array([-2.61424316e-15, -1.86184185e-11, -3.20718029e-17, -4.77384363e-07,
       -2.46547960e-03, -3.06249476e-08, -2.77237683e-11, -3.59783714e-10,
       -1.30219786e-09, -7.03213399e-11, -5.48265983e-05, -7.45405512e-10,
       -9.70266137e-10, -6.45529442e-10, -3.06504733e-09, -1.13775488e-08,
       -7.24935419e-17]), 'test_spearman_r': array([0.63429009, 0.68436876, 0.8550407 , 0.72259034, 0.82037566,
       0.68811466, 0.97142857, 0.78571429, 0.9419128 , 0.73928571,
       0.86684574, 0.97408439, 0.93118893, 0.93214286, 0.90357143,
       0.89285714, 0.9       ]), 'test_spearman_p': array([-8.31542258e-03, -3.45239824e-03, -2.43675207e-05, -1.56699574e-03,
       -1.79407288e-04, -4.56993346e-03, -1.68707649e-09, -5.16454748e-04,
       -1.58129910e-07, -1.63551114e-03, -2.88427700e-05, -9.00544474e-10,
       -4.63322550e-07, -4.24121823e-07, -3.88050413e-06, -7.49473606e-06,
       -4.87197095e-06]), 'test_kendall_r': array([0.56067436, 0.64984109, 0.7113033 , 0.57741091, 0.70814208,
       0.57416925, 0.9047619 , 0.61904762, 0.82297593, 0.56190476,
       0.70814208, 0.89953183, 0.82297593, 0.82857143, 0.77142857,
       0.75238095, 0.77142857]), 'test_kendall_p': array([-2.53133322e-03, -5.01995782e-04, -1.27728091e-04, -1.87273015e-03,
       -2.45851906e-04, -2.95027035e-03, -1.65377563e-08, -8.36408388e-04,
       -2.03407556e-05, -2.85822938e-03, -2.45851906e-04, -3.20072183e-06,
       -2.03407556e-05, -9.95137652e-07, -1.00560004e-05, -1.96940497e-05,
       -1.00560004e-05]), 'test_rmse': array([-23.65178268, -40.37908506, -14.1699214 , -25.97903409,
       -27.19035199, -17.77131683, -15.59758003, -17.22133058,
       -17.10693959, -14.44365052, -34.37740223, -21.63927563,
       -21.91686528, -29.28232053, -21.38398197, -21.02529565,
       -24.5504534 ]), 'test_mae': array([-15.4282499 , -15.66505295, -10.08507132, -15.34315296,
       -12.07610182, -12.27362841, -10.02264739, -10.8445256 ,
       -12.7396921 , -11.88824895, -21.1491651 , -14.43377853,
       -11.88556131, -18.87206165, -12.87411781, -12.97044452,
       -13.27949692]), 'test_r2': array([0.9836574 , 0.96110576, 0.99442818, 0.82387497, 0.41986268,
       0.89494109, 0.96669051, 0.94912697, 0.93511062, 0.96462377,
       0.70612944, 0.93805821, 0.93996903, 0.88994853, 0.93071437,
       0.88209314, 0.98773836]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.040603230371591165, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 32, 6: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 66.00236159733521, 'test_rmse': 88.00518081053119, 'test_r2': -0.34951022308729063, 'test_pearson_r': array([0.38340078]), 'test_pearson_p_value': array([0.0003466]), 'test_spearman_r': 0.21007148508169354, 'test_spearman_p_value': 0.05663126078269323, 'test_kendall_r': 0.13720829684843755, 'test_kendall_p_value': 0.06843425211186636, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.033020325608739624, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 66.5511016501839, 'test_rmse': 91.67294549789162, 'test_r2': -0.4643404901143846, 'test_pearson_r': array([0.39486655]), 'test_pearson_p_value': array([0.00022062]), 'test_spearman_r': 0.34943700985699966, 'test_spearman_p_value': 0.0012038686329473405, 'test_kendall_r': 0.2354006559910798, 'test_kendall_p_value': 0.0017364130296922114, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 62.23432635813001, 'test_rmse': 84.1708078595244, 'test_r2': -0.23447611287740955, 'test_pearson_r': array([0.46155758]), 'test_pearson_p_value': array([1.12392471e-05]), 'test_spearman_r': 0.3606298705707316, 'test_spearman_p_value': 0.0008106848866699112, 'test_kendall_r': 0.251447996069635, 'test_kendall_p_value': 0.0008344137082919848, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.008195833690263842, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 66.82767214624005, 'test_rmse': 89.8589958039902, 'test_r2': -0.4069634698561182, 'test_pearson_r': array([0.35942518]), 'test_pearson_p_value': array([0.00084652]), 'test_spearman_r': 0.2544494486113595, 'test_spearman_p_value': 0.020268700426212583, 'test_kendall_r': 0.15102400718625944, 'test_kendall_p_value': 0.044757753207242554, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 111, 'regressor__learning_rate': 0.07057397889378351, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 65.26078292581013, 'test_rmse': 88.5191457213918, 'test_r2': -0.3653189804238617, 'test_pearson_r': array([0.38764071]), 'test_pearson_p_value': array([0.00029384]), 'test_spearman_r': 0.3218797177642253, 'test_spearman_p_value': 0.0030033636412516826, 'test_kendall_r': 0.19091568832325254, 'test_kendall_p_value': 0.01114571871837332, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1123, 'regressor__learning_rate': 0.05913781436124809, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 68.43038322750998, 'test_rmse': 93.0398633172047, 'test_r2': -0.5083350641610489, 'test_pearson_r': array([0.3507294]), 'test_pearson_p_value': array([0.00115098]), 'test_spearman_r': 0.27729683266570143, 'test_spearman_p_value': 0.011150000423383101, 'test_kendall_r': 0.17805098023472554, 'test_kendall_p_value': 0.018026319783144777, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 104, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 63.707134562345765, 'test_ystd': 75.7565433212244, 'test_mae': 67.33833821170468, 'test_rmse': 92.17859120521202, 'test_r2': -0.48053893373437395, 'test_pearson_r': array([0.38551754]), 'test_pearson_p_value': array([0.00031926]), 'test_spearman_r': 0.29274260570990357, 'test_spearman_p_value': 0.007238391315504317, 'test_kendall_r': 0.18690102334970154, 'test_kendall_p_value': 0.012893958264895694, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 856, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 33, 6: {'fit_time': array([18.97386456, 19.40986323, 20.3885994 ]), 'score_time': array([0.47342205, 0.42107916, 0.41792917]), 'test_pearson_r': array([0.95969035, 0.97618534, 0.92718057]), 'test_pearson_p': array([-1.26254225e-48, -1.58837736e-57, -1.41791296e-37]), 'test_spearman_r': array([0.79981773, 0.86247849, 0.75415289]), 'test_spearman_p': array([-1.54168224e-20, -1.43363118e-26, -5.20074228e-17]), 'test_kendall_r': array([0.6574689 , 0.74674242, 0.60656128]), 'test_kendall_p': array([-2.29931731e-19, -3.38616172e-24, -1.65841405e-16]), 'test_rmse': array([-58.64218122, -23.27083906, -29.64292045]), 'test_mae': array([-23.31700928, -12.77043661, -17.38702827]), 'test_r2': array([0.86320175, 0.95118219, 0.85445973]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 829, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([47.36201406, 50.1832571 , 46.65553236]), 'score_time': array([1.04924226, 1.00601459, 1.00090408]), 'test_pearson_r': array([0.9238028 , 0.95658878, 0.97205575]), 'test_pearson_p': array([-3.37872526e-37, -9.54068864e-47, -1.20618418e-54]), 'test_spearman_r': array([0.70872088, 0.7628696 , 0.85297325]), 'test_spearman_p': array([-1.59342797e-14, -1.39063515e-17, -1.93576216e-25]), 'test_kendall_r': array([0.55928162, 0.63168452, 0.72258425]), 'test_kendall_p': array([-2.08406870e-14, -9.67384093e-18, -9.25675012e-23]), 'test_rmse': array([-44.87639216, -40.91812102, -28.16520866]), 'test_mae': array([-21.37212917, -21.11858111, -17.61105885]), 'test_r2': array([0.83975113, 0.8987614 , 0.94111358]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([51.60483551, 48.9046824 , 49.36736941]), 'score_time': array([1.01255369, 0.97645116, 0.99530935]), 'test_pearson_r': array([0.98369397, 0.87096141, 0.92410003]), 'test_pearson_p': array([-4.07753042e-65, -1.18539161e-27, -7.57945478e-37]), 'test_spearman_r': array([0.89084323, 0.72724871, 0.8321796 ]), 'test_spearman_p': array([-7.24230949e-31, -2.20569649e-15, -3.19311038e-23]), 'test_kendall_r': array([0.75137267, 0.59086612, 0.70050183]), 'test_kendall_p': array([-7.97522152e-25, -9.33225853e-16, -2.01520440e-21]), 'test_rmse': array([-38.40410814, -58.43520069, -27.40233356]), 'test_mae': array([-20.2100444 , -24.11714986, -14.62285932]), 'test_r2': array([0.94142667, 0.71407813, 0.85116783]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([49.18579412, 47.00006747, 50.25165606]), 'score_time': array([1.0584383 , 0.98311114, 1.00945568]), 'test_pearson_r': array([0.65385597, 0.94153372, 0.94399006]), 'test_pearson_p': array([-6.58549331e-12, -1.88861485e-41, -3.27498527e-42]), 'test_spearman_r': array([0.79777891, 0.81656359, 0.81593162]), 'test_spearman_p': array([-2.26558016e-20, -9.52680817e-22, -1.08557192e-21]), 'test_kendall_r': array([0.65618383, 0.6665768 , 0.69980851]), 'test_kendall_p': array([-3.62504599e-19, -1.28597265e-19, -1.56781611e-21]), 'test_rmse': array([-64.00240848, -48.31931289, -47.05431112]), 'test_mae': array([-20.70966919, -22.90122621, -21.55386832]), 'test_r2': array([0.07883729, 0.87794409, 0.88218196]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.03548740408329543, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([49.52904558, 51.99244499, 53.63285732]), 'score_time': array([1.00906444, 1.01402402, 1.01620698]), 'test_pearson_r': array([0.97910959, 0.96810629, 0.96656224]), 'test_pearson_p': array([-1.38873463e-60, -2.87012482e-52, -2.02585689e-51]), 'test_spearman_r': array([0.79359236, 0.72490659, 0.88861001]), 'test_spearman_p': array([-4.92688819e-20, -2.99294795e-15, -3.58076332e-30]), 'test_kendall_r': array([0.64056024, 0.61154537, 0.76938014]), 'test_kendall_p': array([-2.00638522e-18, -8.89088047e-17, -1.31092992e-25]), 'test_rmse': array([-22.78798954, -34.95182805, -27.52216495]), 'test_mae': array([-14.62082061, -18.35245502, -14.71741373]), 'test_r2': array([0.95859246, 0.9353533 , 0.93287694]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([47.0302825 , 40.47406554, 46.08070016]), 'score_time': array([1.00935817, 0.99610662, 0.96743751]), 'test_pearson_r': array([0.94076456, 0.91499443, 0.81181782]), 'test_pearson_p': array([-1.08490455e-41, -7.31035150e-35, -2.50946324e-21]), 'test_spearman_r': array([0.86021448, 0.79922443, 0.73043042]), 'test_spearman_p': array([-1.37461365e-26, -2.88714260e-20, -1.44967070e-15]), 'test_kendall_r': array([0.70090052, 0.58294524, 0.62015803]), 'test_kendall_p': array([-9.20556003e-22, -2.18139013e-15, -4.17675782e-17]), 'test_rmse': array([ -25.48650496,  -46.54999576, -109.08620416]), 'test_mae': array([-16.09484232, -28.61054795, -37.85550227]), 'test_r2': array([0.87385082, 0.82828005, 0.51635764]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.014502354088947901, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([48.62405682, 51.14408517, 48.80952263]), 'score_time': array([1.00026178, 1.03948784, 0.99575329]), 'test_pearson_r': array([0.97806042, 0.70303733, 0.96960204]), 'test_pearson_p': array([-1.09079269e-59, -4.48123158e-14, -3.93508066e-53]), 'test_spearman_r': array([0.67130187, 0.80428578, 0.93478507]), 'test_spearman_p': array([-1.11393772e-12, -1.10495828e-20, -1.61517435e-39]), 'test_kendall_r': array([0.5538737 , 0.68322937, 0.79117641]), 'test_kendall_p': array([-4.23168830e-14, -1.60914134e-20, -4.81871098e-27]), 'test_rmse': array([-34.09632425, -64.43211626, -31.38903185]), 'test_mae': array([-15.80048045, -23.04207694, -17.15169933]), 'test_r2': array([0.94760341, 0.24722898, 0.93265042]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06789988797087648, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 25, 6: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 29.134064905627568, 'test_rmse': 37.14911402364296, 'test_r2': 0.31744386575390504, 'test_pearson_r': array([0.74395075]), 'test_pearson_p_value': array([1.87378863e-12]), 'test_spearman_r': 0.6339592600618709, 'test_spearman_p_value': 1.8716999093909052e-08, 'test_kendall_r': 0.4588150057901943, 'test_kendall_p_value': 1.0858536903583814e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 735, 'regressor__learning_rate': 0.04949385096244504, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 30.614606077684194, 'test_rmse': 39.11556288702621, 'test_r2': 0.24327057541713126, 'test_pearson_r': array([0.72535521]), 'test_pearson_p_value': array([1.20968448e-11]), 'test_spearman_r': 0.5695893241693305, 'test_spearman_p_value': 9.015951368903406e-07, 'test_kendall_r': 0.39029158226848326, 'test_kendall_p_value': 6.261198304349437e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 289, 'regressor__learning_rate': 0.07693173041362837, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 28.731186845241805, 'test_rmse': 40.642346138204694, 'test_r2': 0.18304338559244127, 'test_pearson_r': array([0.80979846]), 'test_pearson_p_value': array([5.42367393e-16]), 'test_spearman_r': 0.6009048183616347, 'test_spearman_p_value': 1.5226324077619634e-07, 'test_kendall_r': 0.4318979761532774, 'test_kendall_p_value': 5.469197123936982e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06253283635222225, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 25.262035810123965, 'test_rmse': 36.18715153797619, 'test_r2': 0.3523352644695886, 'test_pearson_r': array([0.7759932]), 'test_pearson_p_value': array([5.01806043e-14]), 'test_spearman_r': 0.6927536796811286, 'test_spearman_p_value': 2.2637747310509736e-10, 'test_kendall_r': 0.5325801693856197, 'test_kendall_p_value': 7.080924245069698e-10, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 32.82164207822136, 'test_rmse': 46.28736058015047, 'test_r2': -0.059659379671454404, 'test_pearson_r': array([0.72068499]), 'test_pearson_p_value': array([1.88729004e-11]), 'test_spearman_r': 0.5301784815117232, 'test_spearman_p_value': 6.615524221299437e-06, 'test_kendall_r': 0.3836022436237045, 'test_kendall_p_value': 8.715334253039948e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 115, 'regressor__learning_rate': 0.04084189280851203, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 26.042556188189604, 'test_rmse': 37.24007796174097, 'test_r2': 0.3140971367443559, 'test_pearson_r': array([0.80276035]), 'test_pearson_p_value': array([1.49498357e-15]), 'test_spearman_r': 0.6501410120375377, 'test_spearman_p_value': 6.109269005061705e-09, 'test_kendall_r': 0.49149684493630563, 'test_kendall_p_value': 1.2796760781939777e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 957, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 34.19891552734375, 'test_ystd': 44.9654841206328, 'test_mae': 24.5016099511163, 'test_rmse': 33.938743130600045, 'test_r2': 0.43031738999614955, 'test_pearson_r': array([0.78412375]), 'test_pearson_p_value': array([1.81961165e-14]), 'test_spearman_r': 0.6947697628814704, 'test_spearman_p_value': 1.9100249556513896e-10, 'test_kendall_r': 0.5185517171346343, 'test_kendall_p_value': 1.950226317646629e-09, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 74, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 25, 6: {'fit_time': array([56.1399467 , 52.1641767 , 51.19792247, 51.7419138 ]), 'score_time': array([0.92439389, 0.96969724, 0.92976046, 0.93887234]), 'test_pearson_r': array([0.98568403, 0.98556756, 0.98407085, 0.95458204]), 'test_pearson_p': array([-1.99131200e-50, -2.56583904e-50, -5.61594153e-49, -2.63177626e-34]), 'test_spearman_r': array([0.77197448, 0.89714479, 0.82012723, 0.82422578]), 'test_spearman_p': array([-5.14530655e-14, -4.91327797e-24, -6.42814655e-17, -5.91351926e-17]), 'test_kendall_r': array([0.63087492, 0.78181401, 0.66232432, 0.65904104]), 'test_kendall_p': array([-1.48732435e-13, -3.57306651e-20, -7.85169733e-15, -1.61201520e-14]), 'test_rmse': array([-26.53621382, -20.35310832, -21.25794857, -22.80610789]), 'test_mae': array([-14.08855132, -12.3519453 , -14.14055132, -14.03823471]), 'test_r2': array([0.96959953, 0.97056676, 0.96668442, 0.91000672]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([52.70462084, 54.73434472, 51.23734546, 52.80702281]), 'score_time': array([0.93055773, 0.93037629, 0.90330911, 0.93265033]), 'test_pearson_r': array([0.92051001, 0.98438076, 0.97425804, 0.91954616]), 'test_pearson_p': array([-2.10274180e-27, -3.03840576e-49, -1.78628578e-42, -7.76772241e-27]), 'test_spearman_r': array([0.70094428, 0.85838287, 0.85711791, 0.86207213]), 'test_spearman_p': array([-7.96384046e-11, -6.34476958e-20, -8.22940567e-20, -5.82423398e-20]), 'test_kendall_r': array([0.53948336, 0.75187877, 0.67631838, 0.72962308]), 'test_kendall_p': array([-2.51773535e-10, -1.20797247e-18, -2.02218755e-15, -1.79464511e-17]), 'test_rmse': array([-50.58727204, -27.01656907, -27.63964789, -30.50090418]), 'test_mae': array([-23.32782636, -13.90721497, -17.16693107, -18.86843007]), 'test_r2': array([0.82152376, 0.96722796, 0.94534273, 0.837542  ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([51.71496367, 52.26149035, 55.08097434, 54.28123665]), 'score_time': array([0.92124462, 0.91910028, 0.96817064, 0.92875552]), 'test_pearson_r': array([0.98590436, 0.98904507, 0.89792788, 0.9218345 ]), 'test_pearson_p': array([-1.22568776e-50, -4.57292463e-54, -3.90929802e-24, -3.28709337e-27]), 'test_spearman_r': array([0.8991323 , 0.87651205, 0.78413888, 0.80374292]), 'test_spearman_p': array([-2.74052758e-24, -1.12859390e-21, -1.11830093e-14, -1.30086038e-15]), 'test_kendall_r': array([0.77108514, 0.72731668, 0.63739862, 0.67066879]), 'test_kendall_p': array([-1.30385445e-19, -1.17829649e-17, -7.35529414e-14, -6.61215523e-15]), 'test_rmse': array([-27.06059994, -22.31727847, -33.45567017, -28.47099979]), 'test_mae': array([-17.29650057, -13.23725581, -17.10799757, -14.03340009]), 'test_r2': array([0.96839635, 0.9777059 , 0.78797001, 0.84738059]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([27.34998393, 25.43214297, 23.33504272, 26.7316134 ]), 'score_time': array([0.51928282, 0.52815819, 0.51539874, 0.53225303]), 'test_pearson_r': array([0.97100982, 0.93756352, 0.91214488, 0.95922978]), 'test_pearson_p': array([-7.18655988e-41, -1.35676297e-30, -4.32226731e-26, -9.92581102e-36]), 'test_spearman_r': array([0.87056619, 0.70782612, 0.79950602, 0.79151499]), 'test_spearman_p': array([-4.52158104e-21, -4.30401765e-11, -1.40459290e-15, -6.96192658e-15]), 'test_kendall_r': array([0.73257499, 0.58642273, 0.64318772, 0.67991079]), 'test_kendall_p': array([-1.05569806e-17, -5.34007917e-12, -4.38867115e-14, -2.15257585e-15]), 'test_rmse': array([-17.88657769, -54.85064612, -27.16684962, -43.83370536]), 'test_mae': array([-11.15221031, -25.01582518, -14.8083722 , -23.23417928]), 'test_r2': array([0.93781762, 0.87209636, 0.82379416, 0.91743488]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1107, 'regressor__learning_rate': 0.022143263666994647, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([51.72332668, 50.63371181, 53.85746121, 55.60110259]), 'score_time': array([0.87153816, 0.91723704, 0.93337226, 0.88899016]), 'test_pearson_r': array([0.98529119, 0.970138  , 0.98011998, 0.96311176]), 'test_pearson_p': array([-4.64445241e-50, -1.80379075e-40, -5.68731856e-46, -4.72726151e-37]), 'test_spearman_r': array([0.72752514, 0.8878763 , 0.7195602 , 0.83982278]), 'test_spearman_p': array([-6.67715770e-12, -6.44246472e-23, -1.44562278e-11, -4.24318805e-18]), 'test_kendall_r': array([0.58378031, 0.76197355, 0.59971203, 0.72668672]), 'test_kendall_p': array([-7.52072400e-12, -3.16850946e-19, -2.00380883e-12, -2.53454900e-17]), 'test_rmse': array([-20.82340947, -23.3377143 , -30.38970191, -30.25084559]), 'test_mae': array([-12.54651299, -14.87303331, -17.36704661, -15.47402864]), 'test_r2': array([0.96952879, 0.92637708, 0.95979218, 0.92483868]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([22.55627966, 20.43728089, 21.64839482, 22.29907084]), 'score_time': array([0.47865677, 0.51532173, 0.5036242 , 0.50623822]), 'test_pearson_r': array([0.89563309, 0.97371751, 0.9886791 , 0.92186604]), 'test_pearson_p': array([-7.59927113e-24, -3.40972465e-42, -1.28049767e-53, -3.24777781e-27]), 'test_spearman_r': array([0.84295299, 0.77684162, 0.89281578, 0.73099962]), 'test_spearman_p': array([-1.29031325e-18, -2.82602772e-14, -1.68319809e-23, -6.98057640e-12]), 'test_kendall_r': array([0.6782195 , 0.58313314, 0.7315666 , 0.60284895]), 'test_kendall_p': array([-1.49186432e-15, -7.31069405e-12, -8.27397715e-18, -2.41922157e-12]), 'test_rmse': array([-34.39677575, -28.98637918, -16.69190842, -61.94184223]), 'test_mae': array([-21.5630027 , -16.26802905, -12.00794107, -29.09641207]), 'test_r2': array([0.77614527, 0.94561449, 0.97606027, 0.84150995]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1057, 'regressor__learning_rate': 0.014953037129543297, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([51.5125773 , 51.24656487, 48.78475642, 51.77631283]), 'score_time': array([0.93598104, 0.96067309, 0.90468979, 0.92848182]), 'test_pearson_r': array([0.9855803 , 0.93858161, 0.96911011, 0.97256105]), 'test_pearson_p': array([-2.49592885e-50, -8.20965043e-31, -5.15778778e-40, -5.63666940e-41]), 'test_spearman_r': array([0.71211473, 0.85353167, 0.92143086, 0.91226905]), 'test_spearman_p': array([-2.90682845e-11, -1.69745519e-19, -1.47747956e-27, -1.01922155e-25]), 'test_kendall_r': array([0.61572899, 0.70912019, 0.78408234, 0.76029777]), 'test_kendall_p': array([-5.49214097e-13, -8.46510791e-17, -3.49543112e-20, -6.92287603e-19]), 'test_rmse': array([-33.70965022, -24.27633593, -20.52144634, -31.3199988 ]), 'test_mae': array([-15.54303031, -14.4472376 , -13.32186682, -17.22984707]), 'test_r2': array([0.96065923, 0.87217306, 0.93726986, 0.94026196]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0568388407393631, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 polymer_solvent HSP cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 polymer_solvent HSP cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 polymer_solvent HSP cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c203n11>
Subject: Job 294651: <NGB_Rg1 (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311> in cluster <Hazel> Done

Job <NGB_Rg1 (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311> was submitted from host <c040n04> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 18:17:47 2025
Job was executed on host(s) <6*c203n11>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 06:36:07 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 06:36:07 2025
Terminated at Sat Mar 15 10:42:13 2025
Results reported at Sat Mar 15 10:42:13 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_Rg1 (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "Rg1 (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 polymer_solvent HSP cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   1221447.00 sec.
    Max Memory :                                 3 GB
    Average Memory :                             2.89 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              26
    Max Threads :                                29
    Run time :                                   273984 sec.
    Turnaround time :                            318266 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_KM4 polymer_solvent HSP cluster_20250311.err> for stderr output of this job.

