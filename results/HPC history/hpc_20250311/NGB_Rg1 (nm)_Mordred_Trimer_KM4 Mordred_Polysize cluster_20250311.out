


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05413411458321734), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1569), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08015349245312903), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 731), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.7234755552187784e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05615457621685699), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 359), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06395942172813265), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 405), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05407434689846458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 318), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 731), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019590078278059024), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1341), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04570999368635358), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02405417177287524), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 816), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 111), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03233041886246041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 952), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.245284093936194e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.045059555592187016), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 550), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020218456622863108), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04504085036437611), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 528), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029243653616773075), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047626340395901294), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 386), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0923885455587301), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1568), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04057658568366354), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 901), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06414637272333784), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 488), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010033781940580572), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016555694143576324), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1293), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038292576182466696), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056969241478179486), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 279), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1367), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 898), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 227), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0110092648494717), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0413721514491698), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.049770161006207715), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1096), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0563226885575523), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 950), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06614436482225926), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0293582367294694), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1001), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 567), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.033619813189507415), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 465), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03782226093103016), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 510), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008615292061606208), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 946), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 434), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06395346879049656), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 965), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 344), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03881331843939434), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 423), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.355091695648423e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05809616296478744), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07750749496688243), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.002920550129509e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 344), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04064326721277686), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009999999999999979), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 520), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09315829332390965), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07069270422357696), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 869), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.060528466749023464), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 194), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 414), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 283), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1838), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 208), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02767955931583783), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 843), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1273), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056381686930333096), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1476), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021332802473132326), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1486), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.453188132587366e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06010226817911541), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01538485992931899), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1005), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1066), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 177), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020815347213835954), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016972615923126502), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 346), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 610), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0790550777653851), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1032), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03577374420158254), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 771), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027364528220782454), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 454), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.7081473573792404e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022433564482664772), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1151), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05840162450324329), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 473), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05621027878970438), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 166), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00019040900763950592), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07744263519966602), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 426), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.053658200062360634), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 391), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02841661683663833), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 329), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03737600513926793), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 462), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06146330231985726), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07842134916066296), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02476733697064631), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036712894158428634), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 717), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02859582097020288), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 452), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05355953036998701), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04756598243866374), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022602916402733826), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1746), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050406362243690245), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016737956975558858), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.060637189099635225), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 455), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1215), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03695845352649969), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 816), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 337), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09244999052076192), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 830), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4667533486727208e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07967874621236892), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 432), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07815699807888087), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 457), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 445), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01388371876574227), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1033), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0623739880031041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 428), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0720406603767031), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06116393319109904), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 288), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0764843412335089), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1898), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005137489615055784), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009625971105913587), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 401), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.167187559604034e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1185), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03129602625876201), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 438), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0958667401476242), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1665), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.608069074414161e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 218), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1052), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01598420733757511), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 147), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07238175987781605), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 550), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.738619820954209e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014139783021315753), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024066863393308758), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 628), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 759), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04764241074554005), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 279), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08631748032937246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 900), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.0625952779647054e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 519), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07964187161347609), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001049186876285738), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03800185987760903), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 299), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06594469007923703), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1973), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.7646203548794994e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 415), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 697), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1088), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.045702972354355054), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013399418692136017), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 863), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07464437691590221), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 77), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04141548317237126), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.018864279924567847), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 700), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09428005475263121), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1978), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 8.001912120838334e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014798641065097335), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 720), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00016456367256344735), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07528042694263225), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025045532349662707), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 954), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03247868093553103), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011878602601838862), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1402), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06449854041502759), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 82), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4103076091788285e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05239657460141556), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 633), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 135), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0917905772555596), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009149800389339992), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 966), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 163), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07132307953265901), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 601), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1247), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04029944439919187), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 515), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0876761215357732), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 168), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0727880237480246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 56), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0374514253812812e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0727880237480246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 56), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0374514253812812e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06287870280019955), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1391), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 649), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1034), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05301227017420293), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07071294797074358), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02453365433535472), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09993823866501116), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1473), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03727120154610384), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 291), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1301), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08543002547526243), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 758), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 747), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.062277073153799704), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01929852671453911), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009485618537191928), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04275976009188928), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 458), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04542157110950384), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 112), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0757443752347011), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1038), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 139), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024053188911901856), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 170), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07693173041362837), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.1200688201979395e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.8267408807864045e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047472954603885315), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 393), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05772610808911938), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 788), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.040987907223734917), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 363), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00017189075450633806), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030642093544378586), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06849382196514259), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022947271316154025), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1796), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07419664298153998), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1135), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 631), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06111482880034907), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 189), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048290192854296775), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 242), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06296608609266119), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 447), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1519), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06509272243167563), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 430), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 390), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.019069419576945183), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1423), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03668089443191294), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 297), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 410), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07450109414334935), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014044590250285796), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.5871897255499115e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07951017978314685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 235), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.036444192917692644), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 340), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 156), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0175336222106079), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1292), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03562545864494274), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1344), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06775574671741418), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 242), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 684), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 261), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 952), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08044090695648731), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 526), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06801087315337812), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 54, 6: {'test_mad': 59.97695622453599, 'test_ystd': 138.81078345008424, 'test_mae': 74.6895957954996, 'test_rmse': 152.6943124073054, 'test_r2': -0.21003883985089633, 'test_pearson_r': array([-0.02941514]), 'test_pearson_p_value': array([0.72915395]), 'test_spearman_r': -0.07272798753541411, 'test_spearman_p_value': 0.3914198545780406, 'test_kendall_r': -0.05410205267403466, 'test_kendall_p_value': 0.34688911451444626, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 359, 'regressor__learning_rate': 0.05615457621685699, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 59.97695622453599, 'test_ystd': 138.81078345008424, 'test_mae': 70.88446736279988, 'test_rmse': 149.30428552445005, 'test_r2': -0.15690616769296728, 'test_pearson_r': array([-0.02843445]), 'test_pearson_p_value': array([0.73784951]), 'test_spearman_r': -0.052105593384816025, 'test_spearman_p_value': 0.5394604596407456, 'test_kendall_r': -0.03828836852865715, 'test_kendall_p_value': 0.5055685362853678, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 816, 'regressor__learning_rate': 0.02405417177287524, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 59.97695622453599, 'test_ystd': 138.81078345008424, 'test_mae': 73.16215591625797, 'test_rmse': 151.3907946715158, 'test_r2': -0.18946735290734718, 'test_pearson_r': array([-0.0374899]), 'test_pearson_p_value': array([0.6589521]), 'test_spearman_r': 0.01290848971291269, 'test_spearman_p_value': 0.879248685423003, 'test_kendall_r': 0.0003080133142708719, 'test_kendall_p_value': 0.9957275053661595, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 550, 'regressor__learning_rate': 0.045059555592187016, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 59.97695622453599, 'test_ystd': 138.81078345008424, 'test_mae': 78.26398857300605, 'test_rmse': 150.07608945831353, 'test_r2': -0.16889795466982505, 'test_pearson_r': array([-0.04572609]), 'test_pearson_p_value': array([0.59029009]), 'test_spearman_r': -0.012544845734622473, 'test_spearman_p_value': 0.8826256276947927, 'test_kendall_r': -0.010380569953720437, 'test_kendall_p_value': 0.8569247118966489, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 59.97695622453599, 'test_ystd': 138.81078345008424, 'test_mae': 71.25691448887866, 'test_rmse': 150.43004548146754, 'test_r2': -0.17441817279723315, 'test_pearson_r': array([-0.00598569]), 'test_pearson_p_value': array([0.94384022]), 'test_spearman_r': 0.02165943363330685, 'test_spearman_p_value': 0.7987756108559554, 'test_kendall_r': 0.013228094034465733, 'test_kendall_p_value': 0.8179100773028843, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0413721514491698, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 59.97695622453599, 'test_ystd': 138.81078345008424, 'test_mae': 78.62065938332609, 'test_rmse': 153.60397106146613, 'test_r2': -0.2244991166988617, 'test_pearson_r': array([-0.03595005]), 'test_pearson_p_value': array([0.67213473]), 'test_spearman_r': -0.03269028627349114, 'test_spearman_p_value': 0.7003684564661787, 'test_kendall_r': -0.029199569232781757, 'test_kendall_p_value': 0.6121810937320726, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 567, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 59.97695622453599, 'test_ystd': 138.81078345008424, 'test_mae': 68.08430821756792, 'test_rmse': 146.34595815235585, 'test_r2': -0.11151429897648568, 'test_pearson_r': array([-0.02710755]), 'test_pearson_p_value': array([0.74966758]), 'test_spearman_r': 0.005975573194622835, 'test_spearman_p_value': 0.9439349832817551, 'test_kendall_r': -0.003802783052353031, 'test_kendall_p_value': 0.9473404684606078, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 423, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 50, 6: {'fit_time': array([46.73568845, 48.32925177]), 'score_time': array([1.1937511 , 1.20297146]), 'test_pearson_r': array([0.91720748, 0.95761836]), 'test_pearson_p': array([-5.32897684e-53, -1.65273172e-70]), 'test_spearman_r': array([0.7110018 , 0.78881886]), 'test_spearman_p': array([-2.61652993e-21, -1.26984316e-28]), 'test_kendall_r': array([0.58237756, 0.64236582]), 'test_kendall_p': array([-1.07937363e-22, -6.10735262e-27]), 'test_rmse': array([-59.03921417, -29.24601085]), 'test_mae': array([-27.31119434, -17.91197856]), 'test_r2': array([0.81280533, 0.91199245]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05407434689846458, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([47.86548042, 48.29782438]), 'score_time': array([1.21773744, 1.19695544]), 'test_pearson_r': array([0.95888751, 0.92752817]), 'test_pearson_p': array([-7.05276939e-72, -3.97745706e-56]), 'test_spearman_r': array([0.75774872, 0.77342823]), 'test_spearman_p': array([-1.72100475e-25, -6.51273278e-27]), 'test_kendall_r': array([0.61291757, 0.61817329]), 'test_kendall_p': array([-7.08267116e-25, -3.89823570e-25]), 'test_rmse': array([-41.64156965, -37.32125658]), 'test_mae': array([-21.60747155, -22.64427865]), 'test_r2': array([0.9064713 , 0.85909774]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([42.97279453, 47.57841802]), 'score_time': array([1.19533753, 1.17133164]), 'test_pearson_r': array([0.32448997, 0.90741588]), 'test_pearson_p': array([-1.65575924e-04, -1.18579212e-49]), 'test_spearman_r': array([0.81000571, 0.72690333]), 'test_spearman_p': array([-1.85428414e-31, -1.80868408e-22]), 'test_kendall_r': array([0.66535244, 0.574609  ]), 'test_kendall_p': array([-4.02298225e-29, -6.22208062e-22]), 'test_rmse': array([-145.59726034,  -31.05371429]), 'test_mae': array([-39.80540909, -19.41547841]), 'test_r2': array([0.0704468 , 0.81868616]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([4.57454896, 4.93294454]), 'score_time': array([0.18378615, 0.17879939]), 'test_pearson_r': array([0.83502017, 0.92340174]), 'test_pearson_p': array([-5.16344571e-35, -1.17370276e-54]), 'test_spearman_r': array([0.67047694, 0.79289056]), 'test_spearman_p': array([-2.65207661e-18, -4.23995762e-29]), 'test_kendall_r': array([0.54332388, 0.67258008]), 'test_kendall_p': array([-6.29665234e-20, -1.75575783e-29]), 'test_rmse': array([-72.36594617, -47.62313622]), 'test_mae': array([-28.92453037, -21.29407552]), 'test_r2': array([0.63770508, 0.83819579]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 279, 'regressor__learning_rate': 0.056969241478179486, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([45.21646357, 46.95706105]), 'score_time': array([1.21367192, 1.17929053]), 'test_pearson_r': array([0.96850523, 0.96381437]), 'test_pearson_p': array([-3.74249566e-79, -8.78736352e-75]), 'test_spearman_r': array([0.7629534, 0.7790683]), 'test_spearman_p': array([-5.14510906e-26, -1.59613924e-27]), 'test_kendall_r': array([0.6259956 , 0.65369884]), 'test_kendall_p': array([-6.06759938e-26, -6.83408492e-28]), 'test_rmse': array([-25.95618135, -35.64117071]), 'test_mae': array([-16.34490284, -19.33697371]), 'test_r2': array([0.93773409, 0.92800838]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([21.51695585, 20.24900484]), 'score_time': array([0.56235361, 0.5732367 ]), 'test_pearson_r': array([0.89088236, 0.91360745]), 'test_pearson_p': array([-1.06809095e-45, -1.78508767e-51]), 'test_spearman_r': array([0.7755286 , 0.75894438]), 'test_spearman_p': array([-2.43768791e-27, -2.01597013e-25]), 'test_kendall_r': array([0.62823778, 0.64590384]), 'test_kendall_p': array([-3.96339949e-26, -3.07719580e-27]), 'test_rmse': array([-50.54510751, -58.4739107 ]), 'test_mae': array([-23.5776483 , -25.27148698]), 'test_r2': array([0.75357712, 0.81095971]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 965, 'regressor__learning_rate': 0.06395346879049656, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([44.26392722, 51.3241601 ]), 'score_time': array([1.16040063, 1.21995211]), 'test_pearson_r': array([0.94991595, 0.92953165]), 'test_pearson_p': array([-1.62638193e-66, -7.14849105e-57]), 'test_spearman_r': array([0.70381907, 0.84845266]), 'test_spearman_p': array([-9.71497978e-21, -6.70505347e-37]), 'test_kendall_r': array([0.53775926, 0.66492733]), 'test_kendall_p': array([-1.57839555e-19, -7.32531248e-29]), 'test_rmse': array([-45.51444192, -40.47059096]), 'test_mae': array([-22.72357563, -21.72266376]), 'test_r2': array([0.87673996, 0.85817143]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.060528466749023464, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 7, 6: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 80.46381713362543, 'test_rmse': 143.21956071311604, 'test_r2': -38.13311393552963, 'test_pearson_r': array([-0.19579259]), 'test_pearson_p_value': array([0.42178905]), 'test_spearman_r': 0.03342129700716195, 'test_spearman_p_value': 0.8919579026679899, 'test_kendall_r': 0.047619891232869964, 'test_kendall_p_value': 0.7787795127934056, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 283, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 47.66526247282248, 'test_rmse': 95.16247969434673, 'test_r2': -16.277115357081787, 'test_pearson_r': array([-0.25015779]), 'test_pearson_p_value': array([0.30163835]), 'test_spearman_r': 0.1221978140029291, 'test_spearman_p_value': 0.6182292167241001, 'test_kendall_r': 0.11276014035691331, 'test_kendall_p_value': 0.5049287173165303, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06010226817911541, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 45.78482972481157, 'test_rmse': 96.38692458110948, 'test_r2': -16.72458108776816, 'test_pearson_r': array([-0.18827112]), 'test_pearson_p_value': array([0.44018372]), 'test_spearman_r': 0.25329825100164843, 'test_spearman_p_value': 0.2954075318201743, 'test_kendall_r': 0.2261944833561323, 'test_kendall_p_value': 0.18209835378642825, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.020815347213835954, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 57.184187744663156, 'test_rmse': 127.87247033231165, 'test_r2': -30.195635931339776, 'test_pearson_r': array([-0.23970479]), 'test_pearson_p_value': array([0.32294456]), 'test_spearman_r': 0.2515392353696925, 'test_spearman_p_value': 0.2988877848723471, 'test_kendall_r': 0.17857459212326232, 'test_kendall_p_value': 0.29215216207042904, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 391, 'regressor__learning_rate': 0.053658200062360634, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 56.383642177747596, 'test_rmse': 104.135769264921, 'test_r2': -19.689004394822128, 'test_pearson_r': array([-0.29238851]), 'test_pearson_p_value': array([0.22446736]), 'test_spearman_r': -0.1108179848132212, 'test_spearman_p_value': 0.6515236419908479, 'test_kendall_r': -0.1190497280821749, 'test_kendall_p_value': 0.48250784824955384, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 452, 'regressor__learning_rate': 0.02859582097020288, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 49.66590726802892, 'test_rmse': 109.37601897264999, 'test_r2': -21.823589983754797, 'test_pearson_r': array([-0.19905692]), 'test_pearson_p_value': array([0.41393526]), 'test_spearman_r': 0.16534746940385386, 'test_spearman_p_value': 0.49873399895718007, 'test_kendall_r': 0.14285967369860988, 'test_kendall_p_value': 0.39937964506269474, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.016737956975558858, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 17.112243767313018, 'test_ystd': 22.894445721077116, 'test_mae': 46.04144656623494, 'test_rmse': 90.08445389808944, 'test_r2': -14.48244097618551, 'test_pearson_r': array([-0.17193503]), 'test_pearson_p_value': array([0.48153428]), 'test_spearman_r': 0.08091471906997103, 'test_spearman_p_value': 0.7419325894690958, 'test_kendall_r': 0.05952486404108745, 'test_kendall_p_value': 0.7254852965988312, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 652, 'regressor__learning_rate': 0.028764781492881895, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 7, 6: {'fit_time': array([70.80680156, 81.10797215, 83.6916728 , 83.09906459, 81.13127708,
       76.78556848, 79.46573639, 82.30916953, 86.22398877, 82.19125605,
       77.39653277, 83.29981184, 83.23178768, 85.41427898]), 'score_time': array([1.65171599, 0.85212564, 0.77118134, 0.77040744, 0.8062501 ,
       1.44175196, 0.75498056, 0.74530768, 0.72743821, 0.75852966,
       0.82541704, 0.72598982, 0.7897532 , 0.77733135]), 'test_pearson_r': array([0.94052196, 0.99814109, 0.99455637, 0.99608796, 0.94678292,
       0.9826409 , 0.76533961, 0.97804013, 0.98492721, 0.97558346,
       0.98517443, 0.94653595, 0.98163702, 0.86135565]), 'test_pearson_p': array([-2.15459005e-09, -4.21758984e-22, -3.85654146e-18, -2.33782635e-19,
       -8.55279439e-10, -7.07429486e-14, -1.34356219e-04, -2.53846191e-12,
       -1.27778683e-13, -5.88376532e-12, -1.12030587e-13, -2.83656004e-09,
       -6.13732479e-13, -4.40258888e-06]), 'test_spearman_r': array([0.52917952, 0.94820018, 0.96666667, 0.84247485, 0.89425195,
       0.95789474, 0.66491228, 0.66838879, 0.93133724, 0.91950464,
       0.96231298, 0.7578731 , 0.95144679, 0.95872033]), 'test_spearman_p': array([-1.98164544e-02, -6.83243621e-10, -1.71650853e-11, -6.01488440e-06,
       -2.44254136e-07, -1.21353119e-10, -1.89583152e-03, -2.42778695e-03,
       -1.99988229e-08, -6.86926274e-08, -1.81783414e-10, -2.68700981e-04,
       -1.33296196e-09, -3.72370945e-10]), 'test_kendall_r': array([0.44574972, 0.85294118, 0.85964912, 0.7155456 , 0.7155456 ,
       0.85964912, 0.60233918, 0.58553899, 0.83934877, 0.79084967,
       0.89180807, 0.62951158, 0.84870258, 0.86928105]), 'test_kendall_p': array([-7.80172764e-03, -3.79206619e-07, -1.10425357e-09, -1.94725637e-05,
       -1.94725637e-05, -1.10425357e-09, -1.58318567e-04, -7.35579641e-04,
       -1.22329014e-06, -2.29491225e-07, -2.53540670e-07, -2.73836334e-04,
       -9.91848331e-07, -2.15825858e-09]), 'test_rmse': array([-23.69084828, -10.73151582, -25.18840353, -21.14029025,
       -18.10153302, -14.44889149, -41.63270102, -17.98841263,
       -31.95360084, -16.16495786, -18.27679973, -23.99047626,
       -13.60722726, -29.70405689]), 'test_mae': array([-14.75799492,  -7.83212306, -13.75016174, -14.53714041,
       -14.65653034,  -9.67215257, -19.2407991 ,  -9.2878547 ,
       -17.14108054, -10.68642487, -10.14177883, -15.34013567,
        -8.61074676, -15.64656886]), 'test_r2': array([0.87362084, 0.99611496, 0.98423367, 0.98776226, 0.88802832,
       0.96227272, 0.55698466, 0.94389122, 0.96955443, 0.94884761,
       0.96692897, 0.89332646, 0.96244053, 0.72039483]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([43.68749356, 44.28557062, 41.24781609, 46.01749206, 43.97056365,
       44.03495622, 44.25126934, 44.86952853, 47.05459285, 45.83370543,
       38.89362121, 43.0918622 , 40.60843682, 45.19739723]), 'score_time': array([0.41370487, 0.4434464 , 0.73690772, 0.43875122, 0.42473531,
       0.40710211, 0.41349745, 0.41676116, 0.40988922, 0.41899562,
       0.92477012, 0.43345857, 0.69793415, 0.41763258]), 'test_pearson_r': array([0.96064429, 0.9771903 , 0.99588703, 0.99165833, 0.98335411,
       0.87671928, 0.99512407, 0.94218002, 0.72180135, 0.98621627,
       0.99001759, 0.97627412, 0.95294653, 0.95286945]), 'test_pearson_p': array([-6.89974372e-11, -7.07470304e-13, -3.57609774e-19, -1.43735025e-16,
       -4.96428105e-14, -8.45905969e-07, -1.51517747e-18, -5.23477530e-09,
       -7.19939751e-04, -6.27472538e-14, -4.80515410e-15, -4.68708077e-12,
       -1.04201555e-09, -1.05549175e-09]), 'test_spearman_r': array([0.86918349, 0.87494524, 0.79719052, 0.76140351, 0.86265914,
       0.65555074, 0.90701754, 0.81095085, 0.753743  , 0.9251421 ,
       0.86319062, 0.88235294, 0.89886481, 0.86732071]), 'test_spearman_p': array([-1.36382213e-06, -9.49163201e-07, -4.37266431e-05, -1.52515637e-04,
       -2.01540143e-06, -2.31044950e-03, -8.55720926e-08, -4.44748678e-05,
       -3.03278092e-04, -3.91301914e-08, -3.98148195e-06, -1.26787153e-06,
       -3.99023672e-07, -3.15825744e-06]), 'test_kendall_r': array([0.71176471, 0.7155456 , 0.62941176, 0.60233918, 0.75073637,
       0.58651279, 0.80116959, 0.66448806, 0.57705228, 0.78688948,
       0.70820053, 0.79084967, 0.77777778, 0.747545  ]), 'test_kendall_p': array([-2.25088411e-05, -1.94725637e-05, -1.78226753e-04, -1.58318567e-04,
       -7.43302335e-06, -4.64037532e-04, -4.67377304e-08, -1.27546559e-04,
       -8.51059259e-04, -5.40069919e-06, -4.24489625e-05, -2.29491225e-07,
       -4.36097754e-07, -1.55211882e-05]), 'test_rmse': array([-11.31378427, -24.14291989, -20.43285012, -11.63145948,
       -35.73129603, -38.79898161, -17.96833116, -13.22088539,
       -36.38501852, -34.42310479,  -9.92145978, -22.82624339,
       -27.09702281, -24.2272073 ]), 'test_mae': array([ -7.88819799, -16.71541678, -13.02095145,  -7.00792058,
       -22.9658886 , -19.40149834, -13.57481334,  -9.84446057,
       -21.90579696, -18.99816132,  -6.76607118, -14.34789319,
       -18.43865483, -15.43013919]), 'test_r2': array([0.90254999, 0.92233989, 0.98818138, 0.98208434, 0.9611735 ,
       0.72829089, 0.98970484, 0.81673544, 0.39993533, 0.97004426,
       0.9801099 , 0.89237228, 0.90705856, 0.89397681]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1066, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([72.61707568, 83.08576417, 81.06394553, 72.14867663, 85.24397945,
       75.32839727, 84.44753313, 79.70730233, 85.9383533 , 84.26929927,
       77.88389397, 78.225986  , 86.69719625, 86.87611294]), 'score_time': array([0.78012443, 0.76576304, 0.77862501, 0.77589941, 0.756567  ,
       0.79657245, 0.76830602, 0.75217247, 0.74456143, 0.77194405,
       0.74409008, 0.74474168, 0.78349853, 0.78686213]), 'test_pearson_r': array([0.9292749 , 0.99168362, 0.99656916, 0.99760448, 0.90694826,
       0.99464067, 0.95462469, 0.43926731, 0.97467116, 0.95538291,
       0.98531964, 0.93237476, 0.69113369, 0.98960328]), 'test_pearson_p': array([-9.03371487e-09, -1.40085137e-16, -7.67347553e-20, -3.63492025e-21,
       -8.60947860e-08, -3.37837234e-18, -2.26623836e-10, -6.81728609e-02,
       -7.86789880e-12, -6.86286527e-10, -1.03594615e-13, -1.77642700e-08,
       -1.49148657e-03, -6.64404447e-15]), 'test_spearman_r': array([0.8924968 , 0.91970171, 0.94210526, 0.9754386 , 0.8723125 ,
       0.94866179, 0.90478289, 0.42746521, 0.74896734, 0.77296182,
       0.93133724, 0.75052122, 0.46336429, 0.92768645]), 'test_spearman_p': array([-2.79211735e-07, -2.57096149e-08, -1.72238365e-09, -1.31906436e-12,
       -1.12254330e-06, -6.34189344e-10, -1.03899466e-07, -7.68199953e-02,
       -3.47856107e-04, -1.69139162e-04, -1.99988229e-08, -3.32784304e-04,
       -5.27858620e-02, -2.99166445e-08]), 'test_kendall_r': array([0.73900611, 0.79765739, 0.83625731, 0.90643275, 0.66862458,
       0.86803892, 0.76246662, 0.32787061, 0.63817171, 0.60784314,
       0.83934877, 0.61138004, 0.39869281, 0.82238622]), 'test_kendall_p': array([-1.02950287e-05, -1.92681603e-06, -5.55516932e-09, -2.27996852e-11,
       -6.58512835e-05, -2.20656528e-07, -5.34143245e-06, -5.80599365e-02,
       -2.33765259e-04, -2.25736469e-04, -1.22329014e-06, -4.67004659e-04,
       -2.14044178e-02, -2.12120439e-06]), 'test_rmse': array([-26.09915121, -25.75571019, -21.83393626, -13.74387991,
       -17.82549645, -21.02840095, -21.38397459, -67.91448188,
       -26.79620717, -21.44924161, -15.49290783, -27.21198191,
       -39.2788346 , -14.25970678]), 'test_mae': array([-16.96054386, -17.49226914, -15.59115958,  -9.2612879 ,
       -12.18688422, -12.97201683, -10.14833269, -35.37387845,
       -15.28359713, -13.99832127, -10.24751295, -14.26760839,
       -18.50089668,  -9.15982643]), 'test_r2': array([ 0.85783119,  0.97791902,  0.98832129,  0.99479734,  0.81300278,
        0.98701318,  0.89568125, -2.53803521,  0.93412673,  0.90011973,
        0.96392115,  0.84510717,  0.3949903 ,  0.96283886]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([15.18142748, 15.68784118, 15.37502885, 15.34077168, 10.9697516 ,
       15.0723443 , 13.28380227, 11.55478764, 15.75928283, 15.97314358,
       12.94581389, 16.05483341, 14.87930036, 11.78875542]), 'score_time': array([0.20501733, 0.1836729 , 0.20061684, 0.19726348, 0.4039247 ,
       0.18831396, 0.18941379, 0.19342923, 0.18675566, 0.19286919,
       0.1859045 , 0.19068217, 0.19254994, 0.19264913]), 'test_pearson_r': array([0.97654969, 0.96986232, 0.99282241, 0.28087338, 0.96057518,
       0.99535634, 0.99440778, 0.96465887, 0.74771076, 0.93368638,
       0.97607476, 0.99279226, 0.96162867, 0.99088648]), 'test_pearson_p': array([-8.93329650e-13, -7.36764436e-12, -4.02187932e-17, -2.44092762e-01,
       -7.00176208e-11, -1.00143854e-18, -4.84613254e-18, -1.09516987e-10,
       -3.60460242e-04, -1.52517799e-08, -5.00844307e-12, -3.58078772e-16,
       -2.09476581e-10, -2.32537056e-15]), 'test_spearman_r': array([0.78182616, 0.92105263, 0.97849944, 0.62950434, 0.76140351,
       0.9       , 0.88898648, 0.96797572, 0.48707446, 0.64912281,
       0.96231298, 0.82249742, 0.87822497, 0.9380805 ]), 'test_spearman_p': array([-7.68808525e-05, -2.23613329e-08, -4.29972653e-13, -3.87626125e-03,
       -1.52515637e-04, -1.54979345e-07, -3.62401600e-07, -5.03056755e-11,
       -4.03563608e-02, -3.55837394e-03, -1.81783414e-10, -2.79261707e-05,
       -1.64827026e-06, -8.93749440e-09]), 'test_kendall_r': array([0.66470588, 0.8245614 , 0.91495995, 0.53191872, 0.6374269 ,
       0.75438596, 0.73900611, 0.87501894, 0.31684721, 0.45098039,
       0.86557842, 0.64705882, 0.73856209, 0.85620915]), 'test_kendall_p': array([-7.55157152e-05, -1.17067315e-08, -4.73213851e-08, -1.85539455e-03,
       -5.28075820e-05, -5.24238695e-07, -1.02950287e-05, -4.53574602e-07,
       -6.83138632e-02, -8.53955139e-03, -5.63141283e-07, -6.99211859e-05,
       -2.52158005e-06, -5.28843419e-09]), 'test_rmse': array([-19.17304406, -17.43270867, -10.46028786, -95.19389539,
       -20.05598889, -25.04949796, -19.33196986, -18.03551687,
       -41.01555311, -22.36628648, -16.99024768, -24.01298996,
       -19.51995334, -27.81548482]), 'test_mae': array([-11.17069339, -10.77029355,  -5.99645213, -39.32403058,
       -10.72953147, -18.31014553, -14.79147356, -10.33547696,
       -23.18836506, -16.05190442, -10.87070182, -15.16549517,
       -13.81978556, -19.64307325]), 'test_r2': array([ 0.92229225,  0.93856529,  0.98412085, -3.09033015,  0.92160895,
        0.98425988,  0.98832654,  0.92495537,  0.52749222,  0.8008565 ,
        0.93783116,  0.983712  ,  0.9240934 ,  0.9800377 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 462, 'regressor__learning_rate': 0.03737600513926793, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([71.43236828, 73.31453443, 73.41453028, 74.48411775, 68.82675695,
       72.62662101, 77.74484515, 71.61664844, 72.65558147, 77.01335478,
       73.42832279, 75.62214661, 73.01175022, 71.65978718]), 'score_time': array([1.58569503, 0.78540659, 0.78037548, 0.75073075, 0.92173004,
       0.79662633, 0.72614837, 0.85050416, 0.77157283, 0.78955936,
       0.76117301, 0.74445629, 0.74317431, 0.7760427 ]), 'test_pearson_r': array([0.98301712, 0.98220155, 0.97687335, 0.9877456 , 0.9750528 ,
       0.98305994, 0.97449521, 0.7708285 , 0.99680723, 0.98559815,
       0.80209891, 0.94677166, 0.65193721, 0.99883155]), 'test_pearson_p': array([-5.87961029e-14, -8.73582843e-14, -7.94665179e-13, -3.72963651e-15,
       -1.50394194e-12, -5.75563774e-14, -1.81137901e-12, -1.80951323e-04,
       -5.37480589e-19, -8.89543047e-14, -6.22474439e-05, -2.74009751e-09,
       -3.37050034e-03, -1.74032861e-22]), 'test_spearman_r': array([0.79473684, 0.88049345, 0.55072469, 0.89161922, 0.84912281,
       0.94385965, 0.79859595, 0.66012397, 0.94318182, 0.83987648,
       0.84400871, 0.92363261, 0.5748194 , 0.96904025]), 'test_spearman_p': array([-4.79996363e-05, -6.58160535e-07, -1.45413470e-02, -2.98268741e-07,
       -4.26969176e-06, -1.33399558e-09, -4.14293850e-05, -2.86967312e-03,
       -4.56624394e-09, -1.29786353e-05, -1.06747592e-05, -4.56845669e-08,
       -1.25819564e-02, -3.85140601e-11]), 'test_kendall_r': array([0.67251462, 0.74339194, 0.38348249, 0.77419688, 0.70760234,
       0.83625731, 0.69208509, 0.49342105, 0.82236842, 0.67764624,
       0.75659532, 0.80392157, 0.51633987, 0.86928105]), 'test_kendall_p': array([-1.56889756e-05, -9.95689890e-06, -2.27127316e-02, -3.82034206e-06,
       -4.07434860e-06, -5.55516932e-09, -3.61461714e-05, -4.44255379e-03,
       -2.12143788e-06, -9.34442457e-05, -1.28761880e-05, -1.16879681e-07,
       -2.24413905e-03, -2.15825858e-09]), 'test_rmse': array([-13.49033677, -15.56023366, -12.47798595, -29.54843246,
       -18.92276031, -17.99162938, -19.59713439, -28.23270783,
       -32.18962074, -16.20314448, -33.68117095, -25.61636091,
       -38.13300228,  -9.69396094]), 'test_mae': array([ -8.28267654,  -9.24984962,  -9.91107712, -20.01821522,
       -13.18106343, -12.34335607, -10.44340352, -17.27837551,
       -21.02153075,  -9.51264787, -16.37782942, -17.53018328,
       -18.0961339 ,  -6.85616623]), 'test_r2': array([0.96475644, 0.95977916, 0.9226606 , 0.9753436 , 0.93620176,
       0.96313115, 0.9427629 , 0.39142677, 0.98344409, 0.96970024,
       0.61791244, 0.88818546, 0.1779998 , 0.99713958]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([29.3463645 , 25.96810484, 29.65680075, 22.97756171, 24.96013165,
       27.68984222, 26.95598459, 25.64664268, 33.03956485, 30.65670872,
       26.27060723, 26.64574575, 28.07605386, 26.42286372]), 'score_time': array([0.32448912, 0.32146645, 0.32629895, 0.3464036 , 0.34290099,
       0.32141876, 0.32754421, 0.31480527, 0.32007575, 0.31832933,
       0.31172729, 0.3207624 , 0.32214785, 0.31998849]), 'test_pearson_r': array([0.94929692, 0.81212816, 0.98162201, 0.99331094, 0.95063783,
       0.99253101, 0.98442367, 0.974062  , 0.96677978, 0.99394448,
       0.98196608, 0.89641147, 0.99014699, 0.9882307 ]), 'test_pearson_p': array([-5.71754824e-10, -2.40980485e-05, -1.14482241e-13, -2.21274170e-17,
       -4.57366358e-10, -5.63524351e-17, -2.83314709e-14, -9.49722310e-12,
       -6.71992943e-11, -8.91986845e-17, -5.31622230e-13, -4.79527984e-07,
       -4.33063239e-15, -1.78403541e-14]), 'test_spearman_r': array([0.77017544, 0.70701754, 0.94293276, 0.92159485, 0.61578947,
       0.89473684, 0.89649123, 0.82902893, 0.7874097 , 0.84254012,
       0.97936017, 0.61085345, 0.94263679, 0.7997936 ]), 'test_spearman_p': array([-1.14597553e-04, -7.11926656e-04, -1.52834433e-09, -2.11287327e-08,
       -5.00051699e-03, -2.35296190e-07, -2.05230922e-07, -2.11472283e-05,
       -1.05010393e-04, -1.14497258e-05, -1.55232323e-12, -7.08283103e-03,
       -4.92009922e-09, -6.77596194e-05]), 'test_kendall_r': array([0.61403509, 0.52046784, 0.85295593, 0.8275129 , 0.47368421,
       0.75438596, 0.76608187, 0.65131579, 0.63398693, 0.68197088,
       0.92156863, 0.48847279, 0.85812787, 0.67320261]), 'test_kendall_p': array([-1.11108349e-04, -1.41309223e-03, -3.79170253e-07, -1.01352284e-06,
       -4.05746556e-03, -5.24238695e-07, -2.97692997e-07, -1.73157207e-04,
       -1.04837257e-04, -8.07679747e-05, -2.92550870e-11, -4.96954017e-03,
       -8.02606781e-07, -2.96712369e-05]), 'test_rmse': array([-22.80395113, -37.9891788 , -19.1052787 ,  -8.38014127,
       -17.5122845 , -28.43023756, -13.41388091, -11.80597433,
       -13.21449395, -19.65498558, -15.7791433 , -35.45826211,
       -19.35299779, -42.25409579]), 'test_mae': array([-13.21048921, -23.75517844, -12.45251207,  -5.66735332,
        -9.16363324, -18.77093149,  -9.84943215,  -8.9152991 ,
        -9.37021423, -12.46743548, -11.85973622, -18.17557048,
       -13.27248576, -26.23815563]), 'test_r2': array([0.88665128, 0.5463769 , 0.95686899, 0.98555233, 0.82526142,
       0.97991679, 0.96645189, 0.93862245, 0.92996279, 0.98791023,
       0.95787026, 0.75965026, 0.94313119, 0.97258172]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 816, 'regressor__learning_rate': 0.03695845352649969, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([75.01569343, 73.55630565, 79.59053969, 65.50165868, 78.62755275,
       74.14391279, 61.16431856, 70.6730442 , 76.99356747, 68.46730661,
       67.50628018, 68.7793026 , 61.98993301, 73.91640735]), 'score_time': array([0.76222372, 0.77352238, 0.78006864, 0.88835335, 0.74532723,
       0.76276517, 0.75033903, 0.73371744, 0.74639583, 0.76335621,
       0.77725172, 0.76399422, 0.80469275, 0.74822664]), 'test_pearson_r': array([0.99599899, 0.98402163, 0.9953124 , 0.96493857, 0.87327086,
       0.98941855, 0.89338562, 0.99072181, 0.87273102, 0.97128401,
       0.98072229, 0.97148604, 0.97543237, 0.99787329]), 'test_pearson_p': array([-2.82941786e-19, -3.51361348e-14, -1.08474894e-18, -2.62224931e-11,
       -1.05649049e-06, -1.07713418e-15, -2.61000124e-07, -2.68216399e-15,
       -2.30421186e-06, -2.12470675e-11, -9.02883041e-13, -2.00930040e-11,
       -6.17848487e-12, -2.08988675e-20]), 'test_spearman_r': array([0.68187808, 0.61335771, 0.88801131, 0.66432652, 0.65438596,
       0.97368421, 0.73485514, 0.79545497, 0.88797121, 0.97004184,
       0.9086217 , 0.95872033, 0.95459236, 0.80804954]), 'test_spearman_p': array([-1.30166108e-03, -5.22527484e-03, -3.89032790e-07, -1.91981421e-03,
       -2.36692955e-03, -2.35705500e-12, -3.38576822e-04, -7.92632400e-05,
       -8.73028662e-07, -2.96982597e-11, -1.82914385e-07, -3.72370945e-10,
       -7.87841526e-10, -4.97486228e-05]), 'test_kendall_r': array([0.58651279, 0.51919437, 0.75519181, 0.46921023, 0.56725146,
       0.89473684, 0.52941176, 0.67764624, 0.747545  , 0.9013353 ,
       0.8000043 , 0.84313725, 0.84313725, 0.64705882]), 'test_kendall_p': array([-4.64037532e-04, -2.03099387e-03, -7.24374806e-06, -5.10139965e-03,
       -4.29034340e-04, -6.63913300e-11, -1.61850442e-03, -9.34442457e-05,
       -1.55211882e-05, -2.02850566e-07, -3.75687779e-06, -1.22726897e-08,
       -1.22726897e-08, -6.99211859e-05]), 'test_rmse': array([-17.42439665, -35.14322743, -18.5937729 , -13.17250181,
       -28.4092225 , -14.47298531, -24.06037978, -11.44530519,
       -30.54292122, -20.05503363, -23.44529988, -22.35442698,
       -15.79607115, -21.80552542]), 'test_mae': array([-11.02667955, -13.67842973, -10.9994077 ,  -8.69332609,
       -17.01021771,  -9.18935794, -15.00731584,  -7.3769099 ,
       -18.67619317, -14.58995107, -13.1304031 , -15.69521303,
       -10.2743519 , -12.50107877]), 'test_r2': array([0.98961118, 0.96579766, 0.9888313 , 0.925606  , 0.72094891,
       0.97663321, 0.75539592, 0.98086399, 0.75546548, 0.93966532,
       0.9439868 , 0.93826852, 0.92124803, 0.98872847]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06116393319109904, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 29, 6: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 143.69714826576293, 'test_rmse': 203.32989300701462, 'test_r2': -4.987961240710193, 'test_pearson_r': array([-0.36583405]), 'test_pearson_p_value': array([0.00134905]), 'test_spearman_r': -0.5236420073900105, 'test_spearman_p_value': 1.689465860405378e-06, 'test_kendall_r': -0.37077236677814507, 'test_kendall_p_value': 3.249929288938944e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 288, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 126.98968272867451, 'test_rmse': 170.16732123475893, 'test_r2': -3.1940040048926255, 'test_pearson_r': array([-0.40409632]), 'test_pearson_p_value': array([0.00035623]), 'test_spearman_r': -0.6365231979231529, 'test_spearman_p_value': 1.0916273006270216e-09, 'test_kendall_r': -0.47818922784941675, 'test_kendall_p_value': 1.8339703122883591e-09, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 289, 'regressor__learning_rate': 0.07693173041362837, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 124.4140682683977, 'test_rmse': 162.741162202326, 'test_r2': -2.835935911220783, 'test_pearson_r': array([-0.37708077]), 'test_pearson_p_value': array([0.0009273]), 'test_spearman_r': -0.5409439173075917, 'test_spearman_p_value': 6.499796521714955e-07, 'test_kendall_r': -0.3930856486303905, 'test_kendall_p_value': 8.037323843688507e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 134.00817398680715, 'test_rmse': 174.32835782279307, 'test_r2': -3.401620487894551, 'test_pearson_r': array([-0.41974463]), 'test_pearson_p_value': array([0.00019702]), 'test_spearman_r': -0.6008488177414083, 'test_spearman_p_value': 1.516055940642133e-08, 'test_kendall_r': -0.42655557140875866, 'test_kendall_p_value': 8.574039894385968e-08, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 415, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 153.2017213293592, 'test_rmse': 226.28738134131387, 'test_r2': -6.416469066968647, 'test_pearson_r': array([-0.36101028]), 'test_pearson_p_value': array([0.00157796]), 'test_spearman_r': -0.4997333873656472, 'test_spearman_p_value': 5.816056278638207e-06, 'test_kendall_r': -0.36887197515762243, 'test_kendall_p_value': 3.5651276568278844e-06, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1978, 'regressor__learning_rate': 0.09428005475263121, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 132.1414815477463, 'test_rmse': 183.21447899409696, 'test_r2': -3.8617889268488206, 'test_pearson_r': array([-0.37278274]), 'test_pearson_p_value': array([0.00107182]), 'test_spearman_r': -0.4356002359115122, 'test_spearman_p_value': 0.00010489538328633808, 'test_kendall_r': -0.3156151493828611, 'test_kendall_p_value': 7.390428559230413e-05, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 633, 'regressor__learning_rate': 0.05239657460141556, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 73.12898100803508, 'test_ystd': 83.09248394512653, 'test_mae': 137.85496606076646, 'test_rmse': 179.2426679370876, 'test_r2': -3.6532813868765475, 'test_pearson_r': array([-0.41857482]), 'test_pearson_p_value': array([0.00020614]), 'test_spearman_r': -0.5838623121824166, 'test_spearman_p_value': 4.7545817564760844e-08, 'test_kendall_r': -0.40989711904852827, 'test_kendall_p_value': 2.681038514469172e-07, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 161, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 25, 6: {'fit_time': array([52.94993234, 52.45981431, 52.10822225, 49.26446104]), 'score_time': array([0.93398571, 0.93118906, 0.93494344, 0.91972685]), 'test_pearson_r': array([0.98713337, 0.98542697, 0.98322334, 0.95688457]), 'test_pearson_p': array([-7.05162571e-52, -3.47490437e-50, -2.83855612e-48, -5.42809247e-35]), 'test_spearman_r': array([0.76886926, 0.89657659, 0.81330741, 0.8668613 ]), 'test_spearman_p': array([-7.48375741e-14, -5.79300457e-24, -1.85903852e-16, -2.09765091e-20]), 'test_kendall_r': array([0.62990732, 0.77892731, 0.65556591, 0.70281131]), 'test_kendall_p': array([-1.61950378e-13, -4.89881563e-20, -1.46372204e-14, -2.65018219e-16]), 'test_rmse': array([-25.0826201 , -20.43120669, -21.8608277 , -22.29926889]), 'test_mae': array([-13.04584339, -12.49893572, -14.43079244, -13.3970575 ]), 'test_r2': array([0.97283884, 0.97034045, 0.96476795, 0.91396227]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([52.00989056, 52.23403192, 50.89099765, 51.01100945]), 'score_time': array([0.89104104, 0.96230721, 0.96739888, 0.88769507]), 'test_pearson_r': array([0.92057323, 0.98257949, 0.97487999, 0.92301546]), 'test_pearson_p': array([-2.05269048e-27, -9.20710210e-48, -8.34456011e-43, -2.08731431e-27]), 'test_spearman_r': array([0.69768738, 0.83603894, 0.859741  , 0.86841443]), 'test_spearman_p': array([-1.05922564e-10, -4.48847610e-18, -4.78543979e-20, -1.49350392e-20]), 'test_kendall_r': array([0.53755146, 0.7335167 , 0.67728317, 0.73856941]), 'test_kendall_p': array([-2.91488771e-10, -8.06152847e-18, -1.84558974e-15, -7.26341928e-18]), 'test_rmse': array([-50.37785253, -28.51624731, -27.38264295, -29.93462099]), 'test_mae': array([-22.97287889, -14.82244377, -16.95880127, -18.11480598]), 'test_r2': array([0.8229984 , 0.96348866, 0.94635445, 0.84351843]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([49.29096222, 50.37756729, 50.59824228, 51.41384602]), 'score_time': array([0.90919018, 0.93536544, 0.92710233, 0.92606711]), 'test_pearson_r': array([0.98612254, 0.9894451 , 0.88931537, 0.93064701]), 'test_pearson_p': array([-7.52275048e-51, -1.42518814e-54, -4.38613051e-23, -9.20398455e-29]), 'test_spearman_r': array([0.88925317, 0.88540426, 0.72603671, 0.79229   ]), 'test_spearman_p': array([-4.46011907e-23, -1.23205455e-22, -7.72978742e-12, -6.28068820e-15]), 'test_kendall_r': array([0.75180801, 0.73151991, 0.57853214, 0.6556985 ]), 'test_kendall_p': array([-1.01402170e-18, -7.92945142e-18, -1.11798581e-11, -2.58109251e-14]), 'test_rmse': array([-26.78887599, -21.73105308, -35.23231183, -26.80876173]), 'test_mae': array([-16.88062782, -11.97238507, -17.68567021, -14.94992785]), 'test_r2': array([0.96902785, 0.97886175, 0.76485264, 0.86468129]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1973, 'regressor__learning_rate': 0.06594469007923703, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([40.26416278, 45.55252481, 46.95642281, 46.54341507]), 'score_time': array([0.91902518, 0.91536093, 0.9250989 , 0.94479322]), 'test_pearson_r': array([0.97484689, 0.9244056 , 0.90386938, 0.96280093]), 'test_pearson_p': array([-8.69367434e-43, -4.58478850e-28, -6.48143749e-25, -6.10353475e-37]), 'test_spearman_r': array([0.87370583, 0.72765618, 0.79867108, 0.78952309]), 'test_spearman_p': array([-2.19180579e-21, -6.59135541e-12, -1.57937988e-15, -9.05340783e-15]), 'test_kendall_r': array([0.73094321, 0.60052975, 0.64384118, 0.66997784]), 'test_kendall_p': array([-1.22486072e-17, -1.65858288e-12, -4.03293806e-14, -5.43815957e-15]), 'test_rmse': array([-16.59703284, -60.14604742, -28.33766592, -41.94818656]), 'test_mae': array([-10.11392948, -26.05307342, -15.39944669, -22.58609851]), 'test_r2': array([0.94646057, 0.84620805, 0.8082789 , 0.92438523]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.013399418692136017, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([51.92281628, 53.89807463, 51.65733099, 56.91268921]), 'score_time': array([0.90475988, 0.93095374, 0.9022367 , 0.92894936]), 'test_pearson_r': array([0.98511109, 0.96824359, 0.98137237, 0.96322013]), 'test_pearson_p': array([-6.79607118e-50, -1.21699346e-39, -7.46201678e-47, -4.32211385e-37]), 'test_spearman_r': array([0.73115392, 0.89281539, 0.71376734, 0.84066998]), 'test_spearman_p': array([-4.65413386e-12, -1.68338059e-23, -2.49407731e-11, -3.64816280e-18]), 'test_kendall_r': array([0.58957465, 0.76004816, 0.59198627, 0.7276815 ]), 'test_kendall_p': array([-4.66681742e-12, -3.89018441e-19, -3.82230284e-12, -2.29445569e-17]), 'test_rmse': array([-20.93877069, -23.6592994 , -29.50238965, -30.18422478]), 'test_mae': array([-12.58413032, -15.39898568, -17.21301246, -15.39001081]), 'test_r2': array([0.96919024, 0.92433411, 0.96210586, 0.92516936]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([18.6747303 , 19.98607969, 19.62058067, 20.20644379]), 'score_time': array([0.44944954, 0.48041797, 0.47866416, 0.45513058]), 'test_pearson_r': array([0.90659032, 0.97432259, 0.98664302, 0.92511804]), 'test_pearson_p': array([-2.73622283e-25, -1.65204785e-42, -2.27402201e-51, -9.13128744e-28]), 'test_spearman_r': array([0.86230673, 0.75878876, 0.89785035, 0.72958803]), 'test_spearman_p': array([-2.78594974e-20, -2.42875758e-13, -3.99911106e-24, -8.01982438e-12]), 'test_kendall_r': array([0.70548637, 0.54843431, 0.73836614, 0.60349878]), 'test_kendall_p': array([-1.03926279e-16, -1.16551551e-10, -4.33048633e-18, -2.31907829e-12]), 'test_rmse': array([-32.54265842, -28.99967442, -18.02861938, -60.54175757]), 'test_mae': array([-20.44214421, -16.37460805, -12.68472862, -29.78719847]), 'test_r2': array([0.79962808, 0.94556459, 0.9720725 , 0.84859375]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 966, 'regressor__learning_rate': 0.009149800389339992, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([47.18780899, 50.23365831, 43.1531136 , 48.69443774]), 'score_time': array([0.89470887, 0.94081664, 0.89848995, 0.89887524]), 'test_pearson_r': array([0.98190512, 0.93067048, 0.96323231, 0.97003905]), 'test_pearson_p': array([-3.01540434e-47, -3.30715433e-29, -1.14049771e-37, -8.29321192e-40]), 'test_spearman_r': array([0.67898549, 0.83508558, 0.91487341, 0.91207143]), 'test_spearman_p': array([-5.07801372e-10, -5.30617985e-18, -1.66863179e-26, -1.08958324e-25]), 'test_kendall_r': array([0.57026275, 0.67181331, 0.7589917 , 0.76663366]), 'test_kendall_p': array([-2.39027064e-11, -3.06149399e-15, -5.19278217e-19, -3.68419832e-19]), 'test_rmse': array([-34.09024163, -26.04119867, -22.24022575, -32.75862859]), 'test_mae': array([-14.6505019 , -16.26082986, -13.63700621, -18.23829744]), 'test_r2': array([0.95976588, 0.85291172, 0.92632186, 0.93464799]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.02453365433535472, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 10, 6: {'test_mad': 79.886624, 'test_ystd': 99.55876844075563, 'test_mae': 92.39109281924328, 'test_rmse': 129.72075366679428, 'test_r2': -0.6976958815657195, 'test_pearson_r': array([0.04809489]), 'test_pearson_p_value': array([0.81941705]), 'test_spearman_r': 0.05198969999493817, 'test_spearman_p_value': 0.8050577982472942, 'test_kendall_r': 0.0034735625898545523, 'test_kendall_p_value': 0.9811724004050555, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1473, 'regressor__learning_rate': 0.09993823866501116, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 79.886624, 'test_ystd': 99.55876844075563, 'test_mae': 94.73975970235846, 'test_rmse': 130.1226177166986, 'test_r2': -0.7082308143186762, 'test_pearson_r': array([-0.26767775]), 'test_pearson_p_value': array([0.19579421]), 'test_spearman_r': -0.39062239983726293, 'test_spearman_p_value': 0.05353021960514898, 'test_kendall_r': -0.27045535645738517, 'test_kendall_p_value': 0.06573546595358566, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04542157110950384, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 79.886624, 'test_ystd': 99.55876844075563, 'test_mae': 91.47260424964135, 'test_rmse': 124.17655519178382, 'test_r2': -0.5556796987176598, 'test_pearson_r': array([0.03303427]), 'test_pearson_p_value': array([0.87543594]), 'test_spearman_r': 0.027153493533871306, 'test_spearman_p_value': 0.8974842115135707, 'test_kendall_r': 0.03467376364838272, 'test_kendall_p_value': 0.81349004648145, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 363, 'regressor__learning_rate': 0.040987907223734917, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 79.886624, 'test_ystd': 99.55876844075563, 'test_mae': 93.25521429980341, 'test_rmse': 126.8723153063563, 'test_r2': -0.6239576503775799, 'test_pearson_r': array([0.08595029]), 'test_pearson_p_value': array([0.68290134]), 'test_spearman_r': 0.07874513124822678, 'test_spearman_p_value': 0.708292555277658, 'test_kendall_r': 0.03467376364838272, 'test_kendall_p_value': 0.81349004648145, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 79.886624, 'test_ystd': 99.55876844075563, 'test_mae': 90.04397482337161, 'test_rmse': 122.56205893546044, 'test_r2': -0.5154899646925823, 'test_pearson_r': array([0.20981088]), 'test_pearson_p_value': array([0.31412314]), 'test_spearman_r': 0.11717081640650243, 'test_spearman_p_value': 0.5769892837516408, 'test_kendall_r': 0.05905056402752739, 'test_kendall_p_value': 0.6882843069248918, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1519, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 79.886624, 'test_ystd': 99.55876844075563, 'test_mae': 88.7125198739194, 'test_rmse': 124.99105395596337, 'test_r2': -0.5761546550106353, 'test_pearson_r': array([-0.16563079]), 'test_pearson_p_value': array([0.42880182]), 'test_spearman_r': -0.2152884130185511, 'test_spearman_p_value': 0.3013629453859339, 'test_kendall_r': -0.18030357097159014, 'test_kendall_p_value': 0.2198919404003633, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.07450109414334935, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 79.886624, 'test_ystd': 99.55876844075563, 'test_mae': 92.99629682784379, 'test_rmse': 128.84454139888956, 'test_r2': -0.6748388130000649, 'test_pearson_r': array([0.0784704]), 'test_pearson_p_value': array([0.70926694]), 'test_spearman_r': 0.08419227536493719, 'test_spearman_p_value': 0.6890670869777196, 'test_kendall_r': 0.038209188488400075, 'test_kendall_p_value': 0.7951800838426155, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 684, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 10, 6: {'fit_time': array([61.05726814, 58.09077907, 54.85506558, 56.03294468, 55.88078046,
       59.97143435, 56.1664257 , 54.75357032, 59.78221965, 60.76966858]), 'score_time': array([0.78557777, 0.79227448, 0.77487254, 0.80988908, 0.77531743,
       0.77862883, 0.78410053, 0.78969479, 0.82132745, 0.78472662]), 'test_pearson_r': array([0.95724635, 0.98868444, 0.99490073, 0.97086476, 0.89657687,
       0.96817466, 0.99398148, 0.98352553, 0.97668127, 0.92111949]), 'test_pearson_p': array([-1.97787717e-14, -2.74645351e-21, -1.98842549e-25, -2.12836731e-16,
       -5.77816947e-10, -6.05742889e-16, -1.44629983e-24, -2.42636416e-19,
       -1.51514665e-17, -6.68366438e-11]), 'test_spearman_r': array([0.73225005, 0.89842681, 0.9234188 , 0.92733802, 0.76752137,
       0.7963059 , 0.91434435, 0.85943917, 0.83344733, 0.96595501]), 'test_spearman_p': array([-2.11471677e-05, -4.69888406e-10, -1.80893271e-11, -9.83043950e-12,
       -4.74446098e-06, -1.14116022e-06, -6.61140580e-11, -1.88068276e-08,
       -1.25082455e-07, -5.30725828e-15]), 'test_kendall_r': array([0.60991881, 0.76851852, 0.78461538, 0.80123362, 0.71692308,
       0.64297445, 0.77041694, 0.7438307 , 0.67592593, 0.85809802]), 'test_kendall_p': array([-1.37939151e-05, -3.99640871e-08, -1.03018238e-10, -9.91387321e-09,
       -1.19757295e-08, -4.47539969e-06, -3.55330310e-08, -1.06894012e-07,
       -1.36915595e-06, -1.92675515e-09]), 'test_rmse': array([-22.15797268, -37.15213252, -17.67282078, -17.03638626,
       -27.7760578 , -19.1307254 , -17.13067696, -19.00790858,
       -16.04626983, -25.00545475]), 'test_mae': array([-13.60987606, -19.80936904, -12.35135215, -12.98329267,
       -12.95714455, -10.44531923, -11.92815713, -12.76878964,
       -10.27843537, -12.75910725]), 'test_r2': array([0.90269021, 0.97141522, 0.98876922, 0.94247183, 0.79913705,
       0.9136419 , 0.98778555, 0.96262648, 0.95207341, 0.8402322 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([58.35394001, 55.80913043, 58.47564864, 55.69298983, 58.94460249,
       55.71007609, 56.33411479, 58.52938533, 58.9703064 , 58.50808382]), 'score_time': array([0.78834295, 0.76984072, 0.819103  , 0.76910329, 0.77924204,
       0.76415086, 0.77451849, 0.79253817, 0.77918696, 0.79847217]), 'test_pearson_r': array([0.97264585, 0.99564655, 0.98562205, 0.98694161, 0.98243772,
       0.95395957, 0.97343846, 0.98361681, 0.95702238, 0.94026214]), 'test_pearson_p': array([-1.00757454e-16, -2.99269039e-26, -4.78887992e-20, -1.51870860e-20,
       -5.19723680e-19, -4.72938412e-14, -7.10896866e-17, -2.27091634e-19,
       -2.10342060e-14, -3.00692953e-12]), 'test_spearman_r': array([0.85195972, 0.79247249, 0.76799454, 0.87942536, 0.73243291,
       0.88691222, 0.84048557, 0.92099869, 0.82905983, 0.91440663]), 'test_spearman_p': array([-3.36448236e-08, -1.39715054e-06, -4.64223791e-06, -3.32438786e-09,
       -2.09965133e-05, -1.60329071e-09, -7.74223682e-08, -2.59445787e-11,
       -1.66830632e-07, -1.65320450e-10]), 'test_kendall_r': array([0.72360597, 0.64087916, 0.61633355, 0.78825442, 0.63482356,
       0.72756813, 0.67796691, 0.81790513, 0.72307692, 0.77796436]), 'test_kendall_p': array([-2.68967270e-07, -4.92912293e-06, -1.03666319e-05, -1.85844114e-08,
       -5.58122544e-06, -2.15267104e-07, -1.23262746e-06, -5.10077301e-09,
       -8.14356643e-09, -5.23340882e-08]), 'test_rmse': array([-17.91332117, -15.56603545, -13.80660146, -28.16018398,
       -29.22549111, -15.68561686, -40.11479768, -14.10867624,
       -21.66897655, -27.91426099]), 'test_mae': array([-11.35498486, -10.99745918,  -7.42132367, -17.43451018,
       -14.10416724, -10.73517183, -24.16630298,  -8.70779516,
       -14.04884595, -18.92866036]), 'test_r2': array([0.92873372, 0.99125652, 0.96927527, 0.97033669, 0.96478815,
       0.8799517 , 0.9445723 , 0.96433117, 0.90946006, 0.87447215]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([56.6222384 , 56.10361552, 54.42202854, 60.588943  , 58.66178465,
       55.64053488, 56.27786732, 56.71929741, 58.47751665, 60.20346189]), 'score_time': array([0.7906003 , 0.75865054, 0.77304602, 0.80832028, 0.75546813,
       0.77729893, 0.78822351, 0.75245142, 0.82351804, 0.79875135]), 'test_pearson_r': array([0.94911634, 0.98776988, 0.99525018, 0.99343417, 0.94954396,
       0.7113916 , 0.99438786, 0.97975509, 0.96257768, 0.87071094]), 'test_pearson_p': array([-1.53166762e-13, -6.94708731e-21, -8.49786345e-26, -4.09876842e-24,
       -1.38722246e-13, -4.61335421e-05, -6.26361012e-25, -2.82244892e-18,
       -4.11198605e-15, -1.52100778e-08]), 'test_spearman_r': array([0.86862833, 0.92049924, 0.95606088, 0.87946659, 0.94238333,
       0.56146351, 0.91702343, 0.92373466, 0.62200316, 0.77222014]), 'test_spearman_p': array([-8.77984869e-09, -2.79093456e-11, -2.72943800e-14, -3.31150374e-09,
       -6.57051755e-13, -2.84055459e-03, -4.57949368e-11, -1.72426145e-11,
       -6.92634192e-04, -6.12194516e-06]), 'test_kendall_r': array([0.71098137, 0.78890695, 0.85670364, 0.72111026, 0.80739695,
       0.43143349, 0.78329675, 0.824078  , 0.49926918, 0.71572307]), 'test_kendall_p': array([-3.89379100e-07, -1.66136182e-08, -8.84108293e-10, -2.48303842e-07,
       -7.63658832e-09, -2.02482330e-03, -2.36616070e-08, -3.91002853e-09,
       -4.04299141e-04, -5.71250218e-07]), 'test_rmse': array([-23.26812516, -25.02723454, -41.53108463, -18.9800879 ,
       -19.97719758, -46.92963194, -10.44811251, -15.99565688,
       -16.32181314, -33.10995673]), 'test_mae': array([-15.89112465, -15.82230536, -19.09395497, -12.48637104,
       -10.33468039, -25.94224217,  -7.37478205, -10.54640206,
       -11.32663619, -14.61139845]), 'test_r2': array([0.89829823, 0.97412258, 0.96652951, 0.98623361, 0.89804017,
       0.3386827 , 0.98729875, 0.95781279, 0.92628792, 0.74983148]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([5.53065538, 5.25533795, 5.31991792, 5.1338377 , 5.58902454,
       5.52204227, 5.33779907, 5.21170306, 5.46125865, 5.84038401]), 'score_time': array([0.1085825 , 0.10812163, 0.11586475, 0.11073303, 0.11284065,
       0.1127131 , 0.11420202, 0.11387086, 0.11464763, 0.11355257]), 'test_pearson_r': array([0.98149216, 0.98475233, 0.28163595, 0.99048541, 0.98731545,
       0.90742205, 0.84437967, 0.96884635, 0.99444919, 0.98964792]), 'test_pearson_p': array([-9.70437812e-19, -9.64676497e-20, -1.63365096e-01, -3.46202693e-22,
       -1.07381359e-20, -1.61971269e-10, -5.87859011e-08, -4.70565890e-16,
       -5.49155188e-25, -6.74927364e-21]), 'test_spearman_r': array([0.84060203, 0.92323475, 0.70692643, 0.77504274, 0.83159516,
       0.9171805 , 0.70930233, 0.88626658, 0.85245342, 0.94133489]), 'test_spearman_p': array([-7.67954904e-08, -1.85999867e-11, -5.40491945e-05, -3.33561805e-06,
       -1.41394108e-07, -4.48025233e-11, -4.96994652e-05, -1.71074140e-09,
       -3.24094575e-08, -2.45431219e-12]), 'test_kendall_r': array([0.68624502, 0.81356029, 0.60267061, 0.65538462, 0.64715023,
       0.76901535, 0.57098765, 0.74807605, 0.69645691, 0.83806461]), 'test_kendall_p': array([-9.74164544e-07, -5.87127803e-09, -2.23310398e-05, -3.78452153e-07,
       -3.65929913e-06, -4.40375212e-08, -4.51003874e-05, -9.40050819e-08,
       -6.27352373e-07, -4.52674682e-09]), 'test_rmse': array([-18.28329941, -14.79336263, -85.4808366 , -26.90546319,
       -26.4072563 , -26.48873017, -31.84364972, -18.52362924,
       -18.26106464, -25.61411203]), 'test_mae': array([-10.92053037,  -9.40431476, -31.20788057, -16.9525119 ,
       -19.64834698, -13.41414004, -17.37205183, -11.10307591,
       -12.78341709, -18.47800495]), 'test_r2': array([ 0.93091514,  0.96839137, -3.17651235,  0.97665904,  0.97281222,
        0.81834327,  0.69117777,  0.92282877,  0.98774853,  0.97730109]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 242, 'regressor__learning_rate': 0.048290192854296775, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([56.81911254, 56.45246363, 57.11577487, 58.01587725, 59.29504991,
       54.41862917, 58.50954556, 59.29701686, 56.70371008, 58.50236416]), 'score_time': array([0.76078057, 0.79525518, 0.79435015, 0.80129409, 0.80618477,
       0.75965023, 0.74909854, 0.7926209 , 0.77572942, 0.78325343]), 'test_pearson_r': array([0.97478864, 0.98222217, 0.98495765, 0.98737972, 0.98356968,
       0.71011223, 0.99665719, 0.8865683 , 0.93422064, 0.98358943]), 'test_pearson_p': array([-3.82765851e-17, -6.00987992e-19, -8.20698470e-20, -1.01063963e-20,
       -2.34999374e-19, -4.82891860e-05, -1.26368711e-27, -1.65973917e-09,
       -3.08748986e-12, -1.31092695e-18]), 'test_spearman_r': array([0.57871352, 0.80219047, 0.75991792, 0.95350427, 0.91931624,
       0.64431146, 0.93057461, 0.84839196, 0.90203455, 0.68667053]), 'test_spearman_p': array([-1.95307236e-03, -8.29411948e-07, -6.68736540e-06, -5.30962333e-14,
       -3.31151102e-11, -3.81708879e-04, -5.78720265e-12, -4.39154469e-08,
       -3.10337225e-10, -1.50206597e-04]), 'test_kendall_r': array([0.45272678, 0.6728755 , 0.57716049, 0.87076923, 0.78461538,
       0.47987846, 0.80555939, 0.70699799, 0.80739695, 0.55759677]), 'test_kendall_p': array([-1.27074813e-03, -1.67114361e-06, -3.72719718e-05, -2.32824644e-14,
       -1.03018238e-10, -6.25493146e-04, -8.63132907e-09, -4.84363274e-07,
       -7.63658832e-09, -9.56601553e-05]), 'test_rmse': array([-16.26426493, -12.49444579, -28.98563688, -14.84457944,
       -19.82113822, -30.01742231, -25.28456364, -32.3409887 ,
       -23.70811927, -30.1751359 ]), 'test_mae': array([-10.53435717,  -6.6957027 , -21.47892183,  -8.96454813,
       -12.08254119, -17.58291666, -14.34641582, -15.15428437,
       -15.30407889, -12.9291444 ]), 'test_r2': array([0.94945743, 0.96378466, 0.96980636, 0.95267968, 0.9620727 ,
       0.15106267, 0.98665999, 0.76548932, 0.86792199, 0.96379582]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([18.89414096, 19.9031384 , 20.23660207, 19.29926062, 20.07129049,
       18.96366453, 18.95933199, 19.40027165, 19.5623076 , 19.32377577]), 'score_time': array([0.3455472 , 0.34164691, 0.34717536, 0.34728217, 0.34318209,
       0.36566281, 0.34038663, 0.34471846, 0.34686661, 0.36480737]), 'test_pearson_r': array([0.94621801, 0.95024305, 0.97306107, 0.93651669, 0.98942894,
       0.97685864, 0.96326955, 0.99421678, 0.86245433, 0.92727422]), 'test_pearson_p': array([-2.93310803e-13, -1.17762834e-13, -8.40405901e-17, -2.04010591e-12,
       -1.21824133e-21, -1.38374558e-17, -3.29874409e-15, -8.97311308e-25,
       -1.47359711e-08, -2.70785012e-11]), 'test_spearman_r': array([0.77230769, 0.92373466, 0.94268618, 0.62175106, 0.86065995,
       0.81546093, 0.82894306, 0.97520945, 0.6955486 , 0.76514716]), 'test_spearman_p': array([-3.79732814e-06, -1.72426145e-11, -6.17758127e-13, -6.97134614e-04,
       -1.70498182e-08, -3.87919198e-07, -1.68095716e-07, -3.13436240e-17,
       -7.98980639e-05, -8.37830366e-06]), 'test_kendall_r': array([0.60615385, 0.79321365, 0.83901331, 0.47839734, 0.69029358,
       0.65533309, 0.64297445, 0.88752031, 0.56388755, 0.65776385]), 'test_kendall_p': array([-3.86606321e-06, -1.44953027e-08, -2.23096999e-09, -6.30596121e-04,
       -7.87228920e-07, -2.92224262e-06, -4.45947560e-06, -2.16002957e-10,
       -6.37248234e-05, -4.18083451e-06]), 'test_rmse': array([-20.16949826, -26.68344779, -19.24378836, -19.16891651,
       -29.46751148, -15.77217386, -17.24872803, -17.55217742,
       -37.00582718, -88.50351418]), 'test_mae': array([-14.66464143, -14.93307579, -10.40275272, -10.40497522,
       -19.73369426, -11.54678509,  -9.99359214, -12.03552961,
       -23.5522915 , -36.83437691]), 'test_r2': array([0.88712668, 0.892374  , 0.93471262, 0.78154535, 0.9719842 ,
       0.94264597, 0.90216378, 0.98786308, 0.7436683 , 0.84276568]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 849, 'regressor__learning_rate': 0.014044590250285796, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([58.21487689, 58.41098857, 58.14251518, 59.20499921, 54.21935534,
       57.4748435 , 56.65755486, 57.96188998, 57.40659547, 58.77395105]), 'score_time': array([0.71958828, 0.77855158, 0.77491784, 0.79024291, 0.79622841,
       0.78537393, 0.78141069, 0.78628325, 0.79821277, 0.78998637]), 'test_pearson_r': array([0.99498853, 0.98109245, 0.91578664, 0.96935302, 0.96585652,
       0.94833795, 0.9709916 , 0.97091104, 0.93722727, 0.99740396]), 'test_pearson_p': array([-1.61505260e-25, -1.25150604e-18, -5.43368726e-11, -3.87523785e-16,
       -1.39161649e-15, -1.83032541e-13, -2.02111939e-16, -2.08864080e-16,
       -1.78896211e-12, -8.65624269e-28]), 'test_spearman_r': array([0.74944429, 0.67384993, 0.66335714, 0.80075253, 0.84048557,
       0.82900142, 0.96438498, 0.94357051, 0.91316239, 0.87538462]), 'test_spearman_p': array([-1.05193126e-05, -1.60719014e-04, -2.20881597e-04, -8.97535182e-07,
       -7.74223682e-08, -1.67462407e-07, -2.29156045e-15, -5.14966666e-13,
       -7.74477067e-11, -1.02003125e-08]), 'test_kendall_r': array([0.63454485, 0.59351488, 0.54350185, 0.71097457, 0.66564024,
       0.66975628, 0.87892013, 0.83642374, 0.76615385, 0.72666667]), 'test_kendall_p': array([-6.57345563e-06, -2.28485450e-05, -1.10899247e-04, -3.91083229e-07,
       -1.91558408e-06, -1.70696473e-06, -4.08008932e-10, -2.28452519e-09,
       -4.25907386e-10, -1.45255110e-08]), 'test_rmse': array([-16.87597636, -43.17725507, -21.55853272, -17.3166846 ,
       -20.44690776, -23.65215365, -20.59504253, -22.75743271,
       -28.7607928 , -19.09760758]), 'test_mae': array([-10.39349633, -19.06842223, -11.58789707, -11.44674175,
       -14.2262123 , -14.19465845, -13.72776339, -14.29553699,
       -17.14514882, -11.21473295]), 'test_r2': array([0.98695522, 0.96008661, 0.81301242, 0.93331468, 0.92916062,
       0.89720572, 0.93599253, 0.93084923, 0.87253068, 0.98849826]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.06801087315337812, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 532)}}
Trimer_scaler
Filename: (Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 Mordred_Polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 Mordred_Polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_Rg/KM4 Mordred_Polysize cluster/Trimer_scaler/(Mordred-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c207n09>
Subject: Job 294647: <NGB_Rg1 (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311> in cluster <Hazel> Done

Job <NGB_Rg1 (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311> was submitted from host <c040n04> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 18:17:47 2025
Job was executed on host(s) <6*c207n09>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 05:19:21 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 05:19:21 2025
Terminated at Sat Mar 15 05:18:20 2025
Results reported at Sat Mar 15 05:18:20 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_Rg1 (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "Rg1 (nm)"                                       --representation "Mordred"                                       --regressor_type "NGB"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 Mordred_Polysize cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   1156204.62 sec.
    Max Memory :                                 3 GB
    Average Memory :                             2.83 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              26
    Max Threads :                                29
    Run time :                                   259144 sec.
    Turnaround time :                            298833 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_Rg1 (nm)_Mordred_Trimer_KM4 Mordred_Polysize cluster_20250311.err> for stderr output of this job.

