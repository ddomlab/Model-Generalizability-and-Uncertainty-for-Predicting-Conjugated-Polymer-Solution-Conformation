


-------------------------------------------------- 
OOD TEST ON 0



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09881126983994516), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1587), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003718925871335274), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05951306598367807), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05455822321128567), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1136), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3491293111406948e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01217923988738758), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.215222443204178e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051922451003193835), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09802839489310182), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1988), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.038974921879261e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 279), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.669752078835571e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05701970896459677), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04323095470153025), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09869782481935704), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 687), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.0589992026020883e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 169), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027551814060114227), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 451), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03263520596534252), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010096287829404584), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1445), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02498404088678552), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09806827433050348), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1953), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00010093325086128994), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1685), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04400475393984643), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 470), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07385228370377277), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1518), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07352481813242628), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1246), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.390574606467376e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05129435489423944), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 272), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1020), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 9.595111608060778e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 798), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09936781474009372), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 206), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3542077621331432e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07749393625513754), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 303), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 637), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.052150688782326815), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1125), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09974824185182105), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 331), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6631737221048567e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0311460874689866), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 520), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1091704725230186e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05435240221193137), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 683), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0396879300524295), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 888), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1069), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013396776351644967), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1480), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05139334157646888), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024357980948874768), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05470167316954395), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 384), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07019092113160814), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 269), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06303515506062947), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 205), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.089526593624884e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03292708982045243), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012161147822384017), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04096083215917022), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04322356300925498), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 478), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037990334958567566), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03974481701957806), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027031325335668488), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1975), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006170178135778509), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.047167089950685345), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 989), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 95), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 676), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0218334151205763), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1250), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1327), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1299), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04051733063790841), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 650), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09985019446608498), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 467), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001417814995608653), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06721501683543399), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 181), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006938928167057857), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 105), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.059779367411674576), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1067), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.1472604608144462e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005510054274123655), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1189), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0975738881302166), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 533), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008448671537389115), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05754331100833507), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1009), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1150175631848524e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011978412590275959), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 665), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051804153456145696), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1005), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 1



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09937212377250922), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 374), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.251661178904249e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028149183943083994), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00035958155514326777), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08313425230342587), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1721), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05314103474402148), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 648), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06904535548919609), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1445), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06441771488129738), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020550018569862438), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05520141568123077), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1992), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 6.728455393991387e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04224711731168791), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0971413753092409), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1959), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000595225954529259), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09991571362650613), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 826), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.828099996694483e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06346514752765454), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 475), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08187885034123947), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1940), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4439479284503594e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1680), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037530551650081394), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1293), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008557381045521254), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07213281819732058), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 215), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04785923818337982), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 480), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0994887343631196), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 757), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6331112049590821e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09926937212692899), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 348), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2283887595642698e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 326), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09519111214410977), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 973), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.077505937095221e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0988728761562561), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1353), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006375325414494458), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0633452313511448), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 488), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009481829844837215), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 481), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09811009896720317), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 987), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0717640723645521e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05596369908536523), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 521), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05873929950133065), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1453), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05881195518850607), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013601264542094121), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056013738742884775), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1214), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1503), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.038051255474546485), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1394), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04967047130554312), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1996), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007256461793266428), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 7.365264091916761e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07130115596548767), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 195), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.026802224524755e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03313317508174986), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0613042200024601), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 613), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009053067461814572), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.051779316406358834), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1398), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03464705138784776), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1273), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05673777691720659), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 466), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07232288776007766), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 292), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026317305464577768), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 991), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 251), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09952653922696122), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1931), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.811815796542665e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04762853939745818), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 455), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09970297556829277), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 396), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008494183639019681), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09950990147054954), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 190), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6782321197910841e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06484829422877586), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 698), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037283448607189205), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016636228485766524), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 922), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0570508808813854), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 455), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 129), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028764781492881895), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 652), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0001441511582847896), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04293811147096197), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 525), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05858629094733183), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 846), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 2



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0973845000035598), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0006290057803701646), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04766499376681505), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0174185226049716e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04763389975051396), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1971), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4130354057660443e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09948927533371178), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1881), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00013549306334356928), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 537), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 101), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.081119136652345), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 529), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055349495334941684), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.08646479880356304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 847), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00036941418309087464), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05231645939639702), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1998), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 5.259722102347086e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05029842304952721), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.050412397456456995), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0994500131233693), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1354), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.3552564666067794e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09979794563290521), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 842), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003565516389271976), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09964992222780339), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 212), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.2618937572894646e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026367088809041202), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1972), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008779273252418974), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1216), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09667671633724381), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 534), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009159239891183427), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.030583903545004367), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09703238360314445), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 362), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000994213996579379), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.048815070328111346), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1975), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0005730638744748494), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 178), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 561), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 265), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09645437238156156), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1132), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3455800791511491e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09953283319761443), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 610), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.199238934124442e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09929411505240697), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1344), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009946265093134401), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07108365394517044), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1282), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025381479235824275), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.058513177350337786), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06163770353099294), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1133), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09997275730069603), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 612), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2753949340271247e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02277012250814144), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 997), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2223659701215303e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0703133907060829), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1466), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0530129783044269), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939659181184061), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 861), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.204880003633577e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09907186242215386), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 744), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.124553963713423e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05913781436124809), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1123), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.71006616411378e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09960382862139458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1216), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.4176345157751396e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022173651050873565), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1252), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007149476829170279), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022513201780338558), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 522), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09823939547866578), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1210), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.0393265719762817e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07292433164777637), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 936), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05531177875203962), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01216079020568477), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1572), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09846418717103966), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1543), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4858764680485117e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009858419566509225), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1336), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1873808353397338e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1305), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 714), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024753646938922798), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 953), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.07486246011873406), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1096), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09970068482533602), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 963), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00046103556999649645), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09956114807303423), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1135), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007708818331401811), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1278), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06929952523332661), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1378), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0519604998171852), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 388), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0342784891329516e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03842274672511808), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056165165219919086), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.056714258834744645), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 745), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OOD TEST ON 3



-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 346), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06184912848849583), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1209), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00011457753513556082), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05475289141114988), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06702217957712317), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 489), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 79), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.060400670706141246), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06458200505442112), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1406), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3096569287470917e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0990046726905389), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1973), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00022693630448481362), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09811401036904599), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 719), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00037648230856425296), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.034769668589043685), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1119), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.861376425553951e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06991692945397764), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 586), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 3.541254600438871e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009787166649595327), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 223), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.028074503383101707), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06042272448318699), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1990), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 4.062669576220958e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05457868087923395), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 999), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.000983374682220168), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09701762666231041), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0003180614538446503), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 395), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016430302176139364), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 211), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09796469239326663), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 722), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.91867853669611e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06739776527618732), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 111), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1008), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09984160850557258), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1016), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6680932085388465e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04254007931796823), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1077), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.3452835463019152e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 337), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09519991703670388), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1980), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00042950047384347474), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0984046590010431), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 470), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007524698318471238), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06640463676190507), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 719), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09939793013929618), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 161), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.3527825731996607e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014199138951116425), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05299532513538436), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 283), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.803029445875769e-05), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.024999034276717513), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1301), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007586375597393674), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009749144398364927), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06569824041481213), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 317), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 2.207900552970794e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0441751657388304), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09936256906162362), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 387), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.6335746864875617e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09893287382335594), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 535), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2103734074350235e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 307), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0671033035923562), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 423), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04236744411111384), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 725), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03581100777670558), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008409454136989647), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 532), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05212551398436097), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02947337514862525), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1177), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09568456434904213), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 931), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0009252032383426144), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.057544762148621406), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 573), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09991685371394265), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 481), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.1007803896279282e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 844), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 316), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05789134590676519), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 342), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032883038261495176), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 548), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06578237958806464), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1907), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.4116042747968325e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 347), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





-------------------------------------------------- 
OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.055757402276930934), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06952327232873257), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.09820293434879723), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 607), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.00029834467223864195), ('regressor__regressor__verbose', False)])




Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0519604998171852), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 388), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.0342784891329516e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06539610727483734), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1e-06), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025110050741759458), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 849), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 1.2881294633636083e-05), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.06561861541693693), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 290), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0007605165814499182), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.0008343331770834683), ('regressor__regressor__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.035635742046765735), ('regressor__regressor__minibatch_frac', 1), ('regressor__regressor__n_estimators', 1169), ('regressor__regressor__natural_gradient', True), ('regressor__regressor__tol', 0.001), ('regressor__regressor__verbose', False)])


{'CO_0': {'cluster size (%)': 55, 6: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.549913744582871, 'test_rmse': 0.7496110645179936, 'test_r2': -0.7254604051359606, 'test_pearson_r': array([0.21792854]), 'test_pearson_p_value': array([0.00917785]), 'test_spearman_r': 0.22896031445062257, 'test_spearman_p_value': 0.006129571501098923, 'test_kendall_r': 0.15960672159792516, 'test_kendall_p_value': 0.005377358775727137, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1587, 'regressor__learning_rate': 0.09881126983994516, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.5284381780979336, 'test_rmse': 0.7182584736719709, 'test_r2': -0.5841435662598056, 'test_pearson_r': array([0.25621401]), 'test_pearson_p_value': array([0.00208605]), 'test_spearman_r': 0.2644879796950103, 'test_spearman_p_value': 0.0014690955234393217, 'test_kendall_r': 0.17527320738274002, 'test_kendall_p_value': 0.0022093952111883505, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 451, 'regressor__learning_rate': 0.027551814060114227, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.4902435062829679, 'test_rmse': 0.6938748699056686, 'test_r2': -0.4784115238465496, 'test_pearson_r': array([0.28032352]), 'test_pearson_p_value': array([0.0007277]), 'test_spearman_r': 0.30713457733322813, 'test_spearman_p_value': 0.00020092103535400223, 'test_kendall_r': 0.2070460494235743, 'test_kendall_p_value': 0.0003022089939774974, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 272, 'regressor__learning_rate': 0.05129435489423944, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.4985746381908836, 'test_rmse': 0.6956686028250954, 'test_r2': -0.48606507410402267, 'test_pearson_r': array([0.24666533]), 'test_pearson_p_value': array([0.00308396]), 'test_spearman_r': 0.27089114533259706, 'test_spearman_p_value': 0.0011113851940553943, 'test_kendall_r': 0.18167280289125312, 'test_kendall_p_value': 0.0015149037523922116, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 520, 'regressor__learning_rate': 0.0311460874689866, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.5172475502552752, 'test_rmse': 0.6994193400355637, 'test_r2': -0.5021326826922001, 'test_pearson_r': array([0.27867911]), 'test_pearson_p_value': array([0.0007843]), 'test_spearman_r': 0.297390154432863, 'test_spearman_p_value': 0.0003254408377243307, 'test_kendall_r': 0.18847904501694446, 'test_kendall_p_value': 0.0010012786253586448, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.012161147822384017, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.547450989189933, 'test_rmse': 0.7289945639276807, 'test_r2': -0.6318551293582091, 'test_pearson_r': array([0.29430171]), 'test_pearson_p_value': array([0.00037787]), 'test_spearman_r': 0.3000675399928435, 'test_spearman_p_value': 0.0002855301205271883, 'test_kendall_r': 0.19261982105965414, 'test_kendall_p_value': 0.0007675710405398152, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1975, 'regressor__learning_rate': 0.027031325335668488, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.47518739362911766, 'test_ystd': 0.5706679593108129, 'test_mae': 0.5019357829400637, 'test_rmse': 0.7288688920944717, 'test_r2': -0.6312925447821303, 'test_pearson_r': array([0.24461803]), 'test_pearson_p_value': array([0.00334728]), 'test_spearman_r': 0.21178613855469242, 'test_spearman_p_value': 0.011400208829860557, 'test_kendall_r': 0.1541575924671241, 'test_kendall_p_value': 0.007079173038310412, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_0': {'cluster size (%)': 50, 6: {'fit_time': array([29.37392306, 29.07345724]), 'score_time': array([0.99414444, 1.07196546]), 'test_pearson_r': array([0.89386031, 0.88507051]), 'test_pearson_p': array([-2.00368073e-46, -5.27207567e-44]), 'test_spearman_r': array([0.89741461, 0.88037043]), 'test_spearman_p': array([-2.54417301e-47, -5.76434792e-43]), 'test_kendall_r': array([0.77198089, 0.7637067 ]), 'test_kendall_p': array([-1.24826714e-38, -1.76539728e-37]), 'test_rmse': array([-0.2994228 , -0.28488795]), 'test_mae': array([-0.16121254, -0.14604324]), 'test_r2': array([0.79218884, 0.77355905]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05701970896459677, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([24.9603076 , 25.94938087]), 'score_time': array([0.82025862, 0.80241656]), 'test_pearson_r': array([0.90932946, 0.78832233]), 'test_pearson_p': array([-1.38765958e-50, -1.44918979e-28]), 'test_spearman_r': array([0.89480283, 0.80942777]), 'test_spearman_p': array([-1.16758519e-46, -3.77490394e-31]), 'test_kendall_r': array([0.76925034, 0.67428557]), 'test_kendall_p': array([-2.65431364e-38, -1.34901343e-29]), 'test_rmse': array([-0.28513423, -0.38726145]), 'test_mae': array([-0.14583804, -0.20310333]), 'test_r2': array([0.81211327, 0.57481346]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1685, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([4.51857042, 4.45643353]), 'score_time': array([0.19300103, 0.20166588]), 'test_pearson_r': array([0.77485044, 0.87616312]), 'test_pearson_p': array([-2.88785991e-27, -4.51068752e-42]), 'test_spearman_r': array([0.84703734, 0.88076658]), 'test_spearman_p': array([-6.11207086e-37, -4.73035272e-43]), 'test_kendall_r': array([0.73379203, 0.75524555]), 'test_kendall_p': array([-4.39153694e-35, -1.09329701e-36]), 'test_rmse': array([-0.40599895, -0.3049146 ]), 'test_mae': array([-0.18878713, -0.16642896]), 'test_r2': array([0.5835939 , 0.76163904]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 331, 'regressor__learning_rate': 0.09974824185182105, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([27.49649334, 27.87693191]), 'score_time': array([0.96636057, 0.97335482]), 'test_pearson_r': array([0.91696647, 0.88017759]), 'test_pearson_p': array([-6.36879785e-53, -6.34503840e-43]), 'test_spearman_r': array([0.91077962, 0.88907494]), 'test_spearman_p': array([-5.18285594e-51, -6.31777153e-45]), 'test_kendall_r': array([0.78956488, 0.75983631]), 'test_kendall_p': array([-3.10616591e-40, -3.44530650e-37]), 'test_rmse': array([-0.258886  , -0.30713262]), 'test_mae': array([-0.14355589, -0.15847875]), 'test_r2': array([0.83032523, 0.76106994]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.024357980948874768, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([26.73305726, 29.13959527]), 'score_time': array([9.77999401, 7.36131001]), 'test_pearson_r': array([0.92699178, 0.86294877]), 'test_pearson_p': array([-2.33330264e-56, -1.82757580e-39]), 'test_spearman_r': array([0.90214969, 0.873384  ]), 'test_spearman_p': array([-1.44241042e-48, -1.68563808e-41]), 'test_kendall_r': array([0.76810964, 0.77997381]), 'test_kendall_p': array([-3.26988012e-38, -4.96972972e-39]), 'test_rmse': array([-0.23734426, -0.32225055]), 'test_mae': array([-0.1389981 , -0.14959031]), 'test_r2': array([0.85737416, 0.7365027 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04096083215917022, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([5.83963823, 5.54056239]), 'score_time': array([0.64276552, 0.94086552]), 'test_pearson_r': array([0.93220146, 0.89726836]), 'test_pearson_p': array([-2.41506916e-58, -6.30730571e-47]), 'test_spearman_r': array([0.9202301 , 0.90844385]), 'test_spearman_p': array([-5.43620190e-54, -6.03216106e-50]), 'test_kendall_r': array([0.77964073, 0.78974492]), 'test_kendall_p': array([-2.60594774e-39, -5.72633485e-40]), 'test_rmse': array([-0.22973175, -0.28642235]), 'test_mae': array([-0.13915402, -0.14808353]), 'test_r2': array([0.8615853 , 0.79959024]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 467, 'regressor__learning_rate': 0.09985019446608498, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([9.1676333 , 8.00947714]), 'score_time': array([0.34774923, 0.34767318]), 'test_pearson_r': array([0.88856872, 0.91140062]), 'test_pearson_p': array([-3.79195672e-45, -8.25036714e-51]), 'test_spearman_r': array([0.89659636, 0.90435984]), 'test_spearman_p': array([-4.11876470e-47, -8.44923932e-49]), 'test_kendall_r': array([0.78277929, 0.76557109]), 'test_kendall_p': array([-1.56813162e-39, -9.81338064e-38]), 'test_rmse': array([-0.29569738, -0.25995086]), 'test_mae': array([-0.14906046, -0.15427628]), 'test_r2': array([0.77223144, 0.82686997]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 665, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_1': {'cluster size (%)': 7, 6: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.2738754928607056, 'test_rmse': 0.3997695983725729, 'test_r2': -0.13398565524870865, 'test_pearson_r': array([0.37791158]), 'test_pearson_p_value': array([0.11065309]), 'test_spearman_r': 0.11257700044517707, 'test_spearman_p_value': 0.6463337675544537, 'test_kendall_r': 0.1071447552739574, 'test_kendall_p_value': 0.5273559970445866, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 374, 'regressor__learning_rate': 0.09937212377250922, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.2592751183362947, 'test_rmse': 0.40038300954067674, 'test_r2': -0.1374683269487511, 'test_pearson_r': array([0.47302995]), 'test_pearson_p_value': array([0.04081049]), 'test_spearman_r': 0.4019350719019213, 'test_spearman_p_value': 0.08803386798049831, 'test_kendall_r': 0.3690541570547422, 'test_kendall_p_value': 0.029476712595932736, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.04224711731168791, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.3229210155405565, 'test_rmse': 0.4678831758989489, 'test_r2': -0.553327000577956, 'test_pearson_r': array([0.29952993]), 'test_pearson_p_value': array([0.21282641]), 'test_spearman_r': 0.20140728985894962, 'test_spearman_p_value': 0.40832948985974493, 'test_kendall_r': 0.2142895105479148, 'test_kendall_p_value': 0.20619610437027291, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 480, 'regressor__learning_rate': 0.04785923818337982, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.33376363072342274, 'test_rmse': 0.47133102314520176, 'test_r2': -0.5763043907681915, 'test_pearson_r': array([0.53224112]), 'test_pearson_p_value': array([0.01898613]), 'test_spearman_r': 0.4890063456837379, 'test_spearman_p_value': 0.03360992132214871, 'test_kendall_r': 0.44048399390404713, 'test_kendall_p_value': 0.009365481770815197, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 488, 'regressor__learning_rate': 0.0633452313511448, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.2909400846993407, 'test_rmse': 0.4246250352862164, 'test_r2': -0.2793790211969289, 'test_pearson_r': array([0.45697453]), 'test_pearson_p_value': array([0.04918696]), 'test_spearman_r': 0.27880397766500886, 'test_spearman_p_value': 0.24773203327567112, 'test_kendall_r': 0.27381437458900226, 'test_kendall_p_value': 0.10626048853445015, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1394, 'regressor__learning_rate': 0.038051255474546485, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.245927190427259, 'test_rmse': 0.3765239539195964, 'test_r2': -0.005942725396588688, 'test_pearson_r': array([0.6533391]), 'test_pearson_p_value': array([0.00241866]), 'test_spearman_r': 0.5189096114269881, 'test_spearman_p_value': 0.022813769011441238, 'test_kendall_r': 0.4523889667122646, 'test_kendall_p_value': 0.00761581289191135, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1398, 'regressor__learning_rate': 0.051779316406358834, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.30954790638014573, 'test_ystd': 0.37541012661405126, 'test_mae': 0.2974494100738811, 'test_rmse': 0.4370664156935002, 'test_r2': -0.35544814021958593, 'test_pearson_r': array([0.43854685]), 'test_pearson_p_value': array([0.06034771]), 'test_spearman_r': 0.292876102720656, 'test_spearman_p_value': 0.22365967282621513, 'test_kendall_r': 0.28571934739721977, 'test_kendall_p_value': 0.09189998010732182, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.037283448607189205, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_1': {'cluster size (%)': 7, 6: {'fit_time': array([24.41748667, 24.76289606, 23.87287164, 23.12702656, 23.24132371,
       23.97545981, 24.97105813, 24.8478992 , 24.70663214, 26.22806311,
       24.16189599, 24.64461803, 24.18772554, 24.81313896]), 'score_time': array([0.30795693, 0.32066226, 0.31415558, 0.3181932 , 0.3133986 ,
       0.38937736, 0.31830812, 0.30389977, 0.30780315, 0.30236125,
       0.30637407, 0.32802653, 0.31170154, 0.31466722]), 'test_pearson_r': array([0.97839389, 0.99360805, 0.99188036, 0.98918235, 0.92964409,
       0.98369251, 0.74773629, 0.98169344, 0.96827377, 0.93169311,
       0.97700178, 0.97884968, 0.93404863, 0.96571855]), 'test_pearson_p': array([-4.48087925e-13, -1.50538434e-17, -1.14366745e-16, -1.29843197e-15,
       -8.65167395e-09, -4.17382160e-14, -2.32702498e-04, -5.98914300e-13,
       -4.67237520e-11, -1.92063692e-08, -3.66159987e-12, -1.88439929e-12,
       -1.46147931e-08, -8.61319749e-11]), 'test_spearman_r': array([0.92807018, 0.97541703, 0.98245614, 0.96491228, 0.9240896 ,
       0.98070175, 0.80701754, 0.96177737, 0.96850813, 0.92776058,
       0.97470328, 0.9127518 , 0.95351291, 0.96078431]), 'test_spearman_p': array([-1.03850543e-08, -1.32884345e-12, -7.73558991e-14, -2.63877371e-11,
       -1.61904890e-08, -1.72884140e-13, -2.97153744e-05, -2.03165199e-10,
       -4.40654958e-11, -2.96792228e-08, -7.78922481e-12, -1.28040412e-07,
       -9.47502560e-10, -2.48656703e-10]), 'test_kendall_r': array([0.84795322, 0.9       , 0.92982456, 0.88304094, 0.78592713,
       0.91812865, 0.78947368, 0.88817712, 0.87869325, 0.79084967,
       0.89180807, 0.78688948, 0.87501894, 0.88235294]), 'test_kendall_p': array([-2.53233265e-09, -8.35279080e-08, -2.06767062e-12, -1.79983887e-10,
       -2.71955004e-06, -7.20796807e-12, -8.90628326e-08, -3.04174616e-07,
       -3.78914056e-07, -2.29491225e-07, -2.53540670e-07, -5.40069919e-06,
       -4.53574602e-07, -8.28241250e-10]), 'test_rmse': array([-0.13449546, -0.08633629, -0.08978901, -0.10707081, -0.20199969,
       -0.12432945, -0.47290267, -0.12893688, -0.16575675, -0.20980091,
       -0.13603843, -0.13250559, -0.21374997, -0.1241528 ]), 'test_mae': array([-0.09223294, -0.05897481, -0.06523424, -0.07138579, -0.14785733,
       -0.08177345, -0.18802936, -0.06276635, -0.10994807, -0.13843806,
       -0.10215706, -0.1014801 , -0.11252305, -0.09162825]), 'test_r2': array([0.94762377, 0.98346542, 0.98308518, 0.97501943, 0.85547651,
       0.96192867, 0.51818833, 0.9600827 , 0.93190494, 0.86743476,
       0.95175579, 0.94692969, 0.86548631, 0.92615604]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1445, 'regressor__learning_rate': 0.06904535548919609, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([31.54297996, 31.56993437, 29.84231234, 30.5628624 , 30.09955144,
       30.36336303, 32.20392227, 31.31111193, 32.1520803 , 30.22526956,
       30.91764736, 32.81570292, 32.2819953 , 31.07247138]), 'score_time': array([0.40264416, 0.40591955, 0.4004581 , 0.41152263, 0.4139657 ,
       0.40938091, 0.39691043, 0.47299695, 0.41941547, 0.40307426,
       0.40177941, 0.3910532 , 0.37400246, 0.3881762 ]), 'test_pearson_r': array([0.98143452, 0.98551674, 0.99305163, 0.98150986, 0.95818788,
       0.71556482, 0.98185694, 0.95548564, 0.97223086, 0.89981561,
       0.99150756, 0.94355314, 0.9835757 , 0.93178761]), 'test_pearson_p': array([-1.24718780e-13, -1.53208671e-14, -3.05458672e-17, -1.20512768e-13,
       -1.14470959e-10, -5.71812282e-04, -1.02704392e-13, -6.73966168e-10,
       -1.62967959e-11, -3.71125414e-07, -1.32466064e-15, -4.33802863e-09,
       -2.52910759e-13, -1.90005749e-08]), 'test_spearman_r': array([0.94732221, 0.95392725, 0.97892888, 0.90175439, 0.95919272,
       0.7877193 , 0.97719298, 0.91012445, 0.91894695, 0.86319062,
       0.98915862, 0.96078431, 0.97936017, 0.8962314 ]), 'test_spearman_p': array([-7.85799085e-10, -2.57381804e-10, -3.62737404e-13, -1.34153250e-07,
       -9.34084168e-11, -6.22517985e-05, -7.06769745e-13, -1.60969752e-07,
       -7.24634890e-08, -3.98148195e-06, -9.27540331e-15, -2.48656703e-10,
       -1.55232323e-12, -4.85952887e-07]), 'test_kendall_r': array([0.84117647, 0.84457841, 0.91176471, 0.77777778, 0.85630867,
       0.70760234, 0.90643275, 0.74343714, 0.78688948, 0.747545  ,
       0.93115255, 0.85620915, 0.90849673, 0.77377465]), 'test_kendall_p': array([-5.46983525e-07, -4.63085373e-07, -5.65458167e-08, -1.64978258e-07,
       -3.20420144e-07, -4.07434860e-06, -2.27996852e-11, -1.81645563e-05,
       -5.40069919e-06, -1.55211882e-05, -7.34599652e-08, -5.28843419e-09,
       -9.76656516e-11, -7.72097590e-06]), 'test_rmse': array([-0.09725368, -0.12007909, -0.07516696, -0.1200665 , -0.20508664,
       -0.49959076, -0.12961637, -0.16829742, -0.14445587, -0.28633302,
       -0.09822025, -0.17480175, -0.11563824, -0.22600777]), 'test_mae': array([-0.06261103, -0.08174607, -0.06020468, -0.08281837, -0.12378358,
       -0.22384372, -0.08661532, -0.12412631, -0.10933795, -0.14963769,
       -0.07205605, -0.12146389, -0.07990086, -0.14190594]), 'test_r2': array([0.96265381, 0.96683941, 0.98611913, 0.95791516, 0.91612835,
       0.44146017, 0.96310331, 0.88151484, 0.94207713, 0.78328459,
       0.97687546, 0.88884954, 0.9666355 , 0.81856518]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1680, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([23.83190417, 23.97197628, 23.89805126, 25.47068167, 24.39023066,
       22.92738914, 22.97677469, 23.04255223, 23.9301312 , 23.63112998,
       26.1840713 , 24.86981034, 24.81926608, 24.30527067]), 'score_time': array([0.31262589, 0.31660414, 0.32661819, 0.33694506, 0.30472946,
       0.31648326, 0.32129669, 0.32226753, 0.36602306, 0.3189621 ,
       0.31584311, 0.32056904, 0.31822228, 0.32943058]), 'test_pearson_r': array([0.9690795 , 0.97404125, 0.97765069, 0.97729179, 0.92278481,
       0.98512444, 0.95457662, 0.73501299, 0.9945102 , 0.94793272,
       0.98964887, 0.93938592, 0.72423919, 0.98782389]), 'test_pearson_p': array([-9.13766373e-12, -2.10120346e-12, -5.95819144e-13, -6.81389439e-13,
       -1.86298356e-08, -1.92029395e-14, -2.28634835e-10, -5.10861985e-04,
       -4.07724367e-17, -2.30539480e-09, -6.41542321e-15, -7.56821676e-09,
       -6.76745046e-04, -2.33836766e-14]), 'test_spearman_r': array([0.97674428, 0.9521721 , 0.96842105, 0.97192982, 0.91970171,
       0.98025459, 0.95919272, 0.64499484, 0.99070301, 0.92156863,
       0.99328872, 0.89544945, 0.7874097 , 0.98966995]), 'test_spearman_p': array([-8.32796316e-13, -3.51549176e-10, -1.09055587e-11, -4.05534963e-12,
       -2.57096149e-08, -2.09729083e-13, -9.34084168e-11, -3.84937304e-03,
       -2.72579170e-15, -5.61751861e-08, -2.02628027e-16, -5.14723095e-07,
       -1.05010393e-04, -6.31205935e-15]), 'test_kendall_r': array([0.90322969, 0.85630867, 0.87134503, 0.90643275, 0.78592713,
       0.90322969, 0.87976918, 0.51633987, 0.95396801, 0.80392157,
       0.9573822 , 0.78416135, 0.68627451, 0.95396801]), 'test_kendall_p': array([-7.00361385e-08, -3.20420144e-07, -4.58322529e-10, -2.27996852e-11,
       -2.71955004e-06, -7.00361385e-08, -1.51234358e-07, -2.24413905e-03,
       -3.79439230e-08, -1.16879681e-07, -3.12802418e-08, -7.19458129e-06,
       -1.88440329e-05, -3.79439230e-08]), 'test_rmse': array([-0.16876539, -0.15331002, -0.17418021, -0.14239198, -0.18995614,
       -0.11711107, -0.1577782 , -0.31958124, -0.07984811, -0.1877875 ,
       -0.1072428 , -0.23739623, -0.4775789 , -0.10046794]), 'test_mae': array([-0.0981174 , -0.09723785, -0.11736297, -0.09088949, -0.1311699 ,
       -0.08227622, -0.08141811, -0.20199716, -0.05642882, -0.12525644,
       -0.07099334, -0.108226  , -0.19616638, -0.06642646]), 'test_r2': array([0.93154509, 0.94448421, 0.94224989, 0.95338382, 0.82608994,
       0.96991057, 0.90792455, 0.46579588, 0.98549819, 0.88910267,
       0.97602688, 0.87062527, 0.47899248, 0.97414903]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1353, 'regressor__learning_rate': 0.0988728761562561, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([36.4179008 , 34.46617222, 39.52322841, 34.89058375, 34.61584258,
       34.51425791, 35.66827869, 33.43764973, 36.78309155, 35.15707016,
       35.57345414, 35.69261408, 31.76697087, 33.5476656 ]), 'score_time': array([0.46740556, 0.45173097, 0.43660355, 0.44488573, 0.44562411,
       0.44375968, 0.48562002, 0.45304751, 0.45638227, 0.43248153,
       0.4931426 , 0.47574496, 0.45941138, 0.45261145]), 'test_pearson_r': array([0.99236148, 0.98247959, 0.97588525, 0.77752475, 0.89443801,
       0.98338122, 0.98240475, 0.98421096, 0.65442143, 0.9763348 ,
       0.98498451, 0.92879174, 0.96156479, 0.97014646]), 'test_pearson_p': array([-6.81583996e-17, -7.64873553e-14, -1.13024928e-12, -8.93307385e-05,
       -2.40782266e-07, -4.89643351e-14, -7.92894083e-14, -1.84834224e-13,
       -3.21149773e-03, -4.59292163e-12, -1.23966028e-13, -2.65422049e-08,
       -2.12239831e-10, -2.88881628e-11]), 'test_spearman_r': array([0.97761194, 0.97719298, 0.97323397, 0.82959995, 0.88947368,
       0.97017544, 0.95919272, 0.96384349, 0.68559637, 0.92982456,
       0.98089843, 0.83281734, 0.93188854, 0.95872033]), 'test_spearman_p': array([-6.04577347e-13, -7.06769745e-13, -2.71850932e-12, -1.11977249e-05,
       -3.49701572e-07, -6.74895947e-12, -9.34084168e-11, -1.31102802e-10,
       -1.68577669e-03, -2.36925600e-08, -8.39423191e-13, -1.79019014e-05,
       -1.87828793e-08, -3.72370945e-10]), 'test_kendall_r': array([0.91176471, 0.89473684, 0.90322969, 0.68907652, 0.8128655 ,
       0.88304094, 0.85630867, 0.86186076, 0.60328193, 0.83006536,
       0.91803772, 0.7124183 , 0.80392157, 0.86928105]), 'test_kendall_p': array([-5.65458167e-08, -6.63913300e-11, -7.00361385e-08, -5.52943981e-05,
       -2.37852170e-08, -1.79983887e-10, -3.20420144e-07, -6.72597856e-07,
       -4.88013116e-04, -2.71335027e-08, -1.11636054e-07, -7.18615992e-06,
       -1.16879681e-07, -2.15825858e-09]), 'test_rmse': array([-0.08950887, -0.10065649, -0.13897886, -0.36246361, -0.26782981,
       -0.15284785, -0.12927012, -0.10038634, -0.4691787 , -0.13273034,
       -0.08356772, -0.27286878, -0.16033383, -0.17925277]), 'test_mae': array([-0.06624188, -0.06488696, -0.10464495, -0.16643989, -0.14899475,
       -0.10394277, -0.10046097, -0.07650711, -0.20292407, -0.10386555,
       -0.05803518, -0.15796527, -0.11222342, -0.12983786]), 'test_r2': array([0.98078214, 0.96403161, 0.94685596, 0.50273996, 0.78488575,
       0.95662254, 0.962073  , 0.96722707, 0.37015439, 0.94851176,
       0.96922081, 0.85484465, 0.92238652, 0.93882838]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05881195518850607, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([2.52283049, 2.97011471, 2.4669795 , 2.47934461, 2.49218607,
       2.49597001, 2.53942466, 2.48726082, 3.00718117, 2.74238944,
       2.54577971, 2.82448077, 2.76689887, 2.80227876]), 'score_time': array([0.05865264, 0.05408001, 0.05905175, 0.05941153, 0.05879879,
       0.0611403 , 0.05818319, 0.05845761, 0.05487299, 0.05783486,
       0.05545187, 0.06047988, 0.05609727, 0.05603194]), 'test_pearson_r': array([0.97867131, 0.96473178, 0.97955519, 0.96210663, 0.95934927,
       0.98519335, 0.97167454, 0.65324094, 0.95857521, 0.98229741,
       0.95226501, 0.96675187, 0.69751285, 0.99273962]), 'test_pearson_p': array([-4.01851090e-13, -2.75471729e-11, -2.81271384e-13, -5.02596894e-11,
       -9.04542849e-11, -1.84640527e-14, -4.37595513e-12, -3.28627011e-03,
       -3.82797680e-10, -4.58804407e-13, -1.16653257e-09, -6.76462304e-11,
       -1.29104190e-03, -3.79481461e-16]), 'test_spearman_r': array([0.9122807 , 0.92091531, 0.95300844, 0.94556629, 0.94385965,
       0.97235639, 0.94912281, 0.45764463, 0.93126627, 0.93753239,
       0.94677116, 0.97729618, 0.77296182, 0.9752322 ]), 'test_spearman_p': array([-5.31127364e-08, -2.26833113e-08, -3.03463801e-10, -1.03213999e-09,
       -1.33399558e-09, -3.56556998e-12, -5.88308946e-10, -5.61746770e-02,
       -2.01602064e-08, -9.57359643e-09, -2.74029818e-09, -3.30605345e-12,
       -1.69139162e-04, -6.58873719e-12]), 'test_kendall_r': array([0.80116959, 0.81419117, 0.83186203, 0.84117647, 0.8128655 ,
       0.89149943, 0.87134503, 0.40131579, 0.81188561, 0.8000043 ,
       0.87132984, 0.89542484, 0.76470588, 0.89542484]), 'test_kendall_p': array([-4.67377304e-08, -1.30573227e-06, -7.73204800e-07, -5.46983525e-07,
       -2.37852170e-08, -1.03161918e-07, -4.58322529e-10, -2.06758963e-02,
       -3.02710363e-06, -3.75687779e-06, -5.42460793e-07, -2.96242626e-10,
       -8.04176944e-07, -2.96242626e-10]), 'test_rmse': array([-0.12518507, -0.16638475, -0.11472593, -0.17846566, -0.18686657,
       -0.12111827, -0.14077405, -0.40242519, -0.22741969, -0.12838848,
       -0.15121867, -0.16091017, -0.47573427, -0.08455243]), 'test_mae': array([-0.0822637 , -0.11761394, -0.0902726 , -0.1194631 , -0.12735733,
       -0.09180023, -0.09808059, -0.22172801, -0.13055489, -0.08467193,
       -0.08520009, -0.12146704, -0.19076281, -0.06655285]), 'test_r2': array([0.95584751, 0.9274714 , 0.94595372, 0.89684969, 0.91007239,
       0.96962386, 0.93575736, 0.22472123, 0.90645831, 0.96436631,
       0.90405556, 0.92796169, 0.41272496, 0.98264229]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 195, 'regressor__learning_rate': 0.07130115596548767, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([5.49275589, 5.91204453, 5.81166863, 6.08586526, 6.0539012 ,
       5.34219027, 6.27977467, 5.87642694, 6.0571816 , 6.64046741,
       5.9412961 , 6.09638381, 5.9276216 , 6.3781414 ]), 'score_time': array([0.10671735, 0.09755063, 0.11298394, 0.09734416, 0.10188198,
       0.10985231, 0.11525536, 0.09715986, 0.09715033, 0.09209919,
       0.10374904, 0.10273099, 0.11031985, 0.10489678]), 'test_pearson_r': array([0.9262199 , 0.92116556, 0.99587873, 0.98813896, 0.93433804,
       0.98668095, 0.98336083, 0.96708206, 0.94598704, 0.97976043,
       0.98896337, 0.76171985, 0.97771517, 0.97080327]), 'test_pearson_p': array([-1.28051900e-08, -2.20995504e-08, -3.63782678e-19, -2.83012138e-15,
       -4.88934096e-09, -7.54482902e-15, -4.94738611e-14, -6.25201668e-11,
       -3.07271945e-09, -1.32888661e-12, -1.06926375e-14, -2.39544069e-04,
       -2.85209939e-12, -2.42284140e-11]), 'test_spearman_r': array([0.94251874, 0.88947368, 0.98683093, 0.97891188, 0.9754386 ,
       0.97192982, 0.97192982, 0.84762397, 0.95459236, 0.92720714,
       0.99793602, 0.78615744, 0.96590961, 0.9752322 ]), 'test_spearman_p': array([-1.62288718e-09, -3.49701572e-07, -6.85587369e-15, -3.65212086e-13,
       -1.31906436e-12, -4.05534963e-12, -4.05534963e-12, -8.95572607e-06,
       -7.87841526e-10, -3.14918237e-08, -1.64512317e-20, -1.09593705e-04,
       -8.24154170e-11, -6.58873719e-12]), 'test_kendall_r': array([0.8211179 , 0.70760234, 0.9353103 , 0.92039002, 0.89473684,
       0.88304094, 0.88304094, 0.66447368, 0.86928105, 0.83934877,
       0.9869281 , 0.74343714, 0.87501894, 0.92156863]), 'test_kendall_p': array([-9.53596222e-07, -4.07434860e-06, -2.55431689e-08, -4.49940084e-08,
       -6.63913300e-11, -1.79983887e-10, -1.79983887e-10, -1.27555899e-04,
       -2.15825858e-09, -1.22329014e-06, -5.62291451e-15, -1.81645563e-05,
       -4.53574602e-07, -2.92550870e-11]), 'test_rmse': array([-0.18776569, -0.19454152, -0.07486009, -0.09000936, -0.19961282,
       -0.11717359, -0.12403257, -0.1179782 , -0.1974506 , -0.14690813,
       -0.09604329, -0.47035825, -0.1546296 , -0.19409871]), 'test_mae': array([-0.1193755 , -0.13312206, -0.05917661, -0.06124806, -0.10936456,
       -0.07852578, -0.08094784, -0.08718683, -0.11862875, -0.10716269,
       -0.06466513, -0.20100791, -0.12785573, -0.14648243]), 'test_r2': array([0.84734103, 0.82155575, 0.99000231, 0.97577515, 0.85120037,
       0.97348483, 0.96419848, 0.91366552, 0.88104138, 0.95482198,
       0.9758907 , 0.53495172, 0.93862615, 0.92829162]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 396, 'regressor__learning_rate': 0.09970297556829277, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([ 8.69837332,  8.26531219,  8.77020931,  8.92807674,  7.88646626,
        8.10454011, 10.14074779,  9.1565156 ,  8.96494746,  8.51607752,
        7.85688639,  9.24976254,  8.65853357,  8.80002594]), 'score_time': array([0.12306499, 0.12301064, 0.13243127, 0.12395668, 0.13517904,
       0.14102769, 0.12287021, 0.13082027, 0.12360811, 0.12319732,
       0.15490532, 0.13699698, 0.12196922, 0.13355613]), 'test_pearson_r': array([0.9814005 , 0.76013238, 0.98313368, 0.96514808, 0.92674596,
       0.99588673, 0.94832096, 0.95029108, 0.96102723, 0.98911569,
       0.97302234, 0.94386301, 0.96546009, 0.99341007]), 'test_pearson_p': array([-1.26660542e-13, -1.58809241e-04, -5.54748509e-14, -2.49378777e-11,
       -1.20715044e-08, -3.57834776e-19, -6.70096964e-10, -1.60308077e-09,
       -2.36780421e-10, -9.57211620e-15, -1.29634080e-11, -4.15523328e-09,
       -9.13915765e-11, -1.75173697e-16]), 'test_spearman_r': array([0.95919272, 0.7205635 , 0.98814315, 0.96445819, 0.94035088,
       0.99298246, 0.93988601, 0.89462858, 0.92307705, 0.98450466,
       0.97470328, 0.96904025, 0.95665635, 0.9752322 ]), 'test_spearman_p': array([-9.34084168e-11, -5.01222852e-04, -2.82167308e-15, -2.93899065e-11,
       -2.20654144e-09, -3.32215984e-17, -2.35329013e-09, -5.46496172e-07,
       -4.83257537e-08, -1.59200608e-13, -7.78922481e-12, -3.85140601e-11,
       -5.46578066e-10, -6.58873719e-12]), 'test_kendall_r': array([0.89149943, 0.63719309, 0.94398977, 0.85630867, 0.83625731,
       0.95321637, 0.8211179 , 0.78291168, 0.78688948, 0.94080983,
       0.89180807, 0.89542484, 0.85620915, 0.92156863]), 'test_kendall_p': array([-1.03161918e-07, -1.52508316e-04, -2.04681459e-08, -3.20420144e-07,
       -5.55516932e-09, -1.16815227e-13, -9.53596222e-07, -6.36380428e-06,
       -5.40069919e-06, -5.81823612e-08, -2.53540670e-07, -2.96242626e-10,
       -5.28843419e-09, -2.92550870e-11]), 'test_rmse': array([-0.13017406, -0.46313128, -0.12833799, -0.1495897 , -0.18377886,
       -0.06539796, -0.16966722, -0.19812468, -0.15759611, -0.1002706 ,
       -0.15558391, -0.22583186, -0.13851328, -0.0894606 ]), 'test_mae': array([-0.08253899, -0.18268947, -0.0929043 , -0.09519514, -0.12252695,
       -0.04443501, -0.13390413, -0.13873693, -0.10762527, -0.07870532,
       -0.10381663, -0.15944529, -0.09525599, -0.06841714]), 'test_r2': array([0.95694442, 0.54101716, 0.96376172, 0.92429746, 0.85095906,
       0.9900197 , 0.88941515, 0.89562895, 0.91175942, 0.97350513,
       0.94452856, 0.88924735, 0.93118465, 0.98351799]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 525, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_2': {'cluster size (%)': 10, 6: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.5560636714137456, 'test_rmse': 0.7183778227965382, 'test_r2': -2.979205818196437, 'test_pearson_r': array([-0.51867553]), 'test_pearson_p_value': array([0.00789667]), 'test_spearman_r': -0.41583635811871483, 'test_spearman_p_value': 0.03869377914849798, 'test_kendall_r': -0.27739010918706175, 'test_kendall_p_value': 0.05910540606999712, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.5288939640079082, 'test_rmse': 0.6907004280362303, 'test_r2': -2.6784937280378944, 'test_pearson_r': array([-0.41461169]), 'test_pearson_p_value': array([0.03932934]), 'test_spearman_r': -0.3080583716117978, 'test_spearman_p_value': 0.13409565525258466, 'test_kendall_r': -0.18409881726229127, 'test_kendall_p_value': 0.2110251138601681, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.050412397456456995, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.6264365452191396, 'test_rmse': 0.7756854821615418, 'test_r2': -3.6394008317068955, 'test_pearson_r': array([-0.5229977]), 'test_pearson_p_value': array([0.00730675]), 'test_spearman_r': -0.40924193826048894, 'test_spearman_p_value': 0.04221426899706326, 'test_kendall_r': -0.3051291201057679, 'test_kendall_p_value': 0.037880142616071914, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 178, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.6127641901974767, 'test_rmse': 0.7426597556703206, 'test_r2': -3.25275486771164, 'test_pearson_r': array([-0.5687689]), 'test_pearson_p_value': array([0.00300907]), 'test_spearman_r': -0.4441535728040377, 'test_spearman_p_value': 0.026130326950425668, 'test_kendall_r': -0.34673763648382716, 'test_kendall_p_value': 0.01831139187398812, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1133, 'regressor__learning_rate': 0.06163770353099294, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.5795622535287057, 'test_rmse': 0.7806186824156908, 'test_r2': -3.6985997531646095, 'test_pearson_r': array([-0.51131473]), 'test_pearson_p_value': array([0.00899271]), 'test_spearman_r': -0.29059914400155734, 'test_spearman_p_value': 0.15876573926893608, 'test_kendall_r': -0.15631031654345484, 'test_kendall_p_value': 0.2882543368290348, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1123, 'regressor__learning_rate': 0.05913781436124809, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.5940461324028153, 'test_rmse': 0.7408947470298621, 'test_r2': -3.232564654210641, 'test_pearson_r': array([-0.51821389]), 'test_pearson_p_value': array([0.00796196]), 'test_spearman_r': -0.41700007927016647, 'test_spearman_p_value': 0.03809741082394459, 'test_kendall_r': -0.3259333782947975, 'test_kendall_p_value': 0.02657495595884017, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 714, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.2925900552370202, 'test_ystd': 0.36012619731879836, 'test_mae': 0.6113492996001989, 'test_rmse': 0.8429754320252462, 'test_r2': -4.479241022825933, 'test_pearson_r': array([-0.55077575]), 'test_pearson_p_value': array([0.00432829]), 'test_spearman_r': -0.31659399399902644, 'test_spearman_p_value': 0.12309781623475938, 'test_kendall_r': -0.1910459424420004, 'test_kendall_p_value': 0.19430459054634996, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 388, 'regressor__learning_rate': 0.0519604998171852, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_2': {'cluster size (%)': 10, 6: {'fit_time': array([8.62284708, 9.04459047, 8.41379857, 8.21514177, 8.4457655 ,
       8.44021988, 8.57016468, 8.81200075, 8.24881124, 8.45487452]), 'score_time': array([0.15189004, 0.12780857, 0.13646412, 0.14771724, 0.1382091 ,
       0.13706613, 0.13516474, 0.13257194, 0.14172149, 0.13426852]), 'test_pearson_r': array([0.96468733, 0.98746903, 0.98720029, 0.95658663, 0.82459726,
       0.96363304, 0.98180781, 0.9548616 , 0.96890769, 0.93691191]), 'test_pearson_p': array([-2.07193514e-15, -9.28499439e-21, -1.19611861e-20, -2.36875447e-14,
       -2.21794871e-07, -2.93313089e-15, -7.90715665e-19, -3.74726694e-14,
       -4.59713156e-16, -5.53895931e-12]), 'test_spearman_r': array([0.93964782, 0.98016416, 0.97264957, 0.93964782, 0.84410256,
       0.95707213, 0.97247394, 0.95998638, 0.94425445, 0.92825545]), 'test_spearman_p': array([-1.13018050e-12, -2.21388166e-18, -1.00594975e-16, -1.13018050e-12,
       -5.99639324e-08, -2.07492088e-14, -1.08528386e-16, -9.06081002e-15,
       -4.46450860e-13, -2.32758300e-11]), 'test_kendall_r': array([0.85670364, 0.90432099, 0.88307692, 0.80739695, 0.80307692,
       0.84081275, 0.88135698, 0.84259661, 0.82407407, 0.81803119]), 'test_kendall_p': array([-8.84108293e-10, -1.03800840e-10, -5.02648846e-15, -7.63658832e-09,
       -2.23085493e-11, -1.97712077e-09, -2.87422002e-10, -1.74127560e-09,
       -3.91013273e-09, -1.04334108e-08]), 'test_rmse': array([-0.17128347, -0.11226143, -0.10633479, -0.18102923, -0.38162047,
       -0.16386242, -0.12121574, -0.19647681, -0.1449464 , -0.18631316]), 'test_mae': array([-0.10204   , -0.077298  , -0.07611423, -0.12804405, -0.14348001,
       -0.09266791, -0.0924262 , -0.14517539, -0.10677277, -0.10642248]), 'test_r2': array([0.92294856, 0.97400224, 0.97363428, 0.91177204, 0.66388866,
       0.92421402, 0.96305043, 0.89999158, 0.93705886, 0.86679718]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 529, 'regressor__learning_rate': 0.081119136652345, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([22.06171989, 22.45286202, 23.13228703, 20.93757868, 20.7511065 ,
       18.9114306 , 20.60017371, 19.83369946, 19.92274475, 20.60439134]), 'score_time': array([0.29915762, 0.30328298, 0.27923584, 0.2848866 , 0.28618217,
       0.28943443, 0.33180213, 0.28847361, 0.28011656, 0.28642368]), 'test_pearson_r': array([0.98211726, 0.96553607, 0.97711155, 0.95062535, 0.78508831,
       0.95889085, 0.93080831, 0.9789004 , 0.98257771, 0.95923993]), 'test_pearson_p': array([-6.44612506e-19, -1.55412819e-15, -1.21436646e-17, -1.07565647e-13,
       -2.03963260e-06, -1.24587776e-14, -5.56451276e-12, -4.61556754e-18,
       -4.72469988e-19, -4.07045629e-14]), 'test_spearman_r': array([0.94917007, 0.96492764, 0.91263465, 0.94236362, 0.81518209,
       0.95329376, 0.88015047, 0.98050621, 0.97811966, 0.92440856]), 'test_spearman_p': array([-1.51279150e-13, -1.91129249e-15, -8.30569227e-11, -6.59686116e-13,
       -3.94404746e-07, -5.59928024e-14, -3.10429069e-09, -1.79995685e-18,
       -7.10963196e-18, -4.16326889e-11]), 'test_kendall_r': array([0.83540776, 0.86379365, 0.82588696, 0.83771352, 0.79507028,
       0.80806503, 0.72111026, 0.91049816, 0.90153846, 0.79131997]), 'test_kendall_p': array([-2.87173974e-09, -7.43346356e-10, -3.45087960e-09, -2.26436344e-09,
       -1.28459101e-08, -8.44248026e-09, -2.48303842e-07, -7.74772425e-11,
       -4.00683361e-16, -3.08333456e-08]), 'test_rmse': array([-0.11203767, -0.17619115, -0.13889193, -0.21368207, -0.45657018,
       -0.16318831, -0.25011431, -0.12713585, -0.11235385, -0.17509703]), 'test_mae': array([-0.07771874, -0.09669798, -0.10279497, -0.14356039, -0.16507605,
       -0.11622335, -0.14768266, -0.08659098, -0.07825099, -0.10962313]), 'test_r2': array([0.96371903, 0.92750396, 0.94221278, 0.89357042, 0.58765207,
       0.90230527, 0.8622853 , 0.95675522, 0.96126312, 0.89846732]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1216, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([10.55823565, 10.76174784,  9.30614614,  9.61598158, 10.1671648 ,
       10.03745341,  9.67319536, 10.5892055 ,  9.84068203,  9.74935317]), 'score_time': array([0.15494156, 0.14719868, 0.16075468, 0.15265918, 0.15237641,
       0.16281867, 0.1663394 , 0.15242767, 0.16059017, 0.15637755]), 'test_pearson_r': array([0.97143689, 0.97431898, 0.97900322, 0.96813248, 0.97621533,
       0.86004597, 0.98191506, 0.9835792 , 0.97532734, 0.79738703]), 'test_pearson_p': array([-1.68254467e-16, -4.76515856e-17, -4.35508589e-18, -6.15313165e-16,
       -1.91655703e-17, -1.79140053e-08, -7.36960942e-19, -2.33381976e-19,
       -2.96189883e-17, -1.82081089e-06]), 'test_spearman_r': array([0.95278845, 0.96392547, 0.96307692, 0.95879639, 0.97726108,
       0.8208547 , 0.97450848, 0.97571825, 0.89753514, 0.84455566]), 'test_spearman_p': array([-6.35440521e-14, -2.66631331e-15, -3.50894707e-15, -1.28004411e-14,
       -1.12337123e-17, -2.79928636e-07, -4.36416530e-17, -2.45024244e-17,
       -5.19384015e-10, -1.10624752e-07]), 'test_kendall_r': array([0.8346303 , 0.86286697, 0.88307692, 0.8505403 , 0.88752031,
       0.69230769, 0.88236986, 0.87346095, 0.79258983, 0.82274708]), 'test_kendall_p': array([-2.57655388e-09, -6.69494483e-10, -5.02648846e-15, -1.16530353e-09,
       -2.16002957e-10, -5.18083444e-08, -3.19568487e-10, -4.35362070e-10,
       -1.96105051e-08, -9.00606982e-09]), 'test_rmse': array([-0.15677684, -0.17096322, -0.13925666, -0.16284989, -0.10784518,
       -0.26771119, -0.11911213, -0.12459936, -0.14691622, -0.39699282]), 'test_mae': array([-0.10395897, -0.1070982 , -0.09082197, -0.11492598, -0.07580302,
       -0.16538001, -0.08308452, -0.08262779, -0.08283109, -0.14039159]), 'test_r2': array([0.94235075, 0.93661441, 0.95528243, 0.93305242, 0.94903765,
       0.73066246, 0.96290391, 0.96466454, 0.94851124, 0.61540719]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 610, 'regressor__learning_rate': 0.09953283319761443, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([34.30093098, 38.01356435, 32.80575156, 35.02387834, 34.14170551,
       35.81647325, 32.47068334, 33.3148129 , 34.18203855, 34.75818396]), 'score_time': array([0.45289326, 0.47622466, 0.44749641, 0.45810127, 0.4513998 ,
       0.45918417, 0.46483707, 0.45388103, 0.52296185, 0.43492603]), 'test_pearson_r': array([0.98830146, 0.97935275, 0.81920816, 0.93765517, 0.9708294 ,
       0.96481065, 0.71958303, 0.98289867, 0.98138818, 0.97082177]), 'test_pearson_p': array([-4.08686536e-21, -3.56688845e-18, -3.09594645e-07, -1.65167150e-12,
       -2.15917883e-16, -1.98801560e-15, -3.42387855e-05, -3.78601794e-19,
       -1.03737018e-18, -9.22118084e-16]), 'test_spearman_r': array([0.98734395, 0.96563517, 0.84796772, 0.92904771, 0.96358353,
       0.95295159, 0.78522572, 0.96751032, 0.95948027, 0.96230769]), 'test_spearman_p': array([-1.04536365e-20, -1.50211227e-15, -4.53084810e-08, -7.45372578e-12,
       -2.98065022e-15, -6.10102744e-14, -2.02559454e-06, -7.73521387e-16,
       -1.05083756e-14, -1.68032629e-14]), 'test_kendall_r': array([0.92735814, 0.86286697, 0.74150573, 0.82588696, 0.85670364,
       0.84521744, 0.70679012, 0.87346095, 0.84437697, 0.86666667]), 'test_kendall_p': array([-3.65869616e-11, -6.69494483e-10, -1.81831733e-07, -3.45087960e-09,
       -8.84108293e-10, -1.69973059e-09, -4.41890173e-07, -4.35362070e-10,
       -1.53302077e-09, -1.54508458e-13]), 'test_rmse': array([-0.1028349 , -0.12348708, -0.3131703 , -0.23768668, -0.17576285,
       -0.14973281, -0.43631152, -0.11285384, -0.14198774, -0.16120265]), 'test_mae': array([-0.06996974, -0.07786915, -0.13888239, -0.12973229, -0.10760536,
       -0.09620286, -0.18968244, -0.07891121, -0.10776036, -0.11367014]), 'test_r2': array([0.97323507, 0.95684827, 0.60017641, 0.87431246, 0.93543415,
       0.92636025, 0.45955822, 0.96289583, 0.95782246, 0.9389972 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0530129783044269, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([20.52829862, 20.72211862, 18.77451563, 20.80304766, 19.66743422,
       19.97807837, 21.84903979, 22.5839777 , 20.22128105, 20.37219977]), 'score_time': array([0.28526258, 0.2797277 , 0.27666545, 0.27146077, 0.27675319,
       0.28636026, 0.30203557, 0.27267909, 0.37717438, 0.2766974 ]), 'test_pearson_r': array([0.97288564, 0.98700497, 0.95400152, 0.98004403, 0.96559632,
       0.76660582, 0.9883468 , 0.94836384, 0.96549009, 0.81764162]), 'test_pearson_p': array([-9.07667207e-17, -1.43306981e-20, -4.67894555e-14, -2.37877749e-18,
       -1.52231275e-15, -4.94798254e-06, -3.90169562e-21, -1.81959310e-13,
       -1.57881949e-15, -6.03298181e-07]), 'test_spearman_r': array([0.85406361, 0.95809818, 0.92681259, 0.96717949, 0.9391453 ,
       0.7257486 , 0.96409034, 0.92455124, 0.95127374, 0.83054435]), 'test_spearman_p': array([-2.86599187e-08, -1.56037189e-14, -1.06887474e-11, -8.72029143e-16,
       -1.24515592e-12, -2.71690056e-05, -2.52584955e-15, -1.52182215e-11,
       -9.20964795e-14, -2.77522403e-07]), 'test_kendall_r': array([0.71518399, 0.87480785, 0.81790123, 0.85846154, 0.81538462,
       0.622294  , 0.87963382, 0.80806503, 0.85670364, 0.77128655]), 'test_kendall_p': array([-3.44386749e-07, -4.31182303e-10, -5.10090695e-09, -9.72056644e-14,
       -7.50650577e-12, -9.19131970e-06, -3.28073037e-10, -8.44248026e-09,
       -8.84108293e-10, -6.79649026e-08]), 'test_rmse': array([-0.14815711, -0.09421888, -0.1868868 , -0.12216472, -0.17186987,
       -0.30790413, -0.11769737, -0.16951892, -0.15422633, -0.40918044]), 'test_mae': array([-0.10225434, -0.072158  , -0.12370373, -0.08721773, -0.1148361 ,
       -0.15989588, -0.07814615, -0.10920606, -0.10946503, -0.15212436]), 'test_r2': array([0.94304172, 0.97408262, 0.90736779, 0.96033445, 0.92984053,
       0.51684057, 0.976112  , 0.89813644, 0.92969391, 0.64028351]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 1210, 'regressor__learning_rate': 0.09823939547866578, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([15.76549625, 15.83645391, 16.96403956, 15.41771054, 15.14406109,
       15.85452199, 16.23438239, 15.80423808, 15.43400359, 16.65522623]), 'score_time': array([0.22504497, 0.22949171, 0.23796129, 0.24238038, 0.24233532,
       0.22419977, 0.27127266, 0.24887419, 0.24422193, 0.23760009]), 'test_pearson_r': array([0.94411305, 0.96623423, 0.98967071, 0.92160053, 0.98944373,
       0.96094571, 0.96524302, 0.98476038, 0.80836673, 0.9480029 ]), 'test_pearson_p': array([-4.59892505e-13, -1.22008987e-15, -9.24039225e-22, -2.37446661e-11,
       -1.19802898e-21, -6.80534102e-15, -1.71774349e-15, -9.58620852e-20,
       -5.86563831e-07, -6.33358120e-13]), 'test_spearman_r': array([0.92478632, 0.92389272, 0.98922169, 0.93964782, 0.96666098,
       0.91878955, 0.91857702, 0.99367415, 0.8559208 , 0.9228698 ]), 'test_spearman_p': array([-1.46769529e-11, -1.68326273e-11, -1.53624531e-21, -1.13018050e-12,
       -1.04968852e-15, -3.57052611e-11, -3.68016657e-11, -2.62502919e-24,
       -2.48253277e-08, -5.20886434e-11]), 'test_kendall_r': array([0.80923077, 0.82226541, 0.94427697, 0.81972362, 0.86286697,
       0.78274361, 0.77898828, 0.955317  , 0.7441941 , 0.78464216]), 'test_kendall_p': array([-1.30362573e-11, -4.42869107e-09, -1.69323311e-11, -4.50549884e-09,
       -6.69494483e-10, -2.14457728e-08, -2.70665323e-08, -8.22679214e-12,
       -1.17557691e-07, -4.02127193e-08]), 'test_rmse': array([-0.14630415, -0.1863552 , -0.09313638, -0.19757153, -0.10675692,
       -0.16789606, -0.14802757, -0.12171651, -0.4193066 , -0.22560331]), 'test_mae': array([-0.09542189, -0.10801534, -0.07253929, -0.10017853, -0.07451276,
       -0.11456088, -0.09714005, -0.08090548, -0.21825705, -0.1636255 ]), 'test_r2': array([0.88973885, 0.92525682, 0.97651702, 0.83252691, 0.97820213,
       0.89883101, 0.92817391, 0.96972649, 0.64360872, 0.88858091]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 963, 'regressor__learning_rate': 0.09970068482533602, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([36.98100662, 37.61099482, 36.7427032 , 36.16447139, 38.17834449,
       38.27627254, 34.96703815, 37.03650975, 37.8325491 , 36.88217902]), 'score_time': array([0.46885777, 0.4641943 , 0.4708662 , 0.48454428, 0.52067471,
       0.4891367 , 0.4933157 , 0.46297979, 0.5147934 , 0.47909617]), 'test_pearson_r': array([0.97590083, 0.79096808, 0.93636805, 0.98296973, 0.97278013,
       0.91543242, 0.96720093, 0.96241101, 0.9213789 , 0.99135126]), 'test_pearson_p': array([-2.24017734e-17, -1.51092787e-06, -2.09654566e-12, -3.60279793e-19,
       -9.50452062e-17, -5.70372862e-11, -8.65311644e-16, -4.33348412e-15,
       -2.45342052e-11, -8.60957851e-22]), 'test_spearman_r': array([0.94742363, 0.7800958 , 0.9154123 , 0.95622435, 0.97862884,
       0.85157324, 0.96780964, 0.96477434, 0.93641026, 0.97230769]), 'test_spearman_p': array([-2.24850326e-13, -2.61272671e-06, -5.71942760e-11, -2.61225457e-14,
       -5.37363792e-18, -3.46414351e-08, -6.93276104e-16, -2.01239928e-15,
       -2.08037550e-12, -5.09206359e-16]), 'test_kendall_r': array([0.85850185, 0.71296636, 0.78574839, 0.86111111, 0.89368365,
       0.70062062, 0.89134303, 0.87963382, 0.79692308, 0.87333333]), 'test_kendall_p': array([-1.07554239e-09, -3.50450469e-07, -2.29317032e-08, -7.62335091e-10,
       -1.62021758e-10, -5.56118367e-07, -2.30833880e-10, -3.28073037e-10,
       -3.76435185e-11, -7.25596650e-14]), 'test_rmse': array([-0.12807976, -0.46322017, -0.2113043 , -0.10250965, -0.13502532,
       -0.2406279 , -0.16541579, -0.1750969 , -0.2245631 , -0.08509791]), 'test_mae': array([-0.08368333, -0.19127873, -0.12347349, -0.06515845, -0.09507879,
       -0.15778818, -0.10492311, -0.12632881, -0.14406444, -0.0612691 ]), 'test_r2': array([0.94961395, 0.60472224, 0.86466801, 0.96237197, 0.94537114,
       0.83570495, 0.928541  , 0.92613868, 0.8466062 , 0.98221754]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'CO_3': {'cluster size (%)': 28, 6: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.651567942903517, 'test_rmse': 0.8219684979535532, 'test_r2': -0.6739556383778555, 'test_pearson_r': array([-0.2196616]), 'test_pearson_p_value': array([0.06186349]), 'test_spearman_r': -0.16590157326061922, 'test_spearman_p_value': 0.1606943092473433, 'test_kendall_r': -0.1013587927109487, 'test_kendall_p_value': 0.20677541836127078, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 346, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.660903426962099, 'test_rmse': 0.8391541188580988, 'test_r2': -0.7446851267314212, 'test_pearson_r': array([-0.22072164]), 'test_pearson_p_value': array([0.06058494]), 'test_spearman_r': -0.14666492010475513, 'test_spearman_p_value': 0.21564724900168755, 'test_kendall_r': -0.0848304596169826, 'test_kendall_p_value': 0.2902677514060188, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 719, 'regressor__learning_rate': 0.09811401036904599, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.644139989440342, 'test_rmse': 0.8083019555450786, 'test_r2': -0.6187540075207723, 'test_pearson_r': array([-0.18522755]), 'test_pearson_p_value': array([0.11667606]), 'test_spearman_r': -0.10809664163485667, 'test_spearman_p_value': 0.36265981358502564, 'test_kendall_r': -0.07627773940946063, 'test_kendall_p_value': 0.34078704441836116, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 722, 'regressor__learning_rate': 0.09796469239326663, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.7000771393276795, 'test_rmse': 0.8641871971801955, 'test_r2': -0.8503302700235162, 'test_pearson_r': array([-0.31871385]), 'test_pearson_p_value': array([0.00599321]), 'test_spearman_r': -0.3718174356446348, 'test_spearman_p_value': 0.001199743626417677, 'test_kendall_r': -0.2676887928144523, 'test_kendall_p_value': 0.0008533909564173316, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 283, 'regressor__learning_rate': 0.05299532513538436, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.7012197870241469, 'test_rmse': 0.8766423491108442, 'test_r2': -0.9040506253121021, 'test_pearson_r': array([-0.35398974]), 'test_pearson_p_value': array([0.00212324]), 'test_spearman_r': -0.4001342391638646, 'test_spearman_p_value': 0.0004523504632714966, 'test_kendall_r': -0.28407890701875227, 'test_kendall_p_value': 0.0003940120966983888, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 725, 'regressor__learning_rate': 0.04236744411111384, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.6982239261797957, 'test_rmse': 0.8309725420542918, 'test_r2': -0.7108303450009248, 'test_pearson_r': array([-0.23205998]), 'test_pearson_p_value': array([0.04820482]), 'test_spearman_r': -0.4330211265120365, 'test_spearman_p_value': 0.00013002852765645268, 'test_kendall_r': -0.30166559281702354, 'test_kendall_p_value': 0.00017061077035207973, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 342, 'regressor__learning_rate': 0.05789134590676519, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'test_mad': 0.5301737426401295, 'test_ystd': 0.6353063573007689, 'test_mae': 0.6232875284299183, 'test_rmse': 0.7487382855237855, 'test_r2': -0.3889726010002228, 'test_pearson_r': array([-0.00646322]), 'test_pearson_p_value': array([0.95672067]), 'test_spearman_r': -0.06531384115775218, 'test_spearman_p_value': 0.5830076722657291, 'test_kendall_r': -0.04590714019611727, 'test_kendall_p_value': 0.5675071426664883, 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.055757402276930934, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'ID_3': {'cluster size (%)': 25, 6: {'fit_time': array([29.69078779, 34.26862478, 30.32933331, 30.63198018]), 'score_time': array([0.63799691, 0.64851403, 0.60165668, 0.59518719]), 'test_pearson_r': array([0.95638694, 0.89490145, 0.95101036, 0.94873757]), 'test_pearson_p': array([-2.22863619e-35, -9.36268479e-24, -8.00052549e-34, -1.02854944e-32]), 'test_spearman_r': array([0.91399532, 0.92318115, 0.94074189, 0.92987579]), 'test_spearman_p': array([-2.27445764e-26, -7.46413947e-28, -2.74633081e-31, -1.28182964e-28]), 'test_kendall_r': array([0.81303061, 0.84091517, 0.80714743, 0.80328398]), 'test_kendall_p': array([-1.39099244e-21, -4.53919077e-23, -2.82754792e-21, -8.06128436e-21]), 'test_rmse': array([-0.19823307, -0.29150186, -0.19350536, -0.18091262]), 'test_mae': array([-0.1055052 , -0.12339225, -0.12553705, -0.11250145]), 'test_r2': array([0.90932405, 0.79989888, 0.90412765, 0.89935344]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.060400670706141246, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([32.13556314, 31.84200358, 32.89420199, 32.02310967]), 'score_time': array([0.66869879, 0.64177656, 0.60070968, 0.60545754]), 'test_pearson_r': array([0.87166875, 0.90999957, 0.95446907, 0.95437764]), 'test_pearson_p': array([-3.51391686e-21, -8.94088785e-26, -8.39843167e-35, -3.01566444e-34]), 'test_spearman_r': array([0.83816393, 0.92449758, 0.93712228, 0.94330853]), 'test_spearman_p': array([-3.07898288e-18, -4.41850946e-28, -1.68237644e-30, -2.14954305e-31]), 'test_kendall_r': array([0.71783734, 0.82236801, 0.79402286, 0.82008043]), 'test_kendall_p': array([-3.73158227e-17, -4.44858450e-22, -1.14353429e-20, -1.16653831e-21]), 'test_rmse': array([-0.34115571, -0.28794257, -0.18440702, -0.17284589]), 'test_mae': array([-0.16849704, -0.12585108, -0.11871664, -0.10916327]), 'test_r2': array([0.69839889, 0.81851024, 0.90833985, 0.91048959]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([6.94539857, 6.63006473, 6.60254765, 7.21746325]), 'score_time': array([0.16506839, 0.16484666, 0.16201353, 0.15723658]), 'test_pearson_r': array([0.97199333, 0.95835327, 0.91094018, 0.90039867]), 'test_pearson_p': array([-2.45897135e-41, -5.36780494e-36, -6.51564044e-26, -4.34904114e-24]), 'test_spearman_r': array([0.96638472, 0.95518767, 0.90343027, 0.91311829]), 'test_spearman_p': array([-7.10211676e-39, -5.14369531e-35, -7.43132205e-25, -7.63658930e-26]), 'test_kendall_r': array([0.85204908, 0.83321321, 0.78969109, 0.81438353]), 'test_kendall_p': array([-1.35871466e-23, -1.11871469e-22, -1.68610280e-20, -3.04046654e-21]), 'test_rmse': array([-0.16342752, -0.1811287 , -0.23945136, -0.29639739]), 'test_mae': array([-0.11442238, -0.12598172, -0.13272833, -0.1282346 ]), 'test_r2': array([0.93846644, 0.90750491, 0.82322298, 0.80761782]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 470, 'regressor__learning_rate': 0.0984046590010431, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([30.59042716, 32.75500417, 29.45643425, 30.79947281]), 'score_time': array([0.6164515 , 0.6426816 , 0.63210726, 0.61164236]), 'test_pearson_r': array([0.98199223, 0.91064318, 0.88621294, 0.93881281]), 'test_pearson_p': array([-2.59352619e-47, -7.20298501e-26, -9.98236288e-23, -2.14088047e-30]), 'test_spearman_r': array([0.98215519, 0.90392727, 0.90603485, 0.92629988]), 'test_spearman_p': array([-1.95247014e-47, -6.36531732e-25, -3.26987182e-25, -5.67648848e-28]), 'test_kendall_r': array([0.90074424, 0.78960039, 0.79334738, 0.79413978]), 'test_kendall_p': array([-5.69231927e-26, -1.60853108e-20, -1.21475116e-20, -1.95291812e-20]), 'test_rmse': array([-0.11328122, -0.27812973, -0.28303556, -0.22840169]), 'test_mae': array([-0.07234995, -0.15319104, -0.1258509 , -0.14018789]), 'test_r2': array([0.96368038, 0.82280479, 0.77297554, 0.87691924]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.0441751657388304, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([29.48077583, 31.91090727, 30.43224049, 31.26755619]), 'score_time': array([0.63152242, 0.60318542, 0.62107396, 0.58565879]), 'test_pearson_r': array([0.96597425, 0.97159318, 0.88540558, 0.84971451]), 'test_pearson_p': array([-1.03453751e-38, -3.82142139e-41, -1.23163436e-22, -6.86781665e-19]), 'test_spearman_r': array([0.90012245, 0.9706493 , 0.83081398, 0.88210108]), 'test_spearman_p': array([-2.03962980e-24, -1.05499643e-40, -1.10883391e-17, -6.12768004e-22]), 'test_kendall_r': array([0.75018595, 0.86856042, 0.74813111, 0.80557096]), 'test_kendall_p': array([-1.35331630e-18, -1.71426987e-24, -1.73827594e-18, -6.13461827e-21]), 'test_rmse': array([-0.15987085, -0.15263446, -0.30927028, -0.33634772]), 'test_mae': array([-0.10502507, -0.1066195 , -0.13977989, -0.1422481 ]), 'test_r2': array([0.93285195, 0.94252953, 0.76147504, 0.70759978]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.05212551398436097, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([5.58305907, 3.94547462, 4.45681548, 4.55960155]), 'score_time': array([0.11463022, 0.11769199, 0.12107801, 0.1176734 ]), 'test_pearson_r': array([0.89077529, 0.98177425, 0.96825059, 0.88692302]), 'test_pearson_p': array([-2.95339768e-23, -3.77646382e-47, -1.20870403e-39, -1.80827547e-22]), 'test_spearman_r': array([0.89954862, 0.95600385, 0.96835112, 0.90960316]), 'test_spearman_p': array([-2.42135797e-24, -2.91855404e-35, -1.09544699e-39, -2.47584959e-25]), 'test_kendall_r': array([0.75786475, 0.83152685, 0.8611388 , 0.80400002]), 'test_kendall_p': array([-6.55639541e-19, -1.54907101e-22, -4.80796904e-24, -9.27415896e-21]), 'test_rmse': array([-0.28002874, -0.12520318, -0.15302325, -0.32216928]), 'test_mae': array([-0.17651992, -0.0891244 , -0.10080717, -0.17011491]), 'test_r2': array([0.76600675, 0.96230189, 0.93264092, 0.77860653]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 347, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([32.43272519, 33.23518991, 32.7539506 , 32.25756979]), 'score_time': array([0.65652251, 0.69893956, 0.66617298, 0.59731269]), 'test_pearson_r': array([0.90088374, 0.95111246, 0.96499909, 0.95139657]), 'test_pearson_p': array([-1.62182795e-24, -7.50322935e-34, -2.48280046e-38, -2.05263030e-33]), 'test_spearman_r': array([0.90371765, 0.94484816, 0.95697223, 0.94986149]), 'test_spearman_p': array([-6.79557662e-25, -3.04385687e-32, -1.46905948e-35, -5.26055292e-33]), 'test_kendall_r': array([0.82177813, 0.8342976 , 0.83715868, 0.82679901]), 'test_kendall_p': array([-6.20089645e-22, -1.05169282e-22, -8.74429721e-23, -4.79724256e-22]), 'test_rmse': array([-0.29167947, -0.17639853, -0.16175481, -0.19698094]), 'test_mae': array([-0.12886009, -0.10643463, -0.10776382, -0.12045789]), 'test_r2': array([0.8046226 , 0.90306047, 0.92967799, 0.90509304]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__natural_gradient': True, 'regressor__n_estimators': 2000, 'regressor__learning_rate': 0.1, 'regressor__minibatch_frac': 1, 'regressor__col_sample': 1.0, 'regressor__verbose': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}}, 'overall data shape': {'targets_shape': (259, 1), 'training_features_shape': (259, 522)}}
Trimer_scaler
Filename: (ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 ECFP6_Count_512bit cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 ECFP6_Count_512bit cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_predictions.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/OOD_target_log Rg (nm)/KM4 ECFP6_Count_512bit cluster/Trimer_scaler/(ECFP3.count.512-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_NGB_Standard_ClusterTruth.json
Done Saving scores!
------------------------------ 
Plotted Comparitive Cluster Scores!
______________________________ 
Plotted Parity Plots!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c017n04>
Subject: Job 295235: <NGB_log Rg (nm)_ECFP_Trimer_KM4 ECFP6_Count_512bit cluster_20250311> in cluster <Hazel> Done

Job <NGB_log Rg (nm)_ECFP_Trimer_KM4 ECFP6_Count_512bit cluster_20250311> was submitted from host <c040n02> by user <sdehgha2> in cluster <Hazel> at Tue Mar 11 19:12:46 2025
Job was executed on host(s) <8*c017n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Mar 12 17:03:31 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Mar 12 17:03:31 2025
Terminated at Sat Mar 15 00:25:08 2025
Results reported at Sat Mar 15 00:25:08 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "NGB_log Rg (nm)_ECFP_Trimer_KM4 ECFP6_Count_512bit cluster_20250311"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_KM4 ECFP6_Count_512bit cluster_20250311.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_KM4 ECFP6_Count_512bit cluster_20250311.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../make_ood_prediction.py --target_features "log Rg (nm)"                                       --representation "ECFP"                                       --regressor_type "NGB"                                       --radius "3"                                       --vector "count"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --clustering_method "KM4 ECFP6_Count_512bit cluster" 



------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   762630.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.52 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   1 GB
    Max Processes :                              39
    Max Threads :                                42
    Run time :                                   199297 sec.
    Turnaround time :                            277942 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250311/NGB_log Rg (nm)_ECFP_Trimer_3_count_KM4 ECFP6_Count_512bit cluster_20250311.err> for stderr output of this job.

