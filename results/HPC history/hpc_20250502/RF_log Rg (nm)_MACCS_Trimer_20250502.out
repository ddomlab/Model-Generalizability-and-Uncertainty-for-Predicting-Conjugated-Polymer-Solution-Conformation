


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05060301334581676), ('regressor__regressor__min_samples_split', 0.055609912806435235), ('regressor__regressor__n_estimators', 56)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05060301334581676), ('regressor__regressor__min_samples_split', 0.055609912806435235), ('regressor__regressor__n_estimators', 56)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.051630268708929686), ('regressor__regressor__min_samples_split', 0.0980519818416537), ('regressor__regressor__n_estimators', 1971)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.050196051166875026), ('regressor__regressor__min_samples_split', 0.08489264567299774), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05026991304466285), ('regressor__regressor__min_samples_split', 0.06130772093236794), ('regressor__regressor__n_estimators', 146)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05193589197252697), ('regressor__regressor__min_samples_split', 0.05434369211675086), ('regressor__regressor__n_estimators', 525)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08170810200032388), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.050423354040773284), ('regressor__regressor__min_samples_split', 0.05602152625869873), ('regressor__regressor__n_estimators', 85)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05141730067144428), ('regressor__regressor__min_samples_split', 0.10939222793771172), ('regressor__regressor__n_estimators', 1642)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05083277168428705), ('regressor__regressor__min_samples_split', 0.06962633302947505), ('regressor__regressor__n_estimators', 79)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08215681502403278), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09301544518583846), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05074649468914434), ('regressor__regressor__min_samples_split', 0.11262238789808707), ('regressor__regressor__n_estimators', 56)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09781256840627894), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.10835397528292441), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05075361050683714), ('regressor__regressor__min_samples_split', 0.05660874421191145), ('regressor__regressor__n_estimators', 127)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05156064233112338), ('regressor__regressor__min_samples_split', 0.13880237183464955), ('regressor__regressor__n_estimators', 58)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.10516275196850365), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 475)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05163100689004619), ('regressor__regressor__min_samples_split', 0.05383969178979984), ('regressor__regressor__n_estimators', 278)])


Average scores:	 r: 0.57±0.13	 r2: 0.28±0.1
Filename: (MACCS-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_Standard
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n07>
Subject: Job 646903: <RF_log Rg (nm)_MACCS_Trimer_20250502> in cluster <Hazel> Done

Job <RF_log Rg (nm)_MACCS_Trimer_20250502> was submitted from host <c205n12> by user <sdehgha2> in cluster <Hazel> at Fri May  2 09:47:45 2025
Job was executed on host(s) <6*c201n07>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Fri May  2 09:47:47 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Fri May  2 09:47:47 2025
Terminated at Fri May  2 10:36:49 2025
Results reported at Fri May  2 10:36:49 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 40:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "RF_log Rg (nm)_MACCS_Trimer_20250502"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/RF_log Rg (nm)_MACCS_Trimer_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/RF_log Rg (nm)_MACCS__Trimer_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_structure_numerical.py --target_features "log Rg (nm)"                                       --representation "MACCS"                                       --regressor_type "RF"                                       --oligomer_representation "Trimer"                                       --numerical_feats 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'solvent dP' 'solvent dD' 'solvent dH' 




------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   8315.18 sec.
    Max Memory :                                 2 GB
    Average Memory :                             1.94 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               14.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   2956 sec.
    Turnaround time :                            2944 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/RF_log Rg (nm)_MACCS__Trimer_20250502.err> for stderr output of this job.




OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.06769709119359907), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05060301334581676), ('regressor__regressor__min_samples_split', 0.055609912806435235), ('regressor__regressor__n_estimators', 56)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05060301334581676), ('regressor__regressor__min_samples_split', 0.055609912806435235), ('regressor__regressor__n_estimators', 56)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.07099689452327468), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05159799056936639), ('regressor__regressor__min_samples_split', 0.10175679641765048), ('regressor__regressor__n_estimators', 62)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09185125245303502), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05227799828227908), ('regressor__regressor__min_samples_split', 0.06975348900898691), ('regressor__regressor__n_estimators', 305)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 585)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05060581786174091), ('regressor__regressor__min_samples_split', 0.10078772083451852), ('regressor__regressor__n_estimators', 85)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08874588003148554), ('regressor__regressor__n_estimators', 651)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09117905958151568), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.050246831607709166), ('regressor__regressor__min_samples_split', 0.05954719949796721), ('regressor__regressor__n_estimators', 216)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05075361050683714), ('regressor__regressor__min_samples_split', 0.05660874421191145), ('regressor__regressor__n_estimators', 127)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.051858451881079085), ('regressor__regressor__min_samples_split', 0.0905185942508168), ('regressor__regressor__n_estimators', 1100)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05054933640233682), ('regressor__regressor__min_samples_split', 0.07577547637872585), ('regressor__regressor__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05054933640233682), ('regressor__regressor__min_samples_split', 0.07577547637872585), ('regressor__regressor__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05072875609388739), ('regressor__regressor__min_samples_split', 0.05643295011259682), ('regressor__regressor__n_estimators', 172)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05154981407650706), ('regressor__regressor__min_samples_split', 0.07243291984510415), ('regressor__regressor__n_estimators', 177)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05085109723496478), ('regressor__regressor__min_samples_split', 0.09372386098191174), ('regressor__regressor__n_estimators', 867)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05163100689004619), ('regressor__regressor__min_samples_split', 0.05383969178979984), ('regressor__regressor__n_estimators', 278)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.052410398059816246), ('regressor__regressor__min_samples_split', 0.09206508492771898), ('regressor__regressor__n_estimators', 51)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05172124757686656), ('regressor__regressor__min_samples_split', 0.08144535030287722), ('regressor__regressor__n_estimators', 1572)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])


Average scores:	 r: 0.67±0.11	 r2: 0.37±0.1
Filename: (MACCS-Xn-Mw-PDI-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_Standard
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c025n01>
Subject: Job 806624: <RF_log Rg (nm)_MACCS_Trimer_20250502> in cluster <Hazel> Done

Job <RF_log Rg (nm)_MACCS_Trimer_20250502> was submitted from host <c004n03> by user <sdehgha2> in cluster <Hazel> at Wed May  7 09:53:04 2025
Job was executed on host(s) <6*c025n01>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed May  7 10:20:30 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed May  7 10:20:30 2025
Terminated at Wed May  7 10:56:46 2025
Results reported at Wed May  7 10:56:46 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 40:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "RF_log Rg (nm)_MACCS_Trimer_20250502"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/RF_log Rg (nm)_MACCS_Trimer_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/RF_log Rg (nm)_MACCS__Trimer_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_structure_numerical.py --target_features "log Rg (nm)"                                       --representation "MACCS"                                       --regressor_type "RF"                                       --oligomer_representation "Trimer"                                       --numerical_feats  'Xn' 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'solvent dP' 'solvent dD' 'solvent dH' 




------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   5747.25 sec.
    Max Memory :                                 3 GB
    Average Memory :                             2.80 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   2191 sec.
    Turnaround time :                            3822 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/RF_log Rg (nm)_MACCS__Trimer_20250502.err> for stderr output of this job.




OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.1124543578006846), ('regressor__regressor__n_estimators', 436)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.0738516425061524), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.053906117277277454), ('regressor__regressor__min_samples_split', 0.07741876939915157), ('regressor__regressor__n_estimators', 1449)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 391)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05314682096762779), ('regressor__regressor__min_samples_split', 0.0638727023153784), ('regressor__regressor__n_estimators', 390)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 235)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.06990267408635499), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 169)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.0859357724518857), ('regressor__regressor__n_estimators', 182)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.0720426027238682), ('regressor__regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.0747062734297572), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05139456783042274), ('regressor__regressor__min_samples_split', 0.07864861634877218), ('regressor__regressor__n_estimators', 101)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05349867815677572), ('regressor__regressor__min_samples_split', 0.07166595336883103), ('regressor__regressor__n_estimators', 59)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.0755387794717404), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05962945857779454), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05159587670661247), ('regressor__regressor__min_samples_split', 0.05389084258372357), ('regressor__regressor__n_estimators', 98)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.053348581776987807), ('regressor__regressor__min_samples_split', 0.05893207931420839), ('regressor__regressor__n_estimators', 522)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 100)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.07475040359189615), ('regressor__regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05095754126337477), ('regressor__regressor__min_samples_split', 0.1119684309424736), ('regressor__regressor__n_estimators', 11)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08121751651420162), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 22)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.051627260400223605), ('regressor__regressor__min_samples_split', 0.10466637170398693), ('regressor__regressor__n_estimators', 132)])


Average scores:	 r: 0.82±0.07	 r2: 0.65±0.11
Filename: (MACCS-Xn-Mw-PDI-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_Standard_v1_(max_feat_all)
{6: {'fit_time': array([3.41032171, 3.42060089, 3.42661715, 3.4072535 , 3.49360251]), 'score_time': array([0.12235284, 0.11837435, 0.1116569 , 0.11355615, 0.11651492]), 'test_pearson_r': array([0.84249646, 0.88876096, 0.78614468, 0.75960216, 0.82617928]), 'test_spearman_r': array([0.8432503 , 0.89568614, 0.77406823, 0.79073443, 0.81067994]), 'test_rmse': array([-0.36367525, -0.30324746, -0.40001252, -0.41292624, -0.31648205]), 'test_mae': array([-0.26836196, -0.2252493 , -0.2517327 , -0.2944069 , -0.24773301]), 'test_r2': array([0.69698638, 0.77019173, 0.59383569, 0.56581858, 0.67184235]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.05, 'regressor__min_samples_split': 0.05, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([0.643332  , 0.46617508, 0.47785735, 0.39388824, 0.50281763]), 'score_time': array([0.05176687, 0.02476883, 0.0259335 , 0.02540469, 0.02899361]), 'test_pearson_r': array([0.87319864, 0.86996345, 0.71108527, 0.8193678 , 0.80876208]), 'test_spearman_r': array([0.8275472 , 0.87603271, 0.74035014, 0.83214488, 0.83096489]), 'test_rmse': array([-0.31770105, -0.33301572, -0.44610002, -0.37080639, -0.3454223 ]), 'test_mae': array([-0.24479387, -0.25460603, -0.26607011, -0.26119223, -0.27565292]), 'test_r2': array([0.74342026, 0.73766296, 0.48936249, 0.66833211, 0.62732905]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.05, 'regressor__min_samples_split': 0.05, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 235, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([3.37788606, 3.34144735, 3.39573526, 3.34910512, 3.3488524 ]), 'score_time': array([0.10941672, 0.10915852, 0.11227441, 0.11121988, 0.11087942]), 'test_pearson_r': array([0.86822552, 0.78387058, 0.79875981, 0.87884358, 0.79745978]), 'test_spearman_r': array([0.86796884, 0.78548559, 0.81534291, 0.89966699, 0.7571904 ]), 'test_rmse': array([-0.33871801, -0.42494317, -0.31119982, -0.31224691, -0.39131368]), 'test_mae': array([-0.24836184, -0.27280038, -0.24141996, -0.23547741, -0.24237495]), 'test_r2': array([0.74154062, 0.58091264, 0.60982388, 0.76336907, 0.63265853]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.05, 'regressor__min_samples_split': 0.0747062734297572, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([0.0590682 , 0.0583241 , 0.05738568, 0.02961087, 0.05921125]), 'score_time': array([0.025038  , 0.02300978, 0.02259994, 0.01264095, 0.02277613]), 'test_pearson_r': array([0.90128512, 0.72080135, 0.85407657, 0.67316812, 0.86144226]), 'test_spearman_r': array([0.89576757, 0.67903624, 0.87410041, 0.63385721, 0.86538118]), 'test_rmse': array([-0.28261827, -0.42041687, -0.32810188, -0.48055135, -0.36187222]), 'test_mae': array([-0.21845434, -0.27628189, -0.23855235, -0.31376153, -0.27283791]), 'test_r2': array([0.79295108, 0.49723278, 0.72571628, 0.34813503, 0.72161824]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.05, 'regressor__min_samples_split': 0.05, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 10, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([3.34497809, 3.51682401, 3.28039742, 3.26731539, 3.47315288]), 'score_time': array([0.10721016, 0.13058496, 0.11306   , 0.1074388 , 0.11484051]), 'test_pearson_r': array([0.90522719, 0.88271789, 0.80451241, 0.81640555, 0.74116121]), 'test_spearman_r': array([0.84728906, 0.91715938, 0.78807029, 0.80776127, 0.78829706]), 'test_rmse': array([-0.2630235 , -0.30426393, -0.34064591, -0.38756843, -0.44021963]), 'test_mae': array([-0.20352605, -0.22591418, -0.23664984, -0.27310471, -0.28791192]), 'test_r2': array([0.80991675, 0.76277689, 0.64057639, 0.65299985, 0.54643627]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.05, 'regressor__min_samples_split': 0.05, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([3.36176705, 3.42430878, 3.32117295, 3.41736817, 3.31369424]), 'score_time': array([0.10544825, 0.11427283, 0.11545277, 0.10635877, 0.11369753]), 'test_pearson_r': array([0.82533205, 0.88749937, 0.83738555, 0.8880516 , 0.64824946]), 'test_spearman_r': array([0.83498047, 0.84960932, 0.77757616, 0.89528407, 0.70480122]), 'test_rmse': array([-0.33390195, -0.26601424, -0.35397082, -0.30480446, -0.52824384]), 'test_mae': array([-0.26739601, -0.18797006, -0.25408386, -0.22845965, -0.36255883]), 'test_r2': array([0.6619634 , 0.78604801, 0.69109047, 0.77163179, 0.41408901]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.05, 'regressor__min_samples_split': 0.05, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([3.29117227, 3.38498068, 3.35791087, 3.36284876, 3.33393478]), 'score_time': array([0.1036191 , 0.11141467, 0.11588049, 0.11253405, 0.10673022]), 'test_pearson_r': array([0.64489737, 0.84913522, 0.80822189, 0.90252211, 0.83333464]), 'test_spearman_r': array([0.73018122, 0.83556791, 0.84638375, 0.90477821, 0.82983778]), 'test_rmse': array([-0.51092335, -0.32202586, -0.34788742, -0.30307225, -0.34943011]), 'test_mae': array([-0.28133126, -0.24083638, -0.2530714 , -0.21702538, -0.27413906]), 'test_r2': array([0.41046474, 0.67858239, 0.64973207, 0.77879727, 0.67650939]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.05, 'regressor__min_samples_split': 0.05, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 'pearson_r_avg': 0.8170899132813239, 'pearson_r_stdev': 0.06996778798707999, 'spearman_r_avg': 0.8186523827919616, 'spearman_r_stdev': 0.06516091247180605, 'rmse_avg': 0.3604961964023324, 'rmse_stdev': 0.06414033854885492, 'mae_avg': 0.2555457184423552, 'mae_stdev': 0.03168932331431527, 'r2_avg': 0.6545815559572029, 'r2_stdev': 0.11448905974498041}
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c202n07>
Subject: Job 246611: <RF_log Rg (nm)_MACCS_Trimer_20250502> in cluster <Hazel> Done

Job <RF_log Rg (nm)_MACCS_Trimer_20250502> was submitted from host <c202n13> by user <sdehgha2> in cluster <Hazel> at Mon May 19 00:39:56 2025
Job was executed on host(s) <6*c202n07>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Mon May 19 00:40:55 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Mon May 19 00:40:55 2025
Terminated at Mon May 19 01:38:43 2025
Results reported at Mon May 19 01:38:43 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 40:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "RF_log Rg (nm)_MACCS_Trimer_20250502"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/RF_log Rg (nm)_MACCS_Trimer_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/RF_log Rg (nm)_MACCS__Trimer_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_structure_numerical.py --target_features "log Rg (nm)"                                       --representation "MACCS"                                       --regressor_type "RF"                                       --oligomer_representation "Trimer"                                       --numerical_feats  'Xn' 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'solvent dP' 'solvent dD' 'solvent dH' 




------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   9730.00 sec.
    Max Memory :                                 2 GB
    Average Memory :                             1.95 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               14.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   3484 sec.
    Turnaround time :                            3527 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/RF_log Rg (nm)_MACCS__Trimer_20250502.err> for stderr output of this job.

