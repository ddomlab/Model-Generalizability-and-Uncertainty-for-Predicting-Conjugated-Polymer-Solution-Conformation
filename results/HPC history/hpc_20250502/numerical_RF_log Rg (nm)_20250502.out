


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05194493547476599), ('regressor__regressor__min_samples_split', 0.059062757678512), ('regressor__regressor__n_estimators', 182)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05024581980157543), ('regressor__regressor__min_samples_split', 0.05931555468386053), ('regressor__regressor__n_estimators', 450)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05082056811112431), ('regressor__regressor__min_samples_split', 0.054120083983781556), ('regressor__regressor__n_estimators', 67)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.052278624790718646), ('regressor__regressor__min_samples_split', 0.06665189837895934), ('regressor__regressor__n_estimators', 67)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05190288876181708), ('regressor__regressor__min_samples_split', 0.1120503681198612), ('regressor__regressor__n_estimators', 76)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09814808617437759), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.0864145448200748), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05179729078050705), ('regressor__regressor__min_samples_split', 0.0718122967646947), ('regressor__regressor__n_estimators', 1806)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.0524460757118239), ('regressor__regressor__min_samples_split', 0.06717056307179854), ('regressor__regressor__n_estimators', 457)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.07516123115277445), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05344512210836709), ('regressor__regressor__min_samples_split', 0.056517292736535225), ('regressor__regressor__n_estimators', 226)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05199712361149568), ('regressor__regressor__min_samples_split', 0.0665612638910025), ('regressor__regressor__n_estimators', 113)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.07512401523233254), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 336)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.0784527913089351), ('regressor__regressor__n_estimators', 822)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05144219820126806), ('regressor__regressor__min_samples_split', 0.1049670802045645), ('regressor__regressor__n_estimators', 61)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.050424021509830615), ('regressor__regressor__min_samples_split', 0.054681454545311266), ('regressor__regressor__n_estimators', 64)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05159587670661247), ('regressor__regressor__min_samples_split', 0.05389084258372357), ('regressor__regressor__n_estimators', 245)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.050909229191074976), ('regressor__regressor__min_samples_split', 0.07826196192426202), ('regressor__regressor__n_estimators', 113)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05280292223135546), ('regressor__regressor__min_samples_split', 0.05269768034194135), ('regressor__regressor__n_estimators', 349)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05221940440457929), ('regressor__regressor__min_samples_split', 0.0510253069176794), ('regressor__regressor__n_estimators', 334)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05324994193021953), ('regressor__regressor__min_samples_split', 0.05316284726141794), ('regressor__regressor__n_estimators', 72)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05048949529034173), ('regressor__regressor__min_samples_split', 0.11624088620445697), ('regressor__regressor__n_estimators', 214)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.0841104514189408), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 60)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08877907914173577), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05041714068915762), ('regressor__regressor__min_samples_split', 0.06880992504342154), ('regressor__regressor__n_estimators', 70)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05078676345692617), ('regressor__regressor__min_samples_split', 0.09705404001183543), ('regressor__regressor__n_estimators', 1942)])


Average scores:	 r: 0.67±0.07	 r2: 0.43±0.09
Filename: (concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RF_Standard
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n01>
Subject: Job 646738: <numerical_RF_with_feats_on_log Rg (nm)_20250502> in cluster <Hazel> Done

Job <numerical_RF_with_feats_on_log Rg (nm)_20250502> was submitted from host <c201n02> by user <sdehgha2> in cluster <Hazel> at Fri May  2 09:39:44 2025
Job was executed on host(s) <4*c201n01>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Fri May  2 09:39:46 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Fri May  2 09:39:46 2025
Terminated at Fri May  2 10:27:06 2025
Results reported at Fri May  2 10:27:06 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 4
#BSUB -W 5:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=8GB]"
#BSUB -J "numerical_RF_with_feats_on_log Rg (nm)_20250502"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "log Rg (nm)"                                   --regressor_type "RF"                                   --numerical_feats  'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'

conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   8536.00 sec.
    Max Memory :                                 2 GB
    Average Memory :                             1.98 GB
    Total Requested Memory :                     8.00 GB
    Delta Memory :                               6.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   2859 sec.
    Turnaround time :                            2842 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05194493547476599), ('regressor__regressor__min_samples_split', 0.059062757678512), ('regressor__regressor__n_estimators', 182)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.052278624790718646), ('regressor__regressor__min_samples_split', 0.06665189837895934), ('regressor__regressor__n_estimators', 67)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 1015)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.050358982910442746), ('regressor__regressor__min_samples_split', 0.06873610282008896), ('regressor__regressor__n_estimators', 409)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08103932717434102), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05119153989036367), ('regressor__regressor__min_samples_split', 0.06780298588976444), ('regressor__regressor__n_estimators', 72)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09462848791486961), ('regressor__regressor__n_estimators', 72)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05345584484251827), ('regressor__regressor__min_samples_split', 0.06115547602445822), ('regressor__regressor__n_estimators', 398)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.07113578832520215), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05320554235255296), ('regressor__regressor__min_samples_split', 0.06192553480470561), ('regressor__regressor__n_estimators', 235)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.06748768680545417), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09283624826517689), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.06609629570693173), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.050451453083516014), ('regressor__regressor__min_samples_split', 0.10283976835557675), ('regressor__regressor__n_estimators', 1530)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 588)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05015666091738147), ('regressor__regressor__min_samples_split', 0.05146550305610337), ('regressor__regressor__n_estimators', 136)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08427317627360882), ('regressor__regressor__n_estimators', 369)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05406933506562001), ('regressor__regressor__min_samples_split', 0.05143601791160037), ('regressor__regressor__n_estimators', 162)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05065414740025382), ('regressor__regressor__min_samples_split', 0.08668833831697645), ('regressor__regressor__n_estimators', 547)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.0525673040758694), ('regressor__regressor__min_samples_split', 0.05337740787402672), ('regressor__regressor__n_estimators', 146)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09810103775914822), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.10572320223111062), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.07645523075774821), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05054470852461721), ('regressor__regressor__min_samples_split', 0.10663551679438418), ('regressor__regressor__n_estimators', 64)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])


Average scores:	 r: 0.81±0.05	 r2: 0.62±0.07
Filename: (concentration-temperature-solvent dP-solvent dD-solvent dH-Xn-Mw-PDI)_RF_Standard
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n03>
Subject: Job 646801: <numerical_RF_with_feats_on_log Rg (nm)_20250502> in cluster <Hazel> Done

Job <numerical_RF_with_feats_on_log Rg (nm)_20250502> was submitted from host <c207n14> by user <sdehgha2> in cluster <Hazel> at Fri May  2 09:42:10 2025
Job was executed on host(s) <4*c205n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Fri May  2 09:42:12 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Fri May  2 09:42:12 2025
Terminated at Fri May  2 10:31:13 2025
Results reported at Fri May  2 10:31:13 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 4
#BSUB -W 10:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=8GB]"
#BSUB -J "numerical_RF_with_feats_on_log Rg (nm)_20250502"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "log Rg (nm)"                                   --regressor_type "RF"                                   --numerical_feats 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'solvent dP' 'solvent dD' 'solvent dH' 'Xn' 'Mw (g/mol)' 'PDI'

conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   8406.00 sec.
    Max Memory :                                 2 GB
    Average Memory :                             1.98 GB
    Total Requested Memory :                     8.00 GB
    Delta Memory :                               6.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   2956 sec.
    Turnaround time :                            2943 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09970965824242839), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05194493547476599), ('regressor__regressor__min_samples_split', 0.059062757678512), ('regressor__regressor__n_estimators', 182)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05004815785402106), ('regressor__regressor__min_samples_split', 0.06809058127558361), ('regressor__regressor__n_estimators', 127)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.07736470377301795), ('regressor__regressor__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08911387714448174), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05041557269533266), ('regressor__regressor__min_samples_split', 0.10166090918975543), ('regressor__regressor__n_estimators', 1698)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05193589197252697), ('regressor__regressor__min_samples_split', 0.05434369211675086), ('regressor__regressor__n_estimators', 525)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08703738238972988), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.0923629700755292), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.07581210253557726), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05226766320963423), ('regressor__regressor__min_samples_split', 0.10388114416716991), ('regressor__regressor__n_estimators', 61)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08277267195052829), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.11201858854277182), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09720876570410648), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.07545942436038702), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.050424021509830615), ('regressor__regressor__min_samples_split', 0.054681454545311266), ('regressor__regressor__n_estimators', 64)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05015666091738147), ('regressor__regressor__min_samples_split', 0.05146550305610337), ('regressor__regressor__n_estimators', 136)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08597489738431974), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05399554195894346), ('regressor__regressor__min_samples_split', 0.054125710109891104), ('regressor__regressor__n_estimators', 320)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05333474306870821), ('regressor__regressor__min_samples_split', 0.06521360080498988), ('regressor__regressor__n_estimators', 1044)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.051541102973095596), ('regressor__regressor__min_samples_split', 0.06254276966267099), ('regressor__regressor__n_estimators', 956)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.08034988466414987), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.0900699403385882), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'sqrt'), ('regressor__regressor__min_samples_leaf', 0.050674400406616166), ('regressor__regressor__min_samples_split', 0.06373545834686542), ('regressor__regressor__n_estimators', 65)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', 'log2'), ('regressor__regressor__min_samples_leaf', 0.05002904997348397), ('regressor__regressor__min_samples_split', 0.052990415789643225), ('regressor__regressor__n_estimators', 89)])


Average scores:	 r: 0.66±0.07	 r2: 0.41±0.08
Filename: (concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_Standard
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n09>
Subject: Job 646756: <numerical_RF_with_feats_on_log Rg (nm)_20250502> in cluster <Hazel> Done

Job <numerical_RF_with_feats_on_log Rg (nm)_20250502> was submitted from host <c205n03> by user <sdehgha2> in cluster <Hazel> at Fri May  2 09:40:51 2025
Job was executed on host(s) <4*c205n09>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Fri May  2 09:40:51 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Fri May  2 09:40:51 2025
Terminated at Fri May  2 10:32:46 2025
Results reported at Fri May  2 10:32:46 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 4
#BSUB -W 10:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=8GB]"
#BSUB -J "numerical_RF_with_feats_on_log Rg (nm)_20250502"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "log Rg (nm)"                                   --regressor_type "RF"                                   --numerical_feats  'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'solvent dP' 'solvent dD' 'solvent dH'

conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   9387.00 sec.
    Max Memory :                                 2 GB
    Average Memory :                             1.98 GB
    Total Requested Memory :                     8.00 GB
    Delta Memory :                               6.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   3133 sec.
    Turnaround time :                            3115 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err> for stderr output of this job.


------------------------------------------------------------
Sender: LSF System <lsfadmin@c203n04>
Subject: Job 893928: <numerical_RF_with_feats_on_log Rg (nm)_20250502> in cluster <Hazel> Done

Job <numerical_RF_with_feats_on_log Rg (nm)_20250502> was submitted from host <c202n04> by user <sdehgha2> in cluster <Hazel> at Fri May  9 10:27:34 2025
Job was executed on host(s) <6*c203n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Fri May  9 10:27:34 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Fri May  9 10:27:34 2025
Terminated at Fri May  9 10:28:52 2025
Results reported at Fri May  9 10:28:52 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 10:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=8GB]"
#BSUB -J "numerical_RF_with_feats_on_log Rg (nm)_20250502"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "log Rg (nm)"                                   --regressor_type "RF"                                   --numerical_feats 'Xn' 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'polmer dp' 'polmer dD' 'polmer dp' 'solvent dH' 'solvent dD' 'solvent dH' 

conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   5.14 sec.
    Max Memory :                                 -
    Average Memory :                             -
    Total Requested Memory :                     8.00 GB
    Delta Memory :                               -
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                5
    Run time :                                   80 sec.
    Turnaround time :                            78 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err> for stderr output of this job.

Average scores:	 r: 0.94±0.03	 r2: 0.88±0.07
Filename: (Mw-PDI-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_hypOFF_Standard
{6: {'fit_time': array([0.30416298, 0.32436371, 0.43331766, 0.35227489, 0.34910893]), 'score_time': array([0.05120158, 0.03282237, 0.02604461, 0.01627946, 0.01650381]), 'test_pearson_r': array([0.98268501, 0.95733871, 0.915121  , 0.90051544, 0.92443616]), 'test_spearman_r': array([0.9538846 , 0.95434268, 0.90820989, 0.88943449, 0.91338583]), 'test_rmse': array([-0.1381883 , -0.18542271, -0.27178712, -0.2734925 , -0.21477292]), 'test_mae': array([-0.09278646, -0.10278627, -0.14771924, -0.15167324, -0.13299397]), 'test_r2': array([0.95625009, 0.91407943, 0.81249522, 0.80953415, 0.84887254])}, 13: {'fit_time': array([0.3551209 , 0.18923545, 0.36125088, 0.38026142, 0.3031075 ]), 'score_time': array([0.03223658, 0.01594353, 0.03267455, 0.01548505, 0.01698637]), 'test_pearson_r': array([0.97301654, 0.94690999, 0.90374981, 0.95227625, 0.92832346]), 'test_spearman_r': array([0.94327378, 0.93958671, 0.92470273, 0.94818644, 0.92555551]), 'test_rmse': array([-0.15133026, -0.22034992, -0.27194748, -0.19935849, -0.21086535]), 'test_mae': array([-0.10421678, -0.14480761, -0.1252128 , -0.12850119, -0.13171887]), 'test_r2': array([0.94178477, 0.8851434 , 0.81023405, 0.90413094, 0.86112144])}, 42: {'fit_time': array([0.18745303, 0.18979239, 0.20167184, 0.17682624, 0.31992841]), 'score_time': array([0.01832485, 0.01607847, 0.01654387, 0.01750493, 0.01755452]), 'test_pearson_r': array([0.95907848, 0.95447226, 0.92288001, 0.96666019, 0.93115488]), 'test_spearman_r': array([0.95993169, 0.95351121, 0.92561207, 0.96569539, 0.92341177]), 'test_rmse': array([-0.20182966, -0.21298825, -0.19371421, -0.16738528, -0.24432111]), 'test_mae': array([-0.12390402, -0.13045488, -0.11941214, -0.1019544 , -0.11632295]), 'test_r2': array([0.90823317, 0.89471799, 0.84881631, 0.93199987, 0.85680038])}, 69: {'fit_time': array([0.20090938, 0.29709744, 0.18990731, 0.30536675, 0.17525244]), 'score_time': array([0.03058696, 0.01625133, 0.01849127, 0.01747894, 0.01528072]), 'test_pearson_r': array([0.98008804, 0.8431933 , 0.96530534, 0.90857612, 0.94954517]), 'test_spearman_r': array([0.97769192, 0.86038984, 0.95926907, 0.91378317, 0.95357256]), 'test_rmse': array([-0.12754788, -0.33428106, -0.17011191, -0.26288788, -0.22485859]), 'test_mae': array([-0.09268299, -0.14839635, -0.09974024, -0.14358935, -0.14329603]), 'test_r2': array([0.95782851, 0.68214414, 0.92626868, 0.80491711, 0.89251466])}, 420: {'fit_time': array([0.17767072, 0.22758341, 0.17431092, 0.18189454, 0.2368598 ]), 'score_time': array([0.01785994, 0.01787233, 0.01594567, 0.0182004 , 0.01522923]), 'test_pearson_r': array([0.9680004 , 0.96741858, 0.87290597, 0.95768442, 0.9033519 ]), 'test_spearman_r': array([0.93441551, 0.9635211 , 0.84297946, 0.94311512, 0.93920402]), 'test_rmse': array([-0.15694661, -0.16046452, -0.27775972, -0.19242285, -0.28771092]), 'test_mae': array([-0.08649077, -0.10770889, -0.16933883, -0.12016607, -0.14896171]), 'test_r2': array([0.93232026, 0.93401973, 0.76103254, 0.91446455, 0.80626316])}, 1234567890: {'fit_time': array([0.1709168 , 0.18233442, 0.17354083, 0.18666196, 0.18570232]), 'score_time': array([0.01512027, 0.01708698, 0.01517248, 0.01874375, 0.01718545]), 'test_pearson_r': array([0.93851607, 0.96472928, 0.98001667, 0.98524861, 0.89274794]), 'test_spearman_r': array([0.93419283, 0.93695427, 0.95946033, 0.98383897, 0.91058907]), 'test_rmse': array([-0.20296501, -0.15356767, -0.14079037, -0.12184894, -0.3145715 ]), 'test_mae': array([-0.13052088, -0.08159663, -0.09268928, -0.08066384, -0.19327328]), 'test_r2': array([0.87509835, 0.92869728, 0.95113001, 0.96350473, 0.79222107])}, 473129: {'fit_time': array([0.22929454, 0.2452395 , 0.17562056, 0.18395138, 0.17524552]), 'score_time': array([0.01776838, 0.01506853, 0.01739955, 0.02690601, 0.01545453]), 'test_pearson_r': array([0.89157087, 0.93527678, 0.93340339, 0.98223749, 0.9591415 ]), 'test_spearman_r': array([0.92169391, 0.93748935, 0.93341873, 0.97907686, 0.95228399]), 'test_rmse': array([-0.30862691, -0.2145484 , -0.2112045 , -0.12733586, -0.18634124]), 'test_mae': array([-0.13997969, -0.12347956, -0.13691609, -0.08123092, -0.13115872]), 'test_r2': array([0.7848874 , 0.85732801, 0.8708991 , 0.96095193, 0.90800611])}, 'pearson_r_avg': 0.9399307439831391, 'pearson_r_stdev': 0.03396839735947626, 'spearman_r_avg': 0.9361618531156948, 'spearman_r_stdev': 0.029607789703843656, 'rmse_avg': 0.20955845317913074, 'rmse_stdev': 0.056415474450587005, 'mae_avg': 0.12303842614848072, 'mae_stdev': 0.025857565054320443, 'r2_avg': 0.876820316690425, 'r2_stdev': 0.06561309594990977}
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c202n07>
Subject: Job 56482: <numerical_RF_with_feats_on_log Rg (nm)_20250502> in cluster <Hazel> Done

Job <numerical_RF_with_feats_on_log Rg (nm)_20250502> was submitted from host <c205n13> by user <sdehgha2> in cluster <Hazel> at Thu May 15 13:03:20 2025
Job was executed on host(s) <4*c202n07>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Thu May 15 13:03:20 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Thu May 15 13:03:20 2025
Terminated at Thu May 15 13:04:08 2025
Results reported at Thu May 15 13:04:08 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 4
#BSUB -W 10:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=8GB]"
#BSUB -J "numerical_RF_with_feats_on_log Rg (nm)_20250502"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "log Rg (nm)"                                   --regressor_type "RF"                                   --numerical_feats 'Xn' 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'polmer dp' 'polmer dD' 'polmer dp' 'solvent dH' 'solvent dD' 'solvent dH' 

conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   58.45 sec.
    Max Memory :                                 2 GB
    Average Memory :                             1.25 GB
    Total Requested Memory :                     8.00 GB
    Delta Memory :                               6.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   72 sec.
    Turnaround time :                            48 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err> for stderr output of this job.




OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05120518120152755), ('regressor__regressor__min_samples_split', 0.09158572104909575), ('regressor__regressor__n_estimators', 69)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.053336250211101416), ('regressor__regressor__min_samples_split', 0.06150294615786481), ('regressor__regressor__n_estimators', 83)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13

------------------------------------------------------------
Sender: LSF System <lsfadmin@c202n07>
Subject: Job 56649: <numerical_RF_with_feats_on_log Rg (nm)_20250502> in cluster <Hazel> Exited

Job <numerical_RF_with_feats_on_log Rg (nm)_20250502> was submitted from host <c205n13> by user <sdehgha2> in cluster <Hazel> at Thu May 15 13:08:13 2025
Job was executed on host(s) <4*c202n07>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Thu May 15 13:08:15 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Thu May 15 13:08:15 2025
Terminated at Thu May 15 13:17:19 2025
Results reported at Thu May 15 13:17:19 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 4
#BSUB -W 10:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=8GB]"
#BSUB -J "numerical_RF_with_feats_on_log Rg (nm)_20250502"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "log Rg (nm)"                                   --regressor_type "RF"                                   --numerical_feats 'Xn' 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'polmer dp' 'polmer dD' 'polmer dp' 'solvent dH' 'solvent dD' 'solvent dH' 

conda deactivate


------------------------------------------------------------

TERM_OWNER: job killed by owner.
Exited with exit code 130.

Resource usage summary:

    CPU time :                                   1550.43 sec.
    Max Memory :                                 2 GB
    Average Memory :                             1.70 GB
    Total Requested Memory :                     8.00 GB
    Delta Memory :                               6.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   563 sec.
    Turnaround time :                            546 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err> for stderr output of this job.


------------------------------------------------------------
Sender: LSF System <lsfadmin@c202n07>
Subject: Job 56897: <numerical_RF_with_feats_on_log Rg (nm)_20250502> in cluster <Hazel> Done

Job <numerical_RF_with_feats_on_log Rg (nm)_20250502> was submitted from host <c202n11> by user <sdehgha2> in cluster <Hazel> at Thu May 15 13:17:58 2025
Job was executed on host(s) <4*c202n07>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Thu May 15 13:17:59 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Thu May 15 13:17:59 2025
Terminated at Thu May 15 13:18:08 2025
Results reported at Thu May 15 13:18:08 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 4
#BSUB -W 10:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=8GB]"
#BSUB -J "numerical_RF_with_feats_on_log Rg (nm)_20250502"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "log Rg (nm)"                                   --regressor_type "RF"                                   --numerical_feats 'Xn' 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'polmer dp' 'polmer dD' 'polmer dp' 'solvent dH' 'solvent dD' 'solvent dH' 

conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   6.02 sec.
    Max Memory :                                 -
    Average Memory :                             -
    Total Requested Memory :                     8.00 GB
    Delta Memory :                               -
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                5
    Run time :                                   12 sec.
    Turnaround time :                            10 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err> for stderr output of this job.


------------------------------------------------------------
Sender: LSF System <lsfadmin@c202n07>
Subject: Job 57126: <numerical_RF_with_feats_on_log Rg (nm)_20250502> in cluster <Hazel> Done

Job <numerical_RF_with_feats_on_log Rg (nm)_20250502> was submitted from host <c202n11> by user <sdehgha2> in cluster <Hazel> at Thu May 15 13:25:16 2025
Job was executed on host(s) <4*c202n07>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Thu May 15 13:25:18 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Thu May 15 13:25:18 2025
Terminated at Thu May 15 13:25:28 2025
Results reported at Thu May 15 13:25:28 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 4
#BSUB -W 10:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=8GB]"
#BSUB -J "numerical_RF_with_feats_on_log Rg (nm)_20250502"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "log Rg (nm)"                                   --regressor_type "RF"                                   --numerical_feats 'Xn' 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'polmer dp' 'polmer dD' 'polmer dp' 'solvent dH' 'solvent dD' 'solvent dH' 

conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   6.80 sec.
    Max Memory :                                 -
    Average Memory :                             -
    Total Requested Memory :                     8.00 GB
    Delta Memory :                               -
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                5
    Run time :                                   32 sec.
    Turnaround time :                            12 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err> for stderr output of this job.




OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05082056811112431), ('regressor__regressor__min_samples_split', 0.054120083983781556), ('regressor__regressor__n_estimators', 67)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 254)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.051017061018421246), ('regressor__regressor__min_samples_split', 0.07001526613381973), ('regressor__regressor__n_estimators', 74)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.053608770497179395), ('regressor__regressor__min_samples_split', 0.0705732851452666), ('regressor__regressor__n_estimators', 65)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.0937577178502362), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.053608770497179395), ('regressor__regressor__min_samples_split', 0.0705732851452666), ('regressor__regressor__n_estimators', 65)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05182399682685153), ('regressor__regressor__min_samples_split', 0.05068407880364792), ('regressor__regressor__n_estimators', 416)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.050563819981214966), ('regressor__regressor__min_samples_split', 0.06889262161930283), ('regressor__regressor__n_estimators', 335)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.054164394368685725), ('regressor__regressor__min_samples_split', 0.07503223120123718), ('regressor__regressor__n_estimators', 1541)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05188482241955838), ('regressor__regressor__min_samples_split', 0.10341449051379165), ('regressor__regressor__n_estimators', 166)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.061229317836887384), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09825404267629954), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.07098771159698819), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.06978621059273868), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05126867810436272), ('regressor__regressor__min_samples_split', 0.10455633198824363), ('regressor__regressor__n_estimators', 1063)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05179193369851066), ('regressor__regressor__min_samples_split', 0.10818470219712667), ('regressor__regressor__n_estimators', 602)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.051121927830875824), ('regressor__regressor__min_samples_split', 0.08719742230555994), ('regressor__regressor__n_estimators', 1166)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.051121927830875824), ('regressor__regressor__min_samples_split', 0.08719742230555994), ('regressor__regressor__n_estimators', 1166)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.0530159308889071), ('regressor__regressor__min_samples_split', 0.07003105170785684), ('regressor__regressor__n_estimators', 1713)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05265328809760484), ('regressor__regressor__min_samples_split', 0.0803927388299599), ('regressor__regressor__n_estimators', 109)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.0525345138960693), ('regressor__regressor__min_samples_split', 0.08485982814557247), ('regressor__regressor__n_estimators', 414)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.09062437727078507), ('regressor__regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__max_depth', None), ('regressor__regressor__max_features', None), ('regressor__regressor__min_samples_leaf', 0.05), ('regressor__regressor__min_samples_split', 0.05), ('regressor__regressor__n_estimators', 2000)])


Average scores:	 r: 0.82±0.06	 r2: 0.65±0.09
Filename: (Xn-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RF_Standard
{6: {'fit_time': array([0.10824466, 0.10993671, 0.11169386, 0.16585064, 0.16982722]), 'score_time': array([0.01660585, 0.0162313 , 0.01603794, 0.01556182, 0.01549435]), 'test_pearson_r': array([0.84306677, 0.87207333, 0.81706585, 0.73451967, 0.80239348]), 'test_spearman_r': array([0.85020931, 0.84773051, 0.82909232, 0.80193013, 0.83391432]), 'test_rmse': array([-0.36447332, -0.31808652, -0.37166777, -0.43138845, -0.33776494]), 'test_mae': array([-0.27434104, -0.24438167, -0.24927856, -0.30870335, -0.27176674]), 'test_r2': array([0.69565502, 0.74715065, 0.64935762, 0.52612555, 0.62622221]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.051017061018421246, 'regressor__min_samples_split': 0.07001526613381973, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 74, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([0.84910703, 0.56385589, 0.54301572, 0.55800915, 0.84146333]), 'score_time': array([0.0445509 , 0.03329086, 0.03153062, 0.03402567, 0.03743863]), 'test_pearson_r': array([0.88119881, 0.83930384, 0.73422292, 0.8066217 , 0.77979979]), 'test_spearman_r': array([0.83650029, 0.86245544, 0.722871  , 0.80414179, 0.80436309]), 'test_rmse': array([-0.30888114, -0.36006907, -0.42820087, -0.38187983, -0.36654652]), 'test_mae': array([-0.23704394, -0.26991511, -0.26858747, -0.27339981, -0.29327779]), 'test_r2': array([0.75746867, 0.69330847, 0.52951768, 0.64822705, 0.5803541 ]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.05182399682685153, 'regressor__min_samples_split': 0.05068407880364792, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 416, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([0.07683897, 0.08051062, 0.07921958, 0.12076259, 0.115453  ]), 'score_time': array([0.01397514, 0.01324296, 0.01329565, 0.01198387, 0.01328373]), 'test_pearson_r': array([0.86715036, 0.79783377, 0.78249427, 0.85737413, 0.83430018]), 'test_spearman_r': array([0.88350448, 0.83491665, 0.79809581, 0.89116708, 0.83252219]), 'test_rmse': array([-0.34125372, -0.41314587, -0.32702815, -0.33335921, -0.35964645]), 'test_mae': array([-0.25321545, -0.28316982, -0.25461044, -0.2523915 , -0.23936516]), 'test_r2': array([0.73765638, 0.6038591 , 0.56912403, 0.73028808, 0.68970738]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.05, 'regressor__min_samples_split': 0.05, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 50, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([2.69383097, 2.6775806 , 2.93071461, 3.53895497, 3.68567657]), 'score_time': array([0.11645937, 0.11575699, 0.11520219, 0.13257647, 0.10985303]), 'test_pearson_r': array([0.89846984, 0.71812188, 0.8518244 , 0.69118347, 0.85379471]), 'test_spearman_r': array([0.89033815, 0.7464544 , 0.84353453, 0.64773188, 0.86872709]), 'test_rmse': array([-0.28041236, -0.42803549, -0.32911751, -0.45009308, -0.37021564]), 'test_mae': array([-0.22434336, -0.29117908, -0.25653283, -0.30200845, -0.27313407]), 'test_r2': array([0.79617061, 0.47884581, 0.72401557, 0.42814924, 0.70863338]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.05, 'regressor__min_samples_split': 0.07098771159698819, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 2000, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([1.83559513, 1.56675839, 1.58943224, 2.37794471, 2.03422928]), 'score_time': array([0.07100892, 0.07442927, 0.0769937 , 0.07488966, 0.07049084]), 'test_pearson_r': array([0.89234709, 0.86887406, 0.78201432, 0.82252188, 0.76644649]), 'test_spearman_r': array([0.83994287, 0.89884523, 0.778933  , 0.81758026, 0.83123289]), 'test_rmse': array([-0.27801079, -0.31679235, -0.35755861, -0.3811352 , -0.42311734]), 'test_mae': array([-0.21500016, -0.2370334 , -0.25421964, -0.27475804, -0.29855703]), 'test_r2': array([0.78763738, 0.74283881, 0.60400044, 0.66442392, 0.58099312]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.051121927830875824, 'regressor__min_samples_split': 0.08719742230555994, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 1166, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([0.55668092, 0.59974051, 0.56728363, 0.78527689, 0.83675551]), 'score_time': array([0.03159928, 0.03261375, 0.03246593, 0.03061533, 0.03239202]), 'test_pearson_r': array([0.8024176 , 0.88380264, 0.8423471 , 0.87468232, 0.70672993]), 'test_spearman_r': array([0.82677653, 0.8584483 , 0.76621907, 0.89374696, 0.75192982]), 'test_rmse': array([-0.35398136, -0.27104411, -0.35068617, -0.31849369, -0.49229865]), 'test_mae': array([-0.28572245, -0.19991091, -0.25099328, -0.23522106, -0.36209216]), 'test_r2': array([0.62008486, 0.77788059, 0.69679689, 0.75065844, 0.49111453]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.0525345138960693, 'regressor__min_samples_split': 0.08485982814557247, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 414, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([0.12061954, 0.0774703 , 0.07662725, 0.11844468, 0.07444406]), 'score_time': array([0.01245904, 0.01254725, 0.01241755, 0.01227975, 0.01286983]), 'test_pearson_r': array([0.75572769, 0.82967196, 0.7925765 , 0.88784452, 0.82676718]), 'test_spearman_r': array([0.8383309 , 0.82457942, 0.81311422, 0.86657715, 0.79372495]), 'test_rmse': array([-0.437033  , -0.33933356, -0.36122503, -0.31166977, -0.35667236]), 'test_mae': array([-0.25800599, -0.25162072, -0.26508343, -0.22866084, -0.27458217]), 'test_r2': array([0.56865303, 0.64310392, 0.62235947, 0.76606915, 0.66296118]), 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__bootstrap': True, 'regressor__ccp_alpha': 0.0, 'regressor__criterion': 'squared_error', 'regressor__max_depth': None, 'regressor__max_features': None, 'regressor__max_leaf_nodes': None, 'regressor__max_samples': None, 'regressor__min_impurity_decrease': 0.0, 'regressor__min_samples_leaf': 0.05, 'regressor__min_samples_split': 0.05, 'regressor__min_weight_fraction_leaf': 0.0, 'regressor__monotonic_cst': None, 'regressor__n_estimators': 50, 'regressor__n_jobs': None, 'regressor__oob_score': False, 'regressor__random_state': None, 'regressor__verbose': 0, 'regressor__warm_start': False, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 'pearson_r_avg': 0.817073840884737, 'pearson_r_stdev': 0.055320552457009176, 'spearman_r_avg': 0.8237194867703246, 'spearman_r_stdev': 0.05152206405331873, 'rmse_avg': 0.36143765312058773, 'rmse_stdev': 0.05051876684409813, 'mae_avg': 0.26320305496804963, 'mae_stdev': 0.029744480828814996, 'r2_avg': 0.6542689234172981, 'r2_stdev': 0.09308878169223685}
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c203n12>
Subject: Job 59109: <numerical_RF_with_feats_on_log Rg (nm)_20250502> in cluster <Hazel> Done

Job <numerical_RF_with_feats_on_log Rg (nm)_20250502> was submitted from host <c203n10> by user <sdehgha2> in cluster <Hazel> at Thu May 15 14:33:49 2025
Job was executed on host(s) <4*c203n12>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Thu May 15 14:33:57 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Thu May 15 14:33:57 2025
Terminated at Thu May 15 15:35:56 2025
Results reported at Thu May 15 15:35:56 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 4
#BSUB -W 10:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=8GB]"
#BSUB -J "numerical_RF_with_feats_on_log Rg (nm)_20250502"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "log Rg (nm)"                                   --regressor_type "RF"                                   --numerical_feats 'Xn' 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH' 

conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   8827.00 sec.
    Max Memory :                                 2 GB
    Average Memory :                             1.98 GB
    Total Requested Memory :                     8.00 GB
    Delta Memory :                               6.00 GB
    Max Swap :                                   -
    Max Processes :                              26
    Max Threads :                                29
    Run time :                                   3721 sec.
    Turnaround time :                            3727 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err> for stderr output of this job.

Average scores:	 r: 0.93±0.04	 r2: 0.87±0.08
Filename: (Xn-Mw-PDI-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RF_hypOFF_Standard
{6: {'fit_time': array([0.30798531, 0.19097948, 0.20013452, 0.19347978, 0.20464301]), 'score_time': array([0.01682901, 0.05685902, 0.04146576, 0.04853868, 0.04011607]), 'test_pearson_r': array([0.96673558, 0.96043861, 0.90808826, 0.92828665, 0.92554936]), 'test_spearman_r': array([0.95217662, 0.95519648, 0.91025915, 0.91949362, 0.91003711]), 'test_rmse': array([-0.18064853, -0.17928042, -0.27792129, -0.23313254, -0.21268823]), 'test_mae': array([-0.11067132, -0.11043451, -0.1409985 , -0.13380962, -0.12860021]), 'test_r2': array([0.92523411, 0.91967754, 0.80393583, 0.86160128, 0.85179213])}, 13: {'fit_time': array([0.20096278, 0.22057486, 0.18695092, 0.20497966, 0.19059277]), 'score_time': array([0.01891589, 0.01598525, 0.01611757, 0.01740026, 0.01704097]), 'test_pearson_r': array([0.97477431, 0.95989238, 0.82529308, 0.9541049 , 0.92921146]), 'test_spearman_r': array([0.95194177, 0.95653659, 0.84259518, 0.94637065, 0.90641264]), 'test_rmse': array([-0.14655221, -0.19360687, -0.36244155, -0.19446273, -0.21133903]), 'test_mae': array([-0.10202571, -0.12926549, -0.15011131, -0.12293239, -0.12789236]), 'test_r2': array([0.94540287, 0.91133103, 0.66292684, 0.90878175, 0.86049679])}, 42: {'fit_time': array([0.20063043, 0.1976366 , 0.30049443, 0.20723295, 0.29528069]), 'score_time': array([0.01614571, 0.01607013, 0.01702785, 0.01529145, 0.01582265]), 'test_pearson_r': array([0.95775284, 0.96411064, 0.90948991, 0.96746501, 0.8898694 ]), 'test_spearman_r': array([0.95937667, 0.95726788, 0.92270913, 0.96509767, 0.89510431]), 'test_rmse': array([-0.19945985, -0.19214639, -0.20969253, -0.16599668, -0.30145429]), 'test_mae': array([-0.12207679, -0.12142797, -0.12941654, -0.09488712, -0.12749728]), 'test_r2': array([0.91037551, 0.9143145 , 0.82284724, 0.93312343, 0.78199682])}, 69: {'fit_time': array([0.20439506, 0.29491401, 0.20264864, 0.19060588, 0.29080153]), 'score_time': array([0.01706457, 0.01543283, 0.01649141, 0.01536226, 0.01580429]), 'test_pearson_r': array([0.97834205, 0.88795701, 0.96325342, 0.82354133, 0.94409322]), 'test_spearman_r': array([0.97726497, 0.88320256, 0.96353856, 0.82447115, 0.9480067 ]), 'test_rmse': array([-0.13211198, -0.27948181, -0.17528612, -0.35530339, -0.23403989]), 'test_mae': array([-0.09325786, -0.13295774, -0.10162765, -0.1796721 , -0.1447782 ]), 'test_r2': array([0.95475642, 0.7778155 , 0.92171516, 0.64365002, 0.8835579 ])}, 420: {'fit_time': array([0.3126812 , 0.19705629, 0.19747114, 0.19254565, 0.306952  ]), 'score_time': array([0.01709986, 0.01749349, 0.01541758, 0.0155344 , 0.01649761]), 'test_pearson_r': array([0.96589429, 0.96892266, 0.88146884, 0.94823144, 0.9003684 ]), 'test_spearman_r': array([0.9351671 , 0.96480181, 0.86293768, 0.93730923, 0.93386429]), 'test_rmse': array([-0.16101764, -0.15767083, -0.26864438, -0.21122087, -0.28952905]), 'test_mae': array([-0.08752361, -0.09944951, -0.17819462, -0.13141516, -0.13644304]), 'test_r2': array([0.92876365, 0.93629717, 0.77645975, 0.8969361 , 0.80380687])}, 1234567890: {'fit_time': array([0.19714618, 0.30572724, 0.29569101, 0.19238043, 0.19845581]), 'score_time': array([0.01532054, 0.01622701, 0.01623416, 0.015522  , 0.01690388]), 'test_pearson_r': array([0.93461637, 0.97221051, 0.96438616, 0.98258722, 0.86093305]), 'test_spearman_r': array([0.9250934 , 0.95288117, 0.95239925, 0.97555563, 0.88455802]), 'test_rmse': array([-0.20713789, -0.13594452, -0.18299107, -0.12682346, -0.35360628]), 'test_mae': array([-0.12731458, -0.08169065, -0.11953489, -0.07776621, -0.20496931]), 'test_r2': array([0.8699097 , 0.9441234 , 0.91744257, 0.96046405, 0.73745563])}, 473129: {'fit_time': array([0.18687105, 0.19856262, 0.19524741, 0.30853367, 0.2994523 ]), 'score_time': array([0.01510596, 0.01622629, 0.0153358 , 0.0164907 , 0.01529741]), 'test_pearson_r': array([0.86576866, 0.94574332, 0.92692912, 0.98064713, 0.9578524 ]), 'test_spearman_r': array([0.88112076, 0.95226304, 0.93102786, 0.98078488, 0.9476685 ]), 'test_rmse': array([-0.33680904, -0.19345614, -0.22172097, -0.13240986, -0.18573533]), 'test_mae': array([-0.15217653, -0.11028873, -0.13944228, -0.08898111, -0.12746047]), 'test_r2': array([0.74380788, 0.88400128, 0.85772242, 0.957778  , 0.9086034 ])}, 'pearson_r_avg': 0.9335659710611659, 'pearson_r_stdev': 0.0425951893207782, 'spearman_r_avg': 0.9304140583968399, 'spearman_r_stdev': 0.03762896639549894, 'rmse_avg': 0.21719324685135222, 'rmse_stdev': 0.06529340429786792, 'mae_avg': 0.1247711810526622, 'mae_stdev': 0.027237414733571157, 'r2_avg': 0.8662544147527673, 'r2_stdev': 0.08100281298033876}
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c203n07>
Subject: Job 73642: <numerical_RF_with_feats_on_log Rg (nm)_20250502> in cluster <Hazel> Done

Job <numerical_RF_with_feats_on_log Rg (nm)_20250502> was submitted from host <c203n10> by user <sdehgha2> in cluster <Hazel> at Thu May 15 21:27:49 2025
Job was executed on host(s) <4*c203n07>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Thu May 15 21:27:49 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Thu May 15 21:27:49 2025
Terminated at Thu May 15 21:28:54 2025
Results reported at Thu May 15 21:28:54 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 4
#BSUB -W 2:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=8GB]"
#BSUB -J "numerical_RF_with_feats_on_log Rg (nm)_20250502"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "log Rg (nm)"                                   --regressor_type "RF"                                   --numerical_feats 'Xn' 'Mw (g/mol)' 'PDI' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH' 

conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   45.53 sec.
    Max Memory :                                 -
    Average Memory :                             -
    Total Requested Memory :                     8.00 GB
    Delta Memory :                               -
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                5
    Run time :                                   65 sec.
    Turnaround time :                            65 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250502/numerical_RF_log Rg (nm)_20250502.err> for stderr output of this job.

