Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0015212449148696717), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 993), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007346085841163224), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 192), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016958377494996207), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 74), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013446169946098992), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 92), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021723169447991613), ('regressor__regressor__max_depth', 1230), ('regressor__regressor__n_estimators', 65), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005298145977899671), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 139), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001656343638133647), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1086), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0019524339577712871), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 882), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02750346349059094), ('regressor__regressor__max_depth', 31), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007730686052352541), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 113), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0038040368748603667), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 322), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001223965729124254), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1558), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.023807547189709222), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010166408087109271), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 153), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01546898316945064), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 75), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00568723709266575), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 239), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013121340277331396), ('regressor__regressor__max_depth', 3473), ('regressor__regressor__n_estimators', 98), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0019735622961350326), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 566), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0011796893734843173), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 958), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02502097833265701), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 57), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1293), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1308), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1307), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008409036988467657), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 197), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02389487126598122), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.003857982452500905), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 354), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0010101463810390757), ('regressor__regressor__max_depth', 6463), ('regressor__regressor__n_estimators', 1214), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027080752623619423), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 72), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0011857162487015713), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1606), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006624294571444624), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 182), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 1450), ('regressor__regressor__n_estimators', 1245), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0024457709042344064), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 523), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03585239950459968), ('regressor__regressor__max_depth', 13), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0011765978483296248), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 981), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.026702586580836463), ('regressor__regressor__max_depth', 105), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])


Average scores:	 r: 0.31±0.08	 r2: 0.07±0.07
RRU Dimer
Filename: (ECFP3.count.512)_XGBR_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log First Peak (e-5 place holder)/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log First Peak (e-5 place holder)/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log First Peak (e-5 place holder)/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c008n01>
Subject: Job 492327: <ECFP_XGBR_RRU Dimer_log First Peak (e-5 place holder)_3_count_20250204> in cluster <Hazel> Done

Job <ECFP_XGBR_RRU Dimer_log First Peak (e-5 place holder)_3_count_20250204> was submitted from host <c013n01> by user <sdehgha2> in cluster <Hazel> at Tue Feb  4 14:12:58 2025
Job was executed on host(s) <6*c008n01>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Tue Feb  4 14:19:19 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Tue Feb  4 14:19:19 2025
Terminated at Tue Feb  4 15:16:20 2025
Results reported at Tue Feb  4 15:16:20 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
          
#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "ECFP_XGBR_RRU Dimer_log First Peak (e-5 place holder)_3_count_20250204"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log First Peak (e-5 place holder)_3_count_20250204.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log First Peak (e-5 place holder)_3_count_20250204.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_structure_only.py --target_features "log First Peak (e-5 place holder)"                                   --representation "ECFP"                                   --regressor_type "XGBR"                                   --oligomer_representation "RRU Dimer"                                   --radius "3"                                   --vector "count" 

------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   11926.42 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.92 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   3421 sec.
    Turnaround time :                            3802 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log First Peak (e-5 place holder)_3_count_20250204.err> for stderr output of this job.

