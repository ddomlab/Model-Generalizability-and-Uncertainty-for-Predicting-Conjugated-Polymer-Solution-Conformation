Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 285), ('regressor__regressor__n_estimators', 853), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1422), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002556485529123563), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 439), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002574493327348792), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 698), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0021642447692507517), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 390), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002591649469214879), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 596), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00302431464312428), ('regressor__regressor__max_depth', 1693), ('regressor__regressor__n_estimators', 649), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 5325), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001924425388260366), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 860), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0020386372606796344), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 678), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0014019171524759268), ('regressor__regressor__max_depth', 68), ('regressor__regressor__n_estimators', 1399), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01627116802171709), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 62), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1302), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02195489459836646), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004229898926441837), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 408), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0010096702433681926), ('regressor__regressor__max_depth', 3453), ('regressor__regressor__n_estimators', 1184), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001873454833300273), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 525), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005968980635685839), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 235), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017287610525780633), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 84), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0016816391095474082), ('regressor__regressor__max_depth', 124), ('regressor__regressor__n_estimators', 814), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005712420224377171), ('regressor__regressor__max_depth', 27), ('regressor__regressor__n_estimators', 165), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015802519768673053), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 95), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0013252857239619256), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1626), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0035428807151259806), ('regressor__regressor__max_depth', 1781), ('regressor__regressor__n_estimators', 462), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0051096803636490554), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 140), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012320776553107662), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 100), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1294), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020414101463251233), ('regressor__regressor__max_depth', 7632), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0014212032974009253), ('regressor__regressor__max_depth', 3212), ('regressor__regressor__n_estimators', 1373), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008145826739826905), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 182), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1311), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01832032987244526), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 58), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007503189133581719), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 210), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0061867752204867454), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 192), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014282281892320843), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 94), ('regressor__regressor__n_jobs', -2)])


Average scores:	 r: 0.3±0.07	 r2: 0.06±0.06
RRU Dimer
Filename: (ECFP3.count.512)_XGBR_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Third Peak (e-5 place holder)/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Third Peak (e-5 place holder)/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Third Peak (e-5 place holder)/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c020n03>
Subject: Job 492331: <ECFP_XGBR_RRU Dimer_log Third Peak (e-5 place holder)_3_count_20250204> in cluster <Hazel> Done

Job <ECFP_XGBR_RRU Dimer_log Third Peak (e-5 place holder)_3_count_20250204> was submitted from host <c013n01> by user <sdehgha2> in cluster <Hazel> at Tue Feb  4 14:12:58 2025
Job was executed on host(s) <6*c020n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Tue Feb  4 14:37:55 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Tue Feb  4 14:37:55 2025
Terminated at Tue Feb  4 15:29:48 2025
Results reported at Tue Feb  4 15:29:48 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
          
#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "ECFP_XGBR_RRU Dimer_log Third Peak (e-5 place holder)_3_count_20250204"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Third Peak (e-5 place holder)_3_count_20250204.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Third Peak (e-5 place holder)_3_count_20250204.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_structure_only.py --target_features "log Third Peak (e-5 place holder)"                                   --representation "ECFP"                                   --regressor_type "XGBR"                                   --oligomer_representation "RRU Dimer"                                   --radius "3"                                   --vector "count" 

------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   10659.41 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.72 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   3113 sec.
    Turnaround time :                            4610 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Third Peak (e-5 place holder)_3_count_20250204.err> for stderr output of this job.

