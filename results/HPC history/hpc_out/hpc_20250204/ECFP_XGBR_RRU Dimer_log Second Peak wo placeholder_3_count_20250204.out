Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005580047794291236), ('regressor__regressor__max_depth', 16), ('regressor__regressor__n_estimators', 210), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001642777980460648), ('regressor__regressor__max_depth', 23), ('regressor__regressor__n_estimators', 404), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009822640214626043), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 98), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0023809725860741986), ('regressor__regressor__max_depth', 4230), ('regressor__regressor__n_estimators', 456), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0028160707025537248), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 436), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0021340203405995906), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 456), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0025937245476826245), ('regressor__regressor__max_depth', 21), ('regressor__regressor__n_estimators', 381), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004078582712410203), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 160), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0026837467879220174), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 434), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0024025579926454602), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 788), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007176796809506836), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 90), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0015009185244739935), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 678), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011309522244471246), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 140), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0010168587136004646), ('regressor__regressor__max_depth', 2841), ('regressor__regressor__n_estimators', 770), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006654789927734938), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 131), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010531888101418517), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 77), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01296680205698605), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02333483051481963), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009523127730675674), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 102), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006073081686231348), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 266), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013268426735712836), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0119190066130867), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 91), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.015204912325067132), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 54), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0035428807151259806), ('regressor__regressor__max_depth', 1781), ('regressor__regressor__n_estimators', 462), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.033352774916829656), ('regressor__regressor__max_depth', 5266), ('regressor__regressor__n_estimators', 68), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 5875), ('regressor__regressor__n_estimators', 1254), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020091991744165077), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006838209644993556), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 123), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0043925469231627665), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 328), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014422274947791216), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014135306328366846), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012748150569134154), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0036042566371435854), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 315), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017189544804036765), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004899642096632654), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 212), ('regressor__regressor__n_jobs', -2)])


Average scores:	 r: 0.34±0.13	 r2: 0.08±0.12
RRU Dimer
Filename: (ECFP3.count.512)_XGBR_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Second Peak wo placeholder/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Second Peak wo placeholder/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Second Peak wo placeholder/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c003n03>
Subject: Job 492335: <ECFP_XGBR_RRU Dimer_log Second Peak wo placeholder_3_count_20250204> in cluster <Hazel> Done

Job <ECFP_XGBR_RRU Dimer_log Second Peak wo placeholder_3_count_20250204> was submitted from host <c013n01> by user <sdehgha2> in cluster <Hazel> at Tue Feb  4 14:12:58 2025
Job was executed on host(s) <6*c003n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Tue Feb  4 14:51:01 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Tue Feb  4 14:51:01 2025
Terminated at Tue Feb  4 15:35:35 2025
Results reported at Tue Feb  4 15:35:35 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
          
#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "ECFP_XGBR_RRU Dimer_log Second Peak wo placeholder_3_count_20250204"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Second Peak wo placeholder_3_count_20250204.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Second Peak wo placeholder_3_count_20250204.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_structure_only.py --target_features "log Second Peak wo placeholder"                                   --representation "ECFP"                                   --regressor_type "XGBR"                                   --oligomer_representation "RRU Dimer"                                   --radius "3"                                   --vector "count" 

------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   8910.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.50 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   2702 sec.
    Turnaround time :                            4957 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Second Peak wo placeholder_3_count_20250204.err> for stderr output of this job.

