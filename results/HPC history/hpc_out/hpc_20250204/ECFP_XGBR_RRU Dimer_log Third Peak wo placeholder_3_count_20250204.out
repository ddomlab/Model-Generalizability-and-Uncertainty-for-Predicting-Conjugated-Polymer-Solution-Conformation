Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0038002859838584305), ('regressor__regressor__max_depth', 2426), ('regressor__regressor__n_estimators', 333), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 195), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006991301792409353), ('regressor__regressor__max_depth', 18), ('regressor__regressor__n_estimators', 598), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006631953182520347), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 76), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0016166177760734484), ('regressor__regressor__max_depth', 196), ('regressor__regressor__n_estimators', 498), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.00599125321662527), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 290), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0014543087458825314), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1317), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0015091157368080942), ('regressor__regressor__max_depth', 7853), ('regressor__regressor__n_estimators', 959), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 606), ('regressor__regressor__n_estimators', 532), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03972893133963027), ('regressor__regressor__max_depth', 206), ('regressor__regressor__n_estimators', 349), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011869960359431877), ('regressor__regressor__max_depth', 1514), ('regressor__regressor__n_estimators', 92), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0086696504548796), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 94), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017964524956674992), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 88), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 485), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 699), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 144), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001207643893804676), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 355), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1065), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009635685041725947), ('regressor__regressor__max_depth', 5278), ('regressor__regressor__n_estimators', 85), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014506453207882557), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 91), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.032273935369350665), ('regressor__regressor__max_depth', 29), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006437225050872963), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 370), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009456651103755272), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 261), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004701603902264929), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 302), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0011889561535190678), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1034), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0017262543185573083), ('regressor__regressor__max_depth', 9157), ('regressor__regressor__n_estimators', 1323), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001348118409208996), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 89), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001166696506917898), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1101), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008603399438257048), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 84), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020109509251930363), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.018847713115908236), ('regressor__regressor__max_depth', 23), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 108), ('regressor__regressor__n_jobs', -2)])


Average scores:	 r: 0.33±0.22	 r2: -0.05±0.34
RRU Dimer
Filename: (ECFP3.count.512)_XGBR_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Third Peak wo placeholder/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Third Peak wo placeholder/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Third Peak wo placeholder/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c038n04>
Subject: Job 492337: <ECFP_XGBR_RRU Dimer_log Third Peak wo placeholder_3_count_20250204> in cluster <Hazel> Done

Job <ECFP_XGBR_RRU Dimer_log Third Peak wo placeholder_3_count_20250204> was submitted from host <c013n01> by user <sdehgha2> in cluster <Hazel> at Tue Feb  4 14:12:58 2025
Job was executed on host(s) <6*c038n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Tue Feb  4 14:54:18 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Tue Feb  4 14:54:18 2025
Terminated at Tue Feb  4 15:44:36 2025
Results reported at Tue Feb  4 15:44:36 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
          
#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "ECFP_XGBR_RRU Dimer_log Third Peak wo placeholder_3_count_20250204"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Third Peak wo placeholder_3_count_20250204.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Third Peak wo placeholder_3_count_20250204.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_structure_only.py --target_features "log Third Peak wo placeholder"                                   --representation "ECFP"                                   --regressor_type "XGBR"                                   --oligomer_representation "RRU Dimer"                                   --radius "3"                                   --vector "count" 

------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   9858.00 sec.
    Max Memory :                                 3 GB
    Average Memory :                             2.91 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               13.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   3041 sec.
    Turnaround time :                            5498 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Third Peak wo placeholder_3_count_20250204.err> for stderr output of this job.

