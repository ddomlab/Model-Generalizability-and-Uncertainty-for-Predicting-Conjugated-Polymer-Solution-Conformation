Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029379618815346262), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 61), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011826780571453624), ('regressor__regressor__max_depth', 3030), ('regressor__regressor__n_estimators', 151), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0036566061118966427), ('regressor__regressor__max_depth', 17), ('regressor__regressor__n_estimators', 550), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0035357229011617817), ('regressor__regressor__max_depth', 19), ('regressor__regressor__n_estimators', 620), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0027742855424856064), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 595), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0016129087889143), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1520), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016052444058339596), ('regressor__regressor__max_depth', 19), ('regressor__regressor__n_estimators', 158), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 422), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008857488666325677), ('regressor__regressor__max_depth', 16), ('regressor__regressor__n_estimators', 261), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006266053222605128), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 395), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011892078796338823), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 151), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011937132337575969), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 155), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05493902648456274), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01874030030851972), ('regressor__regressor__max_depth', 11), ('regressor__regressor__n_estimators', 107), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0029597415230081504), ('regressor__regressor__max_depth', 2138), ('regressor__regressor__n_estimators', 811), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0064196908674156224), ('regressor__regressor__max_depth', 8066), ('regressor__regressor__n_estimators', 330), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006644129676330264), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 225), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005172164445360279), ('regressor__regressor__max_depth', 9516), ('regressor__regressor__n_estimators', 405), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0037399739229086524), ('regressor__regressor__max_depth', 12), ('regressor__regressor__n_estimators', 803), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.05225254185218549), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009461465023233853), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 273), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007159384152797865), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 368), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04995620242067004), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 21), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014917037196524695), ('regressor__regressor__max_depth', 2785), ('regressor__regressor__n_estimators', 107), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('scaling features',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('structural_scaling',
                                                  StandardScaler(),
                                                  ['RRU Dimer_ECFP6_count_bit0',
                                                   'RRU Dimer_ECFP6_count_bit1',
                                                   'RRU Dimer_ECFP6_count_bit2',
                                                   'RRU Dimer_ECFP6_count_bit3',
                                                   'RRU Dimer_ECFP6_count_bit4',
                                                   'RRU Dimer_ECFP6_count_bit5',
                                                   'RRU Dimer_ECFP6_count_bit6',
                                                   'RRU Dimer_ECFP6_count_b...
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit20',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit21',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit22',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit23',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit24',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit25',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit26',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit27',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit28',
                                                   'RRU '
                                                   'Dimer_ECFP6_count_bit29', ...])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002388593093530596), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 582), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0044975114345544515), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 384), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0013341725549433643), ('regressor__regressor__max_depth', 14), ('regressor__regressor__n_estimators', 1236), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0010370758440055015), ('regressor__regressor__max_depth', 4945), ('regressor__regressor__n_estimators', 1980), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01070114752489663), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 289), ('regressor__regressor__n_jobs', -2)])


Average scores:	 r: 0.42±0.07	 r2: 0.16±0.07
RRU Dimer
Filename: (ECFP3.count.512)_XGBR_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Second Peak (e-5 place holder)/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Second Peak (e-5 place holder)/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Second Peak (e-5 place holder)/RRU Dimer/(ECFP3.count.512)_XGBR_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c004n01>
Subject: Job 492329: <ECFP_XGBR_RRU Dimer_log Second Peak (e-5 place holder)_3_count_20250204> in cluster <Hazel> Done

Job <ECFP_XGBR_RRU Dimer_log Second Peak (e-5 place holder)_3_count_20250204> was submitted from host <c013n01> by user <sdehgha2> in cluster <Hazel> at Tue Feb  4 14:12:58 2025
Job was executed on host(s) <6*c004n01>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Tue Feb  4 14:28:45 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Tue Feb  4 14:28:45 2025
Terminated at Tue Feb  4 15:28:26 2025
Results reported at Tue Feb  4 15:28:26 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
          
#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "ECFP_XGBR_RRU Dimer_log Second Peak (e-5 place holder)_3_count_20250204"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Second Peak (e-5 place holder)_3_count_20250204.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Second Peak (e-5 place holder)_3_count_20250204.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_structure_only.py --target_features "log Second Peak (e-5 place holder)"                                   --representation "ECFP"                                   --regressor_type "XGBR"                                   --oligomer_representation "RRU Dimer"                                   --radius "3"                                   --vector "count" 

------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   12763.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             3.92 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   3581 sec.
    Turnaround time :                            4528 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250204/ECFP_XGBR_RRU Dimer_log Second Peak (e-5 place holder)_3_count_20250204.err> for stderr output of this job.

