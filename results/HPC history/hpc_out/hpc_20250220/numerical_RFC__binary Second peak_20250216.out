f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 3191), ('regressor__n_estimators', 84)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 10000), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 4855), ('regressor__n_estimators', 28)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 3325), ('regressor__n_estimators', 354)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 2344), ('regressor__n_estimators', 13)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 3776), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 470), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 1225), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 26), ('regressor__n_estimators', 323)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 97), ('regressor__n_estimators', 116)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 303), ('regressor__n_estimators', 92)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 1074), ('regressor__n_estimators', 45)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 4866), ('regressor__n_estimators', 184)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 1814), ('regressor__n_estimators', 102)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 1466), ('regressor__n_estimators', 2000)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 8), ('regressor__n_estimators', 1943)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 21), ('regressor__n_estimators', 22)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 545), ('regressor__n_estimators', 11)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 4784), ('regressor__n_estimators', 70)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 9926), ('regressor__n_estimators', 1139)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 195), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 130), ('regressor__n_estimators', 508)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 8), ('regressor__n_estimators', 44)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 241), ('regressor__n_estimators', 327)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 128), ('regressor__n_estimators', 10)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 2211), ('regressor__n_estimators', 166)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 5823), ('regressor__n_estimators', 11)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 405), ('regressor__n_estimators', 221)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 87), ('regressor__n_estimators', 13)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 4754), ('regressor__n_estimators', 2000)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 15), ('regressor__n_estimators', 14)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 23), ('regressor__n_estimators', 184)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 20), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 10000), ('regressor__n_estimators', 705)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 9), ('regressor__n_estimators', 1914)])


{6: {'fit_time': array([0.04184937, 0.04329395, 0.04413462, 0.0439961 , 0.03692627]), 'score_time': array([0.01974654, 0.01958156, 0.01967049, 0.01993942, 0.02078795]), 'test_f1': array([0.85148515, 0.87037037, 0.83495146, 0.78      , 0.81904762]), 'test_recall': array([0.86      , 0.94      , 0.86      , 0.78      , 0.87755102]), 'test_precision': array([0.84313725, 0.81034483, 0.81132075, 0.78      , 0.76785714]), 'test_roc_auc': array([0.81235294, 0.80823529, 0.78294118, 0.72823529, 0.74759904]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 2344, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 13, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 13: {'fit_time': array([2.92962813, 2.95078158, 2.85371232, 2.91962004, 2.9224751 ]), 'score_time': array([0.11219478, 0.11301517, 0.10903573, 0.11224723, 0.11175847]), 'test_f1': array([0.82      , 0.82568807, 0.78431373, 0.8490566 , 0.83673469]), 'test_recall': array([0.82      , 0.9       , 0.8       , 0.9       , 0.83673469]), 'test_precision': array([0.82      , 0.76271186, 0.76923077, 0.80357143, 0.83673469]), 'test_roc_auc': array([0.77764706, 0.74411765, 0.72352941, 0.78823529, 0.80072029]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 1225, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 2000, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 42: {'fit_time': array([0.085392  , 0.08612585, 0.08552623, 0.08485746, 0.08720088]), 'score_time': array([0.02091527, 0.02125788, 0.02084589, 0.02108812, 0.0210793 ]), 'test_f1': array([0.86538462, 0.80373832, 0.83018868, 0.8       , 0.82828283]), 'test_recall': array([0.9       , 0.86      , 0.88      , 0.8       , 0.83673469]), 'test_precision': array([0.83333333, 0.75438596, 0.78571429, 0.8       , 0.82      ]), 'test_roc_auc': array([0.81764706, 0.72411765, 0.76352941, 0.75294118, 0.78601441]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 1074, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 45, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 69: {'fit_time': array([1.58063459, 1.57191372, 1.592103  , 1.58507228, 1.55851293]), 'score_time': array([0.06553388, 0.06568933, 0.06541228, 0.06545353, 0.06572461]), 'test_f1': array([0.82      , 0.82      , 0.87378641, 0.85148515, 0.87619048]), 'test_recall': array([0.82      , 0.82      , 0.9       , 0.86      , 0.93877551]), 'test_precision': array([0.82      , 0.82      , 0.8490566 , 0.84313725, 0.82142857]), 'test_roc_auc': array([0.77764706, 0.77764706, 0.83235294, 0.81235294, 0.82232893]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 9926, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 1139, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 420: {'fit_time': array([0.51029348, 0.50852585, 0.50376773, 0.50090265, 0.5001967 ]), 'score_time': array([0.03803992, 0.03788924, 0.03674293, 0.03674078, 0.03640103]), 'test_f1': array([0.95145631, 0.83495146, 0.85185185, 0.76767677, 0.8490566 ]), 'test_recall': array([0.98      , 0.86      , 0.92      , 0.76      , 0.91836735]), 'test_precision': array([0.9245283 , 0.81132075, 0.79310345, 0.7755102 , 0.78947368]), 'test_roc_auc': array([0.93117647, 0.78294118, 0.78352941, 0.71823529, 0.78271309]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 241, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 327, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 1234567890: {'fit_time': array([0.04447865, 0.04400349, 0.04300332, 0.04289007, 0.03728008]), 'score_time': array([0.01918983, 0.01910424, 0.01912427, 0.01897264, 0.01932168]), 'test_f1': array([0.85436893, 0.88235294, 0.76086957, 0.71428571, 0.91262136]), 'test_recall': array([0.88      , 0.9       , 0.7       , 0.7       , 0.95918367]), 'test_precision': array([0.83018868, 0.86538462, 0.83333333, 0.72916667, 0.87037037]), 'test_roc_auc': array([0.80764706, 0.84705882, 0.74705882, 0.65882353, 0.87665066]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 87, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 13, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 473129: {'fit_time': array([0.05107212, 0.05059147, 0.05023813, 0.05065775, 0.04592776]), 'score_time': array([0.02566195, 0.02486801, 0.02470422, 0.02607465, 0.02607894]), 'test_f1': array([0.82352941, 0.85981308, 0.87128713, 0.85981308, 0.79245283]), 'test_recall': array([0.84      , 0.92      , 0.88      , 0.92      , 0.85714286]), 'test_precision': array([0.80769231, 0.80701754, 0.8627451 , 0.80701754, 0.73684211]), 'test_roc_auc': array([0.77294118, 0.79823529, 0.83705882, 0.79823529, 0.70798319]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 15, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 14, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}}
Average scores:	 f1: 0.84±0.04
scaler
Filename: (PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Second peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Second peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Second peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c038n02>
Subject: Job 917469: <numerical_RFC_polymer_size_feats_on_binary Second peak_all_num_20250216> in cluster <Hazel> Done

Job <numerical_RFC_polymer_size_feats_on_binary Second peak_all_num_20250216> was submitted from host <c035n03> by user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:06:47 2025
Job was executed on host(s) <6*c038n02>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:06:48 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Feb 16 15:06:48 2025
Terminated at Sun Feb 16 15:56:50 2025
Results reported at Sun Feb 16 15:56:50 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RFC_polymer_size_feats_on_binary Second peak_all_num_20250216"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RFC__binary Second peak_20250216.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RFC__binary Second peak_20250216.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "binary Second peak"                                     --regressor_type "RFC"                                     --numerical_feats 'PDI' 'Mn (g/mol)' 'Mw (g/mol)' 'Concentration (mg/ml)' "Temperature SANS/SLS/DLS/SEC (K)" "polymer dP" "polymer dD" "polymer dH" "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   10331.25 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.49 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   3025 sec.
    Turnaround time :                            3003 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RFC__binary Second peak_20250216.err> for stderr output of this job.

