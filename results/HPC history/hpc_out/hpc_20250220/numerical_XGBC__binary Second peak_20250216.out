f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.06996662819613901), ('regressor__max_depth', 3455), ('regressor__n_estimators', 1063), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.05665164044896537), ('regressor__max_depth', 3), ('regressor__n_estimators', 749), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.010624430194246418), ('regressor__max_depth', 137), ('regressor__n_estimators', 334), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 50), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.09283735705684168), ('regressor__max_depth', 6), ('regressor__n_estimators', 1984), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.03557009344703186), ('regressor__max_depth', 6), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.009044548709171879), ('regressor__max_depth', 1045), ('regressor__n_estimators', 1066), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.04944628876331641), ('regressor__max_depth', 1769), ('regressor__n_estimators', 1119), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 369), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.02020505214515847), ('regressor__max_depth', 2866), ('regressor__n_estimators', 915), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 313), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.09924877345289547), ('regressor__max_depth', 11), ('regressor__n_estimators', 1981), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.02515008733741815), ('regressor__max_depth', 3), ('regressor__n_estimators', 407), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.005524999468481607), ('regressor__max_depth', 10000), ('regressor__n_estimators', 861), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 2384), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.027285952269365022), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.043341473284128684), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 5964), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 5594), ('regressor__n_estimators', 50), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.016577556749701742), ('regressor__max_depth', 32), ('regressor__n_estimators', 264), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.014185033114442353), ('regressor__max_depth', 4), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.01740314682599336), ('regressor__max_depth', 105), ('regressor__n_estimators', 325), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 50), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.03990477345001923), ('regressor__max_depth', 10000), ('regressor__n_estimators', 50), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 208), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 3), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.09254354315803234), ('regressor__max_depth', 9121), ('regressor__n_estimators', 59), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.06471876343442266), ('regressor__max_depth', 432), ('regressor__n_estimators', 116), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 432), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.011442852076825816), ('regressor__max_depth', 10000), ('regressor__n_estimators', 437), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.08739717816180152), ('regressor__max_depth', 10000), ('regressor__n_estimators', 1579), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.0012799449516072482), ('regressor__max_depth', 7043), ('regressor__n_estimators', 1894), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.0010598912923760518), ('regressor__max_depth', 5328), ('regressor__n_estimators', 961), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.0019224363790330287), ('regressor__max_depth', 38), ('regressor__n_estimators', 1021), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


{6: {'fit_time': array([0.17904019, 0.16613698, 0.17367053, 0.17912388, 0.17265201]), 'score_time': array([0.07839489, 0.08850622, 0.07979345, 0.07209754, 0.07393599]), 'test_f1': array([0.88235294, 0.87037037, 0.85714286, 0.81188119, 0.76      ]), 'test_recall': array([0.9      , 0.94     , 0.9      , 0.82     , 0.7755102]), 'test_precision': array([0.86538462, 0.81034483, 0.81818182, 0.80392157, 0.74509804]), 'test_roc_auc': array([0.84705882, 0.80823529, 0.80294118, 0.76294118, 0.69657863]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.010624430194246418, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 137, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 334, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 13: {'fit_time': array([0.33405638, 0.31948328, 0.3661077 , 0.35753083, 0.34589338]), 'score_time': array([0.0233562 , 0.02419686, 0.02398777, 0.0249753 , 0.02342916]), 'test_f1': array([0.83495146, 0.81481481, 0.76      , 0.85436893, 0.8172043 ]), 'test_recall': array([0.86     , 0.88     , 0.76     , 0.88     , 0.7755102]), 'test_precision': array([0.81132075, 0.75862069, 0.76      , 0.83018868, 0.86363636]), 'test_roc_auc': array([0.78294118, 0.73411765, 0.70352941, 0.80764706, 0.79951981]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.04944628876331641, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 1769, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 1119, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 42: {'fit_time': array([0.48009706, 0.4780457 , 0.47005486, 0.45451713, 0.47578502]), 'score_time': array([0.0248487 , 0.02448821, 0.02535343, 0.02425766, 0.02528238]), 'test_f1': array([0.88461538, 0.83809524, 0.79207921, 0.79591837, 0.82474227]), 'test_recall': array([0.92      , 0.88      , 0.8       , 0.78      , 0.81632653]), 'test_precision': array([0.85185185, 0.8       , 0.78431373, 0.8125    , 0.83333333]), 'test_roc_auc': array([0.84235294, 0.77823529, 0.73823529, 0.75764706, 0.79051621]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.09924877345289547, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 11, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 1981, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 69: {'fit_time': array([0.58522773, 0.56903529, 0.65469885, 0.65955591, 0.64144707]), 'score_time': array([0.02602601, 0.026057  , 0.02881861, 0.02958512, 0.02798891]), 'test_f1': array([0.85714286, 0.83495146, 0.86      , 0.84536082, 0.84615385]), 'test_recall': array([0.9       , 0.86      , 0.86      , 0.82      , 0.89795918]), 'test_precision': array([0.81818182, 0.81132075, 0.86      , 0.87234043, 0.8       ]), 'test_roc_auc': array([0.80294118, 0.78294118, 0.82705882, 0.82176471, 0.78721489]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.027285952269365022, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 10000, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 2000, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 420: {'fit_time': array([0.18147635, 0.16194582, 0.1957922 , 0.16202664, 0.15761614]), 'score_time': array([0.02219534, 0.02974796, 0.02384353, 0.03517056, 0.02203918]), 'test_f1': array([0.94117647, 0.84313725, 0.80357143, 0.75789474, 0.82352941]), 'test_recall': array([0.96      , 0.86      , 0.9       , 0.72      , 0.85714286]), 'test_precision': array([0.92307692, 0.82692308, 0.72580645, 0.8       , 0.79245283]), 'test_roc_auc': array([0.92117647, 0.79764706, 0.7       , 0.72764706, 0.76680672]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.01740314682599336, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 105, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 325, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 1234567890: {'fit_time': array([0.06980324, 0.07610798, 0.07064962, 0.07848668, 0.07863307]), 'score_time': array([0.02978659, 0.02154493, 0.0217309 , 0.02293086, 0.02084494]), 'test_f1': array([0.87378641, 0.82      , 0.78350515, 0.71287129, 0.90566038]), 'test_recall': array([0.9       , 0.82      , 0.76      , 0.72      , 0.97959184]), 'test_precision': array([0.8490566 , 0.82      , 0.80851064, 0.70588235, 0.84210526]), 'test_roc_auc': array([0.83235294, 0.77764706, 0.74764706, 0.63941176, 0.85744298]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.06471876343442266, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 432, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 116, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 473129: {'fit_time': array([0.49406552, 0.47794843, 0.48825574, 0.49311709, 0.50959468]), 'score_time': array([0.0241847 , 0.0238533 , 0.02428102, 0.02457619, 0.0286665 ]), 'test_f1': array([0.82352941, 0.87850467, 0.85436893, 0.83636364, 0.82882883]), 'test_recall': array([0.84      , 0.94      , 0.88      , 0.92      , 0.93877551]), 'test_precision': array([0.80769231, 0.8245614 , 0.83018868, 0.76666667, 0.74193548]), 'test_roc_auc': array([0.77294118, 0.82294118, 0.80764706, 0.75411765, 0.73409364]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.0019224363790330287, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 38, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 1021, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}}
Average scores:	 f1: 0.83±0.04
scaler
Filename: (PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Second peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Second peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Second peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c026n01>
Subject: Job 917470: <numerical_XGBC_polymer_size_feats_on_binary Second peak_all_num_20250216> in cluster <Hazel> Done

Job <numerical_XGBC_polymer_size_feats_on_binary Second peak_all_num_20250216> was submitted from host <c035n03> by user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:06:47 2025
Job was executed on host(s) <6*c026n01>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:07:43 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Feb 16 15:07:43 2025
Terminated at Sun Feb 16 15:37:37 2025
Results reported at Sun Feb 16 15:37:37 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBC_polymer_size_feats_on_binary Second peak_all_num_20250216"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBC__binary Second peak_20250216.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBC__binary Second peak_20250216.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "binary Second peak"                                     --regressor_type "XGBC"                                     --numerical_feats 'PDI' 'Mn (g/mol)' 'Mw (g/mol)' 'Concentration (mg/ml)' "Temperature SANS/SLS/DLS/SEC (K)" "polymer dP" "polymer dD" "polymer dH" "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   3544.00 sec.
    Max Memory :                                 8 GB
    Average Memory :                             7.32 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               8.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   1794 sec.
    Turnaround time :                            1850 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBC__binary Second peak_20250216.err> for stderr output of this job.

