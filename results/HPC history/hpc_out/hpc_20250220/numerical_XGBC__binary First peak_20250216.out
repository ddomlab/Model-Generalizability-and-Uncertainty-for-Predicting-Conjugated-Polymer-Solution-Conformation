f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.011826780571453624), ('regressor__max_depth', 2460), ('regressor__n_estimators', 151), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.001), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 80), ('regressor__n_estimators', 396), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.051841968727892734), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 3), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 255), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.06188252308801238), ('regressor__max_depth', 3), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.01561409101744672), ('regressor__max_depth', 10000), ('regressor__n_estimators', 50), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.013049012263372798), ('regressor__max_depth', 10000), ('regressor__n_estimators', 1283), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.0787749672705762), ('regressor__max_depth', 9), ('regressor__n_estimators', 586), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 674), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.07012672655931422), ('regressor__max_depth', 3), ('regressor__n_estimators', 689), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 729), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.028874256143646897), ('regressor__max_depth', 10000), ('regressor__n_estimators', 523), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.06561104958557512), ('regressor__max_depth', 39), ('regressor__n_estimators', 1816), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.04136889439245205), ('regressor__max_depth', 10000), ('regressor__n_estimators', 181), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.0571541775064), ('regressor__max_depth', 3), ('regressor__n_estimators', 407), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.038293588679601386), ('regressor__max_depth', 10000), ('regressor__n_estimators', 50), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.01276380044029088), ('regressor__max_depth', 65), ('regressor__n_estimators', 562), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.046769548778989936), ('regressor__max_depth', 10000), ('regressor__n_estimators', 177), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.003820275461448969), ('regressor__max_depth', 178), ('regressor__n_estimators', 955), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.03209752040759954), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.0057649915153208066), ('regressor__max_depth', 48), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.022475139584691183), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.04368215924512656), ('regressor__max_depth', 3), ('regressor__n_estimators', 1049), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.06802634078848371), ('regressor__max_depth', 3), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.02701921427457359), ('regressor__max_depth', 5), ('regressor__n_estimators', 849), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.009852212468258206), ('regressor__max_depth', 3), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.01554146265216073), ('regressor__max_depth', 3), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.006773723211489352), ('regressor__max_depth', 10000), ('regressor__n_estimators', 726), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.02232503917499137), ('regressor__max_depth', 3), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.004500449630653738), ('regressor__max_depth', 10000), ('regressor__n_estimators', 1249), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.009909750840208965), ('regressor__max_depth', 10000), ('regressor__n_estimators', 526), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.08091703337929072), ('regressor__max_depth', 298), ('regressor__n_estimators', 56), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 3), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


{6: {'fit_time': array([1.01374698, 0.98718357, 1.01208591, 1.02218962, 0.98144507]), 'score_time': array([0.02697659, 0.02732825, 0.0271666 , 0.02707696, 0.03027439]), 'test_f1': array([0.92929293, 0.78431373, 0.85714286, 0.8627451 , 0.75268817]), 'test_recall': array([0.92      , 0.81632653, 0.85714286, 0.89795918, 0.71428571]), 'test_precision': array([0.93877551, 0.75471698, 0.85714286, 0.83018868, 0.79545455]), 'test_roc_auc': array([0.91588235, 0.72244898, 0.82857143, 0.82040816, 0.72478992]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.001, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 10000, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 2000, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 13: {'fit_time': array([0.48789024, 0.48272848, 0.49500489, 0.4582262 , 0.47067761]), 'score_time': array([0.02501297, 0.02520704, 0.02516341, 0.02578545, 0.02541876]), 'test_f1': array([0.87619048, 0.86315789, 0.91666667, 0.84      , 0.84536082]), 'test_recall': array([0.92      , 0.83673469, 0.89795918, 0.85714286, 0.83673469]), 'test_precision': array([0.83636364, 0.89130435, 0.93617021, 0.82352941, 0.85416667]), 'test_roc_auc': array([0.82764706, 0.84693878, 0.90612245, 0.8       , 0.81542617]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.013049012263372798, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 10000, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 1283, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 42: {'fit_time': array([0.21368575, 0.22236037, 0.22275877, 0.21692491, 0.22247148]), 'score_time': array([0.02518821, 0.0244627 , 0.02475572, 0.02479243, 0.02409577]), 'test_f1': array([0.85148515, 0.90196078, 0.85106383, 0.84313725, 0.84848485]), 'test_recall': array([0.86      , 0.93877551, 0.81632653, 0.87755102, 0.85714286]), 'test_precision': array([0.84313725, 0.86792453, 0.88888889, 0.81132075, 0.84      ]), 'test_roc_auc': array([0.81235294, 0.86938776, 0.83673469, 0.79591837, 0.81092437]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.028874256143646897, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 10000, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 523, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 69: {'fit_time': array([0.26368952, 0.27883148, 0.26606154, 0.27002907, 0.27219415]), 'score_time': array([0.02489948, 0.02374625, 0.02448869, 0.02392197, 0.02368879]), 'test_f1': array([0.82828283, 0.89583333, 0.87619048, 0.88888889, 0.85714286]), 'test_recall': array([0.82      , 0.87755102, 0.93877551, 0.89795918, 0.85714286]), 'test_precision': array([0.83673469, 0.91489362, 0.82142857, 0.88      , 0.85714286]), 'test_roc_auc': array([0.79235294, 0.88163265, 0.82653061, 0.86326531, 0.82563025]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.01276380044029088, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 65, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 562, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 420: {'fit_time': array([0.21559238, 0.21667004, 0.21633172, 0.21884251, 0.21896958]), 'score_time': array([0.02374983, 0.02348447, 0.02353787, 0.0233562 , 0.0230267 ]), 'test_f1': array([0.82608696, 0.8411215 , 0.92      , 0.88659794, 0.87378641]), 'test_recall': array([0.76      , 0.91836735, 0.93877551, 0.87755102, 0.91836735]), 'test_precision': array([0.9047619 , 0.77586207, 0.90196078, 0.89583333, 0.83333333]), 'test_roc_auc': array([0.82117647, 0.77346939, 0.89795918, 0.86734694, 0.82683073]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.04368215924512656, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 3, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 1049, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 1234567890: {'fit_time': array([0.24385023, 0.23837638, 0.25380182, 0.24649763, 0.2396152 ]), 'score_time': array([0.02441978, 0.02481365, 0.02399302, 0.02417707, 0.02457047]), 'test_f1': array([0.89583333, 0.82474227, 0.89108911, 0.85714286, 0.87755102]), 'test_recall': array([0.86      , 0.81632653, 0.91836735, 0.85714286, 0.87755102]), 'test_precision': array([0.93478261, 0.83333333, 0.86538462, 0.85714286, 0.87755102]), 'test_roc_auc': array([0.88588235, 0.79387755, 0.85918367, 0.82857143, 0.85054022]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.02701921427457359, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 5, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 849, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 473129: {'fit_time': array([0.57491875, 0.57424879, 0.58399606, 0.57952499, 0.56561875]), 'score_time': array([0.02503252, 0.025208  , 0.02457118, 0.02475381, 0.02543092]), 'test_f1': array([0.89583333, 0.81188119, 0.89795918, 0.90196078, 0.82352941]), 'test_recall': array([0.86      , 0.83673469, 0.89795918, 0.93877551, 0.85714286]), 'test_precision': array([0.93478261, 0.78846154, 0.89795918, 0.86792453, 0.79245283]), 'test_roc_auc': array([0.88588235, 0.76122449, 0.87755102, 0.86938776, 0.76680672]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.004500449630653738, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 10000, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 1249, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}}
Average scores:	 f1: 0.86±0.04
scaler
Filename: (PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary First peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary First peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary First peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c039n04>
Subject: Job 917468: <numerical_XGBC_polymer_size_feats_on_binary First peak_all_num_20250216> in cluster <Hazel> Done

Job <numerical_XGBC_polymer_size_feats_on_binary First peak_all_num_20250216> was submitted from host <c035n03> by user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:06:47 2025
Job was executed on host(s) <6*c039n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:06:48 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Feb 16 15:06:48 2025
Terminated at Sun Feb 16 15:36:48 2025
Results reported at Sun Feb 16 15:36:48 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBC_polymer_size_feats_on_binary First peak_all_num_20250216"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBC__binary First peak_20250216.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBC__binary First peak_20250216.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "binary First peak"                                     --regressor_type "XGBC"                                     --numerical_feats 'PDI' 'Mn (g/mol)' 'Mw (g/mol)' 'Concentration (mg/ml)' "Temperature SANS/SLS/DLS/SEC (K)" "polymer dP" "polymer dD" "polymer dH" "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   3608.00 sec.
    Max Memory :                                 8 GB
    Average Memory :                             6.92 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               8.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   1826 sec.
    Turnaround time :                            1801 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBC__binary First peak_20250216.err> for stderr output of this job.

