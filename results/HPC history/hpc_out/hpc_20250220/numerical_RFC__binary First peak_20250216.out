f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 286), ('regressor__n_estimators', 27)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 241), ('regressor__n_estimators', 21)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 422), ('regressor__n_estimators', 87)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 17), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 11), ('regressor__n_estimators', 1978)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 561), ('regressor__n_estimators', 130)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 45), ('regressor__n_estimators', 138)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 3016), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 75), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 117), ('regressor__n_estimators', 457)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 2503), ('regressor__n_estimators', 1078)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 26), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 10000), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 6844), ('regressor__n_estimators', 409)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 3449), ('regressor__n_estimators', 187)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 10), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 5), ('regressor__n_estimators', 307)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 301), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 114), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 904), ('regressor__n_estimators', 2000)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 360), ('regressor__n_estimators', 47)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 60), ('regressor__n_estimators', 287)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 241), ('regressor__n_estimators', 327)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 2089), ('regressor__n_estimators', 113)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 2817), ('regressor__n_estimators', 2000)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 1683), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 759), ('regressor__n_estimators', 253)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 139), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 9863), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 43), ('regressor__n_estimators', 17)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 32), ('regressor__n_estimators', 170)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 562), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 21), ('regressor__n_estimators', 11)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 24), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 10000), ('regressor__n_estimators', 10)])


{6: {'fit_time': array([3.1741004 , 3.16721511, 3.19312716, 3.1901114 , 3.17843485]), 'score_time': array([0.11859012, 0.11538839, 0.11530328, 0.12089038, 0.11599302]), 'test_f1': array([0.92156863, 0.82352941, 0.82978723, 0.88      , 0.78723404]), 'test_recall': array([0.94      , 0.85714286, 0.79591837, 0.89795918, 0.75510204]), 'test_precision': array([0.90384615, 0.79245283, 0.86666667, 0.8627451 , 0.82222222]), 'test_roc_auc': array([0.89647059, 0.77142857, 0.8122449 , 0.84897959, 0.75990396]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 11, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 1978, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 13: {'fit_time': array([0.04261827, 0.04302859, 0.04466081, 0.04235387, 0.0370729 ]), 'score_time': array([0.02216744, 0.02208376, 0.02194881, 0.02201009, 0.02188683]), 'test_f1': array([0.87619048, 0.83673469, 0.91836735, 0.84      , 0.875     ]), 'test_recall': array([0.92      , 0.83673469, 0.91836735, 0.85714286, 0.85714286]), 'test_precision': array([0.83636364, 0.83673469, 0.91836735, 0.82352941, 0.89361702]), 'test_roc_auc': array([0.82764706, 0.80408163, 0.90204082, 0.8       , 0.85504202]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 75, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 10, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 42: {'fit_time': array([0.66979098, 0.66153622, 0.65637994, 0.67245245, 0.67038751]), 'score_time': array([0.04135108, 0.04146552, 0.0412004 , 0.04285097, 0.04126835]), 'test_f1': array([0.85436893, 0.9       , 0.82978723, 0.86792453, 0.89795918]), 'test_recall': array([0.88      , 0.91836735, 0.79591837, 0.93877551, 0.89795918]), 'test_precision': array([0.83018868, 0.88235294, 0.86666667, 0.80701754, 0.89795918]), 'test_roc_auc': array([0.80764706, 0.87346939, 0.8122449 , 0.8122449 , 0.87545018]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 6844, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 409, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 69: {'fit_time': array([0.04340053, 0.04321647, 0.0429616 , 0.04171515, 0.03678775]), 'score_time': array([0.02285409, 0.02144957, 0.02123904, 0.0209446 , 0.02156138]), 'test_f1': array([0.83673469, 0.87755102, 0.86538462, 0.87128713, 0.82978723]), 'test_recall': array([0.82      , 0.87755102, 0.91836735, 0.89795918, 0.79591837]), 'test_precision': array([0.85416667, 0.87755102, 0.81818182, 0.84615385, 0.86666667]), 'test_roc_auc': array([0.80705882, 0.85306122, 0.81632653, 0.83469388, 0.80972389]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 10, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 10, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 420: {'fit_time': array([0.52052355, 0.50583601, 0.52698183, 0.50252652, 0.50767398]), 'score_time': array([0.04229426, 0.03965688, 0.0419507 , 0.03903651, 0.0390954 ]), 'test_f1': array([0.80434783, 0.85981308, 0.92929293, 0.88659794, 0.87850467]), 'test_recall': array([0.74      , 0.93877551, 0.93877551, 0.87755102, 0.95918367]), 'test_precision': array([0.88095238, 0.79310345, 0.92      , 0.89583333, 0.81034483]), 'test_roc_auc': array([0.79647059, 0.79795918, 0.9122449 , 0.86734694, 0.81782713]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 60, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 287, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 1234567890: {'fit_time': array([0.41957068, 0.4272325 , 0.41839838, 0.42063284, 0.42102504]), 'score_time': array([0.03388214, 0.03366876, 0.0335319 , 0.03310299, 0.03275824]), 'test_f1': array([0.89795918, 0.85148515, 0.86      , 0.84210526, 0.84210526]), 'test_recall': array([0.88      , 0.87755102, 0.87755102, 0.81632653, 0.81632653]), 'test_precision': array([0.91666667, 0.82692308, 0.84313725, 0.86956522, 0.86956522]), 'test_roc_auc': array([0.88117647, 0.81020408, 0.8244898 , 0.82244898, 0.81992797]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 759, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 253, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 473129: {'fit_time': array([3.22363138, 3.17648721, 3.17123365, 3.17053127, 3.17299318]), 'score_time': array([0.11509371, 0.11480665, 0.11533117, 0.11696601, 0.11653352]), 'test_f1': array([0.88659794, 0.86868687, 0.88      , 0.90196078, 0.87128713]), 'test_recall': array([0.86      , 0.87755102, 0.89795918, 0.93877551, 0.89795918]), 'test_precision': array([0.91489362, 0.86      , 0.8627451 , 0.86792453, 0.84615385]), 'test_roc_auc': array([0.87117647, 0.83877551, 0.84897959, 0.86938776, 0.83133253]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 562, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 2000, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}}
Average scores:	 f1: 0.87±0.03
scaler
Filename: (PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary First peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary First peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary First peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c032n02>
Subject: Job 917467: <numerical_RFC_polymer_size_feats_on_binary First peak_all_num_20250216> in cluster <Hazel> Done

Job <numerical_RFC_polymer_size_feats_on_binary First peak_all_num_20250216> was submitted from host <c035n03> by user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:06:47 2025
Job was executed on host(s) <6*c032n02>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:06:48 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Feb 16 15:06:48 2025
Terminated at Sun Feb 16 16:07:35 2025
Results reported at Sun Feb 16 16:07:35 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RFC_polymer_size_feats_on_binary First peak_all_num_20250216"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RFC__binary First peak_20250216.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RFC__binary First peak_20250216.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "binary First peak"                                     --regressor_type "RFC"                                     --numerical_feats 'PDI' 'Mn (g/mol)' 'Mw (g/mol)' 'Concentration (mg/ml)' "Temperature SANS/SLS/DLS/SEC (K)" "polymer dP" "polymer dD" "polymer dH" "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   13194.17 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.74 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   3670 sec.
    Turnaround time :                            3648 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RFC__binary First peak_20250216.err> for stderr output of this job.

