f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 209), ('regressor__n_estimators', 29)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 12), ('regressor__n_estimators', 252)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 6), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 284), ('regressor__n_estimators', 28)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 6


Best parameters: OrderedDict([('regressor__max_depth', 5065), ('regressor__n_estimators', 472)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 7), ('regressor__n_estimators', 11)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 8), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 1312), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 7), ('regressor__n_estimators', 354)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 13


Best parameters: OrderedDict([('regressor__max_depth', 119), ('regressor__n_estimators', 278)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 8), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 9), ('regressor__n_estimators', 1983)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 71), ('regressor__n_estimators', 585)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 838), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 42


Best parameters: OrderedDict([('regressor__max_depth', 52), ('regressor__n_estimators', 2000)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 389), ('regressor__n_estimators', 21)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 589), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 147), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 7), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 69


Best parameters: OrderedDict([('regressor__max_depth', 4842), ('regressor__n_estimators', 11)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 72), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 7), ('regressor__n_estimators', 1971)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 3004), ('regressor__n_estimators', 216)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 260), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 420


Best parameters: OrderedDict([('regressor__max_depth', 65), ('regressor__n_estimators', 423)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 10000), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 16), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 6887), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 87), ('regressor__n_estimators', 13)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__max_depth', 1850), ('regressor__n_estimators', 310)])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 871), ('regressor__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 6), ('regressor__n_estimators', 1219)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 5005), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 4223), ('regressor__n_estimators', 10)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RFC 	SEED: 473129


Best parameters: OrderedDict([('regressor__max_depth', 14), ('regressor__n_estimators', 10)])


{6: {'fit_time': array([0.04280043, 0.04394054, 0.04104972, 0.04014635, 0.03785753]), 'score_time': array([0.02042484, 0.01924801, 0.0204792 , 0.02022481, 0.02090073]), 'test_f1': array([0.66666667, 0.625     , 0.6875    , 0.70967742, 0.46153846]), 'test_recall': array([0.55555556, 0.55555556, 0.61111111, 0.61111111, 0.35294118]), 'test_precision': array([0.83333333, 0.71428571, 0.78571429, 0.84615385, 0.66666667]), 'test_roc_auc': array([0.76262626, 0.74747475, 0.78282828, 0.79040404, 0.65374332]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 6, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 10, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 13: {'fit_time': array([0.0361743 , 0.03644729, 0.05008292, 0.02924132, 0.04738879]), 'score_time': array([0.017694  , 0.01784849, 0.01762843, 0.01732731, 0.01727223]), 'test_f1': array([0.48275862, 0.57142857, 0.75      , 0.59259259, 0.64705882]), 'test_recall': array([0.38888889, 0.55555556, 0.66666667, 0.44444444, 0.64705882]), 'test_precision': array([0.63636364, 0.58823529, 0.85714286, 0.88888889, 0.64705882]), 'test_roc_auc': array([0.66414141, 0.72474747, 0.81818182, 0.71464646, 0.77807487]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 7, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 11, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 42: {'fit_time': array([0.7263329 , 0.73683262, 0.75834036, 0.76036882, 0.75107527]), 'score_time': array([0.03963089, 0.03874707, 0.04447103, 0.0434463 , 0.04246807]), 'test_f1': array([0.53333333, 0.59259259, 0.61111111, 0.63414634, 0.76470588]), 'test_recall': array([0.44444444, 0.44444444, 0.61111111, 0.72222222, 0.76470588]), 'test_precision': array([0.66666667, 0.88888889, 0.61111111, 0.56521739, 0.76470588]), 'test_roc_auc': array([0.69191919, 0.71464646, 0.75252525, 0.78535354, 0.85204991]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 71, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 585, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 69: {'fit_time': array([0.03697467, 0.04301977, 0.03630781, 0.03667068, 0.03696179]), 'score_time': array([0.01745081, 0.02129054, 0.01744175, 0.01768637, 0.01780796]), 'test_f1': array([0.75      , 0.70967742, 0.7027027 , 0.54054054, 0.53846154]), 'test_recall': array([0.66666667, 0.61111111, 0.72222222, 0.55555556, 0.41176471]), 'test_precision': array([0.85714286, 0.84615385, 0.68421053, 0.52631579, 0.77777778]), 'test_roc_auc': array([0.81818182, 0.79040404, 0.81565657, 0.70959596, 0.69073084]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 4842, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 11, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 420: {'fit_time': array([0.28928208, 0.3123889 , 0.38825083, 0.28870392, 0.29804611]), 'score_time': array([0.02718234, 0.02995753, 0.02571106, 0.02663922, 0.02744532]), 'test_f1': array([0.71794872, 0.70588235, 0.57142857, 0.71428571, 0.625     ]), 'test_recall': array([0.77777778, 0.66666667, 0.55555556, 0.55555556, 0.58823529]), 'test_precision': array([0.66666667, 0.75      , 0.58823529, 1.        , 0.66666667]), 'test_roc_auc': array([0.83585859, 0.8030303 , 0.72474747, 0.77777778, 0.75623886]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 3004, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 216, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 1234567890: {'fit_time': array([0.38587689, 0.38752103, 0.3855691 , 0.37854075, 0.38143277]), 'score_time': array([0.02961707, 0.02865291, 0.02941298, 0.0296936 , 0.02986121]), 'test_f1': array([0.75      , 0.73170732, 0.625     , 0.53846154, 0.68421053]), 'test_recall': array([0.66666667, 0.83333333, 0.55555556, 0.38888889, 0.76470588]), 'test_precision': array([0.85714286, 0.65217391, 0.71428571, 0.875     , 0.61904762]), 'test_roc_auc': array([0.81818182, 0.85606061, 0.74747475, 0.68686869, 0.82174688]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 1850, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 310, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}, 473129: {'fit_time': array([1.42621922, 1.40198612, 1.41879487, 1.42004108, 1.38788295]), 'score_time': array([0.06156969, 0.06071019, 0.06064343, 0.06105137, 0.06056952]), 'test_f1': array([0.58823529, 0.55172414, 0.73333333, 0.77419355, 0.66666667]), 'test_recall': array([0.55555556, 0.44444444, 0.61111111, 0.66666667, 0.52941176]), 'test_precision': array([0.625     , 0.72727273, 0.91666667, 0.92307692, 0.9       ]), 'test_roc_auc': array([0.73232323, 0.69949495, 0.7979798 , 0.82575758, 0.75713012]), 'best_params': {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 6, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 1219, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}}}
Average scores:	 f1: 0.64±0.08
scaler
Filename: (PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Third peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Third peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Third peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RFC_mean_transformerOFF_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c005n04>
Subject: Job 917471: <numerical_RFC_polymer_size_feats_on_binary Third peak_all_num_20250216> in cluster <Hazel> Done

Job <numerical_RFC_polymer_size_feats_on_binary Third peak_all_num_20250216> was submitted from host <c035n03> by user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:06:47 2025
Job was executed on host(s) <6*c005n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:07:45 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Feb 16 15:07:45 2025
Terminated at Sun Feb 16 15:53:59 2025
Results reported at Sun Feb 16 15:53:59 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RFC_polymer_size_feats_on_binary Third peak_all_num_20250216"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RFC__binary Third peak_20250216.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RFC__binary Third peak_20250216.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "binary Third peak"                                     --regressor_type "RFC"                                     --numerical_feats 'PDI' 'Mn (g/mol)' 'Mw (g/mol)' 'Concentration (mg/ml)' "Temperature SANS/SLS/DLS/SEC (K)" "polymer dP" "polymer dD" "polymer dH" "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   9122.19 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.79 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   2774 sec.
    Turnaround time :                            2832 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RFC__binary Third peak_20250216.err> for stderr output of this job.

