f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.07711958935823862), ('regressor__max_depth', 10000), ('regressor__n_estimators', 1383), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.01221801748933583), ('regressor__max_depth', 9098), ('regressor__n_estimators', 1109), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.03494860573222877), ('regressor__max_depth', 10000), ('regressor__n_estimators', 395), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 3), ('regressor__n_estimators', 91), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 6


Best parameters: OrderedDict([('regressor__learning_rate', 0.002746097061811907), ('regressor__max_depth', 3), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 78), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.0016479600392305695), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.038749020202507485), ('regressor__max_depth', 3), ('regressor__n_estimators', 1475), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.06906374569335148), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 13


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 493), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.03972893133963027), ('regressor__max_depth', 105), ('regressor__n_estimators', 349), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.055987604452245814), ('regressor__max_depth', 10000), ('regressor__n_estimators', 95), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.01851836671194176), ('regressor__max_depth', 1447), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.07598931351636941), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 42


Best parameters: OrderedDict([('regressor__learning_rate', 0.024944731421613756), ('regressor__max_depth', 10000), ('regressor__n_estimators', 188), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.002538667144740576), ('regressor__max_depth', 63), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.030484107823022084), ('regressor__max_depth', 3), ('regressor__n_estimators', 367), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.07000278245505788), ('regressor__max_depth', 3), ('regressor__n_estimators', 287), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.03354884870338597), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 69


Best parameters: OrderedDict([('regressor__learning_rate', 0.02500513189004638), ('regressor__max_depth', 3), ('regressor__n_estimators', 880), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.04230723294237601), ('regressor__max_depth', 3), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.06054043882390101), ('regressor__max_depth', 10000), ('regressor__n_estimators', 629), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 107), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 298), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 420


Best parameters: OrderedDict([('regressor__learning_rate', 0.006857835647903761), ('regressor__max_depth', 10000), ('regressor__n_estimators', 1190), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.01628858355590674), ('regressor__max_depth', 971), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.028592463830482116), ('regressor__max_depth', 759), ('regressor__n_estimators', 375), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 60), ('regressor__n_estimators', 93), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 10000), ('regressor__n_estimators', 1059), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__learning_rate', 0.006039257571127894), ('regressor__max_depth', 359), ('regressor__n_estimators', 1018), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


f1



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.03980140412909695), ('regressor__max_depth', 6), ('regressor__n_estimators', 849), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.019249806764930447), ('regressor__max_depth', 3), ('regressor__n_estimators', 567), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.03980140412909695), ('regressor__max_depth', 6), ('regressor__n_estimators', 849), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.006366551838656488), ('regressor__max_depth', 10000), ('regressor__n_estimators', 2000), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBC 	SEED: 473129


Best parameters: OrderedDict([('regressor__learning_rate', 0.1), ('regressor__max_depth', 3), ('regressor__n_estimators', 270), ('regressor__n_jobs', -2), ('regressor__objective', 'binary:logistic')])


{6: {'fit_time': array([0.38617563, 0.41978478, 0.35677838, 0.42704701, 0.35155416]), 'score_time': array([0.03915596, 0.02916336, 0.03358603, 0.02856684, 0.0338583 ]), 'test_f1': array([0.64516129, 0.6       , 0.6       , 0.78787879, 0.57142857]), 'test_recall': array([0.55555556, 0.5       , 0.5       , 0.72222222, 0.47058824]), 'test_precision': array([0.76923077, 0.75      , 0.75      , 0.86666667, 0.72727273]), 'test_roc_auc': array([0.75505051, 0.72727273, 0.72727273, 0.8459596 , 0.71256684]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.002746097061811907, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 3, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 2000, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 13: {'fit_time': array([0.05052137, 0.0524404 , 0.05310798, 0.05132318, 0.04852605]), 'score_time': array([0.02127194, 0.02032256, 0.02037311, 0.02028203, 0.02113938]), 'test_f1': array([0.6       , 0.68421053, 0.66666667, 0.62068966, 0.72222222]), 'test_recall': array([0.5       , 0.72222222, 0.72222222, 0.5       , 0.76470588]), 'test_precision': array([0.75      , 0.65      , 0.61904762, 0.81818182, 0.68421053]), 'test_roc_auc': array([0.72727273, 0.80808081, 0.80050505, 0.73484848, 0.8368984 ]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.1, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 10000, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 78, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 42: {'fit_time': array([0.49862623, 0.49752569, 0.47186947, 0.47709727, 0.53241777]), 'score_time': array([0.02431822, 0.02413678, 0.02340961, 0.02358556, 0.02615738]), 'test_f1': array([0.42857143, 0.64285714, 0.61111111, 0.66666667, 0.75      ]), 'test_recall': array([0.33333333, 0.5       , 0.61111111, 0.72222222, 0.70588235]), 'test_precision': array([0.6       , 0.9       , 0.61111111, 0.61904762, 0.8       ]), 'test_roc_auc': array([0.63636364, 0.74242424, 0.75252525, 0.80050505, 0.8302139 ]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.01851836671194176, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 1447, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 2000, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 69: {'fit_time': array([0.15390849, 0.15096164, 0.15056658, 0.14860916, 0.15259814]), 'score_time': array([0.02016521, 0.02038813, 0.02011657, 0.02045751, 0.02037668]), 'test_f1': array([0.72222222, 0.78787879, 0.76470588, 0.5625    , 0.58064516]), 'test_recall': array([0.72222222, 0.72222222, 0.72222222, 0.5       , 0.52941176]), 'test_precision': array([0.72222222, 0.86666667, 0.8125    , 0.64285714, 0.64285714]), 'test_roc_auc': array([0.82323232, 0.8459596 , 0.83838384, 0.71212121, 0.72682709]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.02500513189004638, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 3, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 880, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 420: {'fit_time': array([0.32251406, 0.31869078, 0.31423044, 0.32116365, 0.31769633]), 'score_time': array([0.02143216, 0.0213635 , 0.02196693, 0.02571177, 0.02095532]), 'test_f1': array([0.73684211, 0.62857143, 0.59459459, 0.76470588, 0.64516129]), 'test_recall': array([0.77777778, 0.61111111, 0.61111111, 0.72222222, 0.58823529]), 'test_precision': array([0.7       , 0.64705882, 0.57894737, 0.8125    , 0.71428571]), 'test_roc_auc': array([0.84343434, 0.76010101, 0.74494949, 0.83838384, 0.76381462]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.04230723294237601, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 3, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 2000, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 1234567890: {'fit_time': array([0.16657829, 0.15575171, 0.14528084, 0.14087105, 0.14381194]), 'score_time': array([0.02757645, 0.02968359, 0.02804899, 0.02746177, 0.02944708]), 'test_f1': array([0.75      , 0.73684211, 0.56      , 0.53846154, 0.68421053]), 'test_recall': array([0.66666667, 0.77777778, 0.38888889, 0.38888889, 0.76470588]), 'test_precision': array([0.85714286, 0.7       , 1.        , 0.875     , 0.61904762]), 'test_roc_auc': array([0.81818182, 0.84343434, 0.69444444, 0.68686869, 0.82174688]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.028592463830482116, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 759, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 375, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}, 473129: {'fit_time': array([0.11066055, 0.10681415, 0.10530019, 0.10932755, 0.10615945]), 'score_time': array([0.02051163, 0.0197165 , 0.01891828, 0.02039838, 0.01898026]), 'test_f1': array([0.64864865, 0.51612903, 0.8125    , 0.77419355, 0.71428571]), 'test_recall': array([0.66666667, 0.44444444, 0.72222222, 0.66666667, 0.58823529]), 'test_precision': array([0.63157895, 0.61538462, 0.92857143, 0.92307692, 0.90909091]), 'test_roc_auc': array([0.78030303, 0.68434343, 0.85353535, 0.82575758, 0.78654189]), 'best_params': {'objective': 'binary:logistic', 'base_score': None, 'booster': None, 'callbacks': None, 'colsample_bylevel': None, 'colsample_bynode': None, 'colsample_bytree': None, 'device': None, 'early_stopping_rounds': None, 'enable_categorical': False, 'eval_metric': None, 'feature_types': None, 'gamma': None, 'grow_policy': None, 'importance_type': None, 'interaction_constraints': None, 'learning_rate': 0.019249806764930447, 'max_bin': None, 'max_cat_threshold': None, 'max_cat_to_onehot': None, 'max_delta_step': None, 'max_depth': 3, 'max_leaves': None, 'min_child_weight': None, 'missing': nan, 'monotone_constraints': None, 'multi_strategy': None, 'n_estimators': 567, 'n_jobs': -2, 'num_parallel_tree': None, 'random_state': None, 'reg_alpha': None, 'reg_lambda': None, 'sampling_method': None, 'scale_pos_weight': None, 'subsample': None, 'tree_method': None, 'validate_parameters': None, 'verbosity': None}}}
Average scores:	 f1: 0.66±0.09
scaler
Filename: (PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Third peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Third peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/classification_target_binary Third peak/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBC_mean_transformerOFF_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c035n03>
Subject: Job 917472: <numerical_XGBC_polymer_size_feats_on_binary Third peak_all_num_20250216> in cluster <Hazel> Done

Job <numerical_XGBC_polymer_size_feats_on_binary Third peak_all_num_20250216> was submitted from host <c035n03> by user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:06:47 2025
Job was executed on host(s) <6*c035n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Feb 16 15:07:47 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Feb 16 15:07:47 2025
Terminated at Sun Feb 16 15:36:31 2025
Results reported at Sun Feb 16 15:36:31 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBC_polymer_size_feats_on_binary Third peak_all_num_20250216"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBC__binary Third peak_20250216.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBC__binary Third peak_20250216.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "binary Third peak"                                     --regressor_type "XGBC"                                     --numerical_feats 'PDI' 'Mn (g/mol)' 'Mw (g/mol)' 'Concentration (mg/ml)' "Temperature SANS/SLS/DLS/SEC (K)" "polymer dP" "polymer dD" "polymer dH" "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   3164.58 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.72 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   1748 sec.
    Turnaround time :                            1784 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBC__binary Third peak_20250216.err> for stderr output of this job.

