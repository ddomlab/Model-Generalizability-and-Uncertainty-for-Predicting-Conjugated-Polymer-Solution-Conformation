


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0023030376333686843), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006570502215828612), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 710), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 9978), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.017063400233765156), ('regressor__regressor__estimator__max_depth', 102), ('regressor__regressor__estimator__n_estimators', 264), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0040492556533643495), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 961), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.06573646809448896), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 109), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.014724045302039789), ('regressor__regressor__estimator__max_depth', 4127), ('regressor__regressor__estimator__n_estimators', 283), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005631456381142169), ('regressor__regressor__estimator__max_depth', 3341), ('regressor__regressor__estimator__n_estimators', 554), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00522166313772381), ('regressor__regressor__estimator__max_depth', 1796), ('regressor__regressor__estimator__n_estimators', 897), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006510756977650244), ('regressor__regressor__estimator__max_depth', 6508), ('regressor__regressor__estimator__n_estimators', 679), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.016468117429343874), ('regressor__regressor__estimator__max_depth', 16), ('regressor__regressor__estimator__n_estimators', 257), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.017145838038053692), ('regressor__regressor__estimator__max_depth', 2119), ('regressor__regressor__estimator__n_estimators', 188), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.06426139825679107), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 89), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015573346734341376), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 270), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.03651210938066473), ('regressor__regressor__estimator__max_depth', 24), ('regressor__regressor__estimator__n_estimators', 123), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.017574988679803304), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 175), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0954271246075345), ('regressor__regressor__estimator__max_depth', 606), ('regressor__regressor__estimator__n_estimators', 58), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.020144260317707087), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 178), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0374568319887), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 125), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009585255808472236), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 341), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011531404056986345), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 420), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0428839069891835), ('regressor__regressor__estimator__max_depth', 236), ('regressor__regressor__estimator__n_estimators', 102), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.016577556749701742), ('regressor__regressor__estimator__max_depth', 75), ('regressor__regressor__estimator__n_estimators', 264), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.059009376314182634), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 61), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01458657441196064), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 300), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.002690998392117692), ('regressor__regressor__estimator__max_depth', 6356), ('regressor__regressor__estimator__n_estimators', 479), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001551764563733244), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009441934984373073), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 434), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.07873842195362243), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003317271581141904), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 1124), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.08091703337929072), ('regressor__regressor__estimator__max_depth', 502), ('regressor__regressor__estimator__n_estimators', 56), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.06149331861781996), ('regressor__regressor__estimator__max_depth', 303), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.09853975297192812), ('regressor__regressor__estimator__max_depth', 232), ('regressor__regressor__estimator__n_estimators', 54), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.06323593542220415), ('regressor__regressor__estimator__max_depth', 12), ('regressor__regressor__estimator__n_estimators', 68), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.03258035627116066), ('regressor__regressor__estimator__max_depth', 15), ('regressor__regressor__estimator__n_estimators', 179), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [-0.124  0.026 -0.543]±[0.183 0.153 2.422]
[array([-0.12361725,  0.02561817, -0.5434296 ]), array([9.27447321e+00, 1.55293338e+02, 9.44168398e+04]), array([5.04081269e+00, 8.40838623e+01, 1.38590192e+04])]
{6: {'fit_time': array([5.07997108, 4.96160936, 5.17681122, 5.08063388, 5.49681759]), 'score_time': array([0.05281234, 0.05296898, 0.04828262, 0.05518079, 0.05794001]), 'test_r2': [array([0.01814727, 0.00324206, 0.00412124]), array([ 0.04798425, -0.17618927, -0.02553934]), array([ 0.20095687,  0.22163762, -3.07983329]), array([-0.15989194, -0.01600826, -0.15908554]), array([-0.47890637, -0.16634074,  0.11186152])], 'test_rmse': [array([6.41834409e+00, 1.42283105e+02, 1.71337735e+04]), array([8.53895865e+00, 1.48256950e+02, 3.38345774e+05]), array([7.88735156e+00, 1.63434475e+02, 4.85506064e+04]), array([1.03816512e+01, 1.68221503e+02, 1.39272718e+04]), array([1.16618280e+01, 1.74175704e+02, 1.84776140e+04])], 'test_mae': [array([3.21047239e+00, 8.25310082e+01, 3.67077653e+03]), array([4.39814360e+00, 8.23622508e+01, 5.36272692e+04]), array([4.23332709e+00, 8.91285569e+01, 6.73721418e+03]), array([   5.75490962,   75.32240482, 3853.02874318]), array([   7.34729764,   98.58906258, 4217.71590224])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0023030376333686843, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([1.02060103, 0.95717573, 1.02776837, 1.0083425 , 1.0473547 ]), 'score_time': array([0.03009558, 0.03096581, 0.03032136, 0.02992749, 0.03800607]), 'test_r2': [array([-0.0914161 ,  0.06656343, -0.03011784]), array([-0.28955134,  0.06290463,  0.0641121 ]), array([-0.0695883 ,  0.05519962,  0.1414281 ]), array([ 0.23771007,  0.00077974, -0.01166297]), array([0.00996055, 0.0410206 , 0.93127769])], 'test_rmse': [array([  10.2545093 ,  175.22822   , 8896.69593084]), array([1.01556097e+01, 1.56455244e+02, 2.67542126e+04]), array([9.82580716e+00, 1.46312110e+02, 8.67302027e+04]), array([5.62477284e+00, 1.54722488e+02, 3.24166700e+05]), array([   8.70350415,  141.67083406, 3877.89666156])], 'test_mae': [array([   5.48728729,   99.88424857, 2384.65558467]), array([5.51901109e+00, 8.88918488e+01, 5.55091944e+03]), array([5.82289879e+00, 6.90748635e+01, 1.22864511e+04]), array([3.04507090e+00, 8.28373486e+01, 4.47159734e+04]), array([   4.41293888,   77.2219236 , 1004.42972315])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.014724045302039789, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 4127, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 283, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([0.49309468, 0.46829009, 0.47180676, 0.5055778 , 0.4916873 ]), 'score_time': array([0.02714181, 0.02866864, 0.02974653, 0.02951503, 0.0278635 ]), 'test_r2': [array([-0.12810152, -0.02491957, -0.01840499]), array([-0.21472609,  0.13278894,  0.19860298]), array([ 0.1757505 ,  0.06823406, -0.01478383]), array([-0.20549501,  0.34485736, -0.31310125]), array([-0.10606969, -0.28226791, -3.81245702])], 'test_rmse': [array([9.57553349e+00, 1.57275862e+02, 2.36687435e+04]), array([9.58987793e+00, 1.55351674e+02, 5.36114925e+04]), array([5.88366341e+00, 1.57617076e+02, 3.32325082e+05]), array([1.11984865e+01, 1.42751259e+02, 1.58093830e+04]), array([9.43392206e+00, 1.52083078e+02, 4.27369903e+04])], 'test_mae': [array([   5.49345759,   91.45901704, 4077.53924395]), array([5.21325871e+00, 7.51231899e+01, 9.24490488e+03]), array([3.06972789e+00, 9.05256284e+01, 4.77220376e+04]), array([   6.05294429,   70.08224416, 3649.51243586]), array([5.14606386e+00, 8.84831538e+01, 5.41852458e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.03651210938066473, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 24, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 123, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([0.27639079, 0.27295661, 0.28213859, 0.26699257, 0.28698087]), 'score_time': array([0.02781177, 0.02748489, 0.03032684, 0.02746224, 0.02650261]), 'test_r2': [array([ 0.1229753 ,  0.22520179, -0.00613589]), array([-0.20197411, -0.17744885,  0.17258936]), array([-0.30588138,  0.30846524, -0.1383273 ]), array([ 0.09791884, -0.20115496, -0.15744733]), array([-0.26678926, -0.11486018, -0.42798131])], 'test_rmse': [array([7.38497838e+00, 1.44854771e+02, 3.23041137e+05]), array([9.33081504e+00, 1.67508579e+02, 8.50858643e+04]), array([1.16133516e+01, 1.22946239e+02, 3.34070087e+04]), array([8.90424295e+00, 1.70331978e+02, 1.39068031e+04]), array([8.83476869e+00, 1.84578933e+02, 1.40291996e+04])], 'test_mae': [array([3.71831331e+00, 7.93371261e+01, 4.32982392e+04]), array([4.83492365e+00, 8.78241270e+01, 1.19311541e+04]), array([6.43587814e+00, 7.34924049e+01, 6.48082562e+03]), array([   4.84536923,   97.77339346, 2979.58629824]), array([   4.8935453 ,   82.04564346, 2742.28666748])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0954271246075345, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 606, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 58, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([0.25509357, 0.26685643, 0.26787138, 0.25067544, 0.2605238 ]), 'score_time': array([0.02763247, 0.02677321, 0.02708888, 0.02744794, 0.02873111]), 'test_r2': [array([-0.50168626, -0.10299263,  0.26484407]), array([0.05600816, 0.24856812, 0.05496691]), array([-0.10329893, -0.01169119, -0.05996988]), array([-0.2325345 ,  0.15872877, -0.01174197]), array([-0.15233773, -0.144266  ,  0.21203345])], 'test_rmse': [array([1.08243214e+01, 1.74871775e+02, 1.35543515e+04]), array([9.56002665e+00, 1.07884707e+02, 9.43070003e+04]), array([   9.44492484,  169.56943935, 7667.23787758]), array([9.25306314e+00, 1.81340727e+02, 3.23877093e+05]), array([8.63393561e+00, 1.39073004e+02, 2.03070108e+04])], 'test_mae': [array([   6.23838498,   84.36296819, 3283.37900613]), array([4.44388129e+00, 6.72729371e+01, 1.54648392e+04]), array([   5.50463477,   93.51443081, 2186.47789406]), array([4.85399821e+00, 9.38470830e+01, 4.15871668e+04]), array([4.44108872e+00, 8.60780796e+01, 4.90488746e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.059009376314182634, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 61, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([1.10672069, 1.13565779, 1.12275481, 1.14990854, 1.10909057]), 'score_time': array([0.03217077, 0.0304544 , 0.03166628, 0.03338504, 0.0319438 ]), 'test_r2': [array([-0.23823522,  0.01702035,  0.54193013]), array([-0.16557111, -0.18672831,  0.08131005]), array([-0.15636433,  0.05530166, -0.28082164]), array([-0.12406214,  0.0713494 , -0.03053245]), array([-0.17845073,  0.09055917, -0.01569438])], 'test_rmse': [array([8.36160572e+00, 1.86099615e+02, 2.16386549e+04]), array([9.71038864e+00, 1.46595564e+02, 8.94696963e+04]), array([9.78093389e+00, 1.28284955e+02, 1.05154324e+04]), array([8.60457339e+00, 1.80464015e+02, 1.28179754e+04]), array([1.12538921e+01, 1.36992279e+02, 3.26468364e+05])], 'test_mae': [array([   5.11111795,   97.09170894, 5003.70490306]), array([5.37344152e+00, 7.90233399e+01, 1.12912507e+04]), array([   4.85186056,   77.67168305, 2342.74820291]), array([   4.90075436,   99.96626899, 2419.88065947]), array([5.96280147e+00, 7.23827891e+01, 4.60459393e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.009441934984373073, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 434, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([0.67243457, 0.67911649, 0.69879961, 0.66970015, 0.67922235]), 'score_time': array([0.02915239, 0.02903461, 0.0274446 , 0.02903271, 0.02976489]), 'test_r2': [array([ -0.57449341,  -0.10304269, -13.7665338 ]), array([-0.15194933,  0.27824552,  0.34277068]), array([ 0.03291431,  0.0617568 , -0.01744941]), array([-0.15884296, -0.01215005, -0.16653291]), array([-0.0707122 ,  0.10427158,  0.40227013])], 'test_rmse': [array([1.11474635e+01, 1.36731424e+02, 9.50126953e+04]), array([8.59408313e+00, 1.41981914e+02, 7.53602375e+04]), array([8.85285707e+00, 1.51840695e+02, 3.20823076e+05]), array([1.01133250e+01, 1.97371065e+02, 2.36816839e+04]), array([9.26919156e+00, 1.30105570e+02, 4.46064317e+04])], 'test_mae': [array([6.07735531e+00, 7.79978474e+01, 1.24115367e+04]), array([4.38086649e+00, 7.42743997e+01, 9.31019717e+03]), array([4.98746739e+00, 7.96202116e+01, 4.01034641e+04]), array([5.26445908e+00, 1.02534543e+02, 6.50946588e+03]), array([5.10149280e+00, 7.53074443e+01, 6.60768841e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.03258035627116066, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 15, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 179, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 'r2_avg': array([-0.12361725,  0.02561817, -0.5434296 ]), 'r2_stdev': array([0.1833763 , 0.15340791, 2.42214205]), 'rmse_avg': array([9.27447321e+00, 1.55293338e+02, 9.44168398e+04]), 'rmse_stdev': array([1.42875256e+00, 1.96227376e+01, 1.19293467e+05]), 'mae_avg': array([5.04081269e+00, 8.40838623e+01, 1.38590192e+04]), 'mae_stdev': array([9.19663562e-01, 9.65573459e+00, 1.61757421e+04]), 'r2_avg_aggregate': -0.2138095614943308, 'r2_stdev_aggregate': 0.919642087822328, 'rmse_avg_aggregate': 31527.135862330048, 'rmse_stdev_aggregate': 39771.506078061066, 'mae_avg_aggregate': 4649.38128046749, 'mae_stdev_aggregate': 5395.439153803847}
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c200n11>
Subject: Job 275248: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250118> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250118> was submitted from host <c028n01> by user <sdehgha2> in cluster <Hazel> at Sat Jan 18 17:11:05 2025
Job was executed on host(s) <6*c200n11>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sat Jan 18 17:11:06 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sat Jan 18 17:11:06 2025
Terminated at Sat Jan 18 18:10:34 2025
Results reported at Sat Jan 18 18:10:34 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250118"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Standard_multimodal Rh_20250118.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Standard_multimodal Rh_20250118.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Standard"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   11536.37 sec.
    Max Memory :                                 7 GB
    Average Memory :                             5.99 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              26
    Max Threads :                                29
    Run time :                                   3593 sec.
    Turnaround time :                            3569 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Standard_multimodal Rh_20250118.err> for stderr output of this job.

