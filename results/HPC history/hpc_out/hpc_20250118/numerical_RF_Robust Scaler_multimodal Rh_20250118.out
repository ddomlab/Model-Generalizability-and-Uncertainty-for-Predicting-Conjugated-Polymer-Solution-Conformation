


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.0859837693282339), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.06329371012122983), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05051573678409813), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.0589521760455961), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051295209527380425), ('regressor__regressor__estimator__min_samples_split', 0.05589895198313731), ('regressor__regressor__estimator__n_estimators', 105)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.08380892586406229), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 101)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.06326419685463595), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.08104442169292034), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05067535295472202), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.0877857593932401), ('regressor__regressor__estimator__n_estimators', 93)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.06942503296283327), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07272494365808746), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.06561553257361294), ('regressor__regressor__estimator__n_estimators', 74)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 54)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])


Average scores:	 r2: [-0.618 -0.475 -0.041]±[0.139 0.105 0.022]
[array([-0.61826217, -0.47542511, -0.04057057]), array([1.11333846e+01, 1.91617289e+02, 9.38188536e+04]), array([6.88756432e+00, 1.11460305e+02, 1.41216451e+04])]
{6: {'fit_time': array([0.33429074, 0.32272673, 0.33970141, 0.31327939, 0.32152462]), 'score_time': array([0.03428245, 0.03062534, 0.03624225, 0.03151727, 0.03055525]), 'test_r2': [array([-0.5531721 , -0.51474559, -0.05821234]), array([-0.46538315, -0.52402588, -0.02611809]), array([-0.50851168, -0.48562517, -0.02783428]), array([-0.62096806, -0.37789046, -0.07501349]), array([-1.00338527, -0.4519064 , -0.06112641])], 'test_rmse': [array([8.07252891e+00, 1.75399492e+02, 1.76618502e+04]), array([1.05939627e+01, 1.68761208e+02, 3.38441230e+05]), array([1.08372833e+01, 2.25791391e+02, 2.43688480e+04]), array([1.22728350e+01, 1.95902617e+02, 1.34126708e+04]), array([1.35730838e+01, 1.94331929e+02, 2.01971043e+04])], 'test_mae': [array([   4.88704534,  105.01457532, 4142.85950795]), array([5.99915955e+00, 9.99193109e+01, 5.39952368e+04]), array([   6.32234793,  132.54874671, 4010.30726405]), array([   7.61678032,  105.93812896, 3543.13740412]), array([   9.60707756,  114.71578557, 4847.53481439])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.31426716, 0.34238148, 0.30911779, 0.30789161, 0.30722213]), 'score_time': array([0.03426194, 0.03514147, 0.03401637, 0.03384542, 0.03420305]), 'test_r2': [array([-0.57987202, -0.5474562 , -0.08353607]), array([-0.6304284 , -0.48697776, -0.04831043]), array([-0.85794574, -0.33447773, -0.02069375]), array([-0.50781337, -0.49846521, -0.02029953]), array([-0.51587427, -0.43042792, -0.02887411])], 'test_rmse': [array([  12.33759924,  225.61648358, 9124.45597413]), array([1.14192492e+01, 1.97083589e+02, 2.83155635e+04]), array([1.29501986e+01, 1.73886517e+02, 9.45648536e+04]), array([7.91076877e+00, 1.89472488e+02, 3.25547465e+05]), array([1.07695977e+01, 1.73024977e+02, 1.50047403e+04])], 'test_mae': [array([   7.49305586,  136.77309921, 2533.55968105]), array([   7.12785938,  117.46772681, 6078.61495036]), array([8.81942913e+00, 8.87935292e+01, 1.34653183e+04]), array([4.62829270e+00, 1.12454005e+02, 4.59196643e+04]), array([   6.33774065,  101.51715261, 2513.97597582])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.31524181, 0.29812551, 0.30256939, 0.22156286, 0.30172205]), 'score_time': array([0.03186917, 0.03151989, 0.03365278, 0.02886081, 0.03247476]), 'test_r2': [array([-0.65426621, -0.50015865, -0.03941064]), array([-0.79121848, -0.40756512, -0.03085513]), array([-0.3725779 , -0.43895349, -0.02151631]), array([-0.65646659, -0.34914453, -0.05134562]), array([-0.61403093, -0.63891116, -0.0387258 ])], 'test_rmse': [array([1.15955563e+01, 1.90276773e+02, 2.39115936e+04]), array([1.16452329e+01, 1.97919135e+02, 6.08040985e+04]), array([7.59253802e+00, 1.95872393e+02, 3.33425649e+05]), array([1.31270749e+01, 2.04852491e+02, 1.41461601e+04]), array([1.13961187e+01, 1.71936948e+02, 1.98550489e+04])], 'test_mae': [array([   7.33567564,  112.71066197, 4656.11400646]), array([7.72959135e+00, 1.11601171e+02, 1.05197824e+04]), array([4.10349677e+00, 1.12458789e+02, 4.83905338e+04]), array([   8.28146973,  109.36360681, 3126.26534238]), array([   7.0304466 ,  110.66010348, 3834.25223007])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.31258821, 0.30920672, 0.31726766, 0.32497883, 0.31271505]), 'score_time': array([0.03220725, 0.03163886, 0.0339241 , 0.03442717, 0.03299522]), 'test_r2': [array([-0.46585477, -0.54143413, -0.01952333]), array([-0.52778181, -0.5154987 , -0.02283944]), array([-0.77034786, -0.43314974, -0.04258327]), array([-0.54157507, -0.57466701, -0.04041767]), array([-0.77460981, -0.27977603, -0.03877067])], 'test_rmse': [array([9.54748064e+00, 2.04315345e+02, 3.25183195e+05]), array([1.05196839e+01, 1.90039471e+02, 9.46020605e+04]), array([1.35218158e+01, 1.76992158e+02, 3.19712333e+04]), array([1.16400952e+01, 1.95025336e+02, 1.31850126e+04]), array([1.04566949e+01, 1.97760210e+02, 1.19655171e+04])], 'test_mae': [array([5.44181447e+00, 1.24712132e+02, 4.50001721e+04]), array([6.22447425e+00, 1.13815040e+02, 1.41366716e+04]), array([   8.91149632,  102.62402711, 6461.42873543]), array([   6.92100703,  118.12942952, 2598.80974521]), array([   6.93350288,   99.10286197, 2311.7332466 ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([0.30530763, 0.30732298, 0.3161912 , 0.31465244, 0.30269289]), 'score_time': array([0.03219652, 0.03412938, 0.02962017, 0.03111172, 0.03073597]), 'test_r2': [array([-0.83081753, -0.40197906, -0.04254435]), array([-0.38272695, -0.70957251, -0.02895027]), array([-0.77798689, -0.42724249, -0.10245372]), array([-0.58774093, -0.30168989, -0.01730034]), array([-0.54407349, -0.67327238, -0.06994336])], 'test_rmse': [array([1.19518080e+01, 1.97153357e+02, 1.61412171e+04]), array([1.15702621e+01, 1.62726709e+02, 9.84051018e+04]), array([  11.98991723,  201.40603684, 7819.38073981]), array([1.05020916e+01, 2.25569876e+02, 3.24765542e+05]), array([9.99431189e+00, 1.68175474e+02, 2.36631470e+04])], 'test_mae': [array([   8.05045078,  106.12529034, 3260.75180748]), array([6.12199058e+00, 1.09257721e+02, 1.65062488e+04]), array([   7.94766063,  115.72979697, 2383.79934743]), array([6.41007228e+00, 1.18072167e+02, 4.23522129e+04]), array([5.97791949e+00, 1.07684485e+02, 6.05024982e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.08104442169292034, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([0.32339501, 0.32506704, 0.32196116, 0.30742502, 0.3168447 ]), 'score_time': array([0.03378725, 0.03383422, 0.03593326, 0.03410006, 0.03329206]), 'test_r2': [array([-0.75364999, -0.42949726, -0.05647485]), array([-0.61842485, -0.47567408, -0.01678102]), array([-0.46394843, -0.66195148, -0.05738968]), array([-0.72181325, -0.44697042, -0.03857327]), array([-0.52941167, -0.38442602, -0.02073016])], 'test_rmse': [array([9.95083599e+00, 2.24421714e+02, 3.28619991e+04]), array([1.14423043e+01, 1.63470880e+02, 9.41250449e+04]), array([  11.00514754,  170.15249552, 9554.33224574]), array([1.06494507e+01, 2.25265286e+02, 1.28678850e+04]), array([1.28206260e+01, 1.69022197e+02, 3.27276674e+05])], 'test_mae': [array([6.58073095e+00, 1.28522914e+02, 7.59794232e+03]), array([7.08355839e+00, 9.60508802e+01, 1.20922343e+04]), array([   6.27443777,  111.14941132, 2225.92355689]), array([   6.91774998,  130.09188726, 2480.06740863]), array([7.52891780e+00, 9.04365235e+01, 4.66403112e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([7.09300041, 7.06616163, 7.46749687, 7.08970761, 7.76924419]), 'score_time': array([0.30755854, 0.3227067 , 0.41699886, 0.30436206, 0.32235503]), 'test_r2': [array([-0.64777525, -0.68688324, -0.03924417]), array([-0.54683151, -0.44811275, -0.01419753]), array([-0.58442821, -0.37093049, -0.01571668]), array([-0.5103702 , -0.45050302, -0.08224181]), array([-0.72709336, -0.43991684, -0.02142222])], 'test_rmse': [array([1.14039321e+01, 1.69088740e+02, 2.52058388e+04]), array([9.95873939e+00, 2.01112688e+02, 9.36149195e+04]), array([1.13314961e+01, 1.83543153e+02, 3.20549776e+05]), array([1.15457825e+01, 2.36276404e+02, 2.28100499e+04]), array([1.17723561e+01, 1.64959153e+02, 5.83106196e+04])], 'test_mae': [array([   7.17846484,  111.15343946, 4898.20206823]), array([5.95402916e+00, 1.14687096e+02, 1.10765621e+04]), array([6.92085179e+00, 1.00254335e+02, 3.98740422e+04]), array([   6.71385558,  135.27436434, 6288.02237734]), array([7.65229767e+00, 9.63004896e+01, 8.44503574e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.07272494365808746, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([-0.61826217, -0.47542511, -0.04057057]), 'r2_stdev': array([0.13852477, 0.10461401, 0.02189143]), 'rmse_avg': array([1.11333846e+01, 1.91617289e+02, 9.38188536e+04]), 'rmse_stdev': array([1.40069820e+00, 2.06202425e+01, 1.20176689e+05]), 'mae_avg': array([6.88756432e+00, 1.11460305e+02, 1.41216451e+04]), 'mae_stdev': array([1.15221084e+00, 1.16807486e+01, 1.64566852e+04]), 'r2_avg_aggregate': -0.3780859489026045, 'r2_stdev_aggregate': 0.08834340045513918, 'rmse_avg_aggregate': 31340.53476838255, 'rmse_stdev_aggregate': 40066.23674794739, 'mae_avg_aggregate': 4746.664319058028, 'mae_stdev_aggregate': 5489.8393722664305}
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n11>
Subject: Job 275245: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250118> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250118> was submitted from host <c028n01> by user <sdehgha2> in cluster <Hazel> at Sat Jan 18 17:11:05 2025
Job was executed on host(s) <6*c205n11>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sat Jan 18 17:11:06 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sat Jan 18 17:11:06 2025
Terminated at Sat Jan 18 18:40:27 2025
Results reported at Sat Jan 18 18:40:27 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250118"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250118.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250118.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   19532.00 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.97 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   5365 sec.
    Turnaround time :                            5362 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250118.err> for stderr output of this job.

