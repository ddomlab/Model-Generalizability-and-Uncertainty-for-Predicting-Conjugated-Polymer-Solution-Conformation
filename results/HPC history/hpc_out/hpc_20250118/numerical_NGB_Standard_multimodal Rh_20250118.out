


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0007850707570402896), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 1789), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 3.636596077264386e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0019320209287371033), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 2.1052533206692954e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0006206933079987388), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 1e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0018870592749175004), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 1265), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 1e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0007092704420172384), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 7.559437824981842e-05), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0014686613621911538), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 1669), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 4.367218405068981e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001424572251756818), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 1394), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 1.489126855227837e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00014487498320481682), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 1e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003011977043890332), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 1333), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 0.00020061984711124283), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004069870795577246), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 1e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.05580873015117988), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 1e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012971789029730367), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 174), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 0.0009188391855429322), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01537948446580078), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 153), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 0.00039118639884156683), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01537948446580078), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 153), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 0.00039118639884156683), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0101000379575354), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 408), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 7.109077060669098e-05), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008012938403023575), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 144), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 9.779740013919946e-05), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005286426831636216), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 543), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 0.00025565317625083375), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007946608226740554), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 146), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 0.00011702446452026557), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007918443714999841), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 385), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 0.0004830631241724613), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008365588033605688), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 132), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 0.00011523270952946506), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.09007307684547504), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 93), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 8.570101975835107e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015143366629220898), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 206), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 0.0002340611834366233), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005528884706921315), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 406), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 4.16519811503619e-05), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006852477432010132), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 486), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 3.376144376699294e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0035058536237014964), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 662), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 0.0001879512554680752), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004371484582007536), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 375), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 7.809955146978886e-05), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003794737933710587), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 849), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 4.5871897255499115e-05), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004371484582007536), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 375), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 7.809955146978886e-05), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003513740530223433), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 778), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 3.1792422869012576e-05), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003794737933710587), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 849), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 4.5871897255499115e-05), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01670660511424521), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 289), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 1e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.06244712178694856), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 59), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 1e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.05889790947231506), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 56), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 1.0374514253812812e-06), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006058841238225416), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 179), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 0.00014862745018686505), ('regressor__regressor__estimator__verbose', False)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR NGB 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006446635351635525), ('regressor__regressor__estimator__minibatch_frac', 1), ('regressor__regressor__estimator__n_estimators', 657), ('regressor__regressor__estimator__natural_gradient', True), ('regressor__regressor__estimator__tol', 1e-06), ('regressor__regressor__estimator__verbose', False)])


Average scores:	 r2: [-0.55  -0.389 -1.118]±[0.254 0.708 4.601]
[array([-0.55005917, -0.38906213, -1.1181121 ]), array([1.08744143e+01, 1.83774243e+02, 9.83758443e+04]), array([6.46763220e+00, 1.02367945e+02, 1.44636402e+04])]
{6: {'fit_time': array([54.86358905, 54.58138442, 54.62402916, 55.19398761, 54.51531148]), 'score_time': array([1.92127585, 1.90732551, 2.03665328, 2.06840658, 1.89027214]), 'test_r2': [array([-0.50754525, -0.25679164, -0.03383605]), array([-0.23573162, -0.38123344, -0.02609166]), array([ -0.34531402,  -0.01566563, -15.39842292]), array([-0.46004983, -0.26030002, -0.06062175]), array([-0.89986703, -0.30880136, -0.05872095])], 'test_rmse': [array([7.95307352e+00, 1.59768120e+02, 1.74572416e+04]), array([9.72847854e+00, 1.60660826e+02, 3.38436871e+05]), array([1.02342948e+01, 1.86693042e+02, 9.73362232e+04]), array([1.16477357e+01, 1.87356973e+02, 1.33225872e+04]), array([1.32177611e+01, 1.84506522e+02, 2.01741989e+04])], 'test_mae': [array([   4.61085296,   95.62341203, 3911.79556045]), array([5.42534006e+00, 9.32962549e+01, 5.37359738e+04]), array([5.83616632e+00, 1.10569210e+02, 1.20638998e+04]), array([   6.78947662,   98.42974764, 3390.76108899]), array([   9.01281815,  108.83207553, 4754.7300163 ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__natural_gradient': True, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__learning_rate': 0.0019320209287371033, 'regressor__estimator__minibatch_frac': 1, 'regressor__estimator__col_sample': 1.0, 'regressor__estimator__verbose': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([36.43514967, 35.42129183, 36.43553281, 35.98614216, 35.24954486]), 'score_time': array([1.29357147, 1.28398538, 1.23619008, 1.29686999, 1.23226357]), 'test_r2': [array([-0.40896232, -0.44300669,  0.01989646]), array([-0.56135126, -0.16083721,  0.06475417]), array([-0.75253039, -0.21052146, -0.02050493]), array([-0.35404661, -0.13828387, -0.01999271]), array([-0.53058002, -0.25345595,  0.02798146])], 'test_rmse': [array([  11.65116616,  217.86918881, 8678.03251091]), array([1.11747289e+01, 1.74134125e+02, 2.67450336e+04]), array([1.25774527e+01, 1.65613788e+02, 9.45561065e+04]), array([7.49655450e+00, 1.65138416e+02, 3.25498511e+05]), array([1.08217105e+01, 1.61968421e+02, 1.45842680e+04])], 'test_mae': [array([   6.87639917,  130.52697589, 2146.10447833]), array([   6.82296114,  106.63643547, 5752.91152405]), array([8.25496017e+00, 7.60077679e+01, 1.33310016e+04]), array([4.27137968e+00, 9.37187076e+01, 4.58260482e+04]), array([   6.08779877,   99.3729775 , 2437.98632796])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__natural_gradient': True, 'regressor__estimator__n_estimators': 1333, 'regressor__estimator__learning_rate': 0.003011977043890332, 'regressor__estimator__minibatch_frac': 1, 'regressor__estimator__col_sample': 1.0, 'regressor__estimator__verbose': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([11.00466251, 10.99387908, 11.27389002, 11.08954144, 11.20072913]), 'score_time': array([0.39485884, 0.39883971, 0.39453816, 0.42528033, 0.44126797]), 'test_r2': [array([-0.68073299, -0.3461426 ,  0.13480684]), array([-0.66746178, -0.2015507 , -0.02975955]), array([-0.14250003, -0.21661362, -0.02149807]), array([-0.54549875, -0.00462331, -0.03269454]), array([-0.52985603, -0.38310152,  0.09625901])], 'test_rmse': [array([1.16879474e+01, 1.80244788e+02, 2.18158170e+04]), array([1.12357442e+01, 1.82862471e+02, 6.07717789e+04]), array([6.92702228e+00, 1.80105174e+02, 3.33422672e+05]), array([1.26797576e+01, 1.76772066e+02, 1.40201208e+04]), array([1.10949748e+01, 1.57949602e+02, 1.85200644e+04])], 'test_mae': [array([   6.97152997,  103.48127182, 4092.25509945]), array([7.19205536e+00, 9.70451977e+01, 1.02643369e+04]), array([3.74324268e+00, 1.00839532e+02, 4.82188560e+04]), array([   7.63338085,   92.547799  , 2969.01510671]), array([   6.58096255,  101.01867966, 3543.04347282])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__natural_gradient': True, 'regressor__estimator__n_estimators': 408, 'regressor__estimator__learning_rate': 0.0101000379575354, 'regressor__estimator__minibatch_frac': 1, 'regressor__estimator__col_sample': 1.0, 'regressor__estimator__verbose': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([10.49717879, 10.29555535, 10.52249599, 10.9270525 , 10.34418154]), 'score_time': array([0.36664677, 0.37747622, 0.39027691, 0.38971734, 0.37576103]), 'test_r2': [array([-0.35051422, -0.28454735, -0.01909532]), array([-0.39193758, -0.46590687, -0.02149591]), array([-0.71990294, -0.26246161,  0.06216623]), array([-0.5187175 , -0.51089915, -0.02364115]), array([-0.59465978, -0.16774511, -0.03507539])], 'test_rmse': [array([9.16416489e+00, 1.86514911e+02, 3.25114930e+05]), array([1.00411142e+01, 1.86904268e+02, 9.45399091e+04]), array([1.33277758e+01, 1.66118243e+02, 3.03226356e+04]), array([1.15534767e+01, 1.91035645e+02, 1.30782777e+04]), array([9.91235889e+00, 1.88906089e+02, 1.19442154e+04])], 'test_mae': [array([5.13865598e+00, 1.11523677e+02, 4.47480937e+04]), array([5.74794261e+00, 1.11775697e+02, 1.37624592e+04]), array([   8.63957653,   97.96400143, 5977.31933047]), array([   6.74146836,  113.20348391, 2596.77696172]), array([   6.18678235,   90.69731935, 2228.80514319])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__natural_gradient': True, 'regressor__estimator__n_estimators': 385, 'regressor__estimator__learning_rate': 0.007918443714999841, 'regressor__estimator__minibatch_frac': 1, 'regressor__estimator__col_sample': 1.0, 'regressor__estimator__verbose': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([2.58921218, 2.87129736, 2.76419401, 2.85131526, 2.85902929]), 'score_time': array([0.11869931, 0.11352944, 0.11366534, 0.11533594, 0.11058521]), 'test_r2': [array([-0.74362917, -0.33710215, -0.02987868]), array([-0.0958321 , -0.07731265, -0.02747707]), array([-1.50811268,  0.05754083, -0.07840465]), array([-0.78643234,  0.00865721, -0.01718624]), array([-1.07455986, -1.50505817, -0.0467831 ])], 'test_rmse': [array([1.16637483e+01, 1.92537668e+02, 1.60428692e+04]), array([1.03002316e+01, 1.29177227e+02, 9.83346310e+04]), array([  14.24050628,  163.66464498, 7733.62396401]), array([1.11398481e+01, 1.96851741e+02, 3.24747328e+05]), array([1.15846228e+01, 2.05772933e+02, 2.34056367e+04])], 'test_mae': [array([   7.53932035,   98.81249743, 3457.94329656]), array([5.23607395e+00, 8.78802822e+01, 1.63923804e+04]), array([   7.98652241,   95.05585107, 2213.67926302]), array([6.72535761e+00, 1.04404848e+02, 4.21585923e+04]), array([   6.12750491,  110.81134716, 5732.71773642])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__natural_gradient': True, 'regressor__estimator__n_estimators': 93, 'regressor__estimator__learning_rate': 0.09007307684547504, 'regressor__estimator__minibatch_frac': 1, 'regressor__estimator__col_sample': 1.0, 'regressor__estimator__verbose': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([23.73526859, 23.4732101 , 24.97747684, 23.72313809, 23.90839958]), 'score_time': array([0.78223205, 0.79704523, 0.84970832, 0.86177969, 0.84177113]), 'test_r2': [array([-0.56964421, -0.17914949, -0.03755615]), array([-0.55596108, -0.33740854, -0.01652171]), array([-0.39453802, -0.46585149,  0.06727856]), array([-0.57321219, -0.24244268, -0.0355702 ]), array([-0.54282788, -0.2679336 , -0.01970206])], 'test_rmse': [array([9.41431489e+00, 2.03825091e+02, 3.25664337e+04]), array([1.12193214e+01, 1.55624232e+02, 9.41130418e+04]), array([  10.74108517,  159.79903021, 8973.43631091]), array([1.01795325e+01, 2.08738532e+02, 1.28492676e+04]), array([1.28767353e+01, 1.61754779e+02, 3.27111812e+05])], 'test_mae': [array([6.11971381e+00, 1.13644012e+02, 7.41180020e+03]), array([6.74774894e+00, 8.82792134e+01, 1.19980501e+04]), array([   5.8611583 ,  103.18073362, 2071.12106647]), array([   6.38832521,  118.61269657, 2442.86728945]), array([7.57889909e+00, 8.42205727e+01, 4.58536964e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__natural_gradient': True, 'regressor__estimator__n_estimators': 849, 'regressor__estimator__learning_rate': 0.003794737933710587, 'regressor__estimator__minibatch_frac': 1, 'regressor__estimator__col_sample': 1.0, 'regressor__estimator__verbose': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([7.83196259, 8.25194192, 8.04418802, 8.62752914, 8.03571129]), 'score_time': array([0.30078244, 0.31304646, 0.30710053, 0.29261303, 0.28784919]), 'test_r2': [array([ -0.46830541,  -0.31141775, -23.39882539]), array([-0.43229771, -0.22512954, -0.01400718]), array([-0.41168662, -0.13412946, -0.0156404 ]), array([-0.38851551, -4.25081333, -0.05114502]), array([-0.50875639, -0.07713447, -0.01691738])], 'test_rmse': [array([1.07649950e+01, 1.49088006e+02, 1.22131254e+05]), array([9.58295637e+00, 1.84981922e+02, 9.36061341e+04]), array([1.06959687e+01, 1.66940529e+02, 3.20537740e+05]), array([1.10702400e+01, 4.49546192e+02, 2.24799531e+04]), array([1.10030996e+01, 1.42673289e+02, 5.81818920e+04])], 'test_mae': [array([6.79839681e+00, 9.47366949e+01, 1.54890705e+04]), array([5.44218362e+00, 1.03506673e+02, 1.09820132e+04]), array([6.14264086e+00, 8.87722699e+01, 3.97191399e+04]), array([   6.19706936,  174.2547507 , 6012.16537674]), array([6.91246132e+00, 8.35954270e+01, 8.53999638e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__natural_gradient': True, 'regressor__estimator__n_estimators': 289, 'regressor__estimator__learning_rate': 0.01670660511424521, 'regressor__estimator__minibatch_frac': 1, 'regressor__estimator__col_sample': 1.0, 'regressor__estimator__verbose': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 'r2_avg': array([-0.55005917, -0.38906213, -1.1181121 ]), 'r2_stdev': array([0.25366935, 0.70830761, 4.601035  ]), 'rmse_avg': array([1.08744143e+01, 1.83774243e+02, 9.83758443e+04]), 'rmse_stdev': array([1.54407418e+00, 4.94245517e+01, 1.19199422e+05]), 'mae_avg': array([6.46763220e+00, 1.02367945e+02, 1.44636402e+04]), 'mae_stdev': array([1.13639413e+00, 1.64343623e+01, 1.62519898e+04]), 'r2_avg_aggregate': -0.6857444658372024, 'r2_stdev_aggregate': 1.854337318680651, 'rmse_avg_aggregate': 32856.8309724448, 'rmse_stdev_aggregate': 39750.13004440294, 'mae_avg_aggregate': 4857.491921942797, 'mae_stdev_aggregate': 5423.186864372064}
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_NGB_mean_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_NGB_mean_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_NGB_mean_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_NGB_mean_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n14>
Subject: Job 275244: <numerical_NGB_polymer_size_feats_on_multimodal Rh_all_num_20250118> in cluster <Hazel> Done

Job <numerical_NGB_polymer_size_feats_on_multimodal Rh_all_num_20250118> was submitted from host <c028n01> by user <sdehgha2> in cluster <Hazel> at Sat Jan 18 17:11:05 2025
Job was executed on host(s) <6*c205n14>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sat Jan 18 17:11:06 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sat Jan 18 17:11:06 2025
Terminated at Sun Jan 19 02:07:43 2025
Results reported at Sun Jan 19 02:07:43 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_NGB_polymer_size_feats_on_multimodal Rh_all_num_20250118"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_NGB_Standard_multimodal Rh_20250118.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_NGB_Standard_multimodal Rh_20250118.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "NGB"                                     --transform_type "Standard"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   144042.00 sec.
    Max Memory :                                 6 GB
    Average Memory :                             5.80 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               10.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   32201 sec.
    Turnaround time :                            32198 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_NGB_Standard_multimodal Rh_20250118.err> for stderr output of this job.

