


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09340523574573739), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 87)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 463)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 139)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.0771775312288584), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 623)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.06494716306326048), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 66)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07252654598803396), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 720)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.06613910778361179), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05879634561423944), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 57)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 1933)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.06772321018415631), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])


Average scores:	 r2: [-0.619 -0.477 -0.041]±[0.14  0.107 0.022]
[array([-0.61862388, -0.47726436, -0.04057025]), array([1.11351417e+01, 1.91703123e+02, 9.38188545e+04]), array([6.88722410e+00, 1.11517161e+02, 1.41216536e+04])]
{6: {'fit_time': array([1.764359  , 1.77157021, 1.79181957, 1.81722832, 1.79795718]), 'score_time': array([0.09208536, 0.09321809, 0.09305549, 0.15531135, 0.09507585]), 'test_r2': [array([-0.55086172, -0.51323266, -0.05821579]), array([-0.47156601, -0.53049813, -0.02611805]), array([-0.50813704, -0.48588108, -0.02783467]), array([-0.62452073, -0.37459802, -0.07501154]), array([-1.00862125, -0.45738267, -0.06112718])], 'test_rmse': [array([8.06652266e+00, 1.75311875e+02, 1.76618790e+04]), array([1.06162886e+01, 1.69119177e+02, 3.38441225e+05]), array([1.08359375e+01, 2.25810838e+02, 2.43688526e+04]), array([1.22862768e+01, 1.95668424e+02, 1.34126586e+04]), array([1.35908094e+01, 1.94698072e+02, 2.01971115e+04])], 'test_mae': [array([   4.84652954,  104.94585662, 4142.84508919]), array([6.03455361e+00, 1.00369493e+02, 5.39952457e+04]), array([   6.30953871,  132.63055456, 4010.27993204]), array([   7.63642186,  105.74402339, 3543.12334044]), array([   9.62847648,  114.85088292, 4847.56274779])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 463, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([0.30624843, 0.3086431 , 0.30049133, 0.3074882 , 0.30532312]), 'score_time': array([0.03367901, 0.03469229, 0.03398323, 0.03487182, 0.0334084 ]), 'test_r2': [array([-0.5837892 , -0.54656794, -0.08353857]), array([-0.63814507, -0.48296336, -0.04830983]), array([-0.85830349, -0.33841083, -0.02069496]), array([-0.49459512, -0.48919688, -0.0202998 ]), array([-0.5237648 , -0.44785653, -0.02888202])], 'test_rmse': [array([  12.35288491,  225.55172066, 9124.46648219]), array([1.14462405e+01, 1.96817376e+02, 2.83155554e+04]), array([1.29514453e+01, 1.74142577e+02, 9.45649096e+04]), array([7.87601756e+00, 1.88885614e+02, 3.25547507e+05]), array([1.07975907e+01, 1.74075871e+02, 1.50047979e+04])], 'test_mae': [array([   7.51554946,  136.82147338, 2533.57301124]), array([   7.16573294,  117.35076737, 6078.62906862]), array([8.80001609e+00, 8.90865791e+01, 1.34653373e+04]), array([4.57912726e+00, 1.12345729e+02, 4.59196622e+04]), array([   6.37375974,  102.14484911, 2514.09672653])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([0.28488159, 0.30261707, 0.28089404, 0.30941391, 0.27347684]), 'score_time': array([0.03097653, 0.03572297, 0.03053832, 0.03325582, 0.18192005]), 'test_r2': [array([-0.65870091, -0.48612857, -0.03941031]), array([-0.79801151, -0.4220294 , -0.03085509]), array([-0.37229991, -0.43636634, -0.02151629]), array([-0.65578353, -0.3462341 , -0.05134387]), array([-0.61209931, -0.65695516, -0.03872337])], 'test_rmse': [array([1.16110883e+01, 1.89384910e+02, 2.39115899e+04]), array([1.16672938e+01, 1.98933454e+02, 6.08040972e+04]), array([7.59176909e+00, 1.95696230e+02, 3.33425645e+05]), array([1.31243681e+01, 2.04631414e+02, 1.41461483e+04]), array([1.13892974e+01, 1.72880848e+02, 1.98550257e+04])], 'test_mae': [array([   7.35090822,  112.08603668, 4656.10220481]), array([7.76259690e+00, 1.12359719e+02, 1.05198203e+04]), array([4.10673363e+00, 1.12045563e+02, 4.83905364e+04]), array([   8.272496  ,  109.21080839, 3126.25090313]), array([   6.97929115,  110.95060791, 3834.26113536])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([0.31119108, 0.30826879, 0.31014895, 0.30780959, 0.2108283 ]), 'score_time': array([0.03306413, 0.03171182, 0.03453898, 0.03337026, 0.02830482]), 'test_r2': [array([-0.45952595, -0.50788675, -0.01952405]), array([-0.52897466, -0.52067534, -0.02284014]), array([-0.76776902, -0.4437011 , -0.04258266]), array([-0.54184364, -0.57421271, -0.04041432]), array([-0.7629289 , -0.29437235, -0.03876489])], 'test_rmse': [array([9.52684776e+00, 2.02079781e+02, 3.25183310e+05]), array([1.05237899e+01, 1.90363762e+02, 9.46020929e+04]), array([1.35119637e+01, 1.77642503e+02, 3.19712239e+04]), array([1.16411092e+01, 1.94997201e+02, 1.31849913e+04]), array([1.04222238e+01, 1.98884777e+02, 1.19654838e+04])], 'test_mae': [array([5.41084836e+00, 1.23330764e+02, 4.50002567e+04]), array([6.23279300e+00, 1.14328012e+02, 1.41366935e+04]), array([   8.89038734,  103.00402978, 6461.41250511]), array([   6.89991889,  118.11259116, 2598.77864477]), array([   6.88831757,   99.6945839 , 2311.65137996])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.07252654598803396, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([0.30968475, 0.30448937, 0.30880833, 0.2983644 , 0.31333041]), 'score_time': array([0.03428364, 0.03521729, 0.03522921, 0.03345561, 0.04513717]), 'test_r2': [array([-0.83040073, -0.40413129, -0.04254547]), array([-0.38918316, -0.7400035 , -0.02895038]), array([-0.78096198, -0.4316322 , -0.10245669]), array([-0.58835496, -0.30637973, -0.01730063]), array([-0.54026629, -0.66792963, -0.06993231])], 'test_rmse': [array([1.19504474e+01, 1.97304628e+02, 1.61412257e+04]), array([1.15972424e+01, 1.64168617e+02, 9.84051073e+04]), array([  11.99994435,  201.71552741, 7819.39127556]), array([1.05041222e+01, 2.25975862e+02, 3.24765588e+05]), array([9.98198285e+00, 1.67906768e+02, 2.36630248e+04])], 'test_mae': [array([   8.05022769,  106.39908465, 3260.77250456]), array([6.17517450e+00, 1.10069704e+02, 1.65062567e+04]), array([   7.96488628,  115.84050956, 2383.81682365]), array([6.38874293e+00, 1.18259517e+02, 4.23522829e+04]), array([5.95756720e+00, 1.07400268e+02, 6.05015272e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([0.30179977, 0.30029774, 0.30043244, 0.33372784, 0.29488444]), 'score_time': array([0.03213859, 0.03168416, 0.03260112, 0.03376603, 0.03329515]), 'test_r2': [array([-0.75839062, -0.43270718, -0.05646728]), array([-0.62078789, -0.49867745, -0.01678118]), array([-0.44843529, -0.6785336 , -0.05739335]), array([-0.72686413, -0.43274111, -0.03857261]), array([-0.53244292, -0.37418313, -0.02073015])], 'test_rmse': [array([9.96427691e+00, 2.24673541e+02, 3.28618814e+04]), array([1.14506546e+01, 1.64740076e+02, 9.41250522e+04]), array([  10.9466827 ,  170.99923663, 9554.34884944]), array([1.06650591e+01, 2.24154935e+02, 1.28678809e+04]), array([1.28333247e+01, 1.68395768e+02, 3.27276673e+05])], 'test_mae': [array([6.60164564e+00, 1.28740736e+02, 7.59795442e+03]), array([7.10076750e+00, 9.70574035e+01, 1.20922532e+04]), array([   6.22481927,  111.53509536, 2225.96227618]), array([   6.94674459,  129.88693063, 2480.12396816]), array([7.55537030e+00, 8.97918501e+01, 4.66403071e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05879634561423944, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([0.21170759, 0.30627704, 0.29956532, 0.3030076 , 0.30042219]), 'score_time': array([0.02962923, 0.03239965, 0.03158069, 0.03315258, 0.03155231]), 'test_r2': [array([-0.64355235, -0.69351921, -0.03924408]), array([-0.55022971, -0.44714158, -0.01419625]), array([-0.58713225, -0.37642515, -0.01571674]), array([-0.50548794, -0.44388588, -0.08224188]), array([-0.72910376, -0.42121191, -0.0214225 ])], 'test_rmse': [array([1.13893098e+01, 1.69421000e+02, 2.52058377e+04]), array([9.96967244e+00, 2.01045239e+02, 9.36148604e+04]), array([1.13411614e+01, 1.83910603e+02, 3.20549787e+05]), array([1.15271066e+01, 2.35736846e+02, 2.28100506e+04]), array([1.17792058e+01, 1.63884217e+02, 5.83106274e+04])], 'test_mae': [array([   7.16080718,  111.37558037, 4898.20647879]), array([5.96435908e+00, 1.14421524e+02, 1.10765276e+04]), array([6.93516322e+00, 1.00283515e+02, 3.98740682e+04]), array([   6.68550125,  134.96381384, 6288.02767161]), array([7.65707011e+00, 9.56621732e+01, 8.44504628e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 'r2_avg': array([-0.61862388, -0.47726436, -0.04057025]), 'r2_stdev': array([0.13959359, 0.10703727, 0.02189113]), 'rmse_avg': array([1.11351417e+01, 1.91703123e+02, 9.38188545e+04]), 'rmse_stdev': array([1.40615457e+00, 2.03942115e+01, 1.20176704e+05]), 'mae_avg': array([6.88722410e+00, 1.11517161e+02, 1.41216536e+04]), 'mae_stdev': array([1.15876139e+00, 1.15809806e+01, 1.64566934e+04]), 'r2_avg_aggregate': -0.37881949619214667, 'r2_stdev_aggregate': 0.08950733125139189, 'rmse_avg_aggregate': 31340.564239125408, 'rmse_stdev_aggregate': 40066.16804071998, 'mae_avg_aggregate': 4746.6860111092565, 'mae_stdev_aggregate': 5489.811032738499}
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n08>
Subject: Job 275246: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250118> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250118> was submitted from host <c028n01> by user <sdehgha2> in cluster <Hazel> at Sat Jan 18 17:11:05 2025
Job was executed on host(s) <6*c205n08>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sat Jan 18 17:11:06 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sat Jan 18 17:11:06 2025
Terminated at Sat Jan 18 18:37:08 2025
Results reported at Sat Jan 18 18:37:08 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250118"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250118.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250118.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Standard"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   18980.00 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.94 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   5165 sec.
    Turnaround time :                            5163 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250118.err> for stderr output of this job.

