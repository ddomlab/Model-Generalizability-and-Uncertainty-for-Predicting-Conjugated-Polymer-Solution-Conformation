


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.958169869170235), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05020633363131399), ('regressor__regressor__estimator__min_samples_split', 0.05545864520719614), ('regressor__regressor__estimator__n_estimators', 793)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.9042398992649294), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.46806774939229456), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.060061094474056345), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.6160153210284028), ('regressor__regressor__estimator__min_samples_split', 0.05884964654698327), ('regressor__regressor__estimator__n_estimators', 63)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.32481652310943854), ('regressor__regressor__estimator__min_samples_split', 0.1647399681292089), ('regressor__regressor__estimator__n_estimators', 193)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.73502855531896), ('regressor__regressor__estimator__min_samples_split', 0.7276926705198186), ('regressor__regressor__estimator__n_estimators', 52)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.36770760696687815), ('regressor__regressor__estimator__n_estimators', 1009)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.7076428089435399), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 751)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.4751858415946175), ('regressor__regressor__estimator__min_samples_split', 0.48384771648183017), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.06461512241732607), ('regressor__regressor__estimator__min_samples_split', 0.4616508970874847), ('regressor__regressor__estimator__n_estimators', 73)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.42490109996473835), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.615737640301478), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.9128962761527102), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.5278782160165912), ('regressor__regressor__estimator__min_samples_split', 0.23045165761219455), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.8368007163791807), ('regressor__regressor__estimator__min_samples_split', 0.06349758398171729), ('regressor__regressor__estimator__n_estimators', 84)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.7509024825716901), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 88)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.6622628346785748), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05188584647444499), ('regressor__regressor__estimator__min_samples_split', 0.10628713846675267), ('regressor__regressor__estimator__n_estimators', 1855)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.7317403383746026), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.7217705735802024), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 144)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.7838131342331215), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.19595883546817988), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.15140182385529455), ('regressor__regressor__estimator__min_samples_split', 0.09987301835546435), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.7982205554756935), ('regressor__regressor__estimator__min_samples_split', 0.49928465908480146), ('regressor__regressor__estimator__n_estimators', 71)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.3585071428506367), ('regressor__regressor__estimator__min_samples_split', 0.8680379485478369), ('regressor__regressor__estimator__n_estimators', 227)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.37430470728932214), ('regressor__regressor__estimator__min_samples_split', 0.32585090087817037), ('regressor__regressor__estimator__n_estimators', 723)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.12501389275642127), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.43860273031772684), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])


Average scores:	 r2: [ 0.048  0.082 -1.385]±[0.109 0.078 2.555]
[array([ 0.04780374,  0.08191637, -1.38454211]), array([8.49151833e+00, 1.51555806e+02, 9.80659743e+04]), array([6.43818081e+00, 1.03735562e+02, 2.52317426e+04])]
{6: {'fit_time': array([2.7708962 , 2.77016759, 2.77187133, 2.77950788, 2.73441219]), 'score_time': array([0.11942601, 0.11821938, 0.12048912, 0.1192503 , 0.11960626]), 'test_r2': [array([-0.27084499,  0.20859405, -1.60034408]), array([ 0.08508224,  0.0367627 , -0.01766379]), array([ 0.12864357,  0.13647331, -0.57749278]), array([ 0.23794112,  0.1323459 , -3.5463186 ]), array([ 0.09385311,  0.11830313, -1.48393594])], 'test_rmse': [array([7.30207198e+00, 1.26782158e+02, 2.76863175e+04]), array([8.37093315e+00, 1.34166194e+02, 3.37044119e+05]), array([8.23652477e+00, 1.72143503e+02, 3.01895847e+04]), array([8.41495757e+00, 1.55455539e+02, 2.75827931e+04]), array([9.12841961e+00, 1.51437873e+02, 3.09012282e+04])], 'test_mae': [array([5.59367132e+00, 8.96235937e+01, 1.60471530e+04]), array([6.38848172e+00, 9.44075796e+01, 5.61416069e+04]), array([5.90691304e+00, 1.10149891e+02, 1.47692003e+04]), array([6.20134045e+00, 9.98476635e+01, 1.72970733e+04]), array([7.03892635e+00, 1.05111905e+02, 1.95340780e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05020633363131399, 'regressor__estimator__min_samples_split': 0.05545864520719614, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 793, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([0.21388388, 0.21235132, 0.21063542, 0.2095654 , 0.21236014]), 'score_time': array([0.02619696, 0.02687049, 0.02659678, 0.02642941, 0.02661562]), 'test_r2': [array([  0.1980486 ,   0.07873044, -13.63111538]), array([ 0.19375386,  0.20715288, -0.43762067]), array([0.03009777, 0.09118313, 0.11581165]), array([-0.17608898,  0.1785004 ,  0.00104383]), array([ 0.13262608,  0.07295001, -1.22318607])], 'test_rmse': [array([8.79009827e+00, 1.74082456e+02, 3.35292633e+04]), array([8.03009180e+00, 1.43910656e+02, 3.31590753e+04]), array([9.35672560e+00, 1.43498855e+02, 8.80145394e+04]), array([6.98658563e+00, 1.40289931e+02, 3.22124450e+05]), array([8.14650018e+00, 1.39292389e+02, 2.20564325e+04])], 'test_mae': [array([6.25827969e+00, 1.13559445e+02, 2.02725026e+04]), array([6.35556399e+00, 9.54199752e+01, 1.72082011e+04]), array([7.07558736e+00, 9.52199499e+01, 2.13167164e+04]), array([5.51290666e+00, 9.12126384e+01, 4.94833478e+04]), array([6.01620617e+00, 1.04501067e+02, 1.52058000e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([2.62109303, 2.629143  , 2.61534214, 2.68720222, 2.62067366]), 'score_time': array([0.11511183, 0.11404896, 0.11291718, 0.11225128, 0.11523104]), 'test_r2': [array([ 0.09552423,  0.09401056, -1.38365373]), array([0.17149093, 0.10900682, 0.24475734]), array([-0.08352655,  0.1222014 , -0.00489013]), array([ 0.16050085,  0.19131986, -2.96642209]), array([-0.02400581,  0.17574634, -1.42829494])], 'test_rmse': [array([8.57407655e+00, 1.47869549e+02, 3.62106671e+04]), array([7.91995169e+00, 1.57467425e+02, 5.20447938e+04]), array([6.74587442e+00, 1.52984452e+02, 3.30701102e+05]), array([9.34516026e+00, 1.58598984e+02, 2.74767447e+04]), array([9.07720720e+00, 1.21933194e+02, 3.03578646e+04])], 'test_mae': [array([6.32428947e+00, 1.02000471e+02, 2.15285921e+04]), array([6.00322330e+00, 9.94267519e+01, 1.76829369e+04]), array([5.47392166e+00, 1.11382103e+02, 5.16247181e+04]), array([6.73037348e+00, 1.00985915e+02, 1.69336063e+04]), array([6.85490498e+00, 8.36602255e+01, 1.76185276e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 751, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([0.19726491, 0.18612862, 0.19025826, 0.19776154, 0.19291639]), 'score_time': array([0.02620864, 0.02575278, 0.02572417, 0.02567363, 0.0258534 ]), 'test_r2': [array([-0.06559836, -0.00922603, -0.01445961]), array([-8.53685514e-03, -1.05270555e-03, -3.12350732e-05]), array([-0.06570923, -0.00501724, -0.16000617]), array([-6.06390337e-06, -1.93391278e-03, -1.40462997e+00]), array([-1.64759940e-05, -7.90659807e-03, -1.24329701e+00])], 'test_rmse': [array([8.14029392e+00, 1.65322788e+02, 3.24374638e+05]), array([8.54708279e+00, 1.54452343e+02, 9.35413527e+04]), array([1.04911978e+01, 1.48215969e+02, 3.37236181e+04]), array([9.37509141e+00, 1.55566546e+02, 2.00447579e+04]), array([7.84958280e+00, 1.75502001e+02, 1.75838926e+04])], 'test_mae': [array([6.60709721e+00, 1.17694729e+02, 4.91415837e+04]), array([6.61184020e+00, 1.12593258e+02, 2.44271204e+04]), array([7.42361310e+00, 1.01528696e+02, 2.29477557e+04]), array([7.06419532e+00, 1.08227253e+02, 1.77161414e+04]), array([6.28577045e+00, 1.12328097e+02, 1.56184472e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.99, 'regressor__estimator__min_samples_split': 0.9128962761527102, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([6.50413823, 6.45483232, 6.33541894, 6.39603424, 6.43449569]), 'score_time': array([0.25384498, 0.25048399, 0.25318098, 0.25245023, 0.24798369]), 'test_r2': [array([ 0.0844669 ,  0.06794694, -2.6288892 ]), array([0.19065744, 0.23412701, 0.12195842]), array([ 0.21159065,  0.21146341, -5.40139557]), array([0.09334458, 0.12052113, 0.00353072]), array([ 0.02908277,  0.10070806, -0.85711471])], 'test_rmse': [array([8.45177839e+00, 1.60751018e+02, 3.01145143e+04]), array([8.85199522e+00, 1.08916444e+02, 9.09029471e+04]), array([7.98413354e+00, 1.49704386e+02, 1.88421088e+04]), array([7.93609967e+00, 1.85412940e+02, 3.21423263e+05]), array([7.92519614e+00, 1.23290521e+02, 3.11753597e+04])], 'test_mae': [array([6.32383431e+00, 9.93647107e+01, 1.87912524e+04]), array([6.42109364e+00, 8.48934817e+01, 2.52149283e+04]), array([5.90041026e+00, 1.05840258e+02, 1.17762379e+04]), array([6.06060099e+00, 1.17010638e+02, 4.69513575e+04]), array([6.24090645e+00, 8.88148860e+01, 2.03339887e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05188584647444499, 'regressor__estimator__min_samples_split': 0.10628713846675267, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 1855, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([0.20286632, 0.20897269, 0.20013952, 0.19476151, 0.20429611]), 'score_time': array([0.02601695, 0.02607512, 0.02610254, 0.02611399, 0.02605772]), 'test_r2': [array([ 0.06222579,  0.0336195 , -0.08190797]), array([0.06739155, 0.00482698, 0.04599611]), array([ 0.1077129 ,  0.13901267, -5.05464936]), array([-0.04497588,  0.04761828, -3.39118517]), array([ 0.07083421,  0.02712566, -0.01085067])], 'test_rmse': [array([7.27674660e+00, 1.84521634e+02, 3.32551995e+04]), array([8.68594146e+00, 1.34243872e+02, 9.11730645e+04]), array([8.59182230e+00, 1.22469384e+02, 2.28626888e+04]), array([8.29635480e+00, 1.82755295e+02, 2.64593685e+04]), array([9.99294819e+00, 1.41689361e+02, 3.25688993e+05])], 'test_mae': [array([5.74794869e+00, 1.17279266e+02, 1.97145543e+04]), array([6.27800902e+00, 1.04247384e+02, 2.50244862e+04]), array([6.84631848e+00, 9.04381285e+01, 1.73501545e+04]), array([6.51414803e+00, 1.20513998e+02, 2.03989627e+04]), array([7.50186444e+00, 1.01340811e+02, 4.92148903e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.15140182385529455, 'regressor__estimator__min_samples_split': 0.09987301835546435, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([0.74980521, 0.75274158, 0.73692465, 0.7452364 , 0.74472165]), 'score_time': array([0.04543424, 0.04553986, 0.04537773, 0.0461359 , 0.04637957]), 'test_r2': [array([-2.15445470e-03, -1.09331934e-06, -2.22273962e-01]), array([-0.01902907, -0.00032461, -0.00140994]), array([-2.51125968e-05, -6.64484431e-03, -1.02197250e-02]), array([-0.00038035, -0.02214811, -0.19699148]), array([-0.01083995, -0.01892237, -0.01182193])], 'test_rmse': [array([8.89350526e+00, 1.30188438e+02, 2.73354757e+04]), array([8.08306643e+00, 1.67150915e+02, 9.30228719e+04]), array([9.00236103e+00, 1.57278228e+02, 3.19681209e+05]), array([9.39645950e+00, 1.98343489e+02, 2.39888601e+04]), array([9.00630564e+00, 1.38764463e+02, 5.80359436e+04])], 'test_mae': [array([6.80331561e+00, 9.94600560e+01, 1.84188590e+04]), array([6.12945357e+00, 1.09568365e+02, 2.36304955e+04]), array([6.86886601e+00, 1.08192380e+02, 4.49207180e+04]), array([7.13408331e+00, 1.25765489e+02, 1.80121970e+04]), array([6.83836972e+00, 1.09133601e+02, 2.08428015e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.3585071428506367, 'regressor__estimator__min_samples_split': 0.8680379485478369, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 227, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 'r2_avg': array([ 0.04780374,  0.08191637, -1.38454211]), 'r2_stdev': array([0.10885777, 0.07769172, 2.55471362]), 'rmse_avg': array([8.49151833e+00, 1.51555806e+02, 9.80659743e+04]), 'rmse_stdev': array([7.85915543e-01, 2.01985631e+01, 1.16074142e+05]), 'mae_avg': array([6.43818081e+00, 1.03735562e+02, 2.52317426e+04]), 'mae_stdev': array([5.09310562e-01, 1.01622768e+01, 1.26215265e+04]), 'r2_avg_aggregate': -0.41827399748451916, 'r2_stdev_aggregate': 0.9137543713747287, 'rmse_avg_aggregate': 32742.007209957068, 'rmse_stdev_aggregate': 38698.375611384494, 'mae_avg_aggregate': 8447.305462766091, 'mae_stdev_aggregate': 4210.732680036205}
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c029n04>
Subject: Job 269013: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250117> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250117> was submitted from host <c039n02> by user <sdehgha2> in cluster <Hazel> at Fri Jan 17 14:31:43 2025
Job was executed on host(s) <6*c029n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Fri Jan 17 14:31:44 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Fri Jan 17 14:31:44 2025
Terminated at Fri Jan 17 15:57:49 2025
Results reported at Fri Jan 17 15:57:49 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250117"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250117.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250117.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Standard"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   19282.34 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.86 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   5190 sec.
    Turnaround time :                            5166 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250117.err> for stderr output of this job.

