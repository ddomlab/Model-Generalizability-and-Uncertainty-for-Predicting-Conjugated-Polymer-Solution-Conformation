


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003072549894481003), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 329), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004329427234739566), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 208), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.024230858507525717), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.023656906685940757), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 63), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.010276280411886886), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0043235497820160946), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 293), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006147667752194223), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 170), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005923231611984275), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 157), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009929277832608987), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 79), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008509403963233474), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 83), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008945672425396475), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0143838566292133), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 61), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015509593641086127), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 60), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.05882151029521719), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005533514463906874), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 124), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0031858024467369397), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 63), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.034351881791256964), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 54), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 376), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.026909256960291082), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01160722704867649), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 61), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.017849760708648008), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 65), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0029155141106465858), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 492), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011162527928680508), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 55), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0037950973444754506), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 396), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013239688367104346), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00804262803237207), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 266), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.014557630970712046), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006992512333465884), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 291), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015937441879902998), ('regressor__regressor__estimator__max_depth', 8492), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008020175194571535), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 89), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008573660010441686), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 230), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011658852099943062), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 76), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012119346660522097), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 141), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 942), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.022592463688014035), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 55), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [0.169 0.182 0.198]±[0.108 0.14  0.229]
[array([0.16892637, 0.18225458, 0.19752166]), array([7.93713023e+00, 1.42108757e+02, 8.89405029e+04]), array([5.40885914e+00, 9.10011390e+01, 1.68932144e+04])]
{6: {'fit_time': array([0.65328169, 0.69154286, 0.66969395, 0.64198089, 0.64738107]), 'score_time': array([0.02629447, 0.02603579, 0.02680111, 0.02692151, 0.02670169]), 'test_r2': [array([0.11616312, 0.2096376 , 0.03426958]), array([ 0.23803462,  0.12093258, -0.00753668]), array([0.19998033, 0.44277192, 0.39431333]), array([0.31996364, 0.08590904, 0.02550433]), array([0.13465117, 0.14867838, 0.43459991])], 'test_rmse': [array([6.08955952e+00, 1.26698542e+02, 1.68724342e+04]), array([7.63924546e+00, 1.28170343e+02, 3.35362907e+05]), array([7.89216980e+00, 1.38283146e+02, 1.87067119e+04]), array([7.94920567e+00, 1.59561311e+02, 1.27702166e+04]), array([8.92055550e+00, 1.48806425e+02, 1.47429190e+04])], 'test_mae': [array([4.30185612e+00, 8.89558965e+01, 8.99977386e+03]), array([5.47268545e+00, 8.65628801e+01, 5.34900824e+04]), array([5.18485762e+00, 9.00237303e+01, 1.00296996e+04]), array([5.48726215e+00, 9.49887045e+01, 8.70521042e+03]), array([6.33826051e+00, 9.94654640e+01, 8.92812369e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.004329427234739566, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 208, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.53169274, 0.50614691, 0.51679564, 0.54202509, 0.50653362]), 'score_time': array([0.02939463, 0.02857184, 0.02792335, 0.02747965, 0.02824974]), 'test_r2': [array([0.30232012, 0.29891444, 0.02614918]), array([0.20035942, 0.19670674, 0.28245446]), array([0.12203825, 0.20748286, 0.39048373]), array([-0.0885679 ,  0.06356985, -0.00926773]), array([0.26586437, 0.23234978, 0.52008293])], 'test_rmse': [array([8.19875303e+00, 1.51861314e+02, 8.65030680e+03]), array([7.99712895e+00, 1.44855600e+02, 2.34263696e+04]), array([8.90220747e+00, 1.34003017e+02, 7.30759850e+04]), array([6.72159990e+00, 1.49782308e+02, 3.23782721e+05]), array([7.49473087e+00, 1.26752783e+02, 1.02477957e+04])], 'test_mae': [array([5.52376563e+00, 9.64911967e+01, 7.04594548e+03]), array([5.54407940e+00, 9.38387179e+01, 1.11728687e+04]), array([6.11620852e+00, 8.66764009e+01, 1.55686078e+04]), array([4.89335016e+00, 9.80474001e+01, 4.58555232e+04]), array([5.17350980e+00, 8.48928254e+01, 7.57554281e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.005923231611984275, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 157, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.19744253, 0.18588209, 0.18517351, 0.19416332, 0.18420506]), 'score_time': array([0.02470398, 0.02466106, 0.02507758, 0.02492762, 0.02566075]), 'test_r2': [array([0.17326337, 0.04554401, 0.34498401]), array([0.12343721, 0.23916769, 0.20676103]), array([ 0.16714228,  0.14724323, -0.01794234]), array([0.14749319, 0.3759552 , 0.18444458]), array([0.21249107, 0.12716304, 0.5506796 ])], 'test_rmse': [array([8.19733113e+00, 1.51773215e+02, 1.89819530e+04]), array([8.14639406e+00, 1.45511731e+02, 5.33379176e+04]), array([5.91430725e+00, 1.50786492e+02, 3.32841860e+05]), array([9.41728148e+00, 1.39322063e+02, 1.24592687e+04]), array([7.96028803e+00, 1.25475251e+02, 1.30586587e+04])], 'test_mae': [array([5.88950346e+00, 1.01174876e+02, 9.24938645e+03]), array([5.35907435e+00, 8.86907676e+01, 1.41803978e+04]), array([4.69922012e+00, 1.04618556e+02, 4.98583861e+04]), array([6.16630384e+00, 9.24148244e+01, 8.06199646e+03]), array([5.59090800e+00, 8.07671650e+01, 9.13506575e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.015509593641086127, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 60, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.23050737, 0.21169758, 0.20887017, 0.20546174, 0.21070504]), 'score_time': array([0.0240593 , 0.02523541, 0.02571702, 0.02673674, 0.02573586]), 'test_r2': [array([ 0.13202372,  0.29846135, -0.00565031]), array([0.18705683, 0.00796402, 0.00927201]), array([-0.0229847 ,  0.44044687, -0.11437245]), array([0.19034591, 0.07237093, 0.31542463]), array([ 0.1044855 ,  0.11015274, -0.00146206])], 'test_rmse': [array([7.34678351e+00, 1.37836521e+02, 3.22963174e+05]), array([7.67365230e+00, 1.53755174e+02, 9.31052305e+04]), array([1.02787494e+01, 1.10593323e+02, 3.30536328e+04]), array([8.43575489e+00, 1.49686918e+02, 1.06951609e+04]), array([7.42812681e+00, 1.64903420e+02, 1.17486748e+04])], 'test_mae': [array([4.99554585e+00, 8.68078636e+01, 4.41381898e+04]), array([5.05935784e+00, 9.85255388e+01, 1.59963468e+04]), array([6.57729824e+00, 7.59136203e+01, 1.07572070e+04]), array([5.59754356e+00, 9.14913563e+01, 6.16025699e+03]), array([5.16673970e+00, 9.27876626e+01, 6.42451066e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.026909256960291082, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([0.95051646, 0.96475196, 0.96840906, 1.06188869, 0.92374134]), 'score_time': array([0.03050947, 0.04208112, 0.03230929, 0.031183  , 0.03022528]), 'test_r2': [array([0.09041814, 0.26171085, 0.62725593]), array([0.42992913, 0.37294342, 0.54096385]), array([ 0.21808604,  0.12078179, -0.02105368]), array([ 0.01873753,  0.28906539, -0.00419359]), array([0.21222718, 0.03829079, 0.55451587])], 'test_rmse': [array([8.42426404e+00, 1.43069368e+02, 9.65149038e+03]), array([7.42915476e+00, 9.85526806e+01, 6.57270083e+04]), array([   7.95117648,  158.0781841 , 7525.17256204]), array([8.25616904e+00, 1.66702520e+02, 3.22666643e+05]), array([7.13870458e+00, 1.27497370e+02, 1.52689167e+04])], 'test_mae': [array([   5.75304919,   83.97487238, 5584.32044903]), array([5.02047778e+00, 6.57759756e+01, 1.33309116e+04]), array([   5.2013486 ,   97.58664027, 5168.93225236]), array([5.19505349e+00, 1.02536866e+02, 4.25624516e+04]), array([5.02824390e+00, 8.59698291e+01, 7.20526216e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0037950973444754506, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 396, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([0.65277219, 0.72839499, 0.64905643, 0.6399436 , 0.71667981]), 'score_time': array([0.02886701, 0.03092408, 0.02875781, 0.02931976, 0.02966523]), 'test_r2': [array([-0.12146961,  0.21166837, -0.13372152]), array([ 0.2183285 , -0.29346344,  0.0037238 ]), array([0.27077981, 0.1484816 , 0.54305335]), array([ 0.06562351,  0.35589448, -0.03755844]), array([ 0.17019319,  0.00039093, -0.00516836])], 'test_rmse': [array([7.95759558e+00, 1.66658584e+02, 3.40421980e+04]), array([7.95205479e+00, 1.53046095e+02, 9.31711290e+04]), array([   7.76716128,  121.79407773, 6280.8085465 ]), array([7.84503948e+00, 1.50294454e+02, 1.28615966e+04]), array([9.44355532e+00, 1.43622989e+02, 3.24772303e+05])], 'test_mae': [array([5.40377717e+00, 9.52788355e+01, 8.14745699e+03]), array([5.09178891e+00, 9.54329911e+01, 1.38130781e+04]), array([   4.99114058,   81.30841784, 3765.25422772]), array([   5.14633747,   91.32922753, 4583.05944369]), array([6.08884975e+00, 8.80212261e+01, 4.60978864e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.00804262803237207, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 266, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.27612686, 0.27613807, 0.28997993, 0.28668618, 0.28453779]), 'score_time': array([0.02764082, 0.02717853, 0.02672052, 0.02684641, 0.02718449]), 'test_r2': [array([0.18151282, 0.1986675 , 0.30727304]), array([0.28215531, 0.14313799, 0.38332255]), array([ 0.23591635,  0.21077247, -0.01140941]), array([0.20945191, 0.16545759, 0.35397087]), array([0.2049715 , 0.28368839, 0.24909199])], 'test_rmse': [array([8.03732585e+00, 1.16540951e+02, 2.05789590e+04]), array([6.78419167e+00, 1.54701216e+02, 7.29983139e+04]), array([7.86903409e+00, 1.39261665e+02, 3.19869389e+05]), array([8.35306413e+00, 1.79219491e+02, 1.76234177e+04]), array([7.98724178e+00, 1.16347943e+02, 4.99963585e+04])], 'test_mae': [array([5.69910533e+00, 8.23239533e+01, 9.89891824e+03]), array([4.72680984e+00, 9.32041661e+01, 1.46668766e+04]), array([5.49697907e+00, 9.67818512e+01, 4.17972764e+04]), array([5.74283460e+00, 1.08486769e+02, 1.04548855e+04]), array([5.58694393e+00, 8.38927955e+01, 1.28528132e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.011658852099943062, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 76, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([0.16892637, 0.18225458, 0.19752166]), 'r2_stdev': array([0.10772089, 0.14027299, 0.22887243]), 'rmse_avg': array([7.93713023e+00, 1.42108757e+02, 8.89405029e+04]), 'rmse_stdev': array([8.45379037e-01, 1.73078798e+01, 1.20874622e+05]), 'mae_avg': array([5.40885914e+00, 9.10011390e+01, 1.68932144e+04]), 'mae_stdev': array([4.81330487e-01, 8.38478716e+00, 1.50788004e+04]), 'r2_avg_aggregate': 0.1829008682947398, 'r2_stdev_aggregate': 0.15895543839463833, 'rmse_avg_aggregate': 29696.84960202838, 'rmse_stdev_aggregate': 40297.591753223525, 'mae_avg_aggregate': 5663.208141949587, 'mae_stdev_aggregate': 5029.2221817590225}
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c036n04>
Subject: Job 269014: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250117> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250117> was submitted from host <c039n02> by user <sdehgha2> in cluster <Hazel> at Fri Jan 17 14:31:43 2025
Job was executed on host(s) <6*c036n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Fri Jan 17 14:31:44 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Fri Jan 17 14:31:44 2025
Terminated at Fri Jan 17 15:26:25 2025
Results reported at Fri Jan 17 15:26:25 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250117"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250117.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250117.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   10176.16 sec.
    Max Memory :                                 11 GB
    Average Memory :                             10.08 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               5.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   3300 sec.
    Turnaround time :                            3282 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250117.err> for stderr output of this job.

