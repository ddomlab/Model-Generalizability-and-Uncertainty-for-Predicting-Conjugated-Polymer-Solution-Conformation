


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.8170479293694569), ('regressor__regressor__estimator__min_samples_split', 0.4421557438500059), ('regressor__regressor__estimator__n_estimators', 119)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05461423445571415), ('regressor__regressor__estimator__min_samples_split', 0.05042520014947645), ('regressor__regressor__estimator__n_estimators', 98)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.368945596599266), ('regressor__regressor__estimator__min_samples_split', 0.5863277407390363), ('regressor__regressor__estimator__n_estimators', 110)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.8930831536258996), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 67)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.6566793007695277), ('regressor__regressor__estimator__min_samples_split', 0.7739369002606901), ('regressor__regressor__estimator__n_estimators', 141)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.36868031878979096), ('regressor__regressor__estimator__min_samples_split', 0.6398691802918183), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.989894342152335), ('regressor__regressor__estimator__min_samples_split', 0.3998140477037574), ('regressor__regressor__estimator__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.49741514735673287), ('regressor__regressor__estimator__min_samples_split', 0.8121712698189169), ('regressor__regressor__estimator__n_estimators', 106)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05277188666131014), ('regressor__regressor__estimator__min_samples_split', 0.05772577180269945), ('regressor__regressor__estimator__n_estimators', 167)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.3162358788188987), ('regressor__regressor__estimator__n_estimators', 108)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.4504664999560165), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.5482838022079555), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 189)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.6681022336242326), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 1860)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.5823030842295797), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.9808551019738114), ('regressor__regressor__estimator__n_estimators', 62)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.7653924065845568), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.479795873520464), ('regressor__regressor__estimator__min_samples_split', 0.5696351454931843), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.638955850606879), ('regressor__regressor__estimator__min_samples_split', 0.7971491469090469), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.8065970758239365), ('regressor__regressor__estimator__min_samples_split', 0.982763628209769), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.6166606982423406), ('regressor__regressor__estimator__min_samples_split', 0.164241816717995), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.8368007163791807), ('regressor__regressor__estimator__min_samples_split', 0.06349758398171729), ('regressor__regressor__estimator__n_estimators', 84)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 1785)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.5449493955241506), ('regressor__regressor__estimator__min_samples_split', 0.4688246439037563), ('regressor__regressor__estimator__n_estimators', 52)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.6106336311711466), ('regressor__regressor__estimator__n_estimators', 76)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.7014824889943205), ('regressor__regressor__estimator__min_samples_split', 0.3546422067311097), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.7350942074412982), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.15738724450481636), ('regressor__regressor__estimator__min_samples_split', 0.6305070693594451), ('regressor__regressor__estimator__n_estimators', 352)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.15704286408496815), ('regressor__regressor__estimator__min_samples_split', 0.8537907717826734), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.929921351599211), ('regressor__regressor__estimator__min_samples_split', 0.6679065391699884), ('regressor__regressor__estimator__n_estimators', 73)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.4119961402089628), ('regressor__regressor__estimator__min_samples_split', 0.7468264417225297), ('regressor__regressor__estimator__n_estimators', 352)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.395073740839247), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.6083594042067053), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])


Average scores:	 r2: [ 0.043  0.075 -1.167]±[0.108 0.077 2.151]
[array([ 0.04347296,  0.07457532, -1.16717859]), array([8.51267947e+00, 1.52141633e+02, 9.75151318e+04]), array([6.45478046e+00, 1.04143000e+02, 2.50376421e+04])]
{6: {'fit_time': array([0.32815504, 0.32515931, 0.31926179, 0.3201344 , 0.32109952]), 'score_time': array([0.02928376, 0.02888346, 0.02886009, 0.02898908, 0.02880692]), 'test_r2': [array([-0.27865346,  0.17139954, -1.13773207]), array([ 0.07525405,  0.0419493 , -0.01821526]), array([ 0.12849462,  0.1252152 , -0.49633164]), array([ 0.23259331,  0.11589513, -3.10943459]), array([ 0.08422992,  0.11832836, -1.68028728])], 'test_rmse': [array([7.32447074e+00, 1.29727207e+02, 2.51030460e+04]), array([8.41577397e+00, 1.33804494e+02, 3.37135429e+05]), array([8.23722868e+00, 1.73262018e+02, 2.94027112e+04]), array([8.44443228e+00, 1.56922342e+02, 2.62240246e+04]), array([9.17676307e+00, 1.51435706e+02, 3.20993485e+04])], 'test_mae': [array([5.63097265e+00, 9.19801008e+01, 1.60233881e+04]), array([6.45281501e+00, 9.29595310e+01, 5.60744371e+04]), array([5.95009730e+00, 1.10386510e+02, 1.47974818e+04]), array([6.21049294e+00, 1.01217867e+02, 1.69541708e+04]), array([7.11086905e+00, 1.05641542e+02, 2.02356376e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05461423445571415, 'regressor__estimator__min_samples_split': 0.05042520014947645, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 98, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.53289223, 0.5289824 , 0.51611519, 0.52680993, 0.53403974]), 'score_time': array([0.03872895, 0.03750491, 0.03641772, 0.03816271, 0.03813767]), 'test_r2': [array([  0.18681211,   0.09016599, -11.5488737 ]), array([ 0.19131181,  0.20823138, -0.54226745]), array([0.04472816, 0.09729065, 0.11349467]), array([-0.18573966,  0.1623307 , -0.00078548]), array([ 0.13966668,  0.05826201, -1.47052448])], 'test_rmse': [array([8.85146500e+00, 1.72998655e+02, 3.10518634e+04]), array([8.04224383e+00, 1.43812743e+02, 3.43447297e+04]), array([9.28588719e+00, 1.43015864e+02, 8.81297833e+04]), array([7.01519212e+00, 1.41663877e+02, 3.22419256e+05]), array([8.11336964e+00, 1.40391514e+02, 2.32510164e+04])], 'test_mae': [array([6.30227353e+00, 1.12515449e+02, 1.94372845e+04]), array([6.35895595e+00, 9.51076041e+01, 1.84700038e+04]), array([7.03332594e+00, 9.61121101e+01, 2.10306683e+04]), array([5.49936681e+00, 9.17380493e+01, 4.95270580e+04]), array([5.98384908e+00, 1.05006562e+02, 1.64477007e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05277188666131014, 'regressor__estimator__min_samples_split': 0.05772577180269945, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 167, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.58980489, 0.61270547, 0.58572292, 0.58412814, 0.5895071 ]), 'score_time': array([0.03929996, 0.0427413 , 0.04005003, 0.0390079 , 0.03791547]), 'test_r2': [array([ 0.10366861,  0.07695624, -1.50924388]), array([0.17317492, 0.11146887, 0.22735421]), array([-0.07085247,  0.12582813, -0.00445676]), array([ 0.15900276,  0.18577332, -2.27756059]), array([-0.02438284,  0.16947841, -1.03489228])], 'test_rmse': [array([8.53538649e+00, 1.49254807e+02, 3.71523577e+04]), array([7.91189871e+00, 1.57249712e+02, 5.26410153e+04]), array([6.70630492e+00, 1.52668087e+02, 3.30629785e+05]), array([9.35349477e+00, 1.59141951e+02, 2.49770520e+04]), array([9.07887810e+00, 1.22395928e+02, 2.77901707e+04])], 'test_mae': [array([6.31428648e+00, 1.03434611e+02, 2.18206771e+04]), array([5.99171480e+00, 9.95778342e+01, 1.82835977e+04]), array([5.43817990e+00, 1.11085394e+02, 5.15173212e+04]), array([6.75339690e+00, 1.02007111e+02, 1.57855787e+04]), array([6.87753647e+00, 8.40928721e+01, 1.68616867e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 189, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.17105103, 0.17499876, 0.17596316, 0.17448545, 0.17029595]), 'score_time': array([0.02463174, 0.02404809, 0.02375555, 0.02510428, 0.02426505]), 'test_r2': [array([-0.05710815, -0.01063936, -0.01411629]), array([-0.01333211, -0.00058305, -0.00014768]), array([-0.06194809, -0.00428718, -0.08621123]), array([-4.51221747e-04, -1.83270987e-03, -1.34201046e+00]), array([-1.53214054e-04, -6.27735077e-03, -1.22219272e+00])], 'test_rmse': [array([8.10779998e+00, 1.65438508e+02, 3.24319745e+05]), array([8.56737795e+00, 1.54416107e+02, 9.35467987e+04]), array([1.04726684e+01, 1.48162125e+02, 3.26333124e+04]), array([9.37717787e+00, 1.55558689e+02, 1.97820413e+04]), array([7.85011944e+00, 1.75360097e+02, 1.75009850e+04])], 'test_mae': [array([6.55964373e+00, 1.17444529e+02, 4.94829612e+04]), array([6.65796679e+00, 1.12898284e+02, 2.49679864e+04]), array([7.42181180e+00, 1.01264252e+02, 1.98544629e+04]), array([7.02011225e+00, 1.08279034e+02, 1.73872070e+04]), array([6.27868980e+00, 1.11491395e+02, 1.55122461e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.99, 'regressor__estimator__min_samples_split': 0.7653924065845568, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([5.28109455, 5.29629683, 5.33894324, 5.28471565, 5.27517462]), 'score_time': array([0.21763492, 0.22025895, 0.2191093 , 0.21929836, 0.21979594]), 'test_r2': [array([ 0.08139398,  0.06594206, -2.52166129]), array([0.19816124, 0.24424077, 0.12768202]), array([ 0.21597629,  0.21784441, -5.33842495]), array([0.09079817, 0.12389523, 0.00406092]), array([ 0.03714689,  0.10655156, -0.83937246])], 'test_rmse': [array([8.46595040e+00, 1.60923816e+02, 2.96662601e+04]), array([8.81086416e+00, 1.08194905e+02, 9.06061830e+04]), array([7.96189613e+00, 1.49097437e+02, 1.87492048e+04]), array([7.94723644e+00, 1.85056932e+02, 3.21337741e+05]), array([7.89221547e+00, 1.22889305e+02, 3.10260828e+04])], 'test_mae': [array([6.33646431e+00, 9.93973687e+01, 1.84067515e+04]), array([6.37936550e+00, 8.44905765e+01, 2.53816955e+04]), array([5.88391190e+00, 1.05217954e+02, 1.15873862e+04]), array([6.06014290e+00, 1.16782916e+02, 4.67818699e+04]), array([6.20363929e+00, 8.87474975e+01, 2.00029124e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 1785, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([1.02916765, 1.01788473, 0.99079943, 0.99975824, 1.01639581]), 'score_time': array([0.05301547, 0.05343056, 0.05313063, 0.05322576, 0.05296636]), 'test_r2': [array([ 0.02984451,  0.01213211, -0.02847675]), array([ 0.02689804, -0.00619285,  0.02600629]), array([ 0.03513867,  0.05205419, -3.10205784]), array([-0.00724977,  0.00595174, -1.60034399]), array([ 0.02169709,  0.00233816, -0.01375773])], 'test_rmse': [array([7.40131320e+00, 1.86561767e+02, 3.24236302e+04]), array([8.87250797e+00, 1.34985087e+02, 9.21233148e+04]), array([8.93440078e+00, 1.28505261e+02, 1.88184434e+04]), array([8.14521913e+00, 1.86710258e+02, 2.03612296e+04]), array([1.02537731e+01, 1.43483033e+02, 3.26156974e+05])], 'test_mae': [array([5.76252772e+00, 1.17247953e+02, 1.92174397e+04]), array([6.55130429e+00, 1.04123825e+02, 2.50717762e+04]), array([7.09957351e+00, 9.51586965e+01, 1.68241059e+04]), array([6.34074734e+00, 1.22410234e+02, 1.76352757e+04]), array([7.64588978e+00, 1.04953844e+02, 4.96340256e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.15738724450481636, 'regressor__estimator__min_samples_split': 0.6305070693594451, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 352, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.22862792, 0.23293543, 0.23016977, 0.23582864, 0.23392653]), 'score_time': array([0.02679396, 0.02671695, 0.02625442, 0.02687597, 0.02689242]), 'test_r2': [array([-0.00128377, -0.00025674, -0.15481532]), array([-0.02070605, -0.00017647, -0.00105171]), array([-0.00011275, -0.00811969, -0.00985447]), array([-0.00059705, -0.02309276, -0.23059602]), array([-0.01186774, -0.01792898, -0.01415234])], 'test_rmse': [array([8.88964104e+00, 1.30205078e+02, 2.65704325e+04]), array([8.08971473e+00, 1.67138538e+02, 9.30062318e+04]), array([9.00275549e+00, 1.57393400e+02, 3.19623412e+05]), array([9.39747718e+00, 1.98435120e+02, 2.43232630e+04]), array([9.01088315e+00, 1.38696803e+02, 5.81027387e+04])], 'test_mae': [array([6.81899032e+00, 9.90886473e+01, 1.66281841e+04]), array([6.14420047e+00, 1.09813179e+02, 2.31886200e+04]), array([6.86420826e+00, 1.08769702e+02, 4.53853476e+04]), array([7.14511547e+00, 1.25604122e+02, 1.86956739e+04]), array([6.83487775e+00, 1.08957832e+02, 2.14048544e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.929921351599211, 'regressor__estimator__min_samples_split': 0.6679065391699884, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 73, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.04347296,  0.07457532, -1.16717859]), 'r2_stdev': array([0.10788778, 0.07744254, 2.15094537]), 'rmse_avg': array([8.51267947e+00, 1.52141633e+02, 9.75151318e+04]), 'rmse_stdev': array([8.02242161e-01, 2.01301533e+01, 1.16477641e+05]), 'mae_avg': array([6.45478046e+00, 1.04143000e+02, 2.50376421e+04]), 'mae_stdev': array([5.26905247e-01, 9.94139070e+00, 1.27738831e+04]), 'r2_avg_aggregate': -0.34971010355248655, 'r2_stdev_aggregate': 0.7787585602713202, 'rmse_avg_aggregate': 32558.595367883307, 'rmse_stdev_aggregate': 38832.857687024974, 'mae_avg_aggregate': 8382.746631458498, 'mae_stdev_aggregate': 4261.450464581808}
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c035n01>
Subject: Job 269012: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250117> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250117> was submitted from host <c039n02> by user <sdehgha2> in cluster <Hazel> at Fri Jan 17 14:31:43 2025
Job was executed on host(s) <6*c035n01>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Fri Jan 17 14:31:44 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Fri Jan 17 14:31:44 2025
Terminated at Fri Jan 17 15:44:08 2025
Results reported at Fri Jan 17 15:44:08 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250117"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250117.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250117.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   15720.46 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.66 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   4355 sec.
    Turnaround time :                            4345 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250117.err> for stderr output of this job.

