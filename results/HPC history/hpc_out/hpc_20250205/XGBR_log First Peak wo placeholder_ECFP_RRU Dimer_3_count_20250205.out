Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x1462418d5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02138486047055911), ('regressor__regressor__max_depth', 4313), ('regressor__regressor__n_estimators', 90), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02540237904121041), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 80), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007425437579135176), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 419), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x1462418d5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03145757625330027), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0012201204531446398), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1470), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006328945807616966), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 269), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.014381772722895403), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 165), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013341398022684277), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 198), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x1462418d5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001802316814166316), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 958), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005729797167428239), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 316), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04166221943724862), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0067046934341849045), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 333), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x1462418d5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011488312268525423), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 141), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.049851325352275634), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008862446164972263), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 198), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04444759520623624), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 59), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.04884147746090137), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x1462418d5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.022625709350386925), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 130), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011214150812560332), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 227), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.008331859625413544), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 212), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.1), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x1462418d5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.035310330855018696), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 70), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.037220352237580044), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 72), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.029912602473410557), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 78), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021349716664613497), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 98), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x1462418d5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01728650839197574), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 209), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0130592940118775), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 180), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0013292753427819365), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 2000), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.012453675491107014), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 138), ('regressor__regressor__n_jobs', -2)])


Average scores:	 r: 0.77±0.07	 r2: 0.57±0.12
RRU Dimer_scaler
Filename: (ECFP3.count.512-PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_transformerOFF
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log First Peak wo placeholder/RRU Dimer_scaler/(ECFP3.count.512-PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_transformerOFF_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log First Peak wo placeholder/RRU Dimer_scaler/(ECFP3.count.512-PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_transformerOFF_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log First Peak wo placeholder/RRU Dimer_scaler/(ECFP3.count.512-PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_transformerOFF_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c036n02>
Subject: Job 500587: <XGBR_log First Peak wo placeholder_ECFP_RRU Dimer_20250205> in cluster <Hazel> Done

Job <XGBR_log First Peak wo placeholder_ECFP_RRU Dimer_20250205> was submitted from host <c024n02> by user <sdehgha2> in cluster <Hazel> at Wed Feb  5 10:03:51 2025
Job was executed on host(s) <8*c036n02>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Feb  5 10:03:53 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Feb  5 10:03:53 2025
Terminated at Wed Feb  5 11:53:19 2025
Results reported at Wed Feb  5 11:53:19 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 8
#BSUB -W 72:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "XGBR_log First Peak wo placeholder_ECFP_RRU Dimer_20250205"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250205/XGBR_log First Peak wo placeholder_ECFP_RRU Dimer_3_count_20250205.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250205/XGBR_log First Peak wo placeholder_ECFP_RRU Dimer_3_count_20250205.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_structure_numerical.py --target_features "log First Peak wo placeholder"                                       --representation "ECFP"                                       --regressor_type "XGBR"                                       --radius "3"                                       --vector "count"                                       --oligomer_representation "RRU Dimer"                                       --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                       --special_impute 'Mw (g/mol)'                                       --imputer mean 




------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   25662.45 sec.
    Max Memory :                                 10 GB
    Average Memory :                             9.41 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               6.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   6572 sec.
    Turnaround time :                            6568 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250205/XGBR_log First Peak wo placeholder_ECFP_RRU Dimer_3_count_20250205.err> for stderr output of this job.

