Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x14b3267e5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.02317819297337697), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021723169447991613), ('regressor__regressor__max_depth', 1230), ('regressor__regressor__n_estimators', 65), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.031912012550521784), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03295074783139553), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 57), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1336), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x14b3267e5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027895431017934076), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 63), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.011368721091284631), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 125), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.016787386572013806), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 88), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.027619683397303797), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1323), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x14b3267e5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.005568362296560925), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 298), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01058508053602573), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 137), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006053210916156383), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 257), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.03007057425358915), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025065759982192064), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 50), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x14b3267e5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002752286834045765), ('regressor__regressor__max_depth', 14), ('regressor__regressor__n_estimators', 578), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.010927183633831458), ('regressor__regressor__max_depth', 11), ('regressor__regressor__n_estimators', 136), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002556561637833152), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 570), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.013016030624482986), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 111), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0014655454827041464), ('regressor__regressor__max_depth', 12), ('regressor__regressor__n_estimators', 949), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x14b3267e5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006993181166596104), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 172), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.025995650076985146), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 60), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.021580889918645006), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 63), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.009784983293163109), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 181), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.01681216802561148), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 78), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x14b3267e5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.0024115740950447087), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 812), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.007835132785327513), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 199), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001292902037943805), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 1217), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017657283215374284), ('regressor__regressor__max_depth', 565), ('regressor__regressor__n_estimators', 63), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.017361058031290504), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 84), ('regressor__regressor__n_jobs', -2)])


Pipeline(steps=[('Impute feats',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_mean',
                                                  SimpleImputer(),
                                                  ['PDI',
                                                   'Temperature '
                                                   'SANS/SLS/DLS/SEC (K)',
                                                   'Concentration (mg/ml)'])],
                                   verbose_feature_names_out=False)),
                ('Calculate Mw',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('calculator_Mw (g/mol)',
                                                  FunctionTransformer(func=<function...
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('imputer_Mw (g/mol)',
                                                  SimpleImputer(),
                                                  ['Mw (g/mol)'])],
                                   verbose_feature_names_out=False)),
                ('drop Mn',
                 ColumnTransformer(remainder='passthrough',
                                   transformers=[('Drop Mn column',
                                                  FunctionTransformer(func=<function drop_columns at 0x14b3267e5cf0>,
                                                                      kw_args={'columns_to_drop': ['Mn '
                                                                                                   '(g/mol)']}),
                                                  ['Mn (g/mol)'])],
                                   verbose_feature_names_out=False))])



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.002186164781794926), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 696), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.006022996814357317), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 214), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.004364268919334437), ('regressor__regressor__max_depth', 10000), ('regressor__regressor__n_estimators', 279), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.020010960099730163), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 76), ('regressor__regressor__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__learning_rate', 0.001), ('regressor__regressor__max_depth', 10), ('regressor__regressor__n_estimators', 1522), ('regressor__regressor__n_jobs', -2)])


Average scores:	 r: 0.64±0.07	 r2: 0.41±0.09
RRU Dimer_scaler
Filename: (Mordred-PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_mean_transformerOFF
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Second Peak (e-5 place holder)/RRU Dimer_scaler/(Mordred-PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_mean_transformerOFF_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Second Peak (e-5 place holder)/RRU Dimer_scaler/(Mordred-PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_mean_transformerOFF_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_log Second Peak (e-5 place holder)/RRU Dimer_scaler/(Mordred-PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_mean_transformerOFF_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c016n04>
Subject: Job 500525: <XGBR_log Second Peak (e-5 place holder)_Mordred_RRU Dimer_20250122> in cluster <Hazel> Done

Job <XGBR_log Second Peak (e-5 place holder)_Mordred_RRU Dimer_20250122> was submitted from host <c011n03> by user <sdehgha2> in cluster <Hazel> at Wed Feb  5 09:59:18 2025
Job was executed on host(s) <6*c016n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Wed Feb  5 09:59:19 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Wed Feb  5 09:59:19 2025
Terminated at Wed Feb  5 17:35:03 2025
Results reported at Wed Feb  5 17:35:03 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input



#BSUB -n 6
#BSUB -W 50:05
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "XGBR_log Second Peak (e-5 place holder)_Mordred_RRU Dimer_20250122"  
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250205/XGBR_log Second Peak (e-5 place holder)_Mordred_RRU Dimer_20250122.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250205/XGBR_log Second Peak (e-5 place holder)_Mordred__RRU Dimer_20250122.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_structure_numerical.py --target_features "log Second Peak (e-5 place holder)"                                       --representation "Mordred"                                       --regressor_type "XGBR"                                       --oligomer_representation "RRU Dimer"                                       --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" 'solvent dP' 'solvent dD' 'solvent dH'                                       --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                       --special_impute 'Mw (g/mol)'                                       --imputer mean 




------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   120928.00 sec.
    Max Memory :                                 12 GB
    Average Memory :                             10.62 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               4.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   27348 sec.
    Turnaround time :                            27345 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/hpc_20250205/XGBR_log Second Peak (e-5 place holder)_Mordred__RRU Dimer_20250122.err> for stderr output of this job.

