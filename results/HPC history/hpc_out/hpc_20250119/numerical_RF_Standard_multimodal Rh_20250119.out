


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05060301334581676), ('regressor__regressor__estimator__min_samples_split', 0.055609912806435235), ('regressor__regressor__estimator__n_estimators', 56)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05928831636108227), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051270795482444446), ('regressor__regressor__estimator__min_samples_split', 0.09236668950267735), ('regressor__regressor__estimator__n_estimators', 1005)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.050423354040773284), ('regressor__regressor__estimator__min_samples_split', 0.05602152625869873), ('regressor__regressor__estimator__n_estimators', 85)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 870)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051494031085785236), ('regressor__regressor__estimator__min_samples_split', 0.056004565892354384), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05342216623697849), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 342)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05045453082192568), ('regressor__regressor__estimator__min_samples_split', 0.0674238193942796), ('regressor__regressor__estimator__n_estimators', 448)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05069733793106011), ('regressor__regressor__estimator__min_samples_split', 0.05375640052295252), ('regressor__regressor__estimator__n_estimators', 1889)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.0513144991951703), ('regressor__regressor__estimator__min_samples_split', 0.054493963766891515), ('regressor__regressor__estimator__n_estimators', 161)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05071388419214858), ('regressor__regressor__estimator__min_samples_split', 0.06724929626288029), ('regressor__regressor__estimator__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05221940440457929), ('regressor__regressor__estimator__min_samples_split', 0.0510253069176794), ('regressor__regressor__estimator__n_estimators', 334)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05071388419214858), ('regressor__regressor__estimator__min_samples_split', 0.06724929626288029), ('regressor__regressor__estimator__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05050955897736326), ('regressor__regressor__estimator__min_samples_split', 0.08067235719427904), ('regressor__regressor__estimator__n_estimators', 66)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051573525829792286), ('regressor__regressor__estimator__min_samples_split', 0.05875825248391485), ('regressor__regressor__estimator__n_estimators', 405)])


Average scores:	 r2: [ 0.094  0.133 -0.041]±[0.117 0.067 0.022]
[array([ 0.09449901,  0.13313676, -0.04057075]), array([8.27193185e+00, 1.47338556e+02, 9.38188602e+04]), array([6.21940339e+00, 9.98276154e+01, 1.41216503e+04])]
{6: {'fit_time': array([7.33034348, 7.3098352 , 7.27452803, 7.23156452, 7.45763659]), 'score_time': array([0.34422898, 0.33508468, 0.32557368, 0.31687355, 0.35750961]), 'test_r2': [array([-0.27449651,  0.20666811, -0.05821506]), array([ 0.08551324,  0.04036903, -0.02611807]), array([ 0.12662629,  0.13665833, -0.02783469]), array([ 0.23796452,  0.13107051, -0.07501094]), array([ 0.09475311,  0.12319847, -0.06112684])], 'test_rmse': [array([7.31255499e+00, 1.26936330e+02, 1.76618729e+04]), array([8.36896123e+00, 1.33914802e+02, 3.38441227e+05]), array([8.24605345e+00, 1.72125061e+02, 2.43688528e+04]), array([8.41482837e+00, 1.55569752e+02, 1.34126549e+04]), array([9.12388524e+00, 1.51016882e+02, 2.01971084e+04])], 'test_mae': [array([   5.60134939,   90.05335438, 4142.84694673]), array([6.39539121e+00, 9.40621209e+01, 5.39952453e+04]), array([   5.91189847,  110.21345396, 4010.27064318]), array([   6.19243008,   99.90836336, 3543.11948047]), array([   7.03756463,  104.61984472, 4847.55097709])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([7.20761538, 7.42208886, 7.21046829, 7.38512444, 7.22282791]), 'score_time': array([0.34447551, 0.34346867, 0.32080865, 0.32821083, 0.32043791]), 'test_r2': [array([ 0.19349255,  0.08976273, -0.08353353]), array([ 0.19859717,  0.21264629, -0.04831002]), array([ 0.0468978 ,  0.0958957 , -0.02069448]), array([-0.19228231,  0.1698531 , -0.02029991]), array([ 0.14943108,  0.05173074, -0.02888115])], 'test_rmse': [array([8.81503209e+00, 1.73036989e+02, 9.12444526e+03]), array([8.00593614e+00, 1.43411231e+02, 2.83155581e+04]), array([9.27533599e+00, 1.43126323e+02, 9.45648874e+04]), array([7.03451964e+00, 1.41026361e+02, 3.25547524e+05]), array([8.06719669e+00, 1.40877504e+02, 1.50047916e+04])], 'test_mae': [array([   6.27697741,  113.01916044, 2533.54832705]), array([   6.33754307,   94.81745971, 6078.64686406]), array([7.00913744e+00, 9.59633844e+01, 1.34653074e+04]), array([5.55484601e+00, 9.14770255e+01, 4.59196794e+04]), array([   5.94097253,  105.75513359, 2514.08419284])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([7.26860976, 7.25179434, 7.23827004, 7.29857779, 7.11785984]), 'score_time': array([0.31641555, 0.32116508, 0.33663416, 0.32860661, 0.3151989 ]), 'test_r2': [array([ 0.09836035,  0.09211089, -0.03941029]), array([ 0.16591938,  0.11383115, -0.03085525]), array([-0.08257797,  0.12361017, -0.02151626]), array([ 0.1636541 ,  0.18900957, -0.05134581]), array([-0.02424239,  0.17554829, -0.03872966])], 'test_rmse': [array([8.56062333e+00, 1.48024494e+02, 2.39115896e+04]), array([7.94653705e+00, 1.57040539e+02, 6.08041022e+04]), array([6.74292092e+00, 1.52861640e+02, 3.33425640e+05]), array([9.32759302e+00, 1.58825370e+02, 1.41461614e+04]), array([9.07825569e+00, 1.21947842e+02, 1.98550858e+04])], 'test_mae': [array([   6.32888477,  102.16589421, 4656.10567809]), array([6.00882622e+00, 9.89277993e+01, 1.05198137e+04]), array([5.46341797e+00, 1.11753338e+02, 4.83905245e+04]), array([   6.71651414,  101.23329396, 3126.27186957]), array([   6.86065215,   83.73035997, 3834.25244701])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([7.15380073, 7.20295   , 7.24033666, 7.25848532, 7.1997993 ]), 'score_time': array([0.31401539, 0.41795492, 0.31822896, 0.32408428, 0.31232738]), 'test_r2': [array([-0.00717672,  0.16343543, -0.01952398]), array([ 0.21840503,  0.06649645, -0.02283977]), array([ 0.11785429,  0.28895079, -0.04258051]), array([ 0.02420591,  0.05202022, -0.0404138 ]), array([ 0.05379074,  0.10048583, -0.03876867])], 'test_rmse': [array([7.91400197e+00, 1.50517928e+02, 3.25183299e+05]), array([7.52424456e+00, 1.49150260e+02, 9.46020760e+04]), array([9.54499871e+00, 1.24668883e+02, 3.19711909e+04]), array([9.26090196e+00, 1.51319956e+02, 1.31849880e+04]), array([7.63548439e+00, 1.65796719e+02, 1.19655056e+04])], 'test_mae': [array([5.85257371e+00, 1.06598083e+02, 4.50002460e+04]), array([5.71520473e+00, 1.05788380e+02, 1.41366796e+04]), array([   6.72414172,   83.73563669, 6461.38979173]), array([   6.89371449,  100.5853421 , 2598.7633249 ]), array([   6.20818411,  101.05340138, 2311.68963791])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([6.6625843 , 6.82010579, 6.7618866 , 6.86257744, 6.71864605]), 'score_time': array([0.32113624, 0.30293632, 0.31061387, 0.408288  , 0.30996919]), 'test_r2': [array([ 0.08285564,  0.06736644, -0.04254536]), array([ 0.19807737,  0.24667969, -0.02895036]), array([ 0.2179252 ,  0.21553899, -0.10245623]), array([ 0.09016171,  0.1244142 , -0.01730056]), array([ 0.03305057,  0.10365377, -0.06994204])], 'test_rmse': [array([8.45921232e+00, 1.60801069e+02, 1.61412249e+04]), array([8.81132491e+00, 1.08020185e+02, 9.84051062e+04]), array([   7.95199419,  149.31700909, 7819.38964322]), array([7.95001757e+00, 1.85002113e+02, 3.24765577e+05]), array([7.90898581e+00, 1.23088431e+02, 2.36631325e+04])], 'test_mae': [array([   6.33247724,   99.17983458, 3260.76904993]), array([6.38532808e+00, 8.42649583e+01, 1.65062591e+04]), array([   5.8787519 ,  105.20118139, 2383.81323909]), array([6.05194582e+00, 1.16768878e+02, 4.23522658e+04]), array([   6.2350633 ,   88.87536567, 6050.23874872])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05069733793106011, 'regressor__estimator__min_samples_split': 0.05375640052295252, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 1889, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([7.15095186, 7.24597001, 7.30293489, 7.1276834 , 7.20653844]), 'score_time': array([0.30902386, 0.3379364 , 0.34111142, 0.33030057, 0.31868505]), 'test_r2': [array([ 0.16612553,  0.12993611, -0.05647282]), array([ 0.10250354,  0.00196856, -0.01678066]), array([ 0.24335713,  0.28017674, -0.05739163]), array([-0.04015438,  0.13178405, -0.03857516]), array([ 0.13072108,  0.04682023, -0.02073019])], 'test_rmse': [array([6.86180622e+00, 1.75084937e+02, 3.28619675e+04]), array([8.52086325e+00, 1.34436528e+02, 9.41250283e+04]), array([7.91185744e+00, 1.11980419e+02, 9.55434104e+03]), array([8.27719306e+00, 1.74493126e+02, 1.28678967e+04]), array([9.66555073e+00, 1.40247870e+02, 3.27276679e+05])], 'test_mae': [array([5.38142046e+00, 1.09081450e+02, 7.59792006e+03]), array([5.89227135e+00, 1.04983995e+02, 1.20922300e+04]), array([   6.29572466,   80.9960313 , 2225.94542782]), array([   6.33252255,  113.79928583, 2480.088582  ]), array([7.14364029e+00, 9.57188719e+01, 4.66403492e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([0.30003786, 0.30133247, 0.31175041, 0.30544472, 0.29888988]), 'score_time': array([0.03235745, 0.03279066, 0.0338614 , 0.03424382, 0.03190613]), 'test_r2': [array([-0.00344673,  0.17060948, -0.03924327]), array([ 0.122412  ,  0.07871843, -0.01419752]), array([ 0.22455501,  0.18727079, -0.01571663]), array([ 0.23232366,  0.09497159, -0.08224239]), array([ 0.11230846,  0.15652565, -0.02142259])], 'test_rmse': [array([8.89923748e+00, 1.18563691e+02, 2.52058278e+04]), array([7.50115603e+00, 1.60411121e+02, 9.36149189e+04]), array([7.92732146e+00, 1.41319927e+02, 3.20549769e+05]), array([8.23134389e+00, 1.86634591e+02, 2.28100560e+04]), array([8.43988487e+00, 1.26253566e+02, 5.83106302e+04])], 'test_mae': [array([   6.47802814,   89.02625507, 4898.17879554]), array([5.66128276e+00, 9.98223036e+01, 1.10765615e+04]), array([5.96405908e+00, 9.63126626e+01, 3.98740255e+04]), array([6.14953264e+00, 1.18361399e+02, 6.28803040e+03]), array([6.46684603e+00, 9.61132362e+01, 8.44505079e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 'r2_avg': array([ 0.09449901,  0.13313676, -0.04057075]), 'r2_stdev': array([0.1168019 , 0.06688679, 0.02189124]), 'rmse_avg': array([8.27193185e+00, 1.47338556e+02, 9.38188602e+04]), 'rmse_stdev': array([7.27564560e-01, 1.97039516e+01, 1.20176699e+05]), 'mae_avg': array([6.21940339e+00, 9.98276154e+01, 1.41216503e+04]), 'mae_stdev': array([4.50354848e-01, 9.52326531e+00, 1.64566938e+04]), 'r2_avg_aggregate': 0.06235500849949183, 'r2_stdev_aggregate': 0.0685266427424357, 'rmse_avg_aggregate': 31324.823557135795, 'rmse_stdev_aggregate': 40065.71026127803, 'mae_avg_aggregate': 4742.565788977678, 'mae_stdev_aggregate': 5488.889131600515}
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n07>
Subject: Job 288740: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c039n03> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:03:13 2025
Job was executed on host(s) <6*c201n07>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:03:15 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:03:15 2025
Terminated at Mon Jan 20 00:38:01 2025
Results reported at Mon Jan 20 00:38:01 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Standard"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   21455.00 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.97 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   5694 sec.
    Turnaround time :                            5688 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05020633363131399), ('regressor__regressor__estimator__min_samples_split', 0.05545864520719614), ('regressor__regressor__estimator__n_estimators', 793)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 87)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.06199286127853644), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05052952987028936), ('regressor__regressor__estimator__min_samples_split', 0.05455638373216955), ('regressor__regressor__estimator__n_estimators', 128)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07939031902239854), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05052952987028936), ('regressor__regressor__estimator__min_samples_split', 0.05455638373216955), ('regressor__regressor__estimator__n_estimators', 128)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051621669425973835), ('regressor__regressor__estimator__min_samples_split', 0.05586957536472967), ('regressor__regressor__estimator__n_estimators', 293)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.050692435754724194), ('regressor__regressor__estimator__min_samples_split', 0.06669574142774738), ('regressor__regressor__estimator__n_estimators', 585)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05842445963254668), ('regressor__regressor__estimator__n_estimators', 1077)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07175093585793615), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05010623315870579), ('regressor__regressor__estimator__min_samples_split', 0.05561441624444238), ('regressor__regressor__estimator__n_estimators', 1004)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050424021509830615), ('regressor__regressor__estimator__min_samples_split', 0.054681454545311266), ('regressor__regressor__estimator__n_estimators', 64)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.06929144093478579), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.0513144991951703), ('regressor__regressor__estimator__min_samples_split', 0.054493963766891515), ('regressor__regressor__estimator__n_estimators', 161)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05221940440457929), ('regressor__regressor__estimator__min_samples_split', 0.0510253069176794), ('regressor__regressor__estimator__n_estimators', 334)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.050515055853842514), ('regressor__regressor__estimator__min_samples_split', 0.05143736648477392), ('regressor__regressor__estimator__n_estimators', 213)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05268945134523482), ('regressor__regressor__estimator__min_samples_split', 0.059553134128498914), ('regressor__regressor__estimator__n_estimators', 147)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.050515055853842514), ('regressor__regressor__estimator__min_samples_split', 0.05143736648477392), ('regressor__regressor__estimator__n_estimators', 213)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05050955897736326), ('regressor__regressor__estimator__min_samples_split', 0.08067235719427904), ('regressor__regressor__estimator__n_estimators', 66)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05123483756301251), ('regressor__regressor__estimator__min_samples_split', 0.07288869516897024), ('regressor__regressor__estimator__n_estimators', 1316)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 873)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 726)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])


Average scores:	 r2: [ 0.09   0.131 -0.041]±[0.085 0.067 0.022]
[array([ 0.08963183,  0.1314641 , -0.04056668]), array([8.31777339e+00, 1.47430752e+02, 9.38188091e+04]), array([6.22941296e+00, 1.00845624e+02, 1.41216018e+04])]
{6: {'fit_time': array([3.03458977, 2.9048121 , 2.82899547, 2.80985308, 2.78927493]), 'score_time': array([0.1296525 , 0.13151288, 0.12871599, 0.12522697, 0.12675118]), 'test_r2': [array([-0.05713867,  0.23830033, -0.0582022 ]), array([ 0.08050709,  0.00717565, -0.0261179 ]), array([ 0.10250797,  0.14977207, -0.02783241]), array([ 0.18862561,  0.13776608, -0.0750004 ]), array([ 0.02980887,  0.11422634, -0.06112444])], 'test_rmse': [array([6.65987072e+00, 1.24379947e+02, 1.76617656e+04]), array([8.39183696e+00, 1.36211152e+02, 3.38441199e+05]), array([8.35913596e+00, 1.70812810e+02, 2.43688257e+04]), array([8.68297027e+00, 1.54969218e+02, 1.34125892e+04]), array([9.44549981e+00, 1.51787578e+02, 2.01970855e+04])], 'test_mae': [array([   5.01333552,   87.26846022, 4142.80921788]), array([6.53672940e+00, 9.69583301e+01, 5.39952064e+04]), array([   6.05698674,  109.13101687, 4010.21412512]), array([   6.43248392,  101.06086776, 3543.05591036]), array([   7.05262817,  105.9190691 , 4847.51678205])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05020633363131399, 'regressor__estimator__min_samples_split': 0.05545864520719614, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 793, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([1.12769747, 1.13288617, 1.07714748, 1.06044722, 1.06545639]), 'score_time': array([0.069592  , 0.07002211, 0.06220913, 0.05923915, 0.06043148]), 'test_r2': [array([ 0.16216649,  0.10211402, -0.08352943]), array([ 0.06957617,  0.17915143, -0.04830726]), array([ 0.07091936,  0.09974265, -0.02069312]), array([-0.20996791,  0.18422498, -0.02029945]), array([ 0.1665269 ,  0.04514717, -0.02887857])], 'test_rmse': [array([8.98459634e+00, 1.71858984e+02, 9.12442800e+03]), array([8.62635044e+00, 1.46429894e+02, 2.83155208e+04]), array([9.15770440e+00, 1.42821498e+02, 9.45648245e+04]), array([7.08650050e+00, 1.39800275e+02, 3.25547451e+05]), array([7.98571273e+00, 1.41365695e+02, 1.50047728e+04])], 'test_mae': [array([   6.52663102,  112.66668806, 2533.53372201]), array([   6.62731164,   97.26657896, 6078.61774804]), array([6.78508399e+00, 1.00742599e+02, 1.34653224e+04]), array([5.56169706e+00, 9.09576968e+01, 4.59196408e+04]), array([   5.92663252,  105.94152632, 2514.06386964])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.051621669425973835, 'regressor__estimator__min_samples_split': 0.05586957536472967, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 293, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([3.99887729, 3.91209984, 3.76858878, 3.90288711, 3.94780922]), 'score_time': array([0.1622417 , 0.16572189, 0.15692258, 0.16899228, 0.16936588]), 'test_r2': [array([ 0.11113875,  0.07418332, -0.03940928]), array([ 0.14085899,  0.10027101, -0.03085412]), array([-0.04688922,  0.12386201, -0.02151604]), array([ 0.09339581,  0.22683544, -0.05134163]), array([ 0.02285703,  0.18635509, -0.03872398])], 'test_rmse': [array([8.49974455e+00, 1.49478827e+02, 2.39115780e+04]), array([8.06503256e+00, 1.58237492e+02, 6.08040689e+04]), array([6.63084441e+00, 1.52839675e+02, 3.33425605e+05]), array([9.71148141e+00, 1.55077211e+02, 1.41461332e+04]), array([8.86706913e+00, 1.21145968e+02, 1.98550316e+04])], 'test_mae': [array([   6.37111664,  104.76990575, 4656.06513473]), array([5.89695334e+00, 1.03519962e+02, 1.05197569e+04]), array([5.47688230e+00, 1.09741310e+02, 4.83904918e+04]), array([   6.9801774 ,   98.30158865, 3126.23466069]), array([   6.62085697,   86.54923225, 3834.18592346])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05842445963254668, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 1077, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([0.24366403, 0.22705197, 0.21238637, 0.20947766, 0.23484349]), 'score_time': array([0.03248763, 0.03100538, 0.02903223, 0.0302434 , 0.03061056]), 'test_r2': [array([ 0.08767079,  0.15986276, -0.01952358]), array([ 0.12374509, -0.01539467, -0.02283833]), array([ 0.05180173,  0.29069654, -0.04256796]), array([ 0.01165549,  0.07343184, -0.04040784]), array([ 0.07810985,  0.14152554, -0.03876018])], 'test_rmse': [array([7.53215251e+00, 1.50838991e+02, 3.25183235e+05]), array([7.96686132e+00, 1.55554818e+02, 9.46020095e+04]), array([9.89589980e+00, 1.24515747e+02, 3.19709986e+04]), array([9.32026740e+00, 1.49601296e+02, 1.31849502e+04]), array([7.53672354e+00, 1.61970387e+02, 1.19654567e+04])], 'test_mae': [array([5.76994533e+00, 1.06270548e+02, 4.50001420e+04]), array([5.88705732e+00, 1.12875501e+02, 1.41366750e+04]), array([   6.92731154,   81.50486396, 6461.27498565]), array([   6.77785226,   98.06363667, 2598.71851376]), array([   6.02154481,  100.40843356, 2311.53428254])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([0.59820199, 0.6622436 , 0.59786797, 0.60135627, 0.61172891]), 'score_time': array([0.0432508 , 0.04678249, 0.04277802, 0.04423571, 0.04465556]), 'test_r2': [array([ 0.10197012,  0.0694993 , -0.04253932]), array([ 0.19135099,  0.22747037, -0.02894965]), array([ 0.17692777,  0.19169175, -0.10244151]), array([ 0.0392375 ,  0.11592501, -0.01730034]), array([ 0.08966382,  0.11720034, -0.06993755])], 'test_rmse': [array([8.37059768e+00, 1.60617095e+02, 1.61411781e+04]), array([8.84820165e+00, 1.09388747e+02, 9.84050725e+04]), array([   8.15775921,  151.56960093, 7819.33744084]), array([8.16947230e+00, 1.85896788e+02, 3.24765542e+05]), array([7.67396502e+00, 1.22154766e+02, 2.36630828e+04])], 'test_mae': [array([   6.23811226,  102.55270491, 3260.65855419]), array([6.43505159e+00, 8.54569399e+01, 1.65062251e+04]), array([   6.12390043,  107.45467762, 2383.79129155]), array([6.15823294e+00, 1.21849210e+02, 4.23522312e+04]), array([5.89883599e+00, 8.85687667e+01, 6.05022496e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.0513144991951703, 'regressor__estimator__min_samples_split': 0.054493963766891515, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 161, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([7.28573513, 7.30542541, 6.93286252, 6.97052097, 7.06079388]), 'score_time': array([0.27485871, 0.27105689, 0.28057146, 0.28300571, 0.28913689]), 'test_r2': [array([ 0.18607853,  0.1147796 , -0.05646361]), array([ 0.11282074,  0.02441839, -0.01677897]), array([ 0.20378691,  0.22751876, -0.05738796]), array([-0.03233045,  0.1546925 , -0.03856485]), array([ 0.08341614,  0.07540563, -0.02073009])], 'test_rmse': [array([6.77921429e+00, 1.76603343e+02, 3.28618243e+04]), array([8.47174576e+00, 1.32915912e+02, 9.41249498e+04]), array([8.11610460e+00, 1.16004042e+02, 9.55432448e+03]), array([8.24600422e+00, 1.72175680e+02, 1.28678328e+04]), array([9.92505984e+00, 1.38128880e+02, 3.27276662e+05])], 'test_mae': [array([5.46190446e+00, 1.11576805e+02, 7.59787143e+03]), array([5.92946682e+00, 9.92936220e+01, 1.20921691e+04]), array([   6.36949637,   86.45357639, 2225.90665511]), array([   6.15684783,  111.45139886, 2480.00092094]), array([7.39091559e+00, 9.93133146e+01, 4.66403040e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([7.28569841, 7.38201857, 7.06541157, 6.96908236, 6.98730874]), 'score_time': array([0.2992444 , 0.28722501, 0.27759933, 0.2847929 , 0.28357244]), 'test_r2': [array([ 0.11133858,  0.11549995, -0.03924237]), array([ 0.10557688,  0.11948609, -0.01419598]), array([ 0.1840675 ,  0.17360181, -0.01571653]), array([ 0.1946706 ,  0.07585405, -0.08223633]), array([ 0.11066237,  0.17895026, -0.02142053])], 'test_rmse': [array([8.37478753e+00, 1.22439377e+02, 2.52058170e+04]), array([7.57276310e+00, 1.56821785e+02, 9.36148481e+04]), array([8.13163898e+00, 1.42503375e+02, 3.20549754e+05]), array([8.43079338e+00, 1.88595496e+02, 2.28099922e+04]), array([8.44770649e+00, 1.24563971e+02, 5.83105714e+04])], 'test_mae': [array([   6.1820322 ,   92.92803413, 4898.17409951]), array([5.59233855e+00, 9.99439316e+01, 1.10764827e+04]), array([6.19452076e+00, 9.84787099e+01, 3.98740136e+04]), array([   6.30104026,  120.28481921, 6287.96388843]), array([6.34753969e+00, 9.40725125e+01, 8.44498454e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 'r2_avg': array([ 0.08963183,  0.1314641 , -0.04056668]), 'r2_stdev': array([0.08475644, 0.06736351, 0.02188852]), 'rmse_avg': array([8.31777339e+00, 1.47430752e+02, 9.38188091e+04]), 'rmse_stdev': array([8.18609246e-01, 1.93992203e+01, 1.20176704e+05]), 'mae_avg': array([6.22941296e+00, 1.00845624e+02, 1.41216018e+04]), 'mae_stdev': array([4.96770239e-01, 9.63110359e+00, 1.64566976e+04]), 'r2_avg_aggregate': 0.06017641785154976, 'r2_stdev_aggregate': 0.05800282154193404, 'rmse_avg_aggregate': 31324.852527837265, 'rmse_stdev_aggregate': 40065.64067859191, 'mae_avg_aggregate': 4742.892271185843, 'mae_stdev_aggregate': 5488.941825903142}
scaler
Filename: (PDI-Mw-concentration-temperature)_RF_mean_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_RF_mean_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_RF_mean_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_RF_mean_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c032n01>
Subject: Job 288755: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c023n02> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:11:47 2025
Job was executed on host(s) <6*c032n01>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:11:49 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:11:49 2025
Terminated at Mon Jan 20 00:42:30 2025
Results reported at Mon Jan 20 00:42:30 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Standard"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)'                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   20320.00 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.91 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   5470 sec.
    Turnaround time :                            5443 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Standard_multimodal Rh_20250119.err> for stderr output of this job.

