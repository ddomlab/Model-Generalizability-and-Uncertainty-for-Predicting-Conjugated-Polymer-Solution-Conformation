


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0019914836041300065), ('regressor__regressor__estimator__max_depth', 11), ('regressor__regressor__estimator__n_estimators', 367), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01556208037746799), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 126), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0071894363964735575), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 159), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00594133620611216), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 103), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.08020385901333033), ('regressor__regressor__estimator__max_depth', 464), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.010154719479727466), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 561), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012799691667633853), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 56), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006337573557896935), ('regressor__regressor__estimator__max_depth', 2888), ('regressor__regressor__estimator__n_estimators', 605), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.06302088493685641), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 74), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0031526561777902484), ('regressor__regressor__estimator__max_depth', 885), ('regressor__regressor__estimator__n_estimators', 277), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 3257), ('regressor__regressor__estimator__n_estimators', 52), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0012984662417365339), ('regressor__regressor__estimator__max_depth', 12), ('regressor__regressor__estimator__n_estimators', 517), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.010026696956374793), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 431), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003014890634522962), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 268), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013978993462480093), ('regressor__regressor__estimator__max_depth', 653), ('regressor__regressor__estimator__n_estimators', 60), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005326112688626979), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 138), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0012126405441060238), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 659), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013494057635276446), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012889336296065416), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 58), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0428839069891835), ('regressor__regressor__estimator__max_depth', 236), ('regressor__regressor__estimator__n_estimators', 102), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0428839069891835), ('regressor__regressor__estimator__max_depth', 236), ('regressor__regressor__estimator__n_estimators', 102), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004349202126482686), ('regressor__regressor__estimator__max_depth', 19), ('regressor__regressor__estimator__n_estimators', 1313), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.030692920998397172), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 142), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0012143032645914687), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 645), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013339680223173446), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01525794848599567), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007235129471101413), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 86), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008650028422729515), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 62), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0030656081105162798), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 247), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0018915777897749273), ('regressor__regressor__estimator__max_depth', 1311), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005698664126673114), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 126), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006142698068678077), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 686), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [ 0.072 -0.044  0.249]±[0.159 0.214 0.327]
[array([ 0.07187065, -0.04372715,  0.24874754]), array([8.36173047e+00, 1.60092805e+02, 8.81719215e+04]), array([5.30718344e+00, 9.82681095e+01, 1.30370951e+04])]
{6: {'fit_time': array([0.29766607, 0.33148551, 0.31100845, 0.30085659, 0.3173275 ]), 'score_time': array([0.02847648, 0.03338075, 0.02967167, 0.02917242, 0.03006864]), 'test_r2': [array([ 0.02116967,  0.14640938, -0.10003632]), array([ 0.37423505, -0.33724792, -0.01169924]), array([ 0.00809098, -0.04096989,  0.75046721]), array([ 0.26926951, -0.20794254,  0.18293583]), array([ 0.01987031, -0.3290302 ,  0.92311538])], 'test_rmse': [array([6.40845779e+00, 1.31668928e+02, 1.80074948e+04]), array([6.92290644e+00, 1.58082000e+02, 3.36054957e+05]), array([8.78783728e+00, 1.89004367e+02, 1.20070760e+04]), array([8.24017207e+00, 1.83423945e+02, 1.16932811e+04]), array([   9.49375602,  185.92692094, 5436.57377209])], 'test_mae': [array([3.94170081e+00, 8.13116920e+01, 4.18347141e+03]), array([4.27704321e+00, 9.84451616e+01, 5.14938040e+04]), array([   4.89279245,  113.69881571, 2688.18901939]), array([   5.07415896,  103.2915913 , 3320.73945434]), array([   5.91118788,  108.19460172, 1810.45311121])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.1, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 126, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.19720674, 0.18872499, 0.22060633, 0.20010614, 0.19948554]), 'score_time': array([0.0284214 , 0.02725458, 0.0332284 , 0.02723932, 0.02927065]), 'test_r2': [array([-0.02614582,  0.18941806,  0.87427454]), array([ 0.18527222, -0.09236591,  0.34507394]), array([-0.05613472, -0.05437018,  0.13479352]), array([-0.2607682 , -0.33707878, -0.01048367]), array([ 0.03921365, -0.25825956,  0.72117458])], 'test_rmse': [array([   9.94315584,  163.29019407, 3108.11381066]), array([8.07221923e+00, 1.68920476e+02, 2.23808405e+04]), array([9.76381572e+00, 1.54563449e+02, 8.70646602e+04]), array([7.23373373e+00, 1.78978689e+02, 3.23977705e+05]), array([   8.57395704,  162.2784804 , 7811.12426478])], 'test_mae': [array([   6.12413446,  103.69865564, 1404.10183224]), array([   5.15208426,  103.2425388 , 4962.08868929]), array([5.84547885e+00, 8.69321953e+01, 1.24632519e+04]), array([4.31765960e+00, 1.06198374e+02, 4.43433535e+04]), array([   5.2542856 ,  102.76185162, 1552.35263093])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.08020385901333033, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 464, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([1.18427706, 1.13168454, 1.14162159, 1.24456596, 1.14932871]), 'score_time': array([0.03195   , 0.0361433 , 0.03355742, 0.03859615, 0.03439307]), 'test_r2': [array([ 0.21363752, -0.40261724,  0.38699817]), array([-0.20874037,  0.08602622,  0.21793968]), array([-0.31694515, -0.0922863 , -0.00838393]), array([0.12699046, 0.34125341, 0.15791236]), array([ 0.09964519, -0.3405553 ,  0.86431193])], 'test_rmse': [array([7.99466515e+00, 1.83986843e+02, 1.83630928e+04]), array([9.56622107e+00, 1.59485206e+02, 5.29607543e+04]), array([7.43707768e+00, 1.70654637e+02, 3.31275493e+05]), array([9.52985115e+00, 1.43143359e+02, 1.26603135e+04]), array([   8.51153485,  155.50124612, 7176.14707805])], 'test_mae': [array([   5.21461169,  119.07111736, 3547.27391402]), array([5.53681612e+00, 9.44744091e+01, 8.49363851e+03]), array([4.15304135e+00, 1.04185423e+02, 4.73235619e+04]), array([   5.51565095,   82.39593821, 2861.10751726]), array([   5.50259689,   84.36292588, 1643.93510275])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.010026696956374793, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 431, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([1.34342861, 1.40415955, 1.10355711, 1.20612955, 1.26538014]), 'score_time': array([0.04171634, 0.041924  , 0.03464603, 0.03843832, 0.034724  ]), 'test_r2': [array([ 0.26228638,  0.1858878 , -0.0195239 ]), array([ 0.17535533,  0.01987018, -0.02283691]), array([ 0.0589304 ,  0.17132847, -0.04255412]), array([ 0.09212024,  0.20724371, -0.04038557]), array([ 0.09370964, -0.03620347, -0.03876768])], 'test_rmse': [array([6.77309575e+00, 1.48484333e+02, 3.25183286e+05]), array([7.72868224e+00, 1.52829724e+02, 9.46019436e+04]), array([9.85863035e+00, 1.34585864e+02, 3.19707863e+04]), array([8.93281547e+00, 1.38377831e+02, 1.31848091e+04]), array([7.47268502e+00, 1.77948549e+02, 1.19654999e+04])], 'test_mae': [array([5.18166450e+00, 1.04061440e+02, 4.50001889e+04]), array([5.44386160e+00, 1.05233769e+02, 1.41365604e+04]), array([   6.54546919,   83.39518712, 6461.30056366]), array([   6.33608863,   91.54338241, 2598.81071975]), array([   5.63319585,  104.22297727, 2311.67990515])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0012126405441060238, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 659, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([3.56772113, 3.84680319, 3.69428301, 3.60431075, 3.40474367]), 'score_time': array([0.05550885, 0.05039573, 0.06138301, 0.06948686, 0.05176067]), 'test_r2': [array([0.08814143, 0.10670548, 0.43208227]), array([ 0.34250768, -0.11970597,  0.39490619]), array([ 0.04087306, -0.07828898, -0.06986426]), array([-0.11424041, -0.02132397, -0.00381669]), array([-0.12652191, -0.55195124,  0.60444272])], 'test_rmse': [array([8.43480056e+00, 1.57373190e+02, 1.19132903e+04]), array([7.97848301e+00, 1.31694329e+02, 7.54626024e+04]), array([   8.80622857,  175.06171709, 7702.94000245]), array([8.79782736e+00, 1.99806263e+02, 3.22606085e+05]), array([8.53667475e+00, 1.61963956e+02, 1.43878797e+04])], 'test_mae': [array([   5.57738898,   91.15208705, 2915.44976583]), array([4.71514507e+00, 7.93183754e+01, 1.04933455e+04]), array([   5.12578347,   98.15741652, 2196.91912759]), array([4.90399600e+00, 1.17630417e+02, 4.04842598e+04]), array([   5.30743008,  101.77644274, 3160.88178962])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.004349202126482686, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 19, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 1313, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([1.62170339, 1.54369688, 1.48117399, 1.38761044, 1.54902864]), 'score_time': array([0.03951097, 0.06635189, 0.03669262, 0.03594065, 0.04199481]), 'test_r2': [array([ 0.05901918,  0.07378822, -0.05646467]), array([ 0.10677281, -0.02029072, -0.01677743]), array([ 0.28304368,  0.17804836, -0.05733826]), array([ 0.06967517,  0.17569906, -0.03857635]), array([ 0.22668092,  0.19832333, -0.02073008])], 'test_rmse': [array([7.28917697e+00, 1.80646005e+02, 3.28618408e+04]), array([8.50057280e+00, 1.35927442e+02, 9.41248785e+04]), array([7.70157111e+00, 1.19660906e+02, 9.55409992e+03]), array([7.82801213e+00, 1.70022869e+02, 1.28679041e+04]), array([9.11646343e+00, 1.28619995e+02, 3.27276660e+05])], 'test_mae': [array([5.40624143e+00, 1.10668173e+02, 7.59791053e+03]), array([5.56118302e+00, 9.96370865e+01, 1.20921432e+04]), array([   5.57283527,   85.04998611, 2225.80921307]), array([   5.25573327,  104.80509301, 2480.13871459]), array([6.55400624e+00, 9.20592541e+01, 4.66403329e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0012143032645914687, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 645, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.9691925 , 0.97149181, 0.85429859, 0.8669951 , 0.88284755]), 'score_time': array([0.03508162, 0.04547811, 0.02967095, 0.03003216, 0.03080344]), 'test_r2': [array([ 0.05418192, -0.13556733,  0.6075879 ]), array([0.04980619, 0.09059092, 0.56972117]), array([-0.06825586,  0.13113822, -0.02684556]), array([0.29458817, 0.00843375, 0.52297459]), array([ 0.03813842, -0.38455914,  0.60053641])], 'test_rmse': [array([8.63991441e+00, 1.38732631e+02, 1.54886495e+04]), array([7.80528851e+00, 1.59374166e+02, 6.09759794e+04]), array([9.30440520e+00, 1.46118705e+02, 3.22301073e+05]), array([7.89047299e+00, 1.95353818e+02, 1.51437991e+04]), array([8.78540470e+00, 1.61757143e+02, 3.64656203e+04])], 'test_mae': [array([   5.04224056,   86.41525504, 3389.46967897]), array([4.65181087e+00, 8.78385192e+01, 8.44348141e+03]), array([5.88448595e+00, 9.36898846e+01, 4.18443370e+04]), array([4.90754270e+00, 1.12825991e+02, 4.91222102e+03]), array([   5.43207476,   97.63780452, 4821.76491914])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.1, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.07187065, -0.04372715,  0.24874754]), 'r2_stdev': array([0.15872181, 0.21411464, 0.32690997]), 'rmse_avg': array([8.36173047e+00, 1.60092805e+02, 8.81719215e+04]), 'rmse_stdev': array([8.95197856e-01, 2.01469540e+01, 1.21959004e+05]), 'mae_avg': array([5.30718344e+00, 9.82681095e+01, 1.30370951e+04]), 'mae_stdev': array([6.09844467e-01, 1.05800535e+01, 1.65185901e+04]), 'r2_avg_aggregate': 0.09229701327037361, 'r2_stdev_aggregate': 0.23324880987821708, 'rmse_avg_aggregate': 29446.79202447316, 'rmse_stdev_aggregate': 40660.0153899751, 'mae_avg_aggregate': 4380.223456663352, 'mae_stdev_aggregate': 5509.926677190241}
scaler
Filename: (PDI-Mw-concentration-temperature)_XGBR_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_XGBR_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_XGBR_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_XGBR_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c038n04>
Subject: Job 288756: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c023n02> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:11:47 2025
Job was executed on host(s) <6*c038n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:11:49 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:11:49 2025
Terminated at Sun Jan 19 23:59:45 2025
Results reported at Sun Jan 19 23:59:45 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)'                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   8372.00 sec.
    Max Memory :                                 10 GB
    Average Memory :                             9.60 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               6.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   2889 sec.
    Turnaround time :                            2878 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011224869879587016), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 108), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0023128782177159464), ('regressor__regressor__estimator__max_depth', 12), ('regressor__regressor__estimator__n_estimators', 616), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01855957396639235), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0020072871841853948), ('regressor__regressor__estimator__max_depth', 64), ('regressor__regressor__estimator__n_estimators', 535), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009287461214118286), ('regressor__regressor__estimator__max_depth', 15), ('regressor__regressor__estimator__n_estimators', 95), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0020122009929252308), ('regressor__regressor__estimator__max_depth', 1066), ('regressor__regressor__estimator__n_estimators', 375), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00845125686862045), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 104), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0013253438704675289), ('regressor__regressor__estimator__max_depth', 40), ('regressor__regressor__estimator__n_estimators', 688), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 1192), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00992881443760744), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 108), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0011709010243226492), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 922), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.010704448324506016), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 75), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015338586493350256), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0012895967932108371), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 700), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.02415419897991598), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.023659953917594335), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013601773432932715), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 1564), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0016902680060246556), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 591), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008381630295581916), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 144), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0017473430171370224), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 472), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.014206202784198025), ('regressor__regressor__estimator__max_depth', 7489), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004411683558919434), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 315), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0087945723406897), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 122), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0013864443525296235), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 532), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015529828340990258), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004166744277666405), ('regressor__regressor__estimator__max_depth', 46), ('regressor__regressor__estimator__n_estimators', 248), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 1231), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009959642597983653), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 104), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01979415637801275), ('regressor__regressor__estimator__max_depth', 19), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.022102234996712964), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006062546690905855), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 137), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.010360241543778384), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 71), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.019805873004857796), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [ 0.044  0.138 -0.041]±[0.108 0.128 0.022]
[array([ 0.04426738,  0.13765002, -0.04053331]), array([8.50789834e+00, 1.46469526e+02, 9.38186190e+04]), array([6.48955919e+00, 1.01056549e+02, 1.41207596e+04])]
{6: {'fit_time': array([0.77461576, 0.80404401, 0.80491662, 0.77734971, 0.80333114]), 'score_time': array([0.01600409, 0.01597595, 0.0153141 , 0.01536679, 0.01562524]), 'test_r2': [array([-0.30706676,  0.15042279, -0.05815633]), array([ 0.06992896, -0.05186631, -0.0261179 ]), array([ 0.08833557,  0.29406238, -0.02782196]), array([ 0.06346242,  0.08374802, -0.07492692]), array([ 0.03432947,  0.22303898, -0.06105855])], 'test_rmse': [array([7.40540310e+00, 1.31359022e+02, 1.76613828e+04]), array([8.43997003e+00, 1.40202813e+02, 3.38441198e+05]), array([8.42487745e+00, 1.55645267e+02, 2.43687019e+04]), array([9.32868160e+00, 1.59749812e+02, 1.34121307e+04]), array([9.42346851e+00, 1.42159035e+02, 2.01964584e+04])], 'test_mae': [array([   5.7393339 ,   95.42415621, 4141.21821275]), array([6.64213628e+00, 9.63028284e+01, 5.39936863e+04]), array([   6.25225757,  100.5796608 , 4009.57711487]), array([   6.73180492,  107.35456189, 3542.52405574]), array([   7.38250295,  101.05099694, 4845.44678236])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0023128782177159464, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 12, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 616, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([1.41379309, 1.38125896, 1.38345265, 1.44529557, 1.41904902]), 'score_time': array([0.01928163, 0.01933455, 0.02007961, 0.0199573 , 0.0204041 ]), 'test_r2': [array([ 0.13582581,  0.14295964, -0.08341532]), array([ 0.14853365,  0.25736354, -0.04830313]), array([-0.0373295 , -0.13968148, -0.02069498]), array([-0.23164389,  0.21031339, -0.02030006]), array([ 0.12192469,  0.16812611, -0.0288481 ])], 'test_rmse': [array([   9.12473692,  167.90447853, 9123.9475541 ]), array([8.25221301e+00, 1.39279231e+02, 2.83154649e+04]), array([9.67649951e+00, 1.60694861e+02, 9.45649108e+04]), array([7.14969433e+00, 1.37546712e+02, 3.25547548e+05]), array([8.19660058e+00, 1.31948531e+02, 1.50045506e+04])], 'test_mae': [array([   6.61650822,  107.45010805, 2532.93578065]), array([   6.62877743,   95.57878159, 6078.11803658]), array([7.50013153e+00, 1.09859986e+02, 1.34651458e+04]), array([5.83151053e+00, 9.07612097e+01, 4.59195268e+04]), array([   5.82456209,  100.02276818, 2513.70107973])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.001, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 1192, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.15712142, 0.14993238, 0.14822078, 0.15458035, 0.1525569 ]), 'score_time': array([0.0123713 , 0.01222324, 0.01217699, 0.01200724, 0.01260138]), 'test_r2': [array([ 0.09031586,  0.21026793, -0.03938905]), array([ 0.08255575,  0.10860908, -0.03085452]), array([-0.08920162,  0.10365752, -0.02151629]), array([ 0.07320656,  0.1608318 , -0.05133292]), array([-0.05704886,  0.21691101, -0.03872826])], 'test_rmse': [array([8.59872775e+00, 1.38056566e+02, 2.39113453e+04]), array([8.33419657e+00, 1.57502568e+02, 6.08040805e+04]), array([6.76351741e+00, 1.54591938e+02, 3.33425646e+05]), array([9.81901898e+00, 1.61560996e+02, 1.41460747e+04]), array([9.22249800e+00, 1.18849420e+02, 1.98550725e+04])], 'test_mae': [array([   6.53813617,   96.11109558, 4655.31783531]), array([6.32991087e+00, 1.03063828e+02, 1.05194107e+04]), array([5.64429488e+00, 1.13824932e+02, 4.83899513e+04]), array([   7.24388947,  105.36485783, 3126.09181498]), array([   7.14063468,   84.91071724, 3834.04166515])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.02415419897991598, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([1.80179048, 1.70224524, 1.76068115, 1.80941796, 1.73884344]), 'score_time': array([0.02271104, 0.02067637, 0.02245045, 0.0237534 , 0.02336597]), 'test_r2': [array([-0.00326754,  0.25133954, -0.01952387]), array([ 0.1476034 ,  0.0268475 , -0.02283419]), array([ 0.12728805,  0.41808228, -0.04254174]), array([-0.07302895, -0.06194572, -0.04023634]), array([ 0.01079592,  0.0533825 , -0.03866065])], 'test_rmse': [array([7.89862864e+00, 1.42390478e+02, 3.25183281e+05]), array([7.85765357e+00, 1.52284772e+02, 9.46018177e+04]), array([9.49382388e+00, 1.12781802e+02, 3.19705965e+04]), array([9.71135685e+00, 1.60157702e+02, 1.31838635e+04]), array([7.80703177e+00, 1.70082329e+02, 1.19648834e+04])], 'test_mae': [array([5.99628072e+00, 1.05197986e+02, 4.49992150e+04]), array([5.93632326e+00, 1.05181171e+02, 1.41328754e+04]), array([   6.80197008,   84.70385467, 6458.07350382]), array([   7.23847186,  106.87318063, 2596.65872813]), array([   6.36385505,  104.177944  , 2310.50029278])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.001, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 1564, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([0.35419774, 0.4959662 , 0.44758797, 0.44145012, 0.42553854]), 'score_time': array([0.01345897, 0.01504493, 0.01311731, 0.01331544, 0.01314521]), 'test_r2': [array([ 0.04528692,  0.01262554, -0.04251866]), array([ 0.16627442,  0.31432872, -0.02894914]), array([ 0.19124317,  0.28325221, -0.10210713]), array([ 0.0038351 ,  0.19113272, -0.01730058]), array([-0.04192577, -0.13927065, -0.06989132])], 'test_rmse': [array([8.63072965e+00, 1.65452891e+02, 1.61410182e+04]), array([8.98434760e+00, 1.03055947e+02, 9.84050480e+04]), array([   8.08650552,  142.72721127, 7818.15151157]), array([8.31862601e+00, 1.77814007e+02, 3.24765580e+05]), array([8.20988937e+00, 1.38769107e+02, 2.36625715e+04])], 'test_mae': [array([   6.41525011,  104.13813349, 3260.28638564]), array([6.65743513e+00, 8.63655611e+01, 1.65052131e+04]), array([   6.12953366,  103.01235466, 2382.26738809]), array([6.48064541e+00, 1.15525104e+02, 4.23517761e+04]), array([   6.56138768,   94.3273939 , 6048.2080174 ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.004411683558919434, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 315, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([1.46578908, 1.39303041, 1.46271944, 1.45745468, 1.38421822]), 'score_time': array([0.02025986, 0.02045965, 0.02015543, 0.01912427, 0.01912665]), 'test_r2': [array([ 0.09204276,  0.11575548, -0.05646498]), array([ 0.11045441,  0.0387875 , -0.01678105]), array([ 0.16329836,  0.33075123, -0.0573184 ]), array([-0.07268974,  0.17393449, -0.03853577]), array([ 0.0918243 , -0.04056742, -0.02073021])], 'test_rmse': [array([7.16012836e+00, 1.76505971e+02, 3.28618456e+04]), array([8.48303637e+00, 1.31933438e+02, 9.41250462e+04]), array([8.31990352e+00, 1.07974933e+02, 9.55401021e+03]), array([8.40564893e+00, 1.70204755e+02, 1.28676527e+04]), array([9.87943186e+00, 1.46535881e+02, 3.27276682e+05])], 'test_mae': [array([5.66927286e+00, 1.12027146e+02, 7.59726115e+03]), array([6.08739724e+00, 1.03750538e+02, 1.20917418e+04]), array([   6.60010589,   86.22331566, 2225.51627804]), array([   6.49090533,  110.96897365, 2479.60695058]), array([7.38657462e+00, 9.91094303e+01, 4.66399575e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.001, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 1231, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.15769625, 0.15476775, 0.16383791, 0.15106678, 0.15297055]), 'score_time': array([0.01450896, 0.01332092, 0.01270795, 0.01426458, 0.01404738]), 'test_r2': [array([-0.03485763,  0.18316976, -0.03923454]), array([ 0.06548689,  0.09308896, -0.01419827]), array([ 0.11748672,  0.09727065, -0.01571676]), array([ 0.13858541,  0.14558312, -0.08223385]), array([ 0.11749402,  0.19143803, -0.02142403])], 'test_rmse': [array([9.03745063e+00, 1.17662502e+02, 2.52057220e+04]), array([7.74061668e+00, 1.59155124e+02, 9.36149534e+04]), array([8.45690785e+00, 1.48939281e+02, 3.20549790e+05]), array([8.71942371e+00, 1.81340973e+02, 2.28099661e+04]), array([8.41519744e+00, 1.23613063e+02, 5.83106713e+04])], 'test_mae': [array([   6.74722178,   89.59817732, 4897.715601  ]), array([5.79046789e+00, 1.00555931e+02, 1.10764814e+04]), array([6.59248149e+00, 1.03365819e+02, 3.98739749e+04]), array([   6.69259064,  114.52273551, 6287.74812247]), array([6.45000959e+00, 9.96939843e+01, 8.44481619e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.022102234996712964, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.04426738,  0.13765002, -0.04053331]), 'r2_stdev': array([0.10829069, 0.12761032, 0.02184614]), 'rmse_avg': array([8.50789834e+00, 1.46469526e+02, 9.38186190e+04]), 'rmse_stdev': array([7.69453200e-01, 1.99463272e+01, 1.20176851e+05]), 'mae_avg': array([6.48955919e+00, 1.01056549e+02, 1.41207596e+04]), 'mae_stdev': array([5.01935828e-01, 8.31367684e+00, 1.64567922e+04]), 'r2_avg_aggregate': 0.047128032544913295, 'r2_stdev_aggregate': 0.08591571651192144, 'rmse_avg_aggregate': 31324.532125537797, 'rmse_stdev_aggregate': 40065.855687615, 'mae_avg_aggregate': 4742.768582176578, 'mae_stdev_aggregate': 5488.5359349105565}
scaler
Filename: (solvent dP-solvent dD-solvent dH)_XGBR_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(solvent dP-solvent dD-solvent dH)_XGBR_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(solvent dP-solvent dD-solvent dH)_XGBR_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(solvent dP-solvent dD-solvent dH)_XGBR_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n04>
Subject: Job 288792: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c202n11> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:22:15 2025
Job was executed on host(s) <6*c205n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:22:16 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:22:16 2025
Terminated at Mon Jan 20 00:00:57 2025
Results reported at Mon Jan 20 00:00:57 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Robust Scaler"                                     --numerical_feats "solvent dP" "solvent dD" "solvent dH"                                


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   5790.10 sec.
    Max Memory :                                 6 GB
    Average Memory :                             5.90 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               10.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   2349 sec.
    Turnaround time :                            2322 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013456612486530316), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005512123344846013), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 106), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0024630957590985806), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 275), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 1255), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015403924955066295), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00813608923977813), ('regressor__regressor__estimator__max_depth', 245), ('regressor__regressor__estimator__n_estimators', 58), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015099916350958502), ('regressor__regressor__estimator__max_depth', 6218), ('regressor__regressor__estimator__n_estimators', 304), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.002531282562006796), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 226), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0021426345726198136), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 239), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013820615737320146), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004171590278725515), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 147), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013458063636711629), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 352), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0015013550292215), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 478), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0030159947298091325), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 170), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007527232203085589), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 60), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001980265498402468), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 365), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0026388431090447763), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 268), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013956537514775488), ('regressor__regressor__estimator__max_depth', 60), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007683400592983707), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 66), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0428839069891835), ('regressor__regressor__estimator__max_depth', 236), ('regressor__regressor__estimator__n_estimators', 102), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003582558694150677), ('regressor__regressor__estimator__max_depth', 12), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01882510336274879), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 220), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0013797385839861992), ('regressor__regressor__estimator__max_depth', 665), ('regressor__regressor__estimator__n_estimators', 426), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0074949468549438325), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 86), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011816134416955469), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 57), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004911331132262064), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 74), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0071702592481819654), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 72), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00612601297737937), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 90), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003069746158599124), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 198), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012498059725924913), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 536), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.03258035627116066), ('regressor__regressor__estimator__max_depth', 15), ('regressor__regressor__estimator__n_estimators', 179), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [-0.038 -0.089  0.231]±[0.193 0.218 0.335]
[array([-0.03785223, -0.08926316,  0.23143703]), array([8.82265217e+00, 1.63676154e+02, 8.84070314e+04]), array([6.31824468e+00, 1.07940279e+02, 1.31423698e+04])]
{6: {'fit_time': array([0.61451483, 0.82136703, 0.86027622, 0.76885486, 0.68686748]), 'score_time': array([0.01734853, 0.01810622, 0.02199388, 0.01815391, 0.01747441]), 'test_r2': [array([-0.50213031,  0.09722295, -0.00746753]), array([ 0.01787572, -0.24281663,  0.02565093]), array([-0.04194069, -0.02086802,  0.79713872]), array([ 0.02465728, -0.06728624, -0.27773791]), array([-0.05950884, -0.47178974,  0.92132788])], 'test_rmse': [array([7.93877740e+00, 1.35409376e+02, 1.72331757e+04]), array([8.67293453e+00, 1.52398251e+02, 3.29793340e+05]), array([9.00673921e+00, 1.87170566e+02, 1.08261247e+04]), array([9.51998556e+00, 1.72414324e+02, 1.46227548e+04]), array([   9.87071438,  195.65805756, 5499.40835261])], 'test_mae': [array([   5.5513879 ,   85.29918085, 3830.58292452]), array([5.79868929e+00, 9.70088478e+01, 5.31638014e+04]), array([   6.15305605,  121.04006649, 2227.1914218 ]), array([   6.78189187,  110.45106896, 3994.9296843 ]), array([   6.98712712,  127.82853356, 1911.260704  ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.1, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 1255, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.82568121, 0.77156687, 0.8083179 , 0.82738113, 0.78973055]), 'score_time': array([0.01902032, 0.01858854, 0.01924419, 0.02125072, 0.01947308]), 'test_r2': [array([ 0.1445803 , -0.02479527,  0.79484508]), array([-0.13493653, -0.12142644,  0.36655425]), array([ 0.04361805, -0.28545002,  0.20692127]), array([-0.52874765, -0.20931828, -0.00883909]), array([-0.33909891, -0.73589703,  0.8207857 ])], 'test_rmse': [array([   9.0784003 ,  183.6031801 , 3970.32687833]), array([9.52735774e+00, 1.71152648e+02, 2.20107566e+04]), array([9.29128110e+00, 1.70662398e+02, 8.33566358e+04]), array([7.96549553e+00, 1.70213160e+02, 3.23713957e+05]), array([  10.12218379,  190.60653741, 6262.29752699])], 'test_mae': [array([   6.57109706,  116.09415617, 1719.57382874]), array([   6.79582924,  109.80130466, 4986.33045412]), array([6.52963274e+00, 1.09125713e+02, 1.21617780e+04]), array([6.05677204e+00, 1.12237754e+02, 4.35830078e+04]), array([   6.42532019,  131.65316654, 1291.32680871])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.015099916350958502, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 6218, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 304, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.71355557, 0.74922848, 0.68329859, 0.72682691, 0.7028029 ]), 'score_time': array([0.01916862, 0.01823306, 0.02012277, 0.01876545, 0.01893568]), 'test_r2': [array([ 0.20550736, -0.50845492,  0.52359835]), array([0.01173035, 0.16705316, 0.24712894]), array([-0.56695545, -0.21579396,  0.045599  ]), array([-0.05879102,  0.20467916,  0.04117328]), array([-0.14250465, -0.04993251,  0.90997431])], 'test_rmse': [array([8.03588710e+00, 1.90802188e+02, 1.61883122e+04]), array([8.64991079e+00, 1.52251709e+02, 5.19630143e+04]), array([8.11235223e+00, 1.80044493e+02, 3.22286263e+05]), array([1.04949832e+01, 1.57283511e+02, 1.35093943e+04]), array([   9.58804418,  137.6170358 , 5845.25858797])], 'test_mae': [array([   6.02727344,  129.55578747, 3393.74499477]), array([5.80869597e+00, 1.04687660e+02, 8.08687948e+03]), array([5.79927143e+00, 1.22263600e+02, 4.60175914e+04]), array([   6.94260454,   92.86357739, 3226.44566048]), array([   6.7557863 ,   80.8277355 , 1384.49989821])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.013458063636711629, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 352, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.53954077, 0.56474829, 0.54099393, 0.49356461, 0.57143688]), 'score_time': array([0.01871943, 0.01912832, 0.01868939, 0.01730394, 0.01888204]), 'test_r2': [array([ 0.01552739,  0.04111214, -0.01952363]), array([ 0.15691693,  0.0086883 , -0.0228387 ]), array([ 0.05262727,  0.09310339, -0.04257102]), array([ 0.02150136,  0.12546727, -0.04039377]), array([-0.00819397,  0.01553418, -0.03877185])], 'test_rmse': [array([7.82429350e+00, 1.61147069e+02, 3.25183242e+05]), array([7.81460818e+00, 1.53699036e+02, 9.46020262e+04]), array([9.89159097e+00, 1.40794967e+02, 3.19710455e+04]), array([9.27372701e+00, 1.45339849e+02, 1.31848611e+04]), array([7.88161188e+00, 1.73449180e+02, 1.19655239e+04])], 'test_mae': [array([6.22720556e+00, 1.13652213e+02, 4.50002379e+04]), array([6.06022285e+00, 1.11031917e+02, 1.41366397e+04]), array([   6.96025354,   92.01204874, 6461.39137806]), array([   6.81627785,   99.44262689, 2598.81591269]), array([   6.20587177,  107.00899982, 2311.74131483])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0026388431090447763, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 268, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([0.48003864, 0.51875305, 0.59232855, 0.4944334 , 0.48530197]), 'score_time': array([0.01936388, 0.01872468, 0.02182674, 0.01885843, 0.01865554]), 'test_r2': [array([-0.00854814,  0.05880025,  0.46355239]), array([ 0.17451254, -0.2617704 ,  0.0878501 ]), array([ 0.06427738,  0.11718224, -0.05934262]), array([-0.24918244, -0.04024086, -0.00238627]), array([-0.07687901, -0.57387282,  0.53018427])], 'test_rmse': [array([8.87073067e+00, 1.61537856e+02, 1.15785097e+04]), array([8.93984982e+00, 1.39799380e+02, 9.26517296e+04]), array([   8.69812154,  158.40144194, 7664.96892032]), array([9.31534446e+00, 2.01648171e+02, 3.22376150e+05]), array([8.34646106e+00, 1.63103829e+02, 1.56803547e+04])], 'test_mae': [array([   6.45575751,  104.32566841, 3296.21998765]), array([6.20249825e+00, 9.42792355e+01, 1.42869932e+04]), array([   5.93981345,  106.78141016, 2180.72630741]), array([6.62393207e+00, 1.26444815e+02, 4.13012652e+04]), array([   5.90116525,  108.63504785, 3749.3990706 ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.01882510336274879, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 220, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([0.80248857, 0.94199848, 0.97573042, 0.89697552, 0.97005296]), 'score_time': array([0.01921725, 0.02054453, 0.02192497, 0.01947689, 0.02156782]), 'test_r2': [array([ 0.00217384,  0.02620358, -0.0564739 ]), array([ 0.07761233, -0.01778938, -0.01678086]), array([ 0.08931189,  0.08815506, -0.05738864]), array([ 0.13563588,  0.09723554, -0.03858087]), array([ 0.10755056,  0.01670713, -0.02073013])], 'test_rmse': [array([7.50612084e+00, 1.85228282e+02, 3.28619844e+04]), array([8.63821419e+00, 1.35760720e+02, 9.41250374e+04]), array([8.67996180e+00, 1.26034560e+02, 9.55432754e+03]), array([7.54540489e+00, 1.77931021e+02, 1.28679321e+04]), array([9.79352057e+00, 1.42446017e+02, 3.27276670e+05])], 'test_mae': [array([5.86467928e+00, 1.16280786e+02, 7.59798399e+03]), array([6.38110512e+00, 1.00611552e+02, 1.20922577e+04]), array([   6.8482413 ,   92.60199643, 2225.95563083]), array([   5.64484326,  119.11274659, 2480.15626721]), array([7.30645482e+00, 1.00130773e+02, 4.66403814e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0013797385839861992, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 665, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 426, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.54490924, 0.51686764, 0.52314997, 0.41362643, 0.52236438]), 'score_time': array([0.01968241, 0.02062225, 0.01976824, 0.01830411, 0.01907039]), 'test_r2': [array([-0.03958036, -0.1596462 ,  0.54870601]), array([0.0690683 , 0.04570551, 0.4442757 ]), array([-0.20552435, -0.00043347, -0.01816739]), array([ 0.23297795, -0.01905944,  0.61121809]), array([-0.00996822, -0.30041877,  0.44180593])], 'test_rmse': [array([9.05804908e+00, 1.40195777e+02, 1.66100955e+04]), array([7.72576995e+00, 1.63259886e+02, 6.92968490e+04]), array([9.88414178e+00, 1.56792244e+02, 3.20936254e+05]), array([8.22783541e+00, 1.98043591e+02, 1.36715295e+04]), array([9.00242137e+00, 1.56765080e+02, 4.31059891e+04])], 'test_mae': [array([   6.16680229,   95.86442286, 3480.37915081]), array([5.24947038e+00, 9.71805772e+01, 8.28346895e+03]), array([7.27959141e+00, 1.12685000e+02, 4.04163582e+04]), array([   5.8751871 ,  118.28966034, 4227.4806189 ]), array([6.14475567e+00, 1.10800102e+02, 6.23614631e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.03258035627116066, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 15, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 179, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([-0.03785223, -0.08926316,  0.23143703]), 'r2_stdev': array([0.19339919, 0.21754795, 0.33494229]), 'rmse_avg': array([8.82265217e+00, 1.63676154e+02, 8.84070314e+04]), 'rmse_stdev': array([7.93579037e-01, 1.99639876e+01, 1.20902117e+05]), 'mae_avg': array([6.31824468e+00, 1.07940279e+02, 1.31423698e+04]), 'mae_stdev': array([4.95295862e-01, 1.23747505e+01, 1.64610069e+04]), 'r2_avg_aggregate': 0.03477388161068528, 'r2_stdev_aggregate': 0.24862981049370472, 'rmse_avg_aggregate': 29526.510084762496, 'rmse_stdev_aggregate': 40307.62479809497, 'mae_avg_aggregate': 4418.876105643042, 'mae_stdev_aggregate': 5491.292307990908}
scaler
Filename: (concentration-temperature)_XGBR_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(concentration-temperature)_XGBR_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(concentration-temperature)_XGBR_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(concentration-temperature)_XGBR_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n11>
Subject: Job 288764: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c023n02> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:13:47 2025
Job was executed on host(s) <6*c201n11>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:13:49 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:13:49 2025
Terminated at Mon Jan 20 00:01:14 2025
Results reported at Mon Jan 20 00:01:14 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)'                                     --columns_to_impute "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   7532.00 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.86 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   2872 sec.
    Turnaround time :                            2847 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.010771244154543294), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 92), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.02418366439106603), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004623397965481836), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 217), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0014362615663804064), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 841), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.021723169447991613), ('regressor__regressor__estimator__max_depth', 1230), ('regressor__regressor__estimator__n_estimators', 65), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0013793061629361258), ('regressor__regressor__estimator__max_depth', 39), ('regressor__regressor__estimator__n_estimators', 541), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0068378234496876454), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 213), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.014094421500706271), ('regressor__regressor__estimator__max_depth', 6320), ('regressor__regressor__estimator__n_estimators', 68), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0119734362751541), ('regressor__regressor__estimator__max_depth', 479), ('regressor__regressor__estimator__n_estimators', 75), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0057237363900858864), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 170), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 1203), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0041057381781667195), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 228), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.016731073421897624), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 54), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00264728144855041), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 418), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003611067913289146), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 295), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008588040744134195), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 109), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.016332623629487914), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 79), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003751258046914991), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 200), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009234845332661687), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 122), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01256824246284239), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 79), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.02058024254871742), ('regressor__regressor__estimator__max_depth', 42), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0015192537900035193), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 742), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009186249431289806), ('regressor__regressor__estimator__max_depth', 20), ('regressor__regressor__estimator__n_estimators', 102), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0017567739396095329), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 857), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005065027735214019), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 209), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0011135992589050771), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 958), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.018338403157469825), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0019460785558143975), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 521), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006541263660270872), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 192), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0011466980834638583), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 863), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00947542001434709), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 105), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013373010338044784), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 90), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015448497156982675), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 64), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008037102732229682), ('regressor__regressor__estimator__max_depth', 11), ('regressor__regressor__estimator__n_estimators', 122), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004124210733557504), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 303), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [ 0.113  0.164 -0.041]±[0.116 0.086 0.022]
[array([ 0.11300236,  0.16420831, -0.04051774]), array([8.18939276e+00, 1.44640724e+02, 9.38185481e+04]), array([5.76287629e+00, 9.35491407e+01, 1.41203875e+04])]
{6: {'fit_time': array([0.23269773, 0.22078705, 0.23530626, 0.22137856, 0.22709465]), 'score_time': array([0.02671099, 0.02744102, 0.02642941, 0.02750969, 0.02659416]), 'test_r2': [array([-0.11909802,  0.2843513 , -0.05816546]), array([ 0.14871687, -0.01318716, -0.02611787]), array([ 0.2222199 ,  0.24176907, -0.0278237 ]), array([ 0.20836696,  0.11987154, -0.0749359 ]), array([ 0.03633992,  0.08115507, -0.06104872])], 'test_rmse': [array([6.85226079e+00, 1.20561439e+02, 1.76614590e+04]), array([8.07457844e+00, 1.37600906e+02, 3.38441195e+05]), array([7.78170032e+00, 1.61307107e+02, 2.43687225e+04]), array([8.57668820e+00, 1.56569052e+02, 1.34121868e+04]), array([9.41365389e+00, 1.54595185e+02, 2.01963649e+04])], 'test_mae': [array([   4.78715008,   83.53345056, 4141.42296203]), array([5.72744597e+00, 9.21229766e+01, 5.39923662e+04]), array([   5.3120376 ,   99.12280255, 4009.70909757]), array([   5.93569659,   91.99758199, 3543.10513517]), array([   6.666325  ,  100.9279764 , 4844.25398239])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.021723169447991613, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 1230, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 65, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.4444859 , 0.43329954, 0.4453547 , 0.4748199 , 0.33859301]), 'score_time': array([0.02780414, 0.02786183, 0.02716327, 0.02906823, 0.02627683]), 'test_r2': [array([ 0.26174763,  0.1364564 , -0.08308563]), array([ 0.11671584,  0.16709743, -0.0482734 ]), array([ 0.03607184,  0.18796108, -0.02069427]), array([-0.23423354,  0.23981461, -0.02029998]), array([ 0.20336595,  0.06306861, -0.02875549])], 'test_rmse': [array([8.43377731e+00, 1.68540306e+02, 9.12255917e+03]), array([8.40498431e+00, 1.47501123e+02, 2.83150635e+04]), array([9.32786492e+00, 1.35643400e+02, 9.45648777e+04]), array([7.15720683e+00, 1.34953012e+02, 3.25547536e+05]), array([7.80723629e+00, 1.40032779e+02, 1.50038753e+04])], 'test_mae': [array([   5.71822863,  106.96514262, 2530.86129972]), array([5.88672440e+00, 9.59358627e+01, 6.07501145e+03]), array([6.67395544e+00, 8.48682704e+01, 1.34646363e+04]), array([5.26839895e+00, 8.14854172e+01, 4.59190008e+04]), array([   5.15655161,   97.27810333, 2511.99699092])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0068378234496876454, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 213, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([1.8502233 , 1.72025347, 1.73443246, 1.7693398 , 1.81508255]), 'score_time': array([0.03503442, 0.0370121 , 0.03521943, 0.03732753, 0.03608298]), 'test_r2': [array([ 0.11034916,  0.05745674, -0.03938761]), array([ 0.08492529,  0.15594971, -0.03085484]), array([-0.05670514,  0.1645585 , -0.0215163 ]), array([ 0.19936075,  0.26770979, -0.05133356]), array([ 0.06039338,  0.18341266, -0.03872628])], 'test_rmse': [array([8.50351895e+00, 1.50823088e+02, 2.39113287e+04]), array([8.32342699e+00, 1.53263132e+02, 6.08040898e+04]), array([6.66185819e+00, 1.49247778e+02, 3.33425646e+05]), array([9.12630675e+00, 1.50922374e+02, 1.41460790e+04]), array([8.69508981e+00, 1.21364823e+02, 1.98550536e+04])], 'test_mae': [array([   6.11412014,  101.73093199, 4654.83470646]), array([5.73088221e+00, 9.42340290e+01, 1.05195071e+04]), array([5.06628139e+00, 1.01625314e+02, 4.83900510e+04]), array([   6.28208224,   92.86448385, 3126.10812625]), array([   5.99271193,   79.11929608, 3833.93754215])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.001, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 1203, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.28128433, 0.26181865, 0.24865127, 0.24233341, 0.24792671]), 'score_time': array([0.02618098, 0.0268352 , 0.02689719, 0.02843094, 0.02800393]), 'test_r2': [array([ 0.16374392,  0.28159502, -0.01952403]), array([ 0.21648898,  0.01340908, -0.02283854]), array([ 0.16664576,  0.34101371, -0.04256787]), array([-0.02133125,  0.11179606, -0.04036417]), array([ 0.14193214,  0.12701638, -0.03873675])], 'test_rmse': [array([7.21128998e+00, 1.39483606e+02, 3.25183306e+05]), array([7.53346159e+00, 1.53332630e+02, 9.46020191e+04]), array([9.27727720e+00, 1.20018012e+02, 3.19709973e+04]), array([9.47452629e+00, 1.46471463e+02, 1.31846735e+04]), array([7.27116190e+00, 1.63333390e+02, 1.19653217e+04])], 'test_mae': [array([5.21628971e+00, 9.63784054e+01, 4.49996583e+04]), array([5.19597252e+00, 1.02873483e+02, 1.41354090e+04]), array([   6.46965358,   76.71655043, 6460.26859101]), array([   6.48911723,   94.57117821, 2598.01516791]), array([   5.56246504,   96.46713332, 2311.14262657])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.016332623629487914, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 79, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([1.32651281, 1.25823975, 1.2615304 , 1.31451654, 1.3163712 ]), 'score_time': array([0.03097939, 0.03221178, 0.03139973, 0.03167224, 0.03119588]), 'test_r2': [array([ 0.20895621,  0.15961078, -0.04249835]), array([ 0.25439452,  0.25413823, -0.02894807]), array([ 0.21902592,  0.25023386, -0.10188888]), array([ 0.0477067 ,  0.03905212, -0.01730047]), array([ 0.03414006,  0.16500859, -0.06986507])], 'test_rmse': [array([7.85617846e+00, 1.52641860e+02, 1.61408610e+04]), array([8.49629392e+00, 1.07484107e+02, 9.84049969e+04]), array([   7.94639627,  145.97769835, 7817.37736038]), array([8.13338531e+00, 1.93810477e+02, 3.24765562e+05]), array([7.90452888e+00, 1.18801068e+02, 2.36622813e+04])], 'test_mae': [array([   5.42369207,   90.92328224, 3259.17922012]), array([5.77520331e+00, 7.89394148e+01, 1.65039915e+04]), array([   5.66613776,   95.82877884, 2381.00071833]), array([5.54761273e+00, 1.16361043e+02, 4.23498933e+04]), array([5.65954843e+00, 8.09795732e+01, 6.04723124e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0017567739396095329, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 857, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([0.44497514, 0.31666088, 0.44057417, 0.42262244, 0.44942713]), 'score_time': array([0.02787828, 0.02582836, 0.02713466, 0.02808928, 0.02898073]), 'test_r2': [array([ 0.20232804,  0.07521743, -0.05646407]), array([ 0.11398607,  0.09125561, -0.01678061]), array([ 0.19475403,  0.32613937, -0.05728468]), array([-0.05261458,  0.18200298, -0.03853021]), array([ 0.13747863,  0.13151976, -0.0207302 ])], 'test_rmse': [array([6.71120142e+00, 1.80506577e+02, 3.28618315e+04]), array([8.46618003e+00, 1.28282096e+02, 9.41250257e+04]), array([8.16201257e+00, 1.08346327e+02, 9.55385787e+03]), array([8.32662246e+00, 1.69371489e+02, 1.28676182e+04]), array([9.62790868e+00, 1.33871718e+02, 3.27276680e+05])], 'test_mae': [array([5.09023467e+00, 1.11089054e+02, 7.59718623e+03]), array([5.63938240e+00, 9.22273610e+01, 1.20911961e+04]), array([   5.91142713,   77.74895005, 2224.73292838]), array([   5.63204388,  105.57750259, 2479.37831331]), array([7.02564985e+00, 8.84983400e+01, 4.66401453e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.006541263660270872, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 192, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.57814789, 0.58934402, 0.45415902, 0.56452513, 0.59920692]), 'score_time': array([0.02976465, 0.02949905, 0.02666807, 0.0294683 , 0.02867341]), 'test_r2': [array([ 0.00998556,  0.12454652, -0.03922224]), array([-0.01108863,  0.17261637, -0.01419775]), array([ 0.1993666 ,  0.22399719, -0.01571674]), array([ 0.25194373,  0.10544949, -0.08222115]), array([ 0.19870356,  0.23422708, -0.02142217])], 'test_rmse': [array([8.83947352e+00, 1.21811619e+02, 2.52055728e+04]), array([8.05151258e+00, 1.52016855e+02, 9.36149297e+04]), array([8.05504231e+00, 1.38089964e+02, 3.20549786e+05]), array([8.12547583e+00, 1.85551072e+02, 2.28098322e+04]), array([8.01866535e+00, 1.20297808e+02, 5.83106181e+04])], 'test_mae': [array([   6.13474323,   87.27112341, 4897.21154051]), array([5.59974041e+00, 8.99947927e+01, 1.10762906e+04]), array([5.64362240e+00, 9.19962853e+01, 3.98738679e+04]), array([5.90889980e+00, 1.11226448e+02, 6.28719937e+03]), array([5.79064187e+00, 8.47395850e+01, 8.44376015e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.004124210733557504, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 303, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.11300236,  0.16420831, -0.04051774]), 'r2_stdev': array([0.11556578, 0.08587744, 0.02180898]), 'rmse_avg': array([8.18939276e+00, 1.44640724e+02, 9.38185481e+04]), 'rmse_stdev': array([7.57262073e-01, 2.05046738e+01, 1.20176899e+05]), 'mae_avg': array([5.76287629e+00, 9.35491407e+01, 1.41203875e+04]), 'mae_stdev': array([4.94707369e-01, 9.88161090e+00, 1.64567830e+04]), 'r2_avg_aggregate': 0.07889764479568519, 'r2_stdev_aggregate': 0.07441740135900494, 'rmse_avg_aggregate': 31323.792752083726, 'rmse_stdev_aggregate': 40066.053749502724, 'mae_avg_aggregate': 4739.899822917799, 'mae_stdev_aggregate': 5489.053105897957}
scaler
Filename: (PDI-Mw)_XGBR_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw)_XGBR_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw)_XGBR_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw)_XGBR_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n08>
Subject: Job 288769: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c023n02> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:15:14 2025
Job was executed on host(s) <6*c201n08>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:15:16 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:15:16 2025
Terminated at Mon Jan 20 00:01:25 2025
Results reported at Mon Jan 20 00:01:25 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)'                                     --columns_to_impute "PDI"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   7448.43 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.01 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   2795 sec.
    Turnaround time :                            2771 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.020986173674050316), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005431842453090964), ('regressor__regressor__estimator__max_depth', 607), ('regressor__regressor__estimator__n_estimators', 238), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008356178714436386), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 110), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009786714688791854), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 104), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 1343), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0013013010447447597), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 413), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013154767544547556), ('regressor__regressor__estimator__max_depth', 1459), ('regressor__regressor__estimator__n_estimators', 104), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 1762), ('regressor__regressor__estimator__n_estimators', 871), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0026965358040236106), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 298), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0054713172878645315), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 155), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0081408164976092), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 118), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0025668564013919554), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 349), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0140331547887891), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 63), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011328190409774399), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 70), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01092775740124046), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 95), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004212784986144754), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 183), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005089413680957006), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 189), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01353406765664696), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008804711113445059), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 105), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013978993462480093), ('regressor__regressor__estimator__max_depth', 653), ('regressor__regressor__estimator__n_estimators', 60), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009288471733377735), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 87), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.02174133092428345), ('regressor__regressor__estimator__max_depth', 8535), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 991), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0019352329992330373), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 830), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00548834409290443), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 209), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01972076814930671), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013761674764803259), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 78), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.018013285377851355), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0020505745048733167), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 656), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015051240249876483), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005506845990697998), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 165), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012925766972628934), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 88), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004727306731050018), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 177), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0013416768508031855), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 608), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012978247833591283), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 98), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [ 0.034  0.064 -0.041]±[0.118 0.061 0.022]
[array([ 0.03411037,  0.06432633, -0.0405739 ]), array([8.54531387e+00, 1.53034598e+02, 9.38188953e+04]), array([6.45216716e+00, 1.02628904e+02, 1.41217045e+04])]
{6: {'fit_time': array([0.37431741, 0.26579714, 0.35099626, 0.36081052, 0.35619497]), 'score_time': array([0.01728439, 0.01293135, 0.01415753, 0.02169824, 0.01394582]), 'test_r2': [array([-0.17329831,  0.10028264, -0.0582249 ]), array([ 0.01915661, -0.13231922, -0.02611814]), array([ 0.05186793,  0.12257011, -0.02783675]), array([ 0.17776217,  0.06596889, -0.0750185 ]), array([-0.01433133,  0.02034957, -0.06112797])], 'test_rmse': [array([7.01623362e+00, 1.35179717e+02, 1.76619550e+04]), array([8.66727705e+00, 1.45465798e+02, 3.38441238e+05]), array([8.59172775e+00, 1.73523767e+02, 2.43688772e+04]), array([8.74090484e+00, 1.61292272e+02, 1.34127020e+04]), array([9.65797802e+00, 1.59628494e+02, 2.01971191e+04])], 'test_mae': [array([   5.36071385,   97.65036908, 4142.89720007]), array([6.57989133e+00, 1.01437223e+02, 5.39952681e+04]), array([   6.2808524 ,  107.39845268, 4010.35123855]), array([   6.64082539,  103.11555336, 3543.17677708]), array([   7.2204033 ,  106.10314262, 4847.58721517])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.005431842453090964, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 607, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 238, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.20998621, 0.20432687, 0.20578671, 0.20575714, 0.20995927]), 'score_time': array([0.01307726, 0.01342463, 0.01309443, 0.01317263, 0.0129714 ]), 'test_r2': [array([ 0.18265237,  0.03904917, -0.08354123]), array([ 0.01130812,  0.05981285, -0.04831239]), array([-0.00401157,  0.16290799, -0.02069531]), array([-0.26219163,  0.04017101, -0.02030007]), array([ 0.13958353, -0.01629599, -0.02888596])], 'test_rmse': [array([8.87407528e+00, 1.77792005e+02, 9.12447770e+03]), array([8.89236273e+00, 1.56713129e+02, 2.83155900e+04]), array([9.51983176e+00, 1.37719946e+02, 9.45649259e+04]), array([7.23781610e+00, 1.51642088e+02, 3.25547551e+05]), array([8.11376168e+00, 1.45843110e+02, 1.50048267e+04])], 'test_mae': [array([   6.42292718,  113.10781256, 2533.59240076]), array([   6.82778464,  103.61860071, 6078.68518564]), array([7.34775118e+00, 9.14223082e+01, 1.34653619e+04]), array([5.78175524e+00, 9.99568089e+01, 4.59197271e+04]), array([   6.04866811,  105.29977295, 2514.14976239])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.013154767544547556, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 1459, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 104, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.19902253, 0.19561911, 0.12075591, 0.19708776, 0.19723463]), 'score_time': array([0.013026  , 0.01309395, 0.01157999, 0.01330042, 0.01305532]), 'test_r2': [array([ 0.01417674, -0.00168343, -0.03941126]), array([ 0.06680166,  0.11493815, -0.03085698]), array([-0.32308215,  0.0927188 , -0.02151636]), array([ 0.16054421,  0.10703391, -0.05134984]), array([ 0.01717207,  0.05803731, -0.03873772])], 'test_rmse': [array([8.95134752e+00, 1.55482826e+02, 2.39116007e+04]), array([8.40544822e+00, 1.56942420e+02, 6.08041530e+04]), array([7.45438602e+00, 1.55532376e+02, 3.33425656e+05]), array([9.34491893e+00, 1.66659278e+02, 1.41461885e+04]), array([8.89282574e+00, 1.30349196e+02, 1.98551629e+04])], 'test_mae': [array([   6.75805644,  101.64650637, 4656.13098991]), array([6.17675415e+00, 1.04878008e+02, 1.05198922e+04]), array([5.89663210e+00, 1.09020782e+02, 4.83905660e+04]), array([   6.88853725,  107.71111444, 3126.33365487]), array([   6.64990381,   90.74548533, 3834.31492259])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.01092775740124046, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 95, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.22962952, 0.20046973, 0.21060157, 0.2043817 , 0.20427632]), 'score_time': array([0.01310015, 0.0132587 , 0.01299   , 0.01307464, 0.01303387]), 'test_r2': [array([ 0.00825537,  0.09121779, -0.01952413]), array([ 0.15471402,  0.03360474, -0.02284035]), array([ 0.03852093,  0.12839353, -0.04258462]), array([-0.04545824,  0.06412844, -0.04042157]), array([ 0.08281274,  0.05319959, -0.0387749 ])], 'test_rmse': [array([7.85313824e+00, 1.56880298e+02, 3.25183322e+05]), array([7.82481101e+00, 1.51755145e+02, 9.46021027e+04]), array([9.96496153e+00, 1.38028403e+02, 3.19712540e+04]), array([9.58578182e+00, 1.50350472e+02, 1.31850373e+04]), array([7.51747521e+00, 1.70098760e+02, 1.19655415e+04])], 'test_mae': [array([6.18955872e+00, 1.08237168e+02, 4.50002898e+04]), array([5.99976271e+00, 1.03248581e+02, 1.41367065e+04]), array([   7.16859223,   91.87972836, 6461.45675815]), array([   7.0886106 ,  102.84956262, 2598.86454989]), array([   6.14549728,  109.12819839, 2311.78364074])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.008804711113445059, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 105, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([1.00899267, 0.94809604, 0.92863369, 1.06862783, 0.92899013]), 'score_time': array([0.01848435, 0.01725411, 0.02088094, 0.023525  , 0.01755738]), 'test_r2': [array([ 0.0935714 ,  0.16139598, -0.04254807]), array([ 0.14770163,  0.11660883, -0.02895066]), array([ 0.12856379,  0.14144051, -0.10246529]), array([ 0.02314109, -0.0841328 , -0.01730071]), array([-0.04312271,  0.06038403, -0.06994656])], 'test_rmse': [array([8.40964913e+00, 1.52479649e+02, 1.61412458e+04]), array([9.08386790e+00, 1.16974610e+02, 9.84051208e+04]), array([   8.39401438,  156.20998727, 7819.42175157]), array([8.23762284e+00, 2.05858392e+02, 3.24765600e+05]), array([8.21460365e+00, 1.26024370e+02, 2.36631824e+04])], 'test_mae': [array([   6.26734397,  101.22642037, 3260.82649484]), array([6.70039981e+00, 8.82117077e+01, 1.65062991e+04]), array([   6.22564774,  103.06590186, 2383.86010768]), array([6.26956023e+00, 1.28522071e+02, 4.23523288e+04]), array([   6.22884136,   88.3074691 , 6050.27881589])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0019352329992330373, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 830, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([0.81524181, 0.85650325, 0.90534067, 0.82674932, 0.79814887]), 'score_time': array([0.01617646, 0.01946282, 0.02116871, 0.02151513, 0.01576686]), 'test_r2': [array([ 0.09118762,  0.00041733, -0.0564768 ]), array([ 0.03143573,  0.04175094, -0.0167816 ]), array([ 0.11892021,  0.08867727, -0.05739543]), array([-0.10447796,  0.07816241, -0.03858172]), array([ 0.12838299,  0.12204595, -0.02073029])], 'test_rmse': [array([7.16349937e+00, 1.87664692e+02, 3.28620295e+04]), array([8.85179701e+00, 1.31729904e+02, 9.41250715e+04]), array([8.53769428e+00, 1.25998465e+02, 9.55435821e+03]), array([8.52928665e+00, 1.79800813e+02, 1.28679373e+04]), array([9.67854064e+00, 1.34599907e+02, 3.27276694e+05])], 'test_mae': [array([5.67022558e+00, 1.19148598e+02, 7.59800386e+03]), array([6.30319881e+00, 9.72099317e+01, 1.20922791e+04]), array([   6.6648051 ,   93.18824462, 2225.98186463]), array([   6.39984648,  116.07472972, 2480.15708111]), array([7.35637257e+00, 9.08408013e+01, 4.66403924e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0020505745048733167, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 656, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.20640182, 0.20454454, 0.20536995, 0.20608974, 0.20310831]), 'score_time': array([0.01335883, 0.01235914, 0.01361156, 0.0138483 , 0.01324153]), 'test_r2': [array([-0.10019271,  0.02359365, -0.03924595]), array([-0.00481956,  0.08607037, -0.01419866]), array([ 0.16131402,  0.07237028, -0.01571678]), array([ 0.17688892,  0.04506128, -0.08224412]), array([ 0.04241324,  0.09348979, -0.02142485])], 'test_rmse': [array([9.31837141e+00, 1.28643390e+02, 2.52058604e+04]), array([8.02651279e+00, 1.59769789e+02, 9.36149715e+04]), array([8.24424072e+00, 1.50979435e+02, 3.20549792e+05]), array([8.52336119e+00, 1.91711774e+02, 2.28100742e+04]), array([8.76586036e+00, 1.30886261e+02, 5.83106947e+04])], 'test_mae': [array([   6.9405466 ,   94.52558726, 4898.23719817]), array([6.04805339e+00, 1.00589225e+02, 1.10766255e+04]), array([6.27928668e+00, 1.02716489e+02, 3.98741079e+04]), array([   6.60485271,  115.85801587, 6288.05845824]), array([6.39339154e+00, 9.40712724e+01, 8.44508472e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.012978247833591283, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 98, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.03411037,  0.06432633, -0.0405739 ]), 'r2_stdev': array([0.11770954, 0.06106736, 0.02189316]), 'rmse_avg': array([8.54531387e+00, 1.53034598e+02, 9.38188953e+04]), 'rmse_stdev': array([7.33338997e-01, 1.99942445e+01, 1.20176692e+05]), 'mae_avg': array([6.45216716e+00, 1.02628904e+02, 1.41217045e+04]), 'mae_stdev': array([4.66001328e-01, 8.99252654e+00, 1.64566896e+04]), 'r2_avg_aggregate': 0.01928760266513962, 'r2_stdev_aggregate': 0.06689001773007441, 'rmse_avg_aggregate': 31326.82507066385, 'rmse_stdev_aggregate': 40065.806461703534, 'mae_avg_aggregate': 4743.595186614489, 'mae_stdev_aggregate': 5488.716027406659}
scaler
Filename: (polymer dP-polymer dD-polymer dH)_XGBR_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH)_XGBR_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH)_XGBR_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH)_XGBR_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c202n11>
Subject: Job 288797: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c023n02> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:23:15 2025
Job was executed on host(s) <6*c202n11>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:23:16 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:23:16 2025
Terminated at Mon Jan 20 00:02:33 2025
Results reported at Mon Jan 20 00:02:33 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Robust Scaler"                                     --numerical_feats "polymer dP" "polymer dD" "polymer dH"                                


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   5788.00 sec.
    Max Memory :                                 6 GB
    Average Memory :                             5.89 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               10.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   2361 sec.
    Turnaround time :                            2358 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005393671027067626), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 171), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0026201802530608806), ('regressor__regressor__estimator__max_depth', 11), ('regressor__regressor__estimator__n_estimators', 422), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008957759464044292), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 93), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013210417424791284), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 63), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0050181101879527195), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 208), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0021099959414176733), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 254), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0038083522291435068), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 232), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0021020617023405747), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 498), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012353577485375826), ('regressor__regressor__estimator__max_depth', 8495), ('regressor__regressor__estimator__n_estimators', 77), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001116274908576206), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 919), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006833283099404258), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 133), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0017790300773117824), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 458), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015898267180160238), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0169084032232196), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0018191419802353677), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 529), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0013109751823677962), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 613), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0015791324911340764), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 488), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005968804885567347), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 120), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0010832543410341116), ('regressor__regressor__estimator__max_depth', 129), ('regressor__regressor__estimator__n_estimators', 970), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013978993462480093), ('regressor__regressor__estimator__max_depth', 653), ('regressor__regressor__estimator__n_estimators', 60), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003501440624553471), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 223), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012517298490641956), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 76), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007235473548621716), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 92), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003656768200577137), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 339), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008954334070102401), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 81), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01682141998642821), ('regressor__regressor__estimator__max_depth', 612), ('regressor__regressor__estimator__n_estimators', 51), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008898000381518846), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 85), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0016180037329989402), ('regressor__regressor__estimator__max_depth', 6472), ('regressor__regressor__estimator__n_estimators', 559), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.014647953100562968), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 75), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013920820468553011), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 57), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0110895152294586), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 75), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0012584358961599594), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 699), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0077902812025611844), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 89), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00859751981677737), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 90), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003987707762346225), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 244), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [ 0.062  0.2   -0.041]±[0.109 0.094 0.022]
[array([ 0.06161016,  0.20018429, -0.04056087]), array([8.42627289e+00, 1.41330392e+02, 9.38188139e+04]), array([6.17377255e+00, 9.53358773e+01, 1.41214803e+04])]
{6: {'fit_time': array([0.92710638, 0.94482827, 0.96347308, 0.95278955, 0.95403624]), 'score_time': array([0.01754928, 0.01829362, 0.0179472 , 0.01791167, 0.01734972]), 'test_r2': [array([-0.15844176,  0.28767661, -0.058211  ]), array([ 0.03735   ,  0.0281403 , -0.02611809]), array([ 0.13032429,  0.33137947, -0.02783324]), array([ 0.15766062,  0.17349952, -0.07499898]), array([-0.00548601,  0.14585775, -0.06111344])], 'test_rmse': [array([6.97167159e+00, 1.20281015e+02, 1.76618390e+04]), array([8.58651737e+00, 1.34765349e+02, 3.38441230e+05]), array([8.22857741e+00, 1.51475574e+02, 2.43688356e+04]), array([8.84710577e+00, 1.51724056e+02, 1.34125803e+04]), array([9.61577535e+00, 1.49052737e+02, 2.01969808e+04])], 'test_mae': [array([   5.20051333,   89.91982135, 4142.58285857]), array([6.49737683e+00, 9.03623481e+01, 5.39949646e+04]), array([   5.62247695,   99.10002818, 4010.19585927]), array([   6.4943123 ,   94.56714028, 3543.14093008]), array([   6.99658703,   99.67675242, 4847.18496823])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0026201802530608806, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 11, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 422, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([1.85277414, 1.84568548, 1.8013041 , 1.80891228, 1.81758308]), 'score_time': array([0.0224483 , 0.02238417, 0.02364087, 0.02409101, 0.02390456]), 'test_r2': [array([ 0.17961156,  0.20057083, -0.08349421]), array([ 0.07278523,  0.24116887, -0.04830856]), array([ 0.00550245,  0.13092026, -0.02069515]), array([-0.23066971,  0.23226888, -0.02030006]), array([ 0.17094028,  0.12030628, -0.02887022])], 'test_rmse': [array([8.89056725e+00, 1.62162951e+02, 9.12427972e+03]), array([8.61146135e+00, 1.40789672e+02, 2.83155383e+04]), array([9.47461939e+00, 1.40326618e+02, 9.45649186e+04]), array([7.14686620e+00, 1.35621142e+02, 3.25547548e+05]), array([7.96454185e+00, 1.35688037e+02, 1.50047119e+04])], 'test_mae': [array([   6.14335983,  105.07017846, 2533.38013485]), array([   6.4848699 ,   96.46834469, 6078.47924856]), array([7.15757396e+00, 9.21005627e+01, 1.34653095e+04]), array([5.66587126e+00, 8.71540547e+01, 4.59196454e+04]), array([   5.63997873,   98.74921233, 2513.97628683])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.001116274908576206, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 919, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([1.1154449 , 1.14142251, 1.06410623, 1.11844325, 1.09634924]), 'score_time': array([0.01862121, 0.01854563, 0.01805449, 0.01873684, 0.02057862]), 'test_r2': [array([ 0.08234343,  0.15748765, -0.03940627]), array([ 0.03448619,  0.20294752, -0.03085632]), array([-0.12215409,  0.19992109, -0.02151634]), array([ 0.18337959,  0.25473416, -0.05134577]), array([ 0.02344375,  0.24302665, -0.03873479])], 'test_rmse': [array([8.63632500e+00, 1.42595336e+02, 2.39115434e+04]), array([8.54974464e+00, 1.48935077e+02, 6.08041337e+04]), array([6.86506607e+00, 1.46054944e+02, 3.33425653e+05]), array([9.21693954e+00, 1.52253617e+02, 1.41461611e+04]), array([8.86440661e+00, 1.16850830e+02, 1.98551348e+04])], 'test_mae': [array([   6.41231053,   97.53846563, 4655.96340597]), array([6.18096306e+00, 9.60187022e+01, 1.05197787e+04]), array([5.56775801e+00, 1.01546648e+02, 4.83904382e+04]), array([   6.42873376,   99.51555199, 3126.2796653 ]), array([   6.46292674,   79.81251304, 3834.28248633])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0018191419802353677, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 529, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([2.04247832, 2.10038996, 2.1113348 , 2.2038548 , 2.17927742]), 'score_time': array([0.0236268 , 0.03225803, 0.0235374 , 0.03602004, 0.02326393]), 'test_r2': [array([ 0.01679872,  0.33597992, -0.0195241 ]), array([ 0.21096349,  0.08875406, -0.02283989]), array([ 0.02280586,  0.40268562, -0.0425803 ]), array([ 0.00653054,  0.18219744, -0.04040538]), array([ 0.10030608,  0.1661489 , -0.03876446])], 'test_rmse': [array([7.81923982e+00, 1.34100101e+02, 3.25183317e+05]), array([7.55997871e+00, 1.47361431e+02, 9.46020814e+04]), array([1.00460686e+01, 1.14264079e+02, 3.19711878e+04]), array([9.34440075e+00, 1.40546781e+02, 1.31849347e+04]), array([7.44544037e+00, 1.59630613e+02, 1.19654813e+04])], 'test_mae': [array([5.71217329e+00, 9.73966035e+01, 4.50002058e+04]), array([5.51304433e+00, 9.76332984e+01, 1.41364310e+04]), array([   7.05377399,   82.33049303, 6461.19810023]), array([   6.66717329,   95.4060771 , 2598.74949104]), array([   5.97451488,   96.4287304 , 2311.67556959])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0010832543410341116, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 129, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 970, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([0.81687808, 0.78150105, 0.79242039, 0.62833929, 0.78934288]), 'score_time': array([0.02290797, 0.01675534, 0.02127957, 0.01663756, 0.01664591]), 'test_r2': [array([ 0.05634261,  0.19961999, -0.04253341]), array([ 0.19483974,  0.3402653 , -0.02894983]), array([ 0.20814158,  0.36915776, -0.10229323]), array([-0.00308309,  0.1144629 , -0.01730063]), array([-0.10314355,  0.09651796, -0.06991907])], 'test_rmse': [array([8.58061171e+00, 1.48964070e+02, 1.61411324e+04]), array([8.82909415e+00, 1.01088032e+02, 9.84050811e+04]), array([   8.00157863,  133.90105046, 7818.81156647]), array([8.34746176e+00, 1.86050445e+02, 3.24765589e+05]), array([8.44763087e+00, 1.23577414e+02, 2.36628784e+04])], 'test_mae': [array([   6.15993553,   95.43301062, 3260.59369714]), array([6.29959082e+00, 7.91475975e+01, 1.65057669e+04]), array([   5.63722401,   90.84918332, 2383.09752975]), array([6.06579148e+00, 1.18106946e+02, 4.23521492e+04]), array([   6.4318514 ,   86.83657018, 6049.32367601])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.003656768200577137, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 339, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([0.26428318, 0.25297713, 0.17153311, 0.2622242 , 0.25214791]), 'score_time': array([0.01502275, 0.01380563, 0.01400971, 0.01547289, 0.01387429]), 'test_r2': [array([ 0.01651409,  0.058199  , -0.05647071]), array([ 0.10645405,  0.05242268, -0.01678112]), array([ 0.12105178,  0.38155122, -0.05735719]), array([-0.03664752,  0.23371765, -0.03855824]), array([ 0.15437845,  0.11674751, -0.02073024])], 'test_rmse': [array([7.45198858e+00, 1.82159903e+02, 3.28619348e+04]), array([8.50208944e+00, 1.30994332e+02, 9.41250493e+04]), array([8.52736056e+00, 1.03796096e+02, 9.55418544e+03]), array([8.26322806e+00, 1.63930157e+02, 1.28677919e+04]), array([9.53311980e+00, 1.35005450e+02, 3.27276687e+05])], 'test_mae': [array([5.69887106e+00, 1.15068749e+02, 7.59763145e+03]), array([5.89006518e+00, 9.44242635e+01, 1.20920212e+04]), array([   6.54534239,   79.29441554, 2225.74746674]), array([   6.00175603,  107.90624972, 2479.89183457]), array([6.94374634e+00, 9.17756320e+01, 4.66401809e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.014647953100562968, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 75, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.60114193, 0.62419391, 0.68079829, 0.64353442, 0.63450217]), 'score_time': array([0.01649404, 0.01675391, 0.0151    , 0.01666236, 0.01573038]), 'test_r2': [array([-0.05185597,  0.18408738, -0.03924096]), array([ 0.07050887,  0.14613986, -0.01419844]), array([ 0.18829776,  0.21740226, -0.01571676]), array([ 0.2286337 ,  0.16127449, -0.08223983]), array([ 0.0874425 ,  0.20921245, -0.02142424])], 'test_rmse': [array([9.11137190e+00, 1.17596393e+02, 2.52057998e+04]), array([7.71979003e+00, 1.54429993e+02, 9.36149613e+04]), array([8.11053203e+00, 1.38675507e+02, 3.20549789e+05]), array([8.25110284e+00, 1.79668094e+02, 2.28100290e+04]), array([8.55727722e+00, 1.22246835e+02, 5.83106773e+04])], 'test_mae': [array([   6.4810225 ,   87.9060754 , 4898.03634271]), array([5.54262292e+00, 9.93739986e+01, 1.10765550e+04]), array([6.07167961e+00, 9.63343092e+01, 3.98740537e+04]), array([6.16206665e+00, 1.07769633e+02, 6.28792900e+03]), array([6.27418129e+00, 8.97335459e+01, 8.44497011e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.003987707762346225, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 244, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.06161016,  0.20018429, -0.04056087]), 'r2_stdev': array([0.10923026, 0.09355211, 0.02187314]), 'rmse_avg': array([8.42627289e+00, 1.41330392e+02, 9.38188139e+04]), 'rmse_stdev': array([7.47169393e-01, 1.96911128e+01, 1.20176739e+05]), 'mae_avg': array([6.17377255e+00, 9.53358773e+01, 1.41214803e+04]), 'mae_stdev': array([4.77679738e-01, 8.79067197e+00, 1.64567207e+04]), 'r2_avg_aggregate': 0.07374452605968963, 'r2_stdev_aggregate': 0.07488516892255921, 'rmse_avg_aggregate': 31322.85686310208, 'rmse_stdev_aggregate': 40065.725883468935, 'mae_avg_aggregate': 4740.996647784372, 'mae_stdev_aggregate': 5488.663024373966}
scaler
Filename: (polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n03>
Subject: Job 288787: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c201n10> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:21:24 2025
Job was executed on host(s) <6*c201n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:21:25 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:21:25 2025
Terminated at Mon Jan 20 00:09:46 2025
Results reported at Mon Jan 20 00:09:46 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Robust Scaler"                                     --numerical_feats "polymer dP" "polymer dD" "polymer dH" "solvent dP" "solvent dD" "solvent dH"                                


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   8150.43 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.48 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   2928 sec.
    Turnaround time :                            2902 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0027933306938143893), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 442), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0017286746641990496), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 524), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009551112998013457), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 64), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0042285051397669806), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 269), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004053678637901521), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 245), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.016880666924062697), ('regressor__regressor__estimator__max_depth', 4063), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.014235474312622691), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 66), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0025322862370019154), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 294), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0014229818472394154), ('regressor__regressor__estimator__max_depth', 8812), ('regressor__regressor__estimator__n_estimators', 561), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006337573557896935), ('regressor__regressor__estimator__max_depth', 2888), ('regressor__regressor__estimator__n_estimators', 605), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0018139438464699583), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 473), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007323843016037716), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 103), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013545086396441603), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 62), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00508412162918476), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 157), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004267180710670949), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 166), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013612781738181179), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 78), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.04316212208675866), ('regressor__regressor__estimator__max_depth', 2985), ('regressor__regressor__estimator__n_estimators', 120), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.010148727847057419), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 79), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013748090241055432), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 71), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01728463523480272), ('regressor__regressor__estimator__max_depth', 26), ('regressor__regressor__estimator__n_estimators', 51), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.014140158647646844), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 61), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0033570856472084944), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 254), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013089816407011973), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.04766861235829424), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 68), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007566906917592294), ('regressor__regressor__estimator__max_depth', 8453), ('regressor__regressor__estimator__n_estimators', 115), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.017657283215374284), ('regressor__regressor__estimator__max_depth', 565), ('regressor__regressor__estimator__n_estimators', 63), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011600289744021318), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 70), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00376756623188559), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 372), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003697161040427217), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 182), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006821736523496557), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 101), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007043629225682546), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 143), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01285326607480866), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 57), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0012108288274214922), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 803), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001225590579386449), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 755), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.03258035627116066), ('regressor__regressor__estimator__max_depth', 15), ('regressor__regressor__estimator__n_estimators', 179), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [ 0.137  0.14  -0.356]±[0.159 0.151 2.308]
[array([ 0.13679398,  0.14017023, -0.35567435]), array([8.06834805e+00, 1.45570116e+02, 9.41551567e+04]), array([5.25971092e+00, 8.96964531e+01, 1.40680468e+04])]
{6: {'fit_time': array([1.26724672, 1.29476953, 1.33162951, 1.24452591, 1.27803111]), 'score_time': array([0.03421497, 0.03633356, 0.04093194, 0.03622484, 0.03281093]), 'test_r2': [array([ 0.10822383,  0.18493385, -0.05802742]), array([ 0.23485482,  0.12002952, -0.02611698]), array([ 0.19547072,  0.4835458 , -0.02772074]), array([ 0.33609804,  0.06531658, -0.07488623]), array([ 0.13143497,  0.13107981, -0.06102555])], 'test_rmse': [array([6.11684888e+00, 1.28663366e+02, 1.76603070e+04]), array([7.65516873e+00, 1.28236161e+02, 3.38441048e+05]), array([7.91438211e+00, 1.33127772e+02, 2.43675019e+04]), array([7.85433902e+00, 1.61348584e+02, 1.34118768e+04]), array([8.93711741e+00, 1.50336625e+02, 2.01961444e+04])], 'test_mae': [array([   4.18489666,   88.26030393, 4141.85102563]), array([5.32966970e+00, 8.47231058e+01, 5.39943212e+04]), array([   5.02603877,   85.77455003, 4010.07472026]), array([   5.30596432,   92.12471642, 3542.32228632]), array([   6.22922331,   98.02864673, 4845.99978958])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0042285051397669806, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 269, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([2.83956075, 2.70647979, 2.86779547, 2.9090364 , 2.99764752]), 'score_time': array([0.04087901, 0.04073215, 0.05096054, 0.04142284, 0.04270077]), 'test_r2': [array([0.25301474, 0.30529976, 0.0073777 ]), array([0.16757284, 0.05239984, 0.03297497]), array([-0.00935825,  0.06199566,  0.09825897]), array([-0.47939375, -0.19330223, -0.01363101]), array([0.2263481 , 0.17668631, 0.69581374])], 'test_rmse': [array([8.48351288e+00, 1.51168174e+02, 8.73327842e+03]), array([8.15942974e+00, 1.57329727e+02, 2.71956294e+04]), array([9.54514618e+00, 1.45784942e+02, 8.88838673e+04]), array([7.83586212e+00, 1.69082262e+02, 3.24481856e+05]), array([7.69379639e+00, 1.31267883e+02, 8.15862857e+03])], 'test_mae': [array([   4.6828565 ,   88.02411827, 2342.43817535]), array([5.01858811e+00, 1.00748777e+02, 5.65367990e+03]), array([5.60137566e+00, 7.53767669e+01, 1.25598469e+04]), array([4.38024879e+00, 1.00431079e+02, 4.49815819e+04]), array([   4.45382792,   75.71854998, 1516.78634947])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.006337573557896935, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 2888, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 605, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.71157074, 0.79914451, 0.83449149, 0.79952526, 0.82941723]), 'score_time': array([0.03077197, 0.03128791, 0.03069711, 0.0316093 , 0.0310483 ]), 'test_r2': [array([ 0.17504442,  0.08839158, -0.03940986]), array([ 0.13756516,  0.21655431, -0.03085426]), array([ 0.17515232,  0.16158733, -0.02151622]), array([ 0.14693448,  0.34277439, -0.05134584]), array([ 0.23219526,  0.1428377 , -0.03872243])], 'test_rmse': [array([8.18849654e+00, 1.48327386e+02, 2.39115846e+04]), array([8.08047786e+00, 1.47658340e+02, 6.08040730e+04]), array([5.88579798e+00, 1.49512935e+02, 3.33425633e+05]), array([9.42036688e+00, 1.42978012e+02, 1.41461616e+04]), array([7.86007032e+00, 1.24343486e+02, 1.98550167e+04])], 'test_mae': [array([   6.02182184,  100.2027493 , 4656.0668096 ]), array([5.52876319e+00, 9.24242294e+01, 1.05198277e+04]), array([4.86283635e+00, 1.05521480e+02, 4.83905188e+04]), array([   6.24635675,   95.20216747, 3126.27869   ]), array([   5.71958203,   81.25298347, 3834.26810073])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.004267180710670949, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 166, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.450109  , 0.44843364, 0.44856238, 0.44857049, 0.46148229]), 'score_time': array([0.0332098 , 0.03337359, 0.03480625, 0.06050348, 0.03404307]), 'test_r2': [array([ 0.18187037,  0.29989039, -0.01952333]), array([ 0.2026432 ,  0.03643291, -0.02282934]), array([ 0.00503679,  0.39337592, -0.04252783]), array([ 0.18311738,  0.0815483 , -0.04040379]), array([ 0.13948352,  0.16352238, -0.03874306])], 'test_rmse': [array([7.13270687e+00, 1.37696062e+02, 3.25183195e+05]), array([7.59973369e+00, 1.51532926e+02, 9.46015934e+04]), array([1.01369948e+01, 1.15151092e+02, 3.19703833e+04]), array([8.47332810e+00, 1.48944623e+02, 1.31849246e+04]), array([7.28152915e+00, 1.59881824e+02, 1.19653581e+04])], 'test_mae': [array([5.14857208e+00, 9.11589358e+01, 4.49999065e+04]), array([5.27653161e+00, 1.00027091e+02, 1.41361901e+04]), array([   6.63278633,   78.91492062, 6460.96856127]), array([   5.81817178,   93.14953125, 2598.72067562]), array([   5.2109834 ,   95.13222621, 2311.34894017])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.013748090241055432, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 71, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([0.35353947, 0.36795425, 0.36827731, 0.37059116, 0.26661706]), 'score_time': array([0.03366804, 0.03290009, 0.03331614, 0.03317928, 0.02936339]), 'test_r2': [array([0.06331961, 0.25459903, 0.65338112]), array([0.47265425, 0.22242511, 0.01875693]), array([ 0.13512923,  0.10098128, -0.07560029]), array([-0.10756581,  0.23931591, -0.01450251]), array([ 0.07898616, -0.18307475,  0.1369153 ])], 'test_rmse': [array([8.54883217e+00, 1.43756798e+02, 9.30711571e+03]), array([7.14533685e+00, 1.09745366e+02, 9.60967553e+04]), array([   8.36233417,  159.84827981, 7723.56189752]), array([8.77143707e+00, 1.72436619e+02, 3.24318642e+05]), array([7.71883917e+00, 1.41411729e+02, 2.12529302e+04])], 'test_mae': [array([   5.43598297,   79.61561496, 2549.38858482]), array([4.33553991e+00, 6.67425754e+01, 1.58387920e+04]), array([   5.03357927,   90.9081287 , 2232.53788173]), array([5.14584184e+00, 9.75922699e+01, 4.19309287e+04]), array([5.00030920e+00, 8.56774895e+01, 5.23668174e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.04766861235829424, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 68, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([0.42926455, 0.32254744, 0.43797898, 0.45031166, 0.42752099]), 'score_time': array([0.03137374, 0.03107023, 0.03181124, 0.03456545, 0.0323379 ]), 'test_r2': [array([ 0.03665942,  0.23267096, -0.05636859]), array([ 0.288749  , -0.08257184, -0.01673699]), array([ 0.29924382,  0.2311324 , -0.0568622 ]), array([ 0.12259259,  0.31568473, -0.03852264]), array([ 0.18476915,  0.0689768 , -0.02072858])], 'test_rmse': [array([7.37527190e+00, 1.64423553e+02, 3.28603464e+04]), array([7.58540316e+00, 1.40014669e+02, 9.41230066e+04]), array([7.61406268e+00, 1.15732393e+02, 9.55194886e+03]), array([7.60212196e+00, 1.54914675e+02, 1.28675713e+04]), array([9.36024754e+00, 1.38608262e+02, 3.27276420e+05])], 'test_mae': [array([5.24678336e+00, 9.52080854e+01, 7.59721624e+03]), array([5.23054153e+00, 9.31333088e+01, 1.20909456e+04]), array([   5.25064344,   84.53161635, 2224.32561401]), array([   5.0493606 ,   97.87392234, 2479.93755218]), array([6.35573634e+00, 9.11452052e+01, 4.66398602e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.017657283215374284, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 565, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 63, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([1.00204635, 1.01926088, 1.04408431, 1.02564073, 1.01528621]), 'score_time': array([0.03159451, 0.03196311, 0.0347352 , 0.03347993, 0.03228903]), 'test_r2': [array([  0.11844003,   0.0160102 , -13.76672321]), array([0.26005669, 0.11750554, 0.34295333]), array([-0.18618375, -0.17717044, -0.01744943]), array([ 0.17348081,  0.04511456, -0.16652871]), array([0.1041492 , 0.18945847, 0.40227267])], 'test_rmse': [array([8.34125825e+00, 1.29141991e+02, 9.50133046e+04]), array([6.88782469e+00, 1.56998056e+02, 7.53497652e+04]), array([9.80453404e+00, 1.70078784e+02, 3.20823079e+05]), array([8.54098856e+00, 1.91706426e+02, 2.36816412e+04]), array([8.47858395e+00, 1.23764288e+02, 4.46063369e+04])], 'test_mae': [array([4.95098693e+00, 7.79739073e+01, 1.24097637e+04]), array([4.03016614e+00, 8.42907700e+01, 9.30770235e+03]), array([6.00533990e+00, 9.63305891e+01, 4.01033774e+04]), array([5.17636084e+00, 1.07546542e+02, 6.50944342e+03]), array([5.16361477e+00, 6.86089071e+01, 6.60774133e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.03258035627116066, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 15, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 179, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.13679398,  0.14017023, -0.35567435]), 'r2_stdev': array([0.15862739, 0.15119989, 2.30765972]), 'rmse_avg': array([8.06834805e+00, 1.45570116e+02, 9.41551567e+04]), 'rmse_stdev': array([9.20129312e-01, 1.76562386e+01, 1.20047333e+05]), 'mae_avg': array([5.25971092e+00, 8.96964531e+01, 1.40680468e+04]), 'mae_stdev': array([6.03268462e-01, 9.73185662e+00, 1.64133986e+04]), 'r2_avg_aggregate': -0.026236713053786127, 'r2_stdev_aggregate': 0.872495665981635, 'rmse_avg_aggregate': 31436.265066756077, 'rmse_stdev_aggregate': 40021.96969914967, 'mae_avg_aggregate': 4721.001001634158, 'mae_stdev_aggregate': 5474.577920663195}
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n13>
Subject: Job 288741: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c039n03> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:03:13 2025
Job was executed on host(s) <6*c201n13>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:03:15 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:03:15 2025
Terminated at Mon Jan 20 00:12:00 2025
Results reported at Mon Jan 20 00:12:00 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   12813.00 sec.
    Max Memory :                                 8 GB
    Average Memory :                             7.72 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               8.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   4125 sec.
    Turnaround time :                            4127 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005273941720000989), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 181), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001311411795310078), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 786), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008449264813716063), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 93), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.07575228607353834), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 228), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.002354993357235444), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 359), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012804946739799298), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005449379858653054), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 647), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.024689213414666893), ('regressor__regressor__estimator__max_depth', 7222), ('regressor__regressor__estimator__n_estimators', 223), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0015555011957530671), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 536), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005673732273888699), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 171), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0024635073378663887), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 304), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.017145838038053692), ('regressor__regressor__estimator__max_depth', 2119), ('regressor__regressor__estimator__n_estimators', 188), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006211155910869278), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 118), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006674287924553424), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 130), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0030079089492880645), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 296), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01728463523480272), ('regressor__regressor__estimator__max_depth', 26), ('regressor__regressor__estimator__n_estimators', 51), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.04184260557018662), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 126), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008899625000235242), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 99), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006642553590019364), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 150), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01728463523480272), ('regressor__regressor__estimator__max_depth', 26), ('regressor__regressor__estimator__n_estimators', 51), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003375804459104597), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 242), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007495980210876263), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 100), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0034738996180318188), ('regressor__regressor__estimator__max_depth', 7579), ('regressor__regressor__estimator__n_estimators', 1239), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011404563185655034), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011248585615755372), ('regressor__regressor__estimator__max_depth', 1089), ('regressor__regressor__estimator__n_estimators', 368), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0014334033906632877), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 676), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009726772700364514), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 95), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009466839521612225), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 77), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005104604096838909), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 123), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0029118439632560603), ('regressor__regressor__estimator__max_depth', 93), ('regressor__regressor__estimator__n_estimators', 286), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0038679780864008563), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 208), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.03504339227366063), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 1174), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.002959468265267479), ('regressor__regressor__estimator__max_depth', 15), ('regressor__regressor__estimator__n_estimators', 362), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0012627809842710575), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 595), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [ 0.05   0.146 -0.327]±[0.166 0.208 2.161]
[array([ 0.05027081,  0.14631485, -0.32720908]), array([8.45552240e+00, 1.44569858e+02, 9.36755090e+04]), array([5.30271699e+00, 8.70315183e+01, 1.38293924e+04])]
{6: {'fit_time': array([0.85279489, 0.89944029, 0.92290521, 0.85699821, 0.71559644]), 'score_time': array([0.03180242, 0.03453112, 0.03397846, 0.0389967 , 0.03258896]), 'test_r2': [array([-0.23027795,  0.02741752, -0.10475292]), array([-0.06014886, -0.01353406, -0.00382082]), array([  0.08065162,   0.50100235, -12.83055636]), array([ 0.23171241, -0.13183466, -0.18701943]), array([-0.10763831, -0.11234484,  0.397181  ])], 'test_rmse': [array([7.18458091e+00, 1.40547040e+02, 1.80460587e+04]), array([9.01086058e+00, 1.37624460e+02, 3.34743916e+05]), array([8.46030744e+00, 1.30858520e+02, 8.93908928e+04]), array([8.44927751e+00, 1.77551516e+02, 1.40940959e+04]), array([1.00924191e+01, 1.70096186e+02, 1.52229567e+04])], 'test_mae': [array([4.14200741e+00, 7.74093187e+01, 4.20262357e+03]), array([5.24195125e+00, 7.95834395e+01, 5.03584550e+04]), array([4.69261634e+00, 7.57208398e+01, 1.31422375e+04]), array([   4.89526742,   93.48789796, 3799.55282551]), array([   6.12087092,   92.47872936, 3360.64584549])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.07575228607353834, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 228, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([1.22024965, 1.22615671, 1.18933702, 1.27529693, 1.23782039]), 'score_time': array([0.03380537, 0.0434196 , 0.03802705, 0.03600287, 0.04303026]), 'test_r2': [array([ 0.09761203,  0.18732959, -1.01439989]), array([ 0.03272422, -0.01677758,  0.60206793]), array([-0.26825988,  0.12100132,  0.36654428]), array([-0.27989962,  0.04591771, -0.00744292]), array([0.09071314, 0.12065171, 0.41437025])], 'test_rmse': [array([9.32430249e+00, 1.63500418e+02, 1.24410816e+04]), array([8.79552651e+00, 1.62971329e+02, 1.74455526e+04]), array([1.06995138e+01, 1.41125131e+02, 7.44972360e+04]), array([7.28841092e+00, 1.51187450e+02, 3.23489880e+05]), array([8.34100434e+00, 1.35661394e+02, 1.13203259e+04])], 'test_mae': [array([   5.53186266,   95.15254753, 2927.74412831]), array([   5.6172655 ,  100.33388107, 3912.10266038]), array([6.22396363e+00, 7.08221777e+01, 1.08957237e+04]), array([4.30215514e+00, 9.15411070e+01, 4.34904240e+04]), array([   4.75329231,   80.19229005, 1904.75068249])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.024689213414666893, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 7222, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 223, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([1.06701136, 0.993958  , 0.9590919 , 1.09242463, 0.98664904]), 'score_time': array([0.03308415, 0.03785634, 0.03316617, 0.03487396, 0.03476596]), 'test_r2': [array([ 0.04895522, -0.20449926, -0.02120242]), array([0.10430231, 0.25014071, 0.07576372]), array([-0.18352359,  0.01278217, -0.02098315]), array([0.17661206, 0.38831616, 0.01337703]), array([ 0.05394893, -0.13356877,  0.396899  ])], 'test_rmse': [array([8.79203426e+00, 1.70498456e+02, 2.37012286e+04]), array([8.23482975e+00, 1.44458607e+02, 5.75738859e+04]), array([7.05028921e+00, 1.62239406e+02, 3.33338625e+05]), array([9.25505224e+00, 1.37935329e+02, 1.37038131e+04]), array([8.72485720e+00, 1.42993219e+02, 1.51291847e+04])], 'test_mae': [array([   5.46539745,  105.42569639, 4320.70631283]), array([4.68665788e+00, 7.84631658e+01, 9.58192263e+03]), array([4.01540379e+00, 9.72958688e+01, 4.82378296e+04]), array([   5.52215741,   79.25257869, 3198.38184998]), array([   5.28913531,   74.73185067, 3001.38702282])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.017145838038053692, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 2119, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 188, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.49170756, 0.64932275, 0.60268235, 0.66035128, 0.63255739]), 'score_time': array([0.03389955, 0.02953029, 0.02895999, 0.03292227, 0.03239179]), 'test_r2': [array([ 0.06926698,  0.47662968, -0.01952315]), array([ 0.18781261,  0.23074605, -0.02282469]), array([ 0.02770017,  0.46273741, -0.04245811]), array([ 0.1231638 ,  0.13102922, -0.04027246]), array([ 0.10469797,  0.12192612, -0.03874606])], 'test_rmse': [array([7.60774373e+00, 1.19053740e+02, 3.25183165e+05]), array([7.67008445e+00, 1.35394460e+02, 9.46013788e+04]), array([1.00208789e+01, 1.08368121e+02, 3.19693142e+04]), array([8.77876512e+00, 1.44876938e+02, 1.31840924e+04]), array([7.42724555e+00, 1.63808887e+02, 1.19653754e+04])], 'test_mae': [array([5.39748249e+00, 8.20581999e+01, 4.49998404e+04]), array([5.17633736e+00, 8.81346805e+01, 1.41360246e+04]), array([   6.66460077,   74.2882008 , 6460.78263829]), array([   6.0672056 ,   96.05544923, 2598.65818022]), array([   5.3065614 ,   98.30900884, 2311.3399911 ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.006642553590019364, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 150, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([4.69757795, 5.25302362, 5.29335546, 5.16889119, 5.02927423]), 'score_time': array([0.05681252, 0.06158137, 0.06310081, 0.05997014, 0.07649636]), 'test_r2': [array([-0.16832965,  0.2528987 ,  0.38379992]), array([0.38761245, 0.13307141, 0.05708466]), array([ 0.15380709,  0.22099609, -0.04198665]), array([-0.22728795,  0.08875589,  0.00185081]), array([-0.25193026, -0.51831194,  0.59678336])], 'test_rmse': [array([9.54759034e+00, 1.43920666e+02, 1.24093743e+04]), array([7.69995447e+00, 1.15879534e+02, 9.42012735e+04]), array([   8.27154428,  148.79674054, 7601.91926911]), array([9.23334829e+00, 1.88731634e+02, 3.21694087e+05]), array([8.99930526e+00, 1.60199015e+02, 1.45265115e+04])], 'test_mae': [array([   5.6105424 ,   75.05513575, 3094.01947286]), array([4.32234205e+00, 6.81223419e+01, 1.67104517e+04]), array([   4.93339228,   81.61165385, 2097.80391505]), array([5.16784116e+00, 1.06648769e+02, 4.00032782e+04]), array([   5.19369358,   92.3811551 , 3669.60676196])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.011404563185655034, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([2.87512541, 2.86455941, 2.8471818 , 2.66840148, 2.93431115]), 'score_time': array([0.04642749, 0.04434609, 0.04466677, 0.0374651 , 0.05587769]), 'test_r2': [array([ 0.07656892,  0.18810584, -0.05643675]), array([ 0.11907744,  0.00966161, -0.01676513]), array([ 0.22879286,  0.30868175, -0.05712119]), array([ 0.08808103,  0.28217248, -0.03856003]), array([ 0.21005425,  0.28832309, -0.02072948])], 'test_rmse': [array([7.22088374e+00, 1.69130884e+02, 3.28614066e+04]), array([8.44182004e+00, 1.33917392e+02, 9.41243092e+04]), array([7.98764036e+00, 1.09740810e+02, 9.55311917e+03]), array([7.75018927e+00, 1.58662574e+02, 1.28678029e+04]), array([9.21394605e+00, 1.21185401e+02, 3.27276565e+05])], 'test_mae': [array([5.19565468e+00, 1.01289964e+02, 7.59767194e+03]), array([5.47581303e+00, 8.85316102e+01, 1.20917355e+04]), array([   5.6057957 ,   79.53938143, 2225.23212379]), array([   5.1863508 ,  102.14244799, 2480.03351467]), array([6.38545315e+00, 8.29430870e+01, 4.66401627e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0014334033906632877, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 676, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([1.48987651, 1.33356214, 1.50545764, 1.51841426, 1.45873117]), 'score_time': array([0.03281283, 0.0345726 , 0.03242826, 0.03520346, 0.03206944]), 'test_r2': [array([ 0.09597624,  0.32336557, -0.03904791]), array([ 0.27590156,  0.21551188, -0.01416779]), array([ 0.11346017,  0.36686747, -0.01571626]), array([ 0.17394283,  0.25281739, -0.08215789]), array([ 0.18362623,  0.24303395, -0.02134817])], 'test_rmse': [array([8.44686509e+00, 1.07090075e+02, 2.52034587e+04]), array([6.81367900e+00, 1.48023772e+02, 9.36135469e+04]), array([8.47617858e+00, 1.24731971e+02, 3.20549710e+05]), array([8.53860107e+00, 1.69579914e+02, 2.28091655e+04]), array([8.09375404e+00, 1.19604057e+02, 5.83085059e+04])], 'test_mae': [array([   5.59781471,   73.09575077, 4897.26253015]), array([4.63662516e+00, 8.87965910e+01, 1.10759987e+04]), array([5.88230980e+00, 8.71147399e+01, 3.98737073e+04]), array([5.76861236e+00, 9.91950019e+01, 6.28704918e+03]), array([5.52066167e+00, 8.88985815e+01, 8.44358798e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.002959468265267479, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 15, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 362, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.05027081,  0.14631485, -0.32720908]), 'r2_stdev': array([0.16569804, 0.20758686, 2.16117471]), 'rmse_avg': array([8.45552240e+00, 1.44569858e+02, 9.36755090e+04]), 'rmse_stdev': array([8.94885242e-01, 2.07302817e+01, 1.19768312e+05]), 'mae_avg': array([5.30271699e+00, 8.70315183e+01, 1.38293924e+04]), 'mae_stdev': array([6.12024517e-01, 1.04816881e+01, 1.60141322e+04]), 'r2_avg_aggregate': -0.04354113784865462, 'r2_stdev_aggregate': 0.8448198677669186, 'rmse_avg_aggregate': 31276.178129261523, 'rmse_stdev_aggregate': 39929.97893806914, 'mae_avg_aggregate': 4640.575553498762, 'mae_stdev_aggregate': 5341.741974391932}
scaler
Filename: (PDI-Mw-concentration-temperature-Ra)_XGBR_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-Ra)_XGBR_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-Ra)_XGBR_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-Ra)_XGBR_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n08>
Subject: Job 288780: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c201n03> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:18:21 2025
Job was executed on host(s) <6*c205n08>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:18:22 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:18:22 2025
Terminated at Mon Jan 20 00:29:09 2025
Results reported at Mon Jan 20 00:29:09 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'Ra'                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   13648.23 sec.
    Max Memory :                                 9 GB
    Average Memory :                             8.06 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               7.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   4250 sec.
    Turnaround time :                            4248 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.014854104037707164), ('regressor__regressor__estimator__max_depth', 41), ('regressor__regressor__estimator__n_estimators', 271), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008034004594438007), ('regressor__regressor__estimator__max_depth', 23), ('regressor__regressor__estimator__n_estimators', 106), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0027331486753969475), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 309), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.022986628781646284), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0031690647210573107), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 293), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01709050460332783), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 57), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 994), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 904), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009804253179095829), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 89), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 805), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011214153230359881), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 70), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0037671382754858856), ('regressor__regressor__estimator__max_depth', 13), ('regressor__regressor__estimator__n_estimators', 217), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013964025900744826), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 64), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.014319650457405308), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 291), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0076269068263125775), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 103), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0024788246922462617), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 375), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01728463523480272), ('regressor__regressor__estimator__max_depth', 26), ('regressor__regressor__estimator__n_estimators', 51), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006074940559033368), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 114), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009388329828931626), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 134), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0013094918125109076), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 740), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007591192691221518), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 107), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001306310176450312), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 553), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011767108903633536), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 72), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.04471232271187825), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 90), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.002764567462676559), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 329), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0014361251349756113), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 1028), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01631109577072872), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 65), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.005093060388886853), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 164), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.00971764949606502), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 81), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003453374239803404), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 202), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 766), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.002812264058818244), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 224), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 15), ('regressor__regressor__estimator__n_estimators', 902), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 818), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.08091703337929072), ('regressor__regressor__estimator__max_depth', 502), ('regressor__regressor__estimator__n_estimators', 56), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [ 0.093  0.161 -0.047]±[0.162 0.212 0.757]
[array([ 0.09270618,  0.16089122, -0.04743832]), array([8.25410088e+00, 1.43463000e+02, 9.23050442e+04]), array([5.08338362e+00, 8.48903228e+01, 1.36833152e+04])]
{6: {'fit_time': array([1.51394296, 1.49466062, 1.54887319, 1.49811506, 1.51914907]), 'score_time': array([0.03504968, 0.03486156, 0.03427768, 0.03437066, 0.04110408]), 'test_r2': [array([-0.14879406, -0.03961239, -0.00525444]), array([ 0.15365838,  0.04070944, -0.02423482]), array([0.22158111, 0.58963406, 0.57696931]), array([ 0.17294618, -0.19080568, -0.0016493 ]), array([-0.03590744,  0.07422015,  0.22837094])], 'test_rmse': [array([6.94258026e+00, 1.45309566e+02, 1.72142373e+04]), array([8.05110876e+00, 1.33891048e+02, 3.38130511e+05]), array([7.78489519e+00, 1.18669308e+02, 1.56336142e+04]), array([8.76646598e+00, 1.82118195e+02, 1.29469107e+04]), array([9.76015623e+00, 1.55177487e+02, 1.72230409e+04])], 'test_mae': [array([   4.02128507,   80.03099781, 3746.56964951]), array([4.71548312e+00, 7.75134430e+01, 5.35298105e+04]), array([   3.91357474,   72.61090202, 3264.33223842]), array([   4.94493169,   90.22897267, 3510.34720385]), array([   5.97549547,   87.29750356, 3947.51632859])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.014854104037707164, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 41, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 271, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([3.47773266, 3.33929348, 3.91427016, 3.31566191, 3.50576639]), 'score_time': array([0.0429709 , 0.04139209, 0.04178882, 0.0403173 , 0.04256725]), 'test_r2': [array([ 0.21999314,  0.22587942, -0.08340271]), array([ 0.24503865,  0.23159687, -0.04825434]), array([ 0.09374136,  0.25435982, -0.02067728]), array([ 0.02590345,  0.20274765, -0.02029682]), array([ 0.22170864,  0.30394047, -0.02871705])], 'test_rmse': [array([8.66899827e+00, 1.59575403e+02, 9.12389446e+03]), array([7.77050145e+00, 1.41674859e+02, 2.83148061e+04]), array([9.04452979e+00, 1.29979510e+02, 9.45640906e+04]), array([6.35837149e+00, 1.38204036e+02, 3.25547032e+05]), array([7.71683112e+00, 1.20697703e+02, 1.50035949e+04])], 'test_mae': [array([   5.64957307,   97.29808161, 2533.11161876]), array([5.37445939e+00, 9.60995707e+01, 6.07795921e+03]), array([6.05911943e+00, 8.25512602e+01, 1.34648832e+04]), array([4.65632118e+00, 8.89607423e+01, 4.59195410e+04]), array([   5.14977785,   81.61332266, 2513.65705003])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.001, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 994, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([1.27156377, 1.20144486, 1.19374633, 1.23131657, 1.01327491]), 'score_time': array([0.03209186, 0.03356814, 0.03374147, 0.03390002, 0.03299975]), 'test_r2': [array([ 0.06149147, -0.10022337, -0.01727949]), array([0.01457416, 0.20214777, 0.16842729]), array([-0.39440053,  0.05726934, -0.01045152]), array([ 0.19117897,  0.34111929, -0.23378544]), array([ 0.08302667, -0.05704725, -4.29084231])], 'test_rmse': [array([8.73389569e+00, 1.62951219e+02, 2.36556609e+04]), array([8.63745646e+00, 1.49009777e+02, 5.46115057e+04]), array([7.65265690e+00, 1.58541757e+02, 3.31614944e+05]), array([9.17281934e+00, 1.43157929e+02, 1.53244760e+04]), array([8.58972755e+00, 1.38082521e+02, 4.48108221e+04])], 'test_mae': [array([   5.44064752,   99.04421142, 4071.81099757]), array([4.89720495e+00, 7.72002028e+01, 9.66954183e+03]), array([4.27158936e+00, 9.37456199e+01, 4.75184277e+04]), array([   5.22148281,   77.0889323 , 3582.03931362]), array([5.40623695e+00, 7.15569035e+01, 5.85965097e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.014319650457405308, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 291, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.62721348, 0.66599298, 0.6488595 , 0.63067222, 0.62818146]), 'score_time': array([0.03422618, 0.03122377, 0.03197217, 0.03424811, 0.03266311]), 'test_r2': [array([ 0.06694336,  0.29671987, -0.01951957]), array([ 0.20231288,  0.06715852, -0.02277635]), array([ 0.06364587,  0.52492054, -0.04232133]), array([ 0.17083013,  0.35958402, -0.04030735]), array([ 0.01908322,  0.1237915 , -0.03860669])], 'test_rmse': [array([7.61723436e+00, 1.38007495e+02, 3.25182595e+05]), array([7.60130773e+00, 1.49097359e+02, 9.45991428e+04]), array([9.83389973e+00, 1.01904032e+02, 3.19672168e+04]), array([8.53681657e+00, 1.24373470e+02, 1.31843135e+04]), array([7.77426033e+00, 1.63634796e+02, 1.19645727e+04])], 'test_mae': [array([5.06648785e+00, 8.70357875e+01, 4.49981924e+04]), array([4.94347882e+00, 9.58291496e+01, 1.41336913e+04]), array([6.26037880e+00, 6.76003983e+01, 6.45911591e+03]), array([   5.66608311,   80.87456665, 2598.15100708]), array([   5.58754358,   93.44896748, 2309.39149069])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.009388329828931626, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 134, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([0.60923672, 0.62992954, 0.62305236, 0.50649405, 0.61925697]), 'score_time': array([0.03015327, 0.03027821, 0.03134394, 0.0317235 , 0.03113675]), 'test_r2': [array([0.09485968, 0.03199477, 0.40936347]), array([0.35381712, 0.45656813, 0.11348898]), array([ 0.23149038,  0.21606733, -0.04508533]), array([-0.15669534,  0.19912415, -0.00897702]), array([ 0.00312735, -0.39705207,  0.25294045])], 'test_rmse': [array([8.40367081e+00, 1.63822016e+02, 1.21492414e+04]), array([7.90956695e+00, 9.17461036e+01, 9.13403122e+04]), array([   7.88272837,  149.26671725, 7613.21425828]), array([8.96386848e+00, 1.76933445e+02, 3.23434235e+05]), array([8.03042916e+00, 1.53668778e+02, 1.97728704e+04])], 'test_mae': [array([   4.96905616,   90.4697002 , 3270.32887889]), array([4.51461191e+00, 6.04238390e+01, 1.47686790e+04]), array([   4.644612  ,   82.80029291, 2108.55492702]), array([5.15664596e+00, 1.03124129e+02, 4.12327684e+04]), array([   4.84576707,   85.00773213, 4544.3775243 ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.04471232271187825, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 90, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([3.65214801, 3.70557189, 3.89949465, 3.62378073, 3.85473275]), 'score_time': array([0.04306555, 0.04245949, 0.04332757, 0.04308605, 0.05499339]), 'test_r2': [array([-0.24974437,  0.20407717, -0.05568869]), array([ 0.10097849, -0.08155199, -0.01648859]), array([ 0.28749082,  0.25662492, -0.05104653]), array([ 0.09453284,  0.2895964 , -0.03829018]), array([ 0.28858579,  0.47448322, -0.02071969])], 'test_rmse': [array([8.40037558e+00, 1.67459077e+02, 3.28497699e+04]), array([8.52809963e+00, 1.39948702e+02, 9.41115084e+04]), array([7.67764826e+00, 1.13797613e+02, 9.52563150e+03]), array([7.72272438e+00, 1.57839982e+02, 1.28661311e+04]), array([8.74396272e+00, 1.04136304e+02, 3.27274995e+05])], 'test_mae': [array([5.60703591e+00, 9.91083551e+01, 7.59203644e+03]), array([5.44329337e+00, 8.91363147e+01, 1.20841660e+04]), array([   4.92771695,   78.14530801, 2211.56941203]), array([   5.12674701,   96.05649024, 2478.83660245]), array([5.36344433e+00, 7.30006658e+01, 4.66369232e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0014361251349756113, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 1028, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.4452951 , 0.4435029 , 0.45743084, 0.45114422, 0.44537711]), 'score_time': array([0.03314376, 0.03377438, 0.03347349, 0.0337913 , 0.03271842]), 'test_r2': [array([-0.05272464,  0.24761367,  0.74018086]), array([0.26201208, 0.16628   , 0.19587737]), array([-0.08489459, -0.2704469 , -0.01245431]), array([0.30237423, 0.11734549, 0.56038009]), array([0.12095083, 0.21235823, 0.2907871 ])], 'test_rmse': [array([9.11513342e+00, 1.12925657e+02, 1.26031157e+04]), array([6.87871775e+00, 1.52597842e+02, 8.33575491e+04]), array([9.37658606e+00, 1.76688681e+02, 3.20034578e+05]), array([7.84680622e+00, 1.84313186e+02, 1.45379363e+04]), array([8.39869996e+00, 1.22003441e+02, 4.85884807e+04])], 'test_mae': [array([   5.37295309,   67.04201693, 2880.69636467]), array([3.91668457e+00, 8.01353169e+01, 1.02460035e+04]), array([5.46337198e+00, 9.91754722e+01, 3.79446688e+04]), array([   4.42876083,  102.18195374, 4157.41814665]), array([4.91657072e+00, 6.77241754e+01, 7.05126455e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.08091703337929072, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 502, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 56, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.09270618,  0.16089122, -0.04743832]), 'r2_stdev': array([0.16201992, 0.21204833, 0.75702072]), 'rmse_avg': array([8.25410088e+00, 1.43463000e+02, 9.23050442e+04]), 'rmse_stdev': array([7.67600718e-01, 2.29138570e+01, 1.20463385e+05]), 'mae_avg': array([5.08338362e+00, 8.48903228e+01, 1.36833152e+04]), 'mae_stdev': array([5.62635242e-01, 1.10864486e+01, 1.63549437e+04]), 'r2_avg_aggregate': 0.06871969109189036, 'r2_stdev_aggregate': 0.3770296544660801, 'rmse_avg_aggregate': 30818.92044875973, 'rmse_stdev_aggregate': 40162.35554096952, 'mae_avg_aggregate': 4591.096307932125, 'mae_stdev_aggregate': 5455.530939411874}
scaler
Filename: (PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_XGBR_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n10>
Subject: Job 288776: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c201n06> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:17:27 2025
Job was executed on host(s) <6*c201n10>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:17:28 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:17:28 2025
Terminated at Mon Jan 20 00:29:16 2025
Results reported at Mon Jan 20 00:29:16 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   13892.04 sec.
    Max Memory :                                 8 GB
    Average Memory :                             7.85 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               8.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   4309 sec.
    Turnaround time :                            4309 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.

