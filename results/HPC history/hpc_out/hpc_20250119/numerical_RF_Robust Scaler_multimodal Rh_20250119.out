


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05194493547476599), ('regressor__regressor__estimator__min_samples_split', 0.059062757678512), ('regressor__regressor__estimator__n_estimators', 182)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.1026455037370318), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05010623315870579), ('regressor__regressor__estimator__min_samples_split', 0.05561441624444238), ('regressor__regressor__estimator__n_estimators', 1004)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 63)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09047648676008992), ('regressor__regressor__estimator__n_estimators', 640)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 63)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05159587670661247), ('regressor__regressor__estimator__min_samples_split', 0.05389084258372357), ('regressor__regressor__estimator__n_estimators', 245)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050424021509830615), ('regressor__regressor__estimator__min_samples_split', 0.054681454545311266), ('regressor__regressor__estimator__n_estimators', 64)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.051756880553307516), ('regressor__regressor__estimator__min_samples_split', 0.07081174995144747), ('regressor__regressor__estimator__n_estimators', 58)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051541102973095596), ('regressor__regressor__estimator__min_samples_split', 0.06254276966267099), ('regressor__regressor__estimator__n_estimators', 956)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05050955897736326), ('regressor__regressor__estimator__min_samples_split', 0.08067235719427904), ('regressor__regressor__estimator__n_estimators', 66)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05072985130353008), ('regressor__regressor__estimator__min_samples_split', 0.08307752789321407), ('regressor__regressor__estimator__n_estimators', 101)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050664331730597714), ('regressor__regressor__estimator__min_samples_split', 0.06256520687108441), ('regressor__regressor__estimator__n_estimators', 86)])


Average scores:	 r2: [ 0.091  0.132 -0.041]±[0.089 0.068 0.022]
[array([ 0.09070916,  0.13223071, -0.04056653]), array([8.31127319e+00, 1.47348907e+02, 9.38188066e+04]), array([6.23010033e+00, 1.00731312e+02, 1.41215992e+04])]
{6: {'fit_time': array([5.99052429, 6.07501864, 6.00159049, 5.97136855, 5.96840668]), 'score_time': array([0.23609233, 0.23436522, 0.23586559, 0.23503494, 0.23908639]), 'test_r2': [array([-0.05561325,  0.23601416, -0.05820229]), array([ 0.08144248,  0.0095016 , -0.02611792]), array([ 0.10413124,  0.15737214, -0.02783244]), array([ 0.18776192,  0.14023026, -0.07500071]), array([ 0.03359773,  0.11355755, -0.06112436])], 'test_rmse': [array([6.65506398e+00, 1.24566464e+02, 1.76617663e+04]), array([8.38756738e+00, 1.36051503e+02, 3.38441202e+05]), array([8.35157306e+00, 1.70047660e+02, 2.43688262e+04]), array([8.68759045e+00, 1.54747617e+02, 1.34125911e+04]), array([9.42703816e+00, 1.51844870e+02, 2.01970847e+04])], 'test_mae': [array([   5.01161625,   87.4893063 , 4142.80277105]), array([6.52594706e+00, 9.68681476e+01, 5.39952073e+04]), array([   6.0396956 ,  108.63793821, 4010.22167531]), array([   6.42836005,  100.69740399, 3543.06120592]), array([   7.02706684,  105.58255024, 4847.51979278])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([5.91458821, 5.93766809, 5.86877966, 5.9402287 , 5.99706817]), 'score_time': array([0.23102307, 0.23596215, 0.2280519 , 0.23371792, 0.23160887]), 'test_r2': [array([ 0.17883719,  0.10565065, -0.08352462]), array([ 0.08731827,  0.18674154, -0.04830786]), array([ 0.0821486 ,  0.09909191, -0.0206932 ]), array([-0.20975376,  0.18194772, -0.02029946]), array([ 0.17332163,  0.04108633, -0.02887572])], 'test_rmse': [array([8.89476220e+00, 1.71520187e+02, 9.12440778e+03]), array([8.54370736e+00, 1.45751328e+02, 2.83155288e+04]), array([9.10219428e+00, 1.42873106e+02, 9.45648281e+04]), array([7.08587337e+00, 1.39995267e+02, 3.25547453e+05]), array([7.95309513e+00, 1.41665979e+02, 1.50047520e+04])], 'test_mae': [array([   6.44776399,  112.29152458, 2533.50375191]), array([   6.55096701,   97.03517664, 6078.61314922]), array([6.72621147e+00, 1.00640646e+02, 1.34652859e+04]), array([5.55908205e+00, 9.06998234e+01, 4.59195715e+04]), array([   5.88857381,  106.08841859, 2514.02168494])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([6.00090456, 5.93743181, 5.97431827, 5.98844385, 5.9603312 ]), 'score_time': array([0.23082089, 0.23349452, 0.2317009 , 0.23731232, 0.23313594]), 'test_r2': [array([ 0.10639662,  0.07575095, -0.03940916]), array([ 0.13933376,  0.09504984, -0.03085412]), array([-0.04063369,  0.12502076, -0.021516  ]), array([ 0.09844217,  0.22778305, -0.05134065]), array([ 0.02283125,  0.18382503, -0.03872197])], 'test_rmse': [array([8.52238771e+00, 1.49352222e+02, 2.39115766e+04]), array([8.07218825e+00, 1.58695958e+02, 6.08040687e+04]), array([6.61100393e+00, 1.52738572e+02, 3.33425599e+05]), array([9.68441558e+00, 1.54982149e+02, 1.41461267e+04]), array([8.86718610e+00, 1.21334176e+02, 1.98550123e+04])], 'test_mae': [array([   6.38881097,  104.62507615, 4656.06522075]), array([5.89656108e+00, 1.03872868e+02, 1.05197692e+04]), array([5.46589320e+00, 1.09695878e+02, 4.83904802e+04]), array([   6.95081652,   98.22901045, 3126.22537194]), array([   6.62453144,   86.62758394, 3834.18763594])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.22792411, 0.23349524, 0.2338593 , 0.22444916, 0.22808909]), 'score_time': array([0.02785254, 0.0278852 , 0.02749896, 0.02846313, 0.02731729]), 'test_r2': [array([ 0.06646001,  0.13497445, -0.0195239 ]), array([ 0.12746728, -0.00763173, -0.02283875]), array([ 0.02522855,  0.29056618, -0.04256364]), array([ 0.03367733,  0.0794283 , -0.04041207]), array([ 0.04718556,  0.14984242, -0.0387659 ])], 'test_rmse': [array([7.61920707e+00, 1.53056919e+02, 3.25183286e+05]), array([7.94992231e+00, 1.54959050e+02, 9.46020287e+04]), array([1.00336076e+01, 1.24527189e+02, 3.19709323e+04]), array([9.21584746e+00, 1.49116424e+02, 1.31849770e+04]), array([7.66208849e+00, 1.61183895e+02, 1.19654896e+04])], 'test_mae': [array([5.87517864e+00, 1.08431169e+02, 4.50002287e+04]), array([5.96155929e+00, 1.12265004e+02, 1.41366693e+04]), array([   6.99324099,   82.7657217 , 6461.12551312]), array([   6.72021146,   97.89211679, 2598.75417778]), array([   6.16272664,  100.63906684, 2311.6732297 ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 63, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([6.04871058, 5.9306922 , 6.00197363, 5.94895935, 5.97342896]), 'score_time': array([0.24233842, 0.23466921, 0.23289394, 0.23276925, 0.23518109]), 'test_r2': [array([ 0.11334165,  0.06783801, -0.04254034]), array([ 0.19622549,  0.24678018, -0.0289498 ]), array([ 0.18637867,  0.19134743, -0.10244077]), array([ 0.04767238,  0.12599369, -0.01730011]), array([ 0.09570111,  0.1302042 , -0.06993263])], 'test_rmse': [array([8.31743144e+00, 1.60760411e+02, 1.61411861e+04]), array([8.82149304e+00, 1.08012980e+02, 9.84050793e+04]), array([   8.11078841,  151.60187957, 7819.33480621]), array([8.13353187e+00, 1.84835173e+02, 3.24765506e+05]), array([7.64847608e+00, 1.21251743e+02, 2.36630284e+04])], 'test_mae': [array([   6.2520472 ,  102.2945708 , 3260.67281185]), array([6.41294842e+00, 8.39803063e+01, 1.65062049e+04]), array([   6.07066689,  106.41607898, 2383.77481422]), array([6.10337473e+00, 1.20867789e+02, 4.23522002e+04]), array([5.86721962e+00, 8.85254398e+01, 6.05017524e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([0.19174838, 0.18907213, 0.18788743, 0.19232774, 0.19074917]), 'score_time': array([0.02574611, 0.02597523, 0.02560878, 0.02565503, 0.02440143]), 'test_r2': [array([ 0.1980041 ,  0.12669449, -0.05645965]), array([ 0.10269022,  0.01648265, -0.01677981]), array([ 0.22696092,  0.22778456, -0.05738899]), array([-0.06143514,  0.16526866, -0.03857182]), array([ 0.07479433,  0.07101251, -0.02073012])], 'test_rmse': [array([6.72936652e+00, 1.75410793e+02, 3.28617627e+04]), array([8.51997707e+00, 1.33455411e+02, 9.41249888e+04]), array([7.99712172e+00, 1.15984083e+02, 9.55432915e+03]), array([8.36143686e+00, 1.71095192e+02, 1.28678760e+04]), array([9.97163043e+00, 1.38456644e+02, 3.27276667e+05])], 'test_mae': [array([5.43024264e+00, 1.10546791e+02, 7.59786150e+03]), array([5.99759380e+00, 9.88420445e+01, 1.20921979e+04]), array([   6.29324861,   86.25099802, 2225.9184402 ]), array([   6.23318596,  111.91815247, 2480.10878024]), array([7.47564103e+00, 9.87563703e+01, 4.66402948e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.34171152, 0.34680796, 0.34110475, 0.33011222, 0.33681893]), 'score_time': array([0.03137636, 0.0314002 , 0.03131056, 0.03080773, 0.03105354]), 'test_r2': [array([ 0.1126702 ,  0.10609261, -0.03924175]), array([ 0.10154694,  0.10818241, -0.01419622]), array([ 0.19316157,  0.17248213, -0.01571648]), array([ 0.20043814,  0.07564035, -0.0822361 ]), array([ 0.097089  ,  0.17046782, -0.02141913])], 'test_rmse': [array([8.36851057e+00, 1.23088773e+02, 2.52058095e+04]), array([7.58980398e+00, 1.57825182e+02, 9.36148588e+04]), array([8.08619593e+00, 1.42599880e+02, 3.20549746e+05]), array([8.40054970e+00, 1.88617300e+02, 2.28099897e+04]), array([8.51192827e+00, 1.25205767e+02, 5.83105313e+04])], 'test_mae': [array([   6.2102151 ,   93.38451489, 4898.19634632]), array([5.59842005e+00, 1.00537042e+02, 1.10764532e+04]), array([6.16756988e+00, 9.80316895e+01, 3.98740047e+04]), array([   6.29674199,  120.12902347, 6287.91126266]), array([6.39958137e+00, 9.40406703e+01, 8.44500990e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05072985130353008, 'regressor__estimator__min_samples_split': 0.08307752789321407, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 101, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.09070916,  0.13223071, -0.04056653]), 'r2_stdev': array([0.08859028, 0.06810442, 0.02188793]), 'rmse_avg': array([8.31127319e+00, 1.47348907e+02, 9.38188066e+04]), 'rmse_stdev': array([8.20939162e-01, 1.92619502e+01, 1.20176707e+05]), 'mae_avg': array([6.23010033e+00, 1.00731312e+02, 1.41215992e+04]), 'mae_stdev': array([4.94534422e-01, 9.52811211e+00, 1.64566938e+04]), 'r2_avg_aggregate': 0.0607911120605203, 'r2_stdev_aggregate': 0.05952754001001619, 'rmse_avg_aggregate': 31324.822245316038, 'rmse_stdev_aggregate': 40065.59663981757, 'mae_avg_aggregate': 4742.853537935775, 'mae_stdev_aggregate': 5488.90547808128}
scaler
Filename: (PDI-Mw-concentration-temperature)_RF_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_RF_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_RF_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_RF_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c039n03>
Subject: Job 288754: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c023n02> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:11:47 2025
Job was executed on host(s) <6*c039n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:11:49 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:11:49 2025
Terminated at Mon Jan 20 00:25:36 2025
Results reported at Mon Jan 20 00:25:36 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)'                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   16785.00 sec.
    Max Memory :                                 7 GB
    Average Memory :                             6.88 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               9.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   4446 sec.
    Turnaround time :                            4429 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050536102141583064), ('regressor__regressor__estimator__min_samples_split', 0.07699617586509275), ('regressor__regressor__estimator__n_estimators', 54)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050536102141583064), ('regressor__regressor__estimator__min_samples_split', 0.07699617586509275), ('regressor__regressor__estimator__n_estimators', 54)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05058970952715951), ('regressor__regressor__estimator__min_samples_split', 0.05010800616254286), ('regressor__regressor__estimator__n_estimators', 93)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05026991304466285), ('regressor__regressor__estimator__min_samples_split', 0.06130772093236794), ('regressor__regressor__estimator__n_estimators', 146)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05026991304466285), ('regressor__regressor__estimator__min_samples_split', 0.06130772093236794), ('regressor__regressor__estimator__n_estimators', 146)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 1854)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 1043)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05070908049874376), ('regressor__regressor__estimator__min_samples_split', 0.09316747971969655), ('regressor__regressor__estimator__n_estimators', 222)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05159587670661247), ('regressor__regressor__estimator__min_samples_split', 0.05389084258372357), ('regressor__regressor__estimator__n_estimators', 245)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05206838596387778), ('regressor__regressor__estimator__min_samples_split', 0.07999199201369454), ('regressor__regressor__estimator__n_estimators', 1447)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.08763705703769925), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.0501797222155374), ('regressor__regressor__estimator__min_samples_split', 0.10172904645254066), ('regressor__regressor__estimator__n_estimators', 63)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05110704313215899), ('regressor__regressor__estimator__min_samples_split', 0.07017943510364377), ('regressor__regressor__estimator__n_estimators', 1532)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.050515055853842514), ('regressor__regressor__estimator__min_samples_split', 0.05143736648477392), ('regressor__regressor__estimator__n_estimators', 213)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.050551796379757985), ('regressor__regressor__estimator__min_samples_split', 0.06343416978402326), ('regressor__regressor__estimator__n_estimators', 1329)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.051756880553307516), ('regressor__regressor__estimator__min_samples_split', 0.07081174995144747), ('regressor__regressor__estimator__n_estimators', 58)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.052330597819640785), ('regressor__regressor__estimator__min_samples_split', 0.06879429590445973), ('regressor__regressor__estimator__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05050955897736326), ('regressor__regressor__estimator__min_samples_split', 0.08067235719427904), ('regressor__regressor__estimator__n_estimators', 66)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])


Average scores:	 r2: [ 0.093  0.132 -0.041]±[0.12  0.067 0.022]
[array([ 0.09314159,  0.13209753, -0.04057072]), array([8.27817483e+00, 1.47400760e+02, 9.38188607e+04]), array([6.22895830e+00, 9.97912528e+01, 1.41216509e+04])]
{6: {'fit_time': array([0.33431578, 0.34020233, 0.34183049, 0.32464457, 0.33182406]), 'score_time': array([0.03361988, 0.03608203, 0.03469229, 0.03975201, 0.03340125]), 'test_r2': [array([-0.28334558,  0.21008147, -0.05821879]), array([ 0.08356537,  0.0385951 , -0.0261181 ]), array([ 0.09377013,  0.14845294, -0.02783301]), array([ 0.24189705,  0.13137638, -0.07500951]), array([ 0.09605774,  0.11687265, -0.06112636])], 'test_rmse': [array([7.33789728e+00, 1.26662960e+02, 1.76619040e+04]), array([8.37786948e+00, 1.34038519e+02, 3.38441232e+05]), array([8.39972898e+00, 1.70945267e+02, 2.43688329e+04]), array([8.39308765e+00, 1.55542369e+02, 1.34126460e+04]), array([9.11730826e+00, 1.51560671e+02, 2.01971038e+04])], 'test_mae': [array([   5.60886528,   89.4832185 , 4142.87075724]), array([6.37393739e+00, 9.42469183e+01, 5.39952541e+04]), array([   6.1548188 ,  109.11711702, 4010.24865709]), array([   6.10982804,  100.20015382, 3543.11033935]), array([   7.00852081,  104.55287343, 4847.54235247])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.050536102141583064, 'regressor__estimator__min_samples_split': 0.07699617586509275, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 54, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([3.86067605, 3.90325356, 3.75003648, 3.93571329, 3.84054327]), 'score_time': array([0.18557715, 0.19175863, 0.17926526, 0.19066501, 0.18137383]), 'test_r2': [array([ 0.19661811,  0.09603768, -0.08353274]), array([ 0.19529838,  0.21427304, -0.04831029]), array([ 0.0494361 ,  0.09403451, -0.02069452]), array([-0.18851535,  0.16899575, -0.02029987]), array([ 0.14831861,  0.04936961, -0.02888046])], 'test_rmse': [array([8.79793453e+00, 1.72439521e+02, 9.12444196e+03]), array([8.02239651e+00, 1.43263004e+02, 2.83155617e+04]), array([9.26297674e+00, 1.43273566e+02, 9.45648895e+04]), array([7.02339823e+00, 1.41099166e+02, 3.25547518e+05]), array([8.07247053e+00, 1.41052783e+02, 1.50047866e+04])], 'test_mae': [array([   6.25730702,  112.70840094, 2533.54396259]), array([   6.35234397,   95.24415802, 6078.64797952]), array([7.00221204e+00, 9.59130436e+01, 1.34653085e+04]), array([5.54142891e+00, 9.14782853e+01, 4.59196622e+04]), array([   5.95305621,  105.90043458, 2514.07496963])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 1043, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.22066164, 0.30513191, 0.28820252, 0.28469777, 0.30017877]), 'score_time': array([0.02982426, 0.03283429, 0.0309217 , 0.02976894, 0.0328548 ]), 'test_r2': [array([ 0.10990449,  0.09010366, -0.03941077]), array([ 0.17376061,  0.10430805, -0.03085561]), array([-0.0520236 ,  0.11408156, -0.02151625]), array([ 0.15519691,  0.18433335, -0.05134575]), array([-0.04165184,  0.16596425, -0.03873027])], 'test_rmse': [array([8.50564385e+00, 1.48188036e+02, 2.39115951e+04]), array([7.90909601e+00, 1.57882092e+02, 6.08041128e+04]), array([6.64708472e+00, 1.53690393e+02, 3.33425638e+05]), array([9.37463504e+00, 1.59282611e+02, 1.41461610e+04]), array([9.15508395e+00, 1.22654600e+02, 1.98550917e+04])], 'test_mae': [array([   6.34952883,  101.3905531 , 4656.11374273]), array([5.98496411e+00, 9.90929653e+01, 1.05198208e+04]), array([5.36705837e+00, 1.13010314e+02, 4.83904854e+04]), array([   6.77002487,  101.2148016 , 3126.27188197]), array([   6.95036775,   83.83346921, 3834.25254207])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([7.27451849, 7.19406962, 7.46324301, 7.56349397, 7.16614437]), 'score_time': array([0.35969424, 0.32598686, 0.33284497, 0.34014463, 0.3372376 ]), 'test_r2': [array([-0.00806746,  0.16203357, -0.01952403]), array([ 0.22264928,  0.06268477, -0.02283976]), array([ 0.12183653,  0.28758134, -0.04258086]), array([ 0.02157362,  0.05272829, -0.04041529]), array([ 0.05632495,  0.10064236, -0.03876905])], 'test_rmse': [array([7.91750075e+00, 1.50643990e+02, 3.25183307e+05]), array([7.50378748e+00, 1.49454455e+02, 9.46020754e+04]), array([9.52342999e+00, 1.24788879e+02, 3.19711964e+04]), array([9.27338460e+00, 1.51263433e+02, 1.31849975e+04]), array([7.62525259e+00, 1.65782293e+02, 1.19655078e+04])], 'test_mae': [array([5.85334471e+00, 1.06590727e+02, 4.50002516e+04]), array([5.70185321e+00, 1.06008570e+02, 1.41366795e+04]), array([   6.70931394,   83.94110316, 6461.39814208]), array([   6.90471904,  100.3992264 , 2598.78184449]), array([   6.20407489,  101.2549244 , 2311.69457779])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([7.21977472, 7.25349927, 7.32886934, 7.16751766, 7.16239429]), 'score_time': array([0.31253695, 0.32565165, 0.3418839 , 0.32804537, 0.30752802]), 'test_r2': [array([ 0.08379177,  0.06632619, -0.04254532]), array([ 0.19701276,  0.24788262, -0.02895032]), array([ 0.21509884,  0.21691921, -0.10245664]), array([ 0.09123934,  0.12392494, -0.01730059]), array([ 0.03518744,  0.10222421, -0.0699392 ])], 'test_rmse': [array([8.45489405e+00, 1.60890722e+02, 1.61412246e+04]), array([8.81717184e+00, 1.07933905e+02, 9.84051046e+04]), array([   7.96635018,  149.18559302, 7819.39106519]), array([7.94530808e+00, 1.85053794e+02, 3.24765582e+05]), array([7.90024187e+00, 1.23186548e+02, 2.36631011e+04])], 'test_mae': [array([   6.32709701,   99.31764153, 3260.7677033 ]), array([6.39430350e+00, 8.41158425e+01, 1.65062570e+04]), array([   5.88524906,  105.38749666, 2383.81566618]), array([6.04688161e+00, 1.16981349e+02, 4.23522787e+04]), array([   6.21287507,   88.68317912, 6050.21610153])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.08763705703769925, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([4.80453229, 4.82278872, 4.89425611, 4.90482187, 4.70554376]), 'score_time': array([0.23574615, 0.21898246, 0.22093344, 0.24173212, 0.20980978]), 'test_r2': [array([ 0.16451034,  0.13386936, -0.05647243]), array([ 0.10616568,  0.0033369 , -0.01678029]), array([ 0.24648263,  0.28249756, -0.05739183]), array([-0.03860637,  0.13109851, -0.03857564]), array([ 0.12807888,  0.04314686, -0.02073021])], 'test_rmse': [array([6.86844855e+00, 1.74688741e+02, 3.28619614e+04]), array([8.50346127e+00, 1.34344337e+02, 9.41250111e+04]), array([7.89549955e+00, 1.11799753e+02, 9.55434198e+03]), array([8.27103150e+00, 1.74562003e+02, 1.28678996e+04]), array([9.68022897e+00, 1.40517854e+02, 3.27276681e+05])], 'test_mae': [array([5.38888153e+00, 1.08558077e+02, 7.59792527e+03]), array([5.88272644e+00, 1.05341711e+02, 1.20922209e+04]), array([   6.28151393,   81.0519237 , 2225.94679175]), array([   6.32868202,  113.92759932, 2480.09594057]), array([7.17082312e+00, 9.61637296e+01, 4.66403580e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.050551796379757985, 'regressor__estimator__min_samples_split': 0.06343416978402326, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 1329, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.36962128, 0.3787775 , 0.37928247, 0.43018556, 0.37165451]), 'score_time': array([0.03361082, 0.03468251, 0.03550673, 0.06244516, 0.03397274]), 'test_r2': [array([-0.06053628,  0.14698993, -0.03924132]), array([ 0.11804294,  0.07770393, -0.0141981 ]), array([ 0.24276851,  0.17780167, -0.0157166 ]), array([ 0.24862527,  0.11210852, -0.08224145]), array([ 0.08948998,  0.16503282, -0.02142379])], 'test_rmse': [array([9.14888989e+00, 1.20240080e+02, 2.52058043e+04]), array([7.51980507e+00, 1.60499418e+02, 9.36149456e+04]), array([7.83367058e+00, 1.42140803e+02, 3.20549765e+05]), array([8.14347863e+00, 1.84859161e+02, 2.28100461e+04]), array([8.54767199e+00, 1.25615264e+02, 5.83106643e+04])], 'test_mae': [array([   6.63652832,   89.61332788, 4898.19859716]), array([5.61378694e+00, 9.93021580e+01, 1.10765983e+04]), array([5.94205890e+00, 9.74794734e+01, 3.98740432e+04]), array([6.15910083e+00, 1.16878459e+02, 6.28799903e+03]), array([6.58546401e+00, 9.43106235e+01, 8.44504665e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05050955897736326, 'regressor__estimator__min_samples_split': 0.08067235719427904, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 66, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.09314159,  0.13209753, -0.04057072]), 'r2_stdev': array([0.1196269 , 0.06691167, 0.02189107]), 'rmse_avg': array([8.27817483e+00, 1.47400760e+02, 9.38188607e+04]), 'rmse_stdev': array([7.46606136e-01, 1.94930524e+01, 1.20176700e+05]), 'mae_avg': array([6.22895830e+00, 9.97912528e+01, 1.41216509e+04]), 'mae_stdev': array([4.66155979e-01, 9.45372629e+00, 1.64566931e+04]), 'r2_avg_aggregate': 0.06155613601889174, 'r2_stdev_aggregate': 0.06947654831919638, 'rmse_avg_aggregate': 31324.84653466723, 'rmse_stdev_aggregate': 40065.646561199836, 'mae_avg_aggregate': 4742.557038089449, 'mae_stdev_aggregate': 5488.871007567529}
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n12>
Subject: Job 288739: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c039n03> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:03:13 2025
Job was executed on host(s) <6*c201n12>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:03:15 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:03:15 2025
Terminated at Mon Jan 20 00:40:06 2025
Results reported at Mon Jan 20 00:40:06 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   21969.05 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.94 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   5829 sec.
    Turnaround time :                            5813 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 378)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.9454147007923973), ('regressor__regressor__estimator__min_samples_split', 0.6408329622994062), ('regressor__regressor__estimator__n_estimators', 93)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05053891896287205), ('regressor__regressor__estimator__min_samples_split', 0.06825815277669434), ('regressor__regressor__estimator__n_estimators', 1501)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05327254555881525), ('regressor__regressor__estimator__min_samples_split', 0.055794213316686964), ('regressor__regressor__estimator__n_estimators', 149)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 736)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05073549160507572), ('regressor__regressor__estimator__min_samples_split', 0.051205227898474086), ('regressor__regressor__estimator__n_estimators', 72)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09300911217294083), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 72)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05267568142372836), ('regressor__regressor__estimator__min_samples_split', 0.05215775493872488), ('regressor__regressor__estimator__n_estimators', 73)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 51)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05221940440457929), ('regressor__regressor__estimator__min_samples_split', 0.0510253069176794), ('regressor__regressor__estimator__n_estimators', 334)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.0501577624388521), ('regressor__regressor__estimator__min_samples_split', 0.061710611305696945), ('regressor__regressor__estimator__n_estimators', 52)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 1590)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 712)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 94)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05050955897736326), ('regressor__regressor__estimator__min_samples_split', 0.08067235719427904), ('regressor__regressor__estimator__n_estimators', 66)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])


Average scores:	 r2: [ 0.002  0.081 -0.041]±[0.085 0.057 0.022]
[array([ 0.00151476,  0.08076168, -0.04056964]), array([8.71358781e+00, 1.51653435e+02, 9.38188392e+04]), array([6.73223044e+00, 1.06022827e+02, 1.41216628e+04])]
{6: {'fit_time': array([5.30178261, 5.20798898, 5.27632046, 5.55294061, 5.21631074]), 'score_time': array([0.25413132, 0.22842026, 0.23618364, 0.24414229, 0.23659158]), 'test_r2': [array([-0.08144933,  0.15673796, -0.05821552]), array([ 0.012559  , -0.0195912 , -0.02611793]), array([ 0.00942966,  0.11143661, -0.02783515]), array([ 0.02430092,  0.08513758, -0.07501126]), array([-0.05116628,  0.06730072, -0.06112583])], 'test_rmse': [array([6.73601285e+00, 1.30869896e+02, 1.76618767e+04]), array([8.69637826e+00, 1.38035087e+02, 3.38441204e+05]), array([8.78190528e+00, 1.74621198e+02, 2.43688583e+04]), array([9.52172456e+00, 1.59628630e+02, 1.34126569e+04]), array([9.83177663e+00, 1.55756318e+02, 2.01970987e+04])], 'test_mae': [array([   5.40339822,   93.17686448, 4142.87784581]), array([6.82060947e+00, 1.00119403e+02, 5.39952405e+04]), array([   6.81262193,  111.76156677, 4010.30728723]), array([   7.11333775,  108.22236375, 3543.11815386]), array([   7.5940031 ,  115.50577131, 4847.55303822])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05053891896287205, 'regressor__estimator__min_samples_split': 0.06825815277669434, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 1501, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.37394691, 0.27285314, 0.36943865, 0.366009  , 0.36594081]), 'score_time': array([0.02494049, 0.02419567, 0.02452445, 0.02495313, 0.02392507]), 'test_r2': [array([ 0.03995381,  0.06985123, -0.08352549]), array([ 0.05718568,  0.14313367, -0.04831094]), array([ 0.02620287,  0.03026159, -0.02069427]), array([-0.33623598,  0.11980957, -0.02029979]), array([ 0.01303578, -0.00716354, -0.02887927])], 'test_rmse': [array([   9.61757916,  174.91934908, 9124.41141079]), array([8.68359920e+00, 1.49607983e+02, 2.83155705e+04]), array([9.37549401e+00, 1.48230490e+02, 9.45648780e+04]), array([7.44708783e+00, 1.45214888e+02, 3.25547506e+05]), array([8.68997637e+00, 1.45186358e+02, 1.50047779e+04])], 'test_mae': [array([   7.34033354,  116.84977565, 2533.50907791]), array([   6.72192382,  102.378101  , 6078.6713303 ]), array([7.02228210e+00, 1.07873815e+02, 1.34653501e+04]), array([6.02449879e+00, 9.68174824e+01, 4.59197000e+04]), array([   6.71399643,  108.95027511, 2514.05969586])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05073549160507572, 'regressor__estimator__min_samples_split': 0.051205227898474086, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 72, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.28469563, 0.27970147, 0.2710526 , 0.28551149, 0.28565931]), 'score_time': array([0.0222528 , 0.01929998, 0.01900005, 0.02131414, 0.02108216]), 'test_r2': [array([ 0.05425967,  0.03412698, -0.03941041]), array([ 0.06087856,  0.07452759, -0.03085301]), array([-0.26199631,  0.06420449, -0.02151626]), array([-0.02777759,  0.14816437, -0.05134662]), array([ 0.0433727 ,  0.14196175, -0.03872226])], 'test_rmse': [array([8.76748118e+00, 1.52678259e+02, 2.39115910e+04]), array([8.43208113e+00, 1.60485305e+02, 6.08040359e+04]), array([7.28027049e+00, 1.57957528e+02, 3.33425640e+05]), array([1.03401347e+01, 1.62775828e+02, 1.41461668e+04]), array([8.77349075e+00, 1.24407004e+02, 1.98550151e+04])], 'test_mae': [array([   6.8281889 ,  109.88676166, 4656.10712331]), array([6.47689797e+00, 1.07815930e+02, 1.05198174e+04]), array([6.01948090e+00, 1.16123622e+02, 4.83905425e+04]), array([   7.6887783 ,  107.40836124, 3126.28034923]), array([   6.68463226,   89.8130207 , 3834.27601133])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.27865982, 0.27891374, 0.28295755, 0.33085203, 0.27974319]), 'score_time': array([0.02035522, 0.02168202, 0.02202249, 0.02158737, 0.02254438]), 'test_r2': [array([ 0.00778169,  0.08139431, -0.01952382]), array([ 0.03783762, -0.02752354, -0.02283894]), array([-0.06785372,  0.20211306, -0.04256984]), array([ 0.02406772,  0.01970131, -0.04041767]), array([-0.09440238,  0.12187901, -0.03877161])], 'test_rmse': [array([7.85501344e+00, 1.57725919e+02, 3.25183273e+05]), array([8.34826471e+00, 1.56481110e+02, 9.46020376e+04]), array([1.05017480e+01, 1.32062318e+02, 3.19710274e+04]), array([9.26155767e+00, 1.53877769e+02, 1.31850126e+04]), array([8.21167043e+00, 1.63813281e+02, 1.19655225e+04])], 'test_mae': [array([6.28444117e+00, 1.11531298e+02, 4.50002637e+04]), array([6.53556824e+00, 1.16426525e+02, 1.41366685e+04]), array([   7.50031928,   88.9148093 , 6461.34467956]), array([   7.03528801,  104.06715361, 2598.82409294]), array([   6.62542575,  106.3023455 , 2311.74145076])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([6.92848396, 6.84756517, 7.06972766, 7.08219576, 6.84008789]), 'score_time': array([0.31705999, 0.32527447, 0.3229146 , 0.32986879, 0.29243135]), 'test_r2': [array([ 0.01211065,  0.03651653, -0.0425446 ]), array([ 0.04632903,  0.19201337, -0.02894949]), array([ 0.03275197,  0.10556322, -0.10245292]), array([ 0.07296477,  0.07998128, -0.01730032]), array([-0.00329218,  0.03379917, -0.06994242])], 'test_rmse': [array([8.77940792e+00, 1.63438944e+02, 1.61412190e+04]), array([9.60891305e+00, 1.11870909e+02, 9.84050647e+04]), array([   8.84343186,  159.44041814, 7819.37787119]), array([8.02479787e+00, 1.89638132e+02, 3.24765538e+05]), array([8.05624431e+00, 1.27794759e+02, 2.36631366e+04])], 'test_mae': [array([   6.81239673,  107.56232153, 3260.80329954]), array([7.23764910e+00, 8.75985014e+01, 1.65062554e+04]), array([   6.73339361,  114.22289288, 2383.82289962]), array([6.16587560e+00, 1.25907314e+02, 4.23522870e+04]), array([   6.53183716,   94.61187426, 6050.24627176])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([2.54207206, 2.55188179, 2.58367825, 2.76109672, 2.45655203]), 'score_time': array([0.11408663, 0.11951256, 0.12097216, 0.13148999, 0.16658425]), 'test_r2': [array([ 0.04466865,  0.08416036, -0.05646837]), array([ 0.02572104, -0.01094065, -0.01678069]), array([ 0.04258488,  0.1558302 , -0.05739143]), array([-0.01400453,  0.09076319, -0.03857665]), array([ 0.0354276 ,  0.03664438, -0.02073004])], 'test_rmse': [array([7.34454886e+00, 1.79631680e+02, 3.28618984e+04]), array([8.87787216e+00, 1.35303180e+02, 9.41250293e+04]), array([8.89985892e+00, 1.21267398e+02, 9.55434014e+03]), array([8.17248496e+00, 1.78567718e+02, 1.28679059e+04]), array([1.01815628e+01, 1.40994504e+02, 3.27276654e+05])], 'test_mae': [array([5.93250396e+00, 1.15093811e+02, 7.59797619e+03]), array([6.55488107e+00, 1.01372322e+02, 1.20922515e+04]), array([   7.11334511,   91.25938297, 2225.94652799]), array([   6.34990921,  119.27809018, 2480.16118912]), array([7.57959061e+00, 1.02948471e+02, 4.66403440e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 712, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.19315314, 0.28890872, 0.27714467, 0.26569009, 0.28402925]), 'score_time': array([0.01854682, 0.02013683, 0.02211261, 0.01969957, 0.01974297]), 'test_r2': [array([ 0.06125822,  0.10402166, -0.03924417]), array([ 0.03773091,  0.04251434, -0.01419741]), array([ 0.04888978,  0.11797954, -0.01571648]), array([ 0.06980387,  0.07440907, -0.08223646]), array([ 0.05008801,  0.06593975, -0.02141998])], 'test_rmse': [array([8.60753325e+00, 1.23231272e+02, 2.52058388e+04]), array([7.85472761e+00, 1.63532630e+02, 9.36149137e+04]), array([8.77943157e+00, 1.47221012e+02, 3.20549745e+05]), array([9.06084984e+00, 1.88742880e+02, 2.28099935e+04]), array([8.73066183e+00, 1.32860278e+02, 5.83105555e+04])], 'test_mae': [array([   6.58642737,   94.83157301, 4898.2049825 ]), array([6.14029754e+00, 1.07517221e+02, 1.10766020e+04]), array([6.91298743e+00, 1.02262447e+02, 3.98740219e+04]), array([   6.99175299,  123.14586564, 6288.00878443]), array([6.73919182e+00, 1.03241610e+02, 8.44501307e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.00151476,  0.08076168, -0.04056964]), 'r2_stdev': array([0.08483411, 0.05665801, 0.02189029]), 'rmse_avg': array([8.71358781e+00, 1.51653435e+02, 9.38188392e+04]), 'rmse_stdev': array([8.46391379e-01, 1.90867108e+01, 1.20176697e+05]), 'mae_avg': array([6.73223044e+00, 1.06022827e+02, 1.41216628e+04]), 'mae_stdev': array([5.02287137e-01, 9.64967465e+00, 1.64566914e+04]), 'r2_avg_aggregate': 0.013902270144580854, 'r2_stdev_aggregate': 0.054460802990738855, 'rmse_avg_aggregate': 31326.40207163765, 'rmse_stdev_aggregate': 40065.54343586822, 'mae_avg_aggregate': 4744.805950102604, 'mae_stdev_aggregate': 5488.947803007247}
scaler
Filename: (concentration-temperature)_RF_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(concentration-temperature)_RF_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(concentration-temperature)_RF_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(concentration-temperature)_RF_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n07>
Subject: Job 288763: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c023n02> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:13:47 2025
Job was executed on host(s) <6*c201n07>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:13:49 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:13:49 2025
Terminated at Mon Jan 20 00:44:54 2025
Results reported at Mon Jan 20 00:44:54 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)'                                     --columns_to_impute "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   20540.24 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.97 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   5465 sec.
    Turnaround time :                            5467 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 379)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.051989768565580914), ('regressor__regressor__estimator__min_samples_split', 0.05210832688848317), ('regressor__regressor__estimator__n_estimators', 295)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05026991304466285), ('regressor__regressor__estimator__min_samples_split', 0.06130772093236794), ('regressor__regressor__estimator__n_estimators', 146)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 147)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 142)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 137)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050796628068253545), ('regressor__regressor__estimator__min_samples_split', 0.06412543939476967), ('regressor__regressor__estimator__n_estimators', 160)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050321900948909225), ('regressor__regressor__estimator__min_samples_split', 0.05844171287588437), ('regressor__regressor__estimator__n_estimators', 1749)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05005097601438311), ('regressor__regressor__estimator__min_samples_split', 0.07468711231704694), ('regressor__regressor__estimator__n_estimators', 610)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051494031085785236), ('regressor__regressor__estimator__min_samples_split', 0.056004565892354384), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05022289919923377), ('regressor__regressor__estimator__min_samples_split', 0.07000543072360886), ('regressor__regressor__estimator__n_estimators', 398)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051494031085785236), ('regressor__regressor__estimator__min_samples_split', 0.056004565892354384), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05090531285618139), ('regressor__regressor__estimator__min_samples_split', 0.07322208964467801), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07969583107378077), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05071388419214858), ('regressor__regressor__estimator__min_samples_split', 0.06724929626288029), ('regressor__regressor__estimator__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.050515055853842514), ('regressor__regressor__estimator__min_samples_split', 0.05143736648477392), ('regressor__regressor__estimator__n_estimators', 213)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05221940440457929), ('regressor__regressor__estimator__min_samples_split', 0.0510253069176794), ('regressor__regressor__estimator__n_estimators', 334)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 67)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050971633841779634), ('regressor__regressor__estimator__min_samples_split', 0.06184583650147293), ('regressor__regressor__estimator__n_estimators', 1887)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 568)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.08546780405208079), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050664331730597714), ('regressor__regressor__estimator__min_samples_split', 0.06256520687108441), ('regressor__regressor__estimator__n_estimators', 86)])


Average scores:	 r2: [ 0.088  0.104 -0.041]±[0.09  0.058 0.022]
[array([ 0.08806866,  0.10416243, -0.04057373]), array([8.31833914e+00, 1.49708634e+02, 9.38188941e+04]), array([6.13666998e+00, 1.01989530e+02, 1.41216996e+04])]
{6: {'fit_time': array([1.47153139, 1.46344852, 1.50723767, 1.47898316, 1.33890676]), 'score_time': array([0.07858157, 0.07770395, 0.08404589, 0.07939029, 0.07640886]), 'test_r2': [array([-0.12515309,  0.17138259, -0.05822469]), array([ 0.10543925,  0.02770505, -0.02611814]), array([ 0.1023956 ,  0.11941043, -0.02783655]), array([ 0.2094117 ,  0.10802242, -0.07501755]), array([-0.01039215,  0.07120272, -0.06112792])], 'test_rmse': [array([6.87077343e+00, 1.29728533e+02, 1.76619533e+04]), array([8.27728223e+00, 1.34795523e+02, 3.38441238e+05]), array([8.35965921e+00, 1.73835921e+02, 2.43688748e+04]), array([8.57102686e+00, 1.57619469e+02, 1.34126961e+04]), array([9.63920630e+00, 1.55430169e+02, 2.01971186e+04])], 'test_mae': [array([   5.13329013,   92.52278174, 4142.89542591]), array([6.30899745e+00, 9.46253115e+01, 5.39952651e+04]), array([   5.91402107,  112.26453746, 4010.34572323]), array([   6.20439953,  100.08184209, 3543.16987503]), array([   7.08056178,  110.01670598, 4847.58475425])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 379, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.66998124, 0.67111874, 0.68894339, 0.69585204, 0.66548777]), 'score_time': array([0.04853678, 0.04430127, 0.04715776, 0.04655981, 0.04379416]), 'test_r2': [array([ 0.20092916,  0.08087252, -0.08354089]), array([ 0.02554278,  0.15134406, -0.04831236]), array([ 0.04977661,  0.04845501, -0.02069529]), array([-0.20453402,  0.13868708, -0.02030007]), array([ 0.19131036,  0.05133032, -0.0288854 ])], 'test_rmse': [array([8.77429735e+00, 1.73879955e+02, 9.12447627e+03]), array([8.82811687e+00, 1.48889494e+02, 2.83155896e+04]), array([9.26131748e+00, 1.46833418e+02, 9.45649251e+04]), array([7.07057008e+00, 1.43649231e+02, 3.25547551e+05]), array([7.86608856e+00, 1.40907244e+02, 1.50048226e+04])], 'test_mae': [array([   6.32101796,  112.99068304, 2533.58506278]), array([   6.7006859 ,  102.10403018, 6078.68385273]), array([6.83023080e+00, 9.98322975e+01, 1.34653526e+04]), array([5.47565384e+00, 9.34100476e+01, 4.59197179e+04]), array([   5.59165521,  103.55866424, 2514.13966374])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05026991304466285, 'regressor__estimator__min_samples_split': 0.06130772093236794, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 146, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.70461559, 0.71071935, 0.71973133, 0.72003531, 0.70841265]), 'score_time': array([0.04799914, 0.04719567, 0.04513621, 0.04809713, 0.05993032]), 'test_r2': [array([ 0.07346581,  0.06362363, -0.03941124]), array([ 0.09383884,  0.07272794, -0.03085695]), array([-0.03962827,  0.09248093, -0.02151635]), array([ 0.14640782,  0.17358787, -0.05134951]), array([ 0.04010529,  0.11296656, -0.03873755])], 'test_rmse': [array([8.67799934e+00, 1.50328874e+02, 2.39116005e+04]), array([8.28278942e+00, 1.60641268e+02, 6.08041523e+04]), array([6.60780950e+00, 1.55552764e+02, 3.33425656e+05]), array([9.42327441e+00, 1.60328361e+02, 1.41461863e+04]), array([8.78846115e+00, 1.26491547e+02, 1.98551613e+04])], 'test_mae': [array([   6.48810926,  102.24732177, 4656.1303403 ]), array([6.02734514e+00, 1.06659307e+02, 1.05198755e+04]), array([5.35908713e+00, 1.10235115e+02, 4.83905637e+04]), array([   6.66087038,  101.30575191, 3126.33081535]), array([   6.44021632,   89.28765924, 3834.3077101 ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.050796628068253545, 'regressor__estimator__min_samples_split': 0.06412543939476967, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 160, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([1.56156206, 1.50241685, 1.53525376, 1.5029881 , 1.48235011]), 'score_time': array([0.08089828, 0.08872986, 0.08660817, 0.08435607, 0.08303666]), 'test_r2': [array([ 0.06839763,  0.15861954, -0.01952412]), array([ 0.10538768,  0.00039251, -0.02284034]), array([ 0.14030549,  0.23414937, -0.04258455]), array([ 0.02257209,  0.05889202, -0.0404211 ]), array([ 0.13688681,  0.11320373, -0.03877435])], 'test_rmse': [array([7.61129594e+00, 1.50950553e+02, 3.25183321e+05]), array([8.04988101e+00, 1.54340811e+02, 9.46021024e+04]), array([9.42275254e+00, 1.29383912e+02, 3.19712530e+04]), array([9.26865170e+00, 1.50770508e+02, 1.31850343e+04]), array([7.29250734e+00, 1.64620477e+02, 1.19655383e+04])], 'test_mae': [array([5.77501546e+00, 1.04710266e+02, 4.50002816e+04]), array([5.81364894e+00, 1.09683068e+02, 1.41367042e+04]), array([   6.58283351,   89.96884189, 6461.45342008]), array([   6.64305817,   99.73188138, 2598.85606615]), array([   5.84600418,   99.99326648, 2311.77586211])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05022289919923377, 'regressor__estimator__min_samples_split': 0.07000543072360886, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 398, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([7.15669751, 7.20791698, 7.02889752, 7.16184115, 6.93385553]), 'score_time': array([0.33492422, 0.35628796, 0.35152483, 0.35658884, 0.31974602]), 'test_r2': [array([ 0.14244783,  0.04671712, -0.04254795]), array([ 0.19000036,  0.11358569, -0.02895065]), array([ 0.15869869,  0.19140031, -0.10246458]), array([ 0.0116558 ,  0.10347489, -0.01730071]), array([ 0.0958091 ,  0.11836889, -0.06994648])], 'test_rmse': [array([8.17977489e+00, 1.62571462e+02, 1.61412450e+04]), array([8.85558784e+00, 1.17174594e+02, 9.84051203e+04]), array([   8.24760191,  151.59692315, 7819.41923567]), array([8.28590772e+00, 1.87201172e+02, 3.24765600e+05]), array([7.64801940e+00, 1.22073892e+02, 2.36631816e+04])], 'test_mae': [array([   5.98624762,  101.84352244, 3260.83373187]), array([6.31182899e+00, 9.20637417e+01, 1.65062907e+04]), array([   6.08844562,  106.94420258, 2383.85569325]), array([6.12446669e+00, 1.18596960e+02, 4.23523204e+04]), array([5.83100103e+00, 8.99203953e+01, 6.05027751e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([0.32741618, 0.32595396, 0.32552886, 0.31759644, 0.32576776]), 'score_time': array([0.03349471, 0.03241467, 0.03201413, 0.03268409, 0.03197694]), 'test_r2': [array([ 0.12835777,  0.06364823, -0.05647671]), array([ 0.09109347,  0.00437606, -0.01678159]), array([ 0.20011767,  0.23015561, -0.05739499]), array([-0.01588141,  0.11830536, -0.03858147]), array([ 0.08618747,  0.06520425, -0.02073028])], 'test_rmse': [array([7.01547758e+00, 1.81632153e+02, 3.28620281e+04]), array([8.57485601e+00, 1.34274282e+02, 9.41250709e+04]), array([8.13478412e+00, 1.15805884e+02, 9.55435623e+03]), array([8.18004495e+00, 1.75842377e+02, 1.28679357e+04]), array([9.91004405e+00, 1.38888802e+02, 3.27276694e+05])], 'test_mae': [array([5.49870589e+00, 1.16159476e+02, 7.59799792e+03]), array([5.84029022e+00, 1.04172337e+02, 1.20922749e+04]), array([   6.2843394 ,   82.62141189, 2225.97711927]), array([   5.9630571 ,  114.86959999, 2480.15754412]), array([7.35379326e+00, 9.94949519e+01, 4.66403921e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05071388419214858, 'regressor__estimator__min_samples_split': 0.06724929626288029, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 55, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([2.10872769, 2.09752178, 2.15232897, 2.14170694, 2.12654924]), 'score_time': array([0.10636306, 0.10494852, 0.10877156, 0.1083889 , 0.10434079]), 'test_r2': [array([ 0.08303896,  0.02365883, -0.03924594]), array([ 0.09823985,  0.10183842, -0.01419864]), array([ 0.16657249,  0.16924595, -0.01571678]), array([ 0.19957459,  0.0727112 , -0.08224404]), array([ 0.1140251 ,  0.17393779, -0.02142484])], 'test_rmse': [array([8.50709096e+00, 1.28639096e+02, 2.52058603e+04]), array([7.60375967e+00, 1.58385536e+02, 9.36149706e+04]), array([8.21835482e+00, 1.42878441e+02, 3.20549792e+05]), array([8.40508487e+00, 1.88915913e+02, 2.28100734e+04]), array([8.43172028e+00, 1.24943621e+02, 5.83106943e+04])], 'test_mae': [array([   6.28177687,   96.62912564, 4898.2383185 ]), array([5.50067310e+00, 1.00091390e+02, 1.10766154e+04]), array([6.12215262e+00, 9.94098154e+01, 3.98740981e+04]), array([6.17977241e+00, 1.17942434e+02, 6.28805495e+03]), array([6.22019646e+00, 9.36448143e+01, 8.44508074e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 568, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.08806866,  0.10416243, -0.04057373]), 'r2_stdev': array([0.09035695, 0.05829779, 0.02189302]), 'rmse_avg': array([8.31833914e+00, 1.49708634e+02, 9.38188941e+04]), 'rmse_stdev': array([7.73873729e-01, 1.91175898e+01, 1.20176692e+05]), 'mae_avg': array([6.13666998e+00, 1.01989530e+02, 1.41216996e+04]), 'mae_stdev': array([4.79368319e-01, 8.70399236e+00, 1.64566890e+04]), 'r2_avg_aggregate': 0.050552451659521415, 'r2_stdev_aggregate': 0.05684925130790075, 'rmse_avg_aggregate': 31325.640353424504, 'rmse_stdev_aggregate': 40065.52797436872, 'mae_avg_aggregate': 4743.275251061519, 'mae_stdev_aggregate': 5488.6241139667245}
scaler
Filename: (PDI-Mw)_RF_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw)_RF_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw)_RF_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw)_RF_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n06>
Subject: Job 288768: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c023n02> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:15:14 2025
Job was executed on host(s) <6*c201n06>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:15:16 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:15:16 2025
Terminated at Mon Jan 20 00:47:40 2025
Results reported at Mon Jan 20 00:47:40 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)'                                     --columns_to_impute "PDI"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   20750.32 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.97 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   5563 sec.
    Turnaround time :                            5546 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09407157553192469), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051476042825151974), ('regressor__regressor__estimator__min_samples_split', 0.06313869393555982), ('regressor__regressor__estimator__n_estimators', 81)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05008050949801044), ('regressor__regressor__estimator__min_samples_split', 0.05806782186117265), ('regressor__regressor__estimator__n_estimators', 71)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05058970952715951), ('regressor__regressor__estimator__min_samples_split', 0.05010800616254286), ('regressor__regressor__estimator__n_estimators', 93)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051295209527380425), ('regressor__regressor__estimator__min_samples_split', 0.05589895198313731), ('regressor__regressor__estimator__n_estimators', 105)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05080977494497714), ('regressor__regressor__estimator__min_samples_split', 0.06357208438893225), ('regressor__regressor__estimator__n_estimators', 98)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07306912918534657), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 1238)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050563819981214966), ('regressor__regressor__estimator__min_samples_split', 0.06889262161930283), ('regressor__regressor__estimator__n_estimators', 335)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050925643558800776), ('regressor__regressor__estimator__min_samples_split', 0.05820506527844287), ('regressor__regressor__estimator__n_estimators', 157)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05083277168428705), ('regressor__regressor__estimator__min_samples_split', 0.06962633302947505), ('regressor__regressor__estimator__n_estimators', 79)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05015574944519795), ('regressor__regressor__estimator__min_samples_split', 0.05761660271675556), ('regressor__regressor__estimator__n_estimators', 741)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050424021509830615), ('regressor__regressor__estimator__min_samples_split', 0.054681454545311266), ('regressor__regressor__estimator__n_estimators', 64)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05015574944519795), ('regressor__regressor__estimator__min_samples_split', 0.05761660271675556), ('regressor__regressor__estimator__n_estimators', 741)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05075361050683714), ('regressor__regressor__estimator__min_samples_split', 0.05660874421191145), ('regressor__regressor__estimator__n_estimators', 127)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05581836677791363), ('regressor__regressor__estimator__min_samples_split', 0.05126277649162658), ('regressor__regressor__estimator__n_estimators', 91)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05176918465278924), ('regressor__regressor__estimator__min_samples_split', 0.05105586129185765), ('regressor__regressor__estimator__n_estimators', 66)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 57)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05041714068915762), ('regressor__regressor__estimator__min_samples_split', 0.06880992504342154), ('regressor__regressor__estimator__n_estimators', 70)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05218827211141614), ('regressor__regressor__estimator__min_samples_split', 0.06507474925592373), ('regressor__regressor__estimator__n_estimators', 466)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05050955897736326), ('regressor__regressor__estimator__min_samples_split', 0.08067235719427904), ('regressor__regressor__estimator__n_estimators', 66)])


Average scores:	 r2: [ 0.111  0.148 -0.041]±[0.128 0.075 0.022]
[array([ 0.11109643,  0.1483631 , -0.0405695 ]), array([8.18846100e+00, 1.46054228e+02, 9.38188447e+04]), array([6.06960502e+00, 9.86601963e+01, 1.41216456e+04])]
{6: {'fit_time': array([0.34037161, 0.4529314 , 0.4570291 , 0.45886636, 0.44529128]), 'score_time': array([0.03564191, 0.04017472, 0.03647447, 0.03957844, 0.03947425]), 'test_r2': [array([-0.25021666,  0.22549382, -0.05820749]), array([ 0.09036277, -0.01326332, -0.0261181 ]), array([ 0.14953201,  0.17157581, -0.0278345 ]), array([ 0.26204453,  0.14106532, -0.07501214]), array([ 0.12024743,  0.12649514, -0.06112653])], 'test_rmse': [array([7.24256598e+00, 1.25421193e+02, 1.76618097e+04]), array([8.34674138e+00, 1.37606077e+02, 3.38441231e+05]), array([8.13720156e+00, 1.68608374e+02, 2.43688506e+04]), array([8.28080855e+00, 1.54672449e+02, 1.34126624e+04]), array([8.99449049e+00, 1.50732713e+02, 2.01971054e+04])], 'test_mae': [array([   5.48544965,   89.99090428, 4142.841079  ]), array([6.22046224e+00, 9.67428779e+01, 5.39952443e+04]), array([   5.73071108,  107.11638558, 4010.27278288]), array([   6.12041509,   96.61585794, 3543.12638572]), array([   6.79836332,  104.37842342, 4847.54865195])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.051476042825151974, 'regressor__estimator__min_samples_split': 0.06313869393555982, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 81, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([7.47078061, 7.46230531, 7.58999944, 7.54986286, 7.48579311]), 'score_time': array([0.32689953, 0.33029556, 0.35375905, 0.32586384, 0.3143146 ]), 'test_r2': [array([ 0.23426961,  0.11849666, -0.08353249]), array([ 0.22111003,  0.20914958, -0.04830917]), array([ 0.06154357,  0.1128796 , -0.02069409]), array([-0.22796725,  0.19679936, -0.02029978]), array([ 0.19095772,  0.09316002, -0.0288795 ])], 'test_rmse': [array([8.58929756e+00, 1.70283914e+02, 9.12444090e+03]), array([7.89268444e+00, 1.43729330e+02, 2.83155466e+04]), array([9.20379573e+00, 1.41775611e+02, 9.45648695e+04]), array([7.13901490e+00, 1.38718648e+02, 3.25547504e+05]), array([7.86780342e+00, 1.37765712e+02, 1.50047796e+04])], 'test_mae': [array([   5.93111618,  109.93077917, 2533.54737846]), array([   6.10568953,   96.4389159 , 6078.63597698]), array([6.87013539e+00, 9.46317483e+01, 1.34653011e+04]), array([5.62407138e+00, 8.85939092e+01, 4.59196608e+04]), array([   5.67097914,  103.18492275, 2514.06662281])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.07306912918534657, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([1.41306114, 1.38916612, 1.4306612 , 1.41829348, 1.26009107]), 'score_time': array([0.07847333, 0.07576632, 0.07747459, 0.07976317, 0.07494187]), 'test_r2': [array([ 0.09792907,  0.07252911, -0.03940948]), array([ 0.19005115,  0.12591788, -0.03085533]), array([-0.06719811,  0.1586075 , -0.02151621]), array([ 0.20312126,  0.21206254, -0.0513454 ]), array([ 0.02875473,  0.21553599, -0.03872465])], 'test_rmse': [array([8.56267048e+00, 1.49612309e+02, 2.39115803e+04]), array([7.83073801e+00, 1.55965899e+02, 6.08041045e+04]), array([6.69485225e+00, 1.49778394e+02, 3.33425632e+05]), array([9.10484894e+00, 1.56551735e+02, 1.41461586e+04]), array([8.84026933e+00, 1.18953718e+02, 1.98550380e+04])], 'test_mae': [array([   6.13709865,  102.82707135, 4656.12280159]), array([5.86672586e+00, 9.80239144e+01, 1.05198005e+04]), array([5.33220827e+00, 1.08556541e+02, 4.83905009e+04]), array([   6.56992592,  100.17630684, 3126.26676218]), array([   6.52685344,   81.29367255, 3834.24673539])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.050563819981214966, 'regressor__estimator__min_samples_split': 0.06889262161930283, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 335, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.32401538, 0.32458901, 0.32523203, 0.32690573, 0.28867674]), 'score_time': array([0.03356051, 0.03399348, 0.03302813, 0.03502417, 0.03063059]), 'test_r2': [array([-0.00956285,  0.18430154, -0.01952402]), array([ 0.25562412,  0.07838393, -0.02283995]), array([ 0.11640935,  0.30795406, -0.04257702]), array([ 0.01274446,  0.08107994, -0.04040455]), array([ 0.09840635,  0.1000064 , -0.03876466])], 'test_rmse': [array([7.92337107e+00, 1.48628920e+02, 3.25183305e+05]), array([7.34290940e+00, 1.48197558e+02, 9.46020843e+04]), array([9.55281278e+00, 1.22991671e+02, 3.19711375e+04]), array([9.31513137e+00, 1.48982595e+02, 1.31849294e+04]), array([7.45329688e+00, 1.65840897e+02, 1.19654825e+04])], 'test_mae': [array([5.89879307e+00, 1.04074573e+02, 4.50002478e+04]), array([5.37485015e+00, 1.02714830e+02, 1.41366909e+04]), array([   6.80276247,   82.30810817, 6461.38982692]), array([   6.74916637,   98.76907074, 2598.65978457]), array([   6.02056022,  104.72808078, 2311.64708671])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([3.00450921, 2.74768519, 2.88430905, 2.88191152, 2.8721056 ]), 'score_time': array([0.14200068, 0.13936448, 0.14880037, 0.14945126, 0.13744879]), 'test_r2': [array([ 0.09897276,  0.07375191, -0.04254497]), array([ 0.21203615,  0.2894423 , -0.0289501 ]), array([ 0.23768571,  0.25339046, -0.10245585]), array([ 0.11326847,  0.10539295, -0.01730052]), array([ 0.10370902,  0.10642286, -0.06993362])], 'test_rmse': [array([8.38455538e+00, 1.60249645e+02, 1.61412219e+04]), array([8.73430049e+00, 1.04909485e+02, 9.84050936e+04]), array([   7.85089084,  145.6700831 , 7819.38827323]), array([7.84841681e+00, 1.87000812e+02, 3.24765571e+05]), array([7.61453571e+00, 1.22898155e+02, 2.36630393e+04])], 'test_mae': [array([   6.2573325 ,  100.33589066, 3260.76257387]), array([6.19658383e+00, 8.19159217e+01, 1.65062391e+04]), array([   5.71234712,  100.72807497, 2383.8135149 ]), array([5.85781787e+00, 1.17684280e+02, 4.23522556e+04]), array([5.91256716e+00, 8.91643282e+01, 6.05021537e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05015574944519795, 'regressor__estimator__min_samples_split': 0.05761660271675556, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 741, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([0.28666925, 0.38180637, 0.393332  , 0.39097118, 0.37784171]), 'score_time': array([0.03561425, 0.03786969, 0.03871918, 0.03572059, 0.03635144]), 'test_r2': [array([ 0.15482504,  0.121654  , -0.05647382]), array([ 0.1227675 ,  0.01377269, -0.01677912]), array([ 0.25550085,  0.31578034, -0.05739342]), array([-0.04088377,  0.12042705, -0.03857698]), array([ 0.14559851,  0.10316167, -0.02073016])], 'test_rmse': [array([6.90814461e+00, 1.75916277e+02, 3.28619831e+04]), array([8.42412071e+00, 1.33639145e+02, 9.41249570e+04]), array([7.84811006e+00, 1.09175937e+02, 9.55434915e+03]), array([8.28009466e+00, 1.75630678e+02, 1.28679080e+04]), array([9.58248235e+00, 1.36039788e+02, 3.27276673e+05])], 'test_mae': [array([5.35399048e+00, 1.11062451e+02, 7.59794492e+03]), array([5.73963343e+00, 1.03162520e+02, 1.20922067e+04]), array([   6.20916236,   79.75365873, 2225.96238222]), array([   6.20260988,  116.06071964, 2480.10764514]), array([6.97276643e+00, 9.02972599e+01, 4.66403558e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05176918465278924, 'regressor__estimator__min_samples_split': 0.05105586129185765, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 66, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.32675529, 0.34107232, 0.35015011, 0.34755445, 0.24955535]), 'score_time': array([0.03429532, 0.03520036, 0.03523755, 0.03529906, 0.03099012]), 'test_r2': [array([-0.08571733,  0.15546837, -0.0392441 ]), array([ 0.09006576,  0.09639135, -0.01419783]), array([ 0.2944222,  0.1895009, -0.0157167]), array([ 0.26302043,  0.11666112, -0.08224096]), array([ 0.1449405 ,  0.21325962, -0.02141922])], 'test_rmse': [array([9.25686694e+00, 1.19641028e+02, 2.52058380e+04]), array([7.63814441e+00, 1.58865089e+02, 9.36149331e+04]), array([7.56176935e+00, 1.41125905e+02, 3.20549780e+05]), array([8.06509327e+00, 1.84384626e+02, 2.28100409e+04]), array([8.28330496e+00, 1.21933610e+02, 5.83105339e+04])], 'test_mae': [array([   6.58963311,   90.03323183, 4898.22473064]), array([5.56590927e+00, 9.81205770e+01, 1.10765738e+04]), array([5.57622997e+00, 9.63220149e+01, 3.98740827e+04]), array([6.15012717e+00, 1.15334625e+02, 6.28799809e+03]), array([6.30312768e+00, 9.20344242e+01, 8.44503399e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 57, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.11109643,  0.1483631 , -0.0405695 ]), 'r2_stdev': array([0.12825997, 0.07507741, 0.02189084]), 'rmse_avg': array([8.18846100e+00, 1.46054228e+02, 9.38188447e+04]), 'rmse_stdev': array([7.32954726e-01, 2.01233649e+01, 1.20176705e+05]), 'mae_avg': array([6.06960502e+00, 9.86601963e+01, 1.41216456e+04]), 'mae_stdev': array([4.51810452e-01, 9.66984979e+00, 1.64566965e+04]), 'r2_avg_aggregate': 0.0729633437762567, 'r2_stdev_aggregate': 0.07507607001700248, 'rmse_avg_aggregate': 31324.36245244357, 'rmse_stdev_aggregate': 40065.85380882547, 'mae_avg_aggregate': 4742.125124601383, 'mae_stdev_aggregate': 5488.939381786779}
scaler
Filename: (PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n04>
Subject: Job 288775: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c201n06> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:17:27 2025
Job was executed on host(s) <6*c201n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:17:28 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:17:28 2025
Terminated at Mon Jan 20 00:51:53 2025
Results reported at Mon Jan 20 00:51:53 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "polymer dP" "polymer dD" "polymer dH" "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   21531.00 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.97 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   5688 sec.
    Turnaround time :                            5666 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05194493547476599), ('regressor__regressor__estimator__min_samples_split', 0.059062757678512), ('regressor__regressor__estimator__n_estimators', 182)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05098596123219673), ('regressor__regressor__estimator__min_samples_split', 0.06365493480277629), ('regressor__regressor__estimator__n_estimators', 439)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051144931885579795), ('regressor__regressor__estimator__min_samples_split', 0.08763884950952322), ('regressor__regressor__estimator__n_estimators', 112)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07494620964036007), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05058758824602979), ('regressor__regressor__estimator__min_samples_split', 0.07486857111930777), ('regressor__regressor__estimator__n_estimators', 208)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050796628068253545), ('regressor__regressor__estimator__min_samples_split', 0.06412543939476967), ('regressor__regressor__estimator__n_estimators', 160)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07599857360574183), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05199712361149568), ('regressor__regressor__estimator__min_samples_split', 0.0665612638910025), ('regressor__regressor__estimator__n_estimators', 113)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 920)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05057642180328352), ('regressor__regressor__estimator__min_samples_split', 0.06348740887467613), ('regressor__regressor__estimator__n_estimators', 637)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 1782)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 72)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05054933640233682), ('regressor__regressor__estimator__min_samples_split', 0.07577547637872585), ('regressor__regressor__estimator__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05090531285618139), ('regressor__regressor__estimator__min_samples_split', 0.07322208964467801), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05068367299882118), ('regressor__regressor__estimator__min_samples_split', 0.07525267287815883), ('regressor__regressor__estimator__n_estimators', 70)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050424021509830615), ('regressor__regressor__estimator__min_samples_split', 0.054681454545311266), ('regressor__regressor__estimator__n_estimators', 64)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050909229191074976), ('regressor__regressor__estimator__min_samples_split', 0.07826196192426202), ('regressor__regressor__estimator__n_estimators', 113)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05160906170754733), ('regressor__regressor__estimator__min_samples_split', 0.06469077667237469), ('regressor__regressor__estimator__n_estimators', 388)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05176918465278924), ('regressor__regressor__estimator__min_samples_split', 0.05105586129185765), ('regressor__regressor__estimator__n_estimators', 66)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05123483756301251), ('regressor__regressor__estimator__min_samples_split', 0.07288869516897024), ('regressor__regressor__estimator__n_estimators', 1316)])


Average scores:	 r2: [ 0.099  0.156 -0.041]±[0.105 0.075 0.022]
[array([ 0.0989795 ,  0.15609706, -0.04056859]), array([8.26345367e+00, 1.45479718e+02, 9.38188394e+04]), array([6.18140033e+00, 9.86574701e+01, 1.41216257e+04])]
{6: {'fit_time': array([1.74772525, 1.7533896 , 1.68049479, 1.78526115, 1.76902771]), 'score_time': array([0.0876112 , 0.08986521, 0.09520626, 0.09568071, 0.09314609]), 'test_r2': [array([-0.03609349,  0.27030007, -0.05821269]), array([ 0.09144165,  0.01728535, -0.026118  ]), array([ 0.11008952,  0.17897792, -0.0278342 ]), array([ 0.21419531,  0.11930578, -0.0750121 ]), array([ 0.0237574 ,  0.10955483, -0.06112633])], 'test_rmse': [array([6.59324618e+00, 1.21739254e+02, 1.76618531e+04]), array([8.34179009e+00, 1.35515874e+02, 3.38441215e+05]), array([8.32375421e+00, 1.67853412e+02, 2.43688470e+04]), array([8.54505721e+00, 1.56619367e+02, 1.34126621e+04]), array([9.47491170e+00, 1.52187310e+02, 2.01971034e+04])], 'test_mae': [array([   4.88759629,   84.92760854, 4142.84894536]), array([6.52798111e+00, 9.47961572e+01, 5.39952306e+04]), array([   6.02589394,  106.59009756, 4010.26234827]), array([   6.29084741,  101.55891825, 3543.1295191 ]), array([   7.09483093,  107.27757382, 4847.54949021])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05098596123219673, 'regressor__estimator__min_samples_split': 0.06365493480277629, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 439, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.29888344, 0.30228782, 0.30388546, 0.30775595, 0.30221772]), 'score_time': array([0.03219151, 0.03408766, 0.03314042, 0.03351474, 0.03292942]), 'test_r2': [array([ 0.21824483,  0.07697337, -0.08352106]), array([ 0.1323593 ,  0.1942523 , -0.04831098]), array([ 0.10446043,  0.09981689, -0.02069299]), array([-0.37077499,  0.2079917 , -0.02029984]), array([ 0.17895996,  0.15176184, -0.02887259])], 'test_rmse': [array([8.67870822e+00, 1.74248384e+02, 9.12439279e+03]), array([8.33022332e+00, 1.45076732e+02, 2.83155711e+04]), array([8.99088215e+00, 1.42815608e+02, 9.45648184e+04]), array([7.54271994e+00, 1.37748757e+02, 3.25547514e+05]), array([7.92592683e+00, 1.33240028e+02, 1.50047292e+04])], 'test_mae': [array([   6.18938161,  115.18253398, 2533.48727404]), array([   6.30989895,   98.7903631 , 6078.65750177]), array([6.56774566e+00, 9.87815065e+01, 1.34652948e+04]), array([5.97901848e+00, 8.83465832e+01, 4.59196416e+04]), array([   5.85285859,   98.34989391, 2513.96494855])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([3.45842242, 3.47391438, 3.48383403, 3.46614957, 3.27677774]), 'score_time': array([0.162112  , 0.15894818, 0.1673522 , 0.16694736, 0.15701389]), 'test_r2': [array([ 0.11906312,  0.10137491, -0.03940981]), array([ 0.12304473,  0.10970049, -0.03085453]), array([-0.0205352 ,  0.15288732, -0.02151618]), array([ 0.14815025,  0.21414986, -0.05134338]), array([ 0.04994951,  0.26015051, -0.0387255 ])], 'test_rmse': [array([8.46177131e+00, 1.47267343e+02, 2.39115841e+04]), array([8.14821764e+00, 1.57406116e+02, 6.08040808e+04]), array([6.54685118e+00, 1.50286663e+02, 3.33425627e+05]), array([9.41365166e+00, 1.56344238e+02, 1.41461450e+04]), array([8.74327988e+00, 1.15521601e+02, 1.98550460e+04])], 'test_mae': [array([   6.29250985,   99.2738313 , 4656.08838915]), array([5.92930073e+00, 1.02630336e+02, 1.05197851e+04]), array([5.40724490e+00, 1.08726055e+02, 4.83905038e+04]), array([   6.72395604,   99.95903544, 3126.24333464]), array([   6.54621734,   79.48139224, 3834.2158602 ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 920, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([7.46512461, 7.53397751, 7.63715672, 7.41745973, 7.24373364]), 'score_time': array([0.32100201, 0.36918974, 0.33573151, 0.3487606 , 0.32962775]), 'test_r2': [array([ 0.07650242,  0.19788015, -0.01952389]), array([ 0.16157834,  0.03426111, -0.02283944]), array([ 0.05903924,  0.32369545, -0.04257756]), array([ 0.04405995,  0.10653265, -0.04041106]), array([ 0.08487637,  0.12830423, -0.03876596])], 'test_rmse': [array([7.57811505e+00, 1.47386644e+02, 3.25183285e+05]), array([7.79297472e+00, 1.51703600e+02, 9.46020608e+04]), array([9.85806022e+00, 1.21584831e+02, 3.19711458e+04]), array([9.16620410e+00, 1.46904809e+02, 1.31849707e+04]), array([7.50901344e+00, 1.63212868e+02, 1.19654900e+04])], 'test_mae': [array([5.81123154e+00, 1.04609600e+02, 4.50002226e+04]), array([5.79811355e+00, 1.07651267e+02, 1.41366669e+04]), array([   6.99244418,   81.98752014, 6461.34914419]), array([   6.62774265,   94.85720062, 2598.73561112]), array([   6.06892246,  100.83836538, 2311.65333753])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([0.39025307, 0.3885355 , 0.40556455, 0.39015484, 0.38673592]), 'score_time': array([0.03761482, 0.03598094, 0.03782558, 0.03682852, 0.03698969]), 'test_r2': [array([ 0.07452349,  0.06744203, -0.04254458]), array([ 0.20657497,  0.31993564, -0.02894985]), array([ 0.21183254,  0.23639987, -0.10245125]), array([ 0.03644387,  0.11705757, -0.01730044]), array([ 0.10151647,  0.16140903, -0.06993715])], 'test_rmse': [array([8.49755091e+00, 1.60794553e+02, 1.61412189e+04]), array([8.76451587e+00, 1.02633724e+02, 9.84050817e+04]), array([   7.98290864,  147.31826601, 7819.37197976]), array([8.18134093e+00, 1.85777677e+02, 3.24765557e+05]), array([7.62384353e+00, 1.19056862e+02, 2.36630784e+04])], 'test_mae': [array([   6.32771759,  101.92189306, 3260.75376136]), array([6.52997578e+00, 8.10149795e+01, 1.65062163e+04]), array([   5.96117018,  102.15581062, 2383.80933244]), array([6.12824197e+00, 1.20149001e+02, 4.23522278e+04]), array([5.93940013e+00, 8.56836326e+01, 6.05020012e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05068367299882118, 'regressor__estimator__min_samples_split': 0.07525267287815883, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 70, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([0.29709888, 0.29738188, 0.29555202, 0.32262516, 0.29595304]), 'score_time': array([0.03397894, 0.03479338, 0.03517365, 0.0359714 , 0.03294611]), 'test_r2': [array([ 0.1712868 ,  0.13161786, -0.05646973]), array([ 0.13695386,  0.09123085, -0.01678093]), array([ 0.18967211,  0.29473203, -0.05737823]), array([-0.00553778,  0.16144315, -0.03857038]), array([ 0.08884002,  0.08896634, -0.02073018])], 'test_rmse': [array([6.84053766e+00, 1.74915644e+02, 3.28619195e+04]), array([8.35572681e+00, 1.28283843e+02, 9.41250406e+04]), array([8.18772739e+00, 1.10842479e+02, 9.55428051e+03]), array([8.13829407e+00, 1.71486802e+02, 1.28678671e+04]), array([9.89565051e+00, 1.37112193e+02, 3.27276676e+05])], 'test_mae': [array([5.40819515e+00, 1.11323372e+02, 7.59790486e+03]), array([5.85357340e+00, 9.44212430e+01, 1.20922322e+04]), array([   6.51708504,   82.93910373, 2225.81041369]), array([   5.96935635,  110.31185869, 2480.03693235]), array([7.29912097e+00, 9.38761143e+01, 4.66403241e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([4.85252666, 4.97803974, 5.01249957, 4.88249755, 4.85687137]), 'score_time': array([0.21586013, 0.23927331, 0.24883032, 0.22157884, 0.22460413]), 'test_r2': [array([ 0.1397002 ,  0.14870948, -0.03924404]), array([ 0.09709677,  0.10551258, -0.01419703]), array([ 0.18820129,  0.16086407, -0.01571665]), array([ 0.20603029,  0.10663061, -0.0822403 ]), array([ 0.10877892,  0.2162892 , -0.02142181])], 'test_rmse': [array([8.24006328e+00, 1.20118825e+02, 2.52058372e+04]), array([7.60857747e+00, 1.58061245e+02, 9.36148965e+04]), array([8.11101400e+00, 1.43597417e+02, 3.20549772e+05]), array([8.37112134e+00, 1.85428535e+02, 2.28100340e+04]), array([8.45664708e+00, 1.21698613e+02, 5.83106078e+04])], 'test_mae': [array([   6.08831002,   91.63441839, 4898.19452788]), array([5.53435318e+00, 9.72778113e+01, 1.10765551e+04]), array([6.18382446e+00, 9.87634861e+01, 3.98740594e+04]), array([   6.28863291,  113.70858824, 6288.008909  ]), array([6.39631833e+00, 9.32143010e+01, 8.44503475e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05123483756301251, 'regressor__estimator__min_samples_split': 0.07288869516897024, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 1316, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.0989795 ,  0.15609706, -0.04056859]), 'r2_stdev': array([0.10488673, 0.07505887, 0.0218897 ]), 'rmse_avg': array([8.26345367e+00, 1.45479718e+02, 9.38188394e+04]), 'rmse_stdev': array([7.72321973e-01, 2.06753696e+01, 1.20176705e+05]), 'mae_avg': array([6.18140033e+00, 9.86574701e+01, 1.41216257e+04]), 'mae_stdev': array([4.80644534e-01, 9.97830838e+00, 1.64566983e+04]), 'r2_avg_aggregate': 0.07150265576336806, 'r2_stdev_aggregate': 0.06727843378042635, 'rmse_avg_aggregate': 31324.194205242267, 'rmse_stdev_aggregate': 40066.05074794845, 'mae_avg_aggregate': 4742.154859428566, 'mae_stdev_aggregate': 5489.052428710438}
scaler
Filename: (PDI-Mw-concentration-temperature-Ra)_RF_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-Ra)_RF_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-Ra)_RF_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-Ra)_RF_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c202n11>
Subject: Job 288779: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c201n03> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:18:21 2025
Job was executed on host(s) <6*c202n11>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:18:22 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:18:22 2025
Terminated at Mon Jan 20 00:54:48 2025
Results reported at Mon Jan 20 00:54:48 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' 'Ra'                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   21648.25 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.97 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   5796 sec.
    Turnaround time :                            5787 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05082056811112431), ('regressor__regressor__estimator__min_samples_split', 0.054120083983781556), ('regressor__regressor__estimator__n_estimators', 67)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.0540706717594834), ('regressor__regressor__estimator__min_samples_split', 0.06679879212409778), ('regressor__regressor__estimator__n_estimators', 57)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05226723056006356), ('regressor__regressor__estimator__min_samples_split', 0.09634495953016388), ('regressor__regressor__estimator__n_estimators', 85)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05080977494497714), ('regressor__regressor__estimator__min_samples_split', 0.06357208438893225), ('regressor__regressor__estimator__n_estimators', 98)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.050423354040773284), ('regressor__regressor__estimator__min_samples_split', 0.05602152625869873), ('regressor__regressor__estimator__n_estimators', 85)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05645449939289039), ('regressor__regressor__estimator__min_samples_split', 0.050296538462166286), ('regressor__regressor__estimator__n_estimators', 91)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07170722702127358), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.06249356017155798), ('regressor__regressor__estimator__n_estimators', 1147)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09050155701119175), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.050246831607709166), ('regressor__regressor__estimator__min_samples_split', 0.05954719949796721), ('regressor__regressor__estimator__n_estimators', 216)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09785136347006533), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.059066508538113405), ('regressor__regressor__estimator__min_samples_split', 0.06537088445224708), ('regressor__regressor__estimator__n_estimators', 51)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 92)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.12290125298856061), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050909229191074976), ('regressor__regressor__estimator__min_samples_split', 0.07826196192426202), ('regressor__regressor__estimator__n_estimators', 113)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.0955365792084403), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.051781732261304246), ('regressor__regressor__estimator__min_samples_split', 0.05002793125462603), ('regressor__regressor__estimator__n_estimators', 384)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.0501577624388521), ('regressor__regressor__estimator__min_samples_split', 0.061710611305696945), ('regressor__regressor__estimator__n_estimators', 52)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07233502943026648), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])


Average scores:	 r2: [ 0.073  0.104 -0.041]±[0.137 0.075 0.022]
[array([ 0.07320518,  0.10361421, -0.04057382]), array([8.35763507e+00, 1.49737540e+02, 9.38188942e+04]), array([6.25173241e+00, 1.01280898e+02, 1.41217052e+04])]
{6: {'fit_time': array([0.27275324, 0.27499533, 0.29091191, 0.27456331, 0.19465542]), 'score_time': array([0.01636171, 0.01640892, 0.01928639, 0.01655865, 0.01653624]), 'test_r2': [array([-0.30973227,  0.13793709, -0.05822471]), array([ 0.04746954, -0.10120467, -0.02611814]), array([ 0.12129511,  0.13758365, -0.02783653]), array([ 0.23601627,  0.11229536, -0.07501849]), array([ 0.08693621,  0.1034823 , -0.0611279 ])], 'test_rmse': [array([7.41295021e+00, 1.32320753e+02, 1.76619534e+04]), array([8.54126664e+00, 1.43453278e+02, 3.38441238e+05]), array([8.27118261e+00, 1.72032795e+02, 2.43688746e+04]), array([8.42557831e+00, 1.57241484e+02, 1.34127020e+04]), array([9.16319341e+00, 1.52705361e+02, 2.01971185e+04])], 'test_mae': [array([   5.66523758,   95.79237586, 4142.90037975]), array([6.26621556e+00, 9.89106702e+01, 5.39952675e+04]), array([   5.83032619,  108.27629843, 4010.35737433]), array([   6.29058705,   98.50011395, 3543.17639689]), array([   7.10529195,  106.70404989, 4847.58789441])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.46233058, 0.46300054, 0.47481608, 0.45647645, 0.45533252]), 'score_time': array([0.02932143, 0.02803254, 0.026649  , 0.02793837, 0.02902985]), 'test_r2': [array([ 0.17452235,  0.083258  , -0.08354118]), array([ 0.19206489,  0.11307664, -0.04831234]), array([ 0.02494389,  0.05449177, -0.0206953 ]), array([-0.31096658,  0.1493226 , -0.02030007]), array([ 0.15909902,  0.09838575, -0.02888572])], 'test_rmse': [array([8.91810055e+00, 1.73654166e+02, 9.12447749e+03]), array([8.03849833e+00, 1.52209330e+02, 2.83155894e+04]), array([9.38155264e+00, 1.46366909e+02, 9.45649253e+04]), array([7.37633626e+00, 1.42759584e+02, 3.25547551e+05]), array([8.02121799e+00, 1.37368196e+02, 1.50048249e+04])], 'test_mae': [array([   6.11613946,  114.69859998, 2533.58749042]), array([   6.33476142,  102.79196568, 6078.68490968]), array([7.21174089e+00, 9.83841014e+01, 1.34653613e+04]), array([5.89712077e+00, 9.12425567e+01, 4.59197268e+04]), array([   5.70227056,  102.53373898, 2514.14947261])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05080977494497714, 'regressor__estimator__min_samples_split': 0.06357208438893225, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 98, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.26555562, 0.19834471, 0.27985764, 0.19782782, 0.2814517 ]), 'score_time': array([0.01617503, 0.01750755, 0.02027082, 0.0177083 , 0.01823831]), 'test_r2': [array([ 0.06698976,  0.061539  , -0.03941102]), array([ 0.15426652,  0.08208814, -0.03085693]), array([-0.15659896,  0.12311287, -0.02151635]), array([ 0.1860093 ,  0.15764901, -0.05134981]), array([-0.05640488,  0.17748623, -0.03873755])], 'test_rmse': [array([8.70827416e+00, 1.50496118e+02, 2.39115980e+04]), array([8.00185467e+00, 1.59828427e+02, 6.08041517e+04]), array([6.96963239e+00, 1.52905004e+02, 3.33425655e+05]), array([9.20208721e+00, 1.61867089e+02, 1.41461883e+04]), array([9.21968827e+00, 1.21804433e+02, 1.98551612e+04])], 'test_mae': [array([   6.34758374,  100.1285445 , 4656.13293443]), array([6.04213735e+00, 1.01465444e+02, 1.05198785e+04]), array([5.57478503e+00, 1.11051935e+02, 4.83905666e+04]), array([   6.74312303,  105.96567527, 3126.33468049]), array([   6.86843012,   81.74441652, 3834.31375497])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([0.77941728, 1.04741955, 0.85683894, 0.78393698, 0.9176662 ]), 'score_time': array([0.04039288, 0.05277443, 0.04490066, 0.04714656, 0.04061723]), 'test_r2': [array([-0.04339891,  0.19306103, -0.01952412]), array([ 0.25637423,  0.09998768, -0.02284034]), array([ 0.07798289,  0.25353384, -0.04258451]), array([-0.00434086,  0.02452818, -0.04042157]), array([ 0.05788784,  0.04815451, -0.03877469])], 'test_rmse': [array([8.05505489e+00, 1.47828729e+02, 3.25183321e+05]), array([7.33920874e+00, 1.46450296e+02, 9.46021023e+04]), array([9.75832323e+00, 1.27735997e+02, 3.19712523e+04]), array([9.39538888e+00, 1.53498464e+02, 1.31850373e+04]), array([7.61893559e+00, 1.70551349e+02, 1.19655403e+04])], 'test_mae': [array([6.07261111e+00, 1.02480799e+02, 4.50002894e+04]), array([5.47780814e+00, 9.99967065e+01, 1.41367061e+04]), array([   7.01998131,   88.86224343, 6461.45724234]), array([   6.85489383,  101.46794836, 2598.86524527]), array([   6.1815848 ,  108.51712271, 2311.78388475])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.050246831607709166, 'regressor__estimator__min_samples_split': 0.05954719949796721, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 216, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([0.46510649, 0.46197176, 0.46195674, 0.35152078, 0.46919394]), 'score_time': array([0.02462983, 0.02622437, 0.02644277, 0.02362633, 0.02759147]), 'test_r2': [array([ 0.05012409,  0.01643763, -0.04254818]), array([ 0.16168302,  0.22340252, -0.02895066]), array([ 0.19700196,  0.20572527, -0.10246529]), array([ 0.09047104,  0.0828482 , -0.0173007 ]), array([ 0.04902475,  0.04248259, -0.06994622])], 'test_rmse': [array([8.60883756e+00, 1.65133188e+02, 1.61412467e+04]), array([9.00905240e+00, 1.09676370e+02, 9.84051205e+04]), array([   8.05766397,  150.24809471, 7819.42175731]), array([7.94866598e+00, 1.89342429e+02, 3.24765600e+05]), array([7.84338480e+00, 1.27219205e+02, 2.36631786e+04])], 'test_mae': [array([   6.41881754,  104.87993108, 3260.84221224]), array([6.49584335e+00, 8.58234196e+01, 1.65062984e+04]), array([   5.90696023,  105.37786736, 2383.86390717]), array([5.98456479e+00, 1.18676498e+02, 4.23523268e+04]), array([   6.15038967,   90.5006126 , 6050.28160596])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 92, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([7.03061438, 6.98646474, 7.02652931, 7.25900674, 7.23176932]), 'score_time': array([0.30508327, 0.30615163, 0.34484172, 0.32097054, 0.31836534]), 'test_r2': [array([ 0.12080746,  0.08090427, -0.05647676]), array([ 0.09218671, -0.03013304, -0.01678153]), array([ 0.20633997,  0.29203953, -0.05739541]), array([-0.08678746,  0.08127536, -0.0385817 ]), array([ 0.14940341,  0.07925416, -0.02073028])], 'test_rmse': [array([7.04579669e+00, 1.79950719e+02, 3.28620288e+04]), array([8.56969753e+00, 1.36581486e+02, 9.41250683e+04]), array([8.10308203e+00, 1.11053860e+02, 9.55435812e+03]), array([8.46070381e+00, 1.79496972e+02, 1.28679372e+04]), array([9.56112179e+00, 1.37841106e+02, 3.27276694e+05])], 'test_mae': [array([5.45094245e+00, 1.14311199e+02, 7.59800316e+03]), array([5.87983767e+00, 1.05399553e+02, 1.20922796e+04]), array([   6.43545074,   82.15747827, 2225.98137422]), array([   6.44902709,  119.16832681, 2480.16347933]), array([7.03865057e+00, 9.12200105e+01, 4.66403953e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.2883358 , 0.28421521, 0.28919053, 0.28513074, 0.28546572]), 'score_time': array([0.01846147, 0.01896882, 0.01896024, 0.01926494, 0.01885414]), 'test_r2': [array([-0.08486821,  0.03211965, -0.03924557]), array([ 0.0797196 ,  0.06168364, -0.01419861]), array([ 0.25134622,  0.12908098, -0.01571678]), array([ 0.22532771,  0.1055591 , -0.0822441 ]), array([ 0.09998579,  0.11404863, -0.02142466])], 'test_rmse': [array([9.25324639e+00, 1.28080500e+02, 2.52058558e+04]), array([7.68144540e+00, 1.61887355e+02, 9.36149692e+04]), array([7.78917542e+00, 1.46291589e+02, 3.20549792e+05]), array([8.26876560e+00, 1.85539703e+02, 2.28100740e+04]), array([8.49826294e+00, 1.29393557e+02, 5.83106892e+04])], 'test_mae': [array([   6.73983251,   94.10307253, 4898.24044387]), array([5.64958453e+00, 1.01324410e+02, 1.10766253e+04]), array([5.81219592e+00, 9.95582922e+01, 3.98741078e+04]), array([   6.35129482,  116.1362375 , 6288.05772109]), array([6.44461271e+00, 9.66792268e+01, 8.44508607e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.07320518,  0.10361421, -0.04057382]), 'r2_stdev': array([0.13704095, 0.07547525, 0.02189315]), 'rmse_avg': array([8.35763507e+00, 1.49737540e+02, 9.38188942e+04]), 'rmse_stdev': array([7.24712083e-01, 1.96638819e+01, 1.20176692e+05]), 'mae_avg': array([6.25173241e+00, 1.01280898e+02, 1.41217052e+04]), 'mae_stdev': array([4.76600165e-01, 9.38465840e+00, 1.64566890e+04]), 'r2_avg_aggregate': 0.045415192349489576, 'r2_stdev_aggregate': 0.07813645112642156, 'rmse_avg_aggregate': 31325.663112182287, 'rmse_stdev_aggregate': 40065.69356529163, 'mae_avg_aggregate': 4743.079267486886, 'mae_stdev_aggregate': 5488.850075169954}
scaler
Filename: (polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RF_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RF_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RF_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH-solvent dP-solvent dD-solvent dH)_RF_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n04>
Subject: Job 288786: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c201n10> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:21:24 2025
Job was executed on host(s) <6*c201n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:21:25 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:21:25 2025
Terminated at Mon Jan 20 00:57:28 2025
Results reported at Mon Jan 20 00:57:28 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats "polymer dP" "polymer dD" "polymer dH" "solvent dP" "solvent dD" "solvent dH"                                


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   21797.51 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.97 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   5783 sec.
    Turnaround time :                            5764 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07769246836573881), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.12468411747280302), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051805658216930506), ('regressor__regressor__estimator__min_samples_split', 0.06925621302063295), ('regressor__regressor__estimator__n_estimators', 63)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09605507378897148), ('regressor__regressor__estimator__n_estimators', 998)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.06100689244089601), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.0907336143490243), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.06603789975625105), ('regressor__regressor__estimator__min_samples_split', 0.07655510290044698), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.0518427242673638), ('regressor__regressor__estimator__min_samples_split', 0.127590921284074), ('regressor__regressor__estimator__n_estimators', 1725)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051494031085785236), ('regressor__regressor__estimator__min_samples_split', 0.056004565892354384), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 1055)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09078564788610838), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07464782014585598), ('regressor__regressor__estimator__n_estimators', 853)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05076209071725598), ('regressor__regressor__estimator__min_samples_split', 0.06866074972884742), ('regressor__regressor__estimator__n_estimators', 72)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09087338496636638), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05159222310478712), ('regressor__regressor__estimator__min_samples_split', 0.08407423329208044), ('regressor__regressor__estimator__n_estimators', 332)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.151323520437573), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05221940440457929), ('regressor__regressor__estimator__min_samples_split', 0.0510253069176794), ('regressor__regressor__estimator__n_estimators', 334)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.051781732261304246), ('regressor__regressor__estimator__min_samples_split', 0.05002793125462603), ('regressor__regressor__estimator__n_estimators', 384)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.050515055853842514), ('regressor__regressor__estimator__min_samples_split', 0.05143736648477392), ('regressor__regressor__estimator__n_estimators', 213)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.11716003845417197), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.08099366028582039), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05041714068915762), ('regressor__regressor__estimator__min_samples_split', 0.06880992504342154), ('regressor__regressor__estimator__n_estimators', 70)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05208503640414128), ('regressor__regressor__estimator__min_samples_split', 0.09038898576597479), ('regressor__regressor__estimator__n_estimators', 52)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])


Average scores:	 r2: [ 0.039  0.046 -0.041]±[0.129 0.072 0.022]
[array([ 0.03920304,  0.04584055, -0.04057391]), array([8.51594438e+00, 1.54440051e+02, 9.38188954e+04]), array([6.46345283e+00, 1.04142321e+02, 1.41217050e+04])]
{6: {'fit_time': array([6.84299207, 7.04348278, 6.90648031, 6.89628148, 6.95149255]), 'score_time': array([0.29054856, 0.31200576, 0.30241871, 0.32275605, 0.32404613]), 'test_r2': [array([-0.25615328,  0.05177841, -0.05822496]), array([ 0.02157384, -0.20774479, -0.02611814]), array([ 0.03563019,  0.09246727, -0.02783677]), array([ 0.17621429,  0.07126215, -0.07501857]), array([ 0.04501633,  0.06747202, -0.06112797])], 'test_rmse': [array([7.25974118e+00, 1.38775692e+02, 1.76619555e+04]), array([8.65659049e+00, 1.50232551e+02, 3.38441238e+05]), array([8.66498652e+00, 1.76475290e+02, 2.43688775e+04]), array([8.74912845e+00, 1.60834593e+02, 1.34127025e+04]), array([9.37117971e+00, 1.55742014e+02, 2.01971191e+04])], 'test_mae': [array([   5.65177997,   97.15598537, 4142.89992713]), array([6.49945678e+00, 1.04120140e+02, 5.39952678e+04]), array([   6.33750415,  108.07348159, 4010.35767547]), array([   6.64331777,  106.76977246, 3543.17657097]), array([   7.222967  ,  108.10988323, 4847.58702437])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.07769246836573881, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([0.23208666, 0.33295321, 0.33133173, 0.3271122 , 0.32770109]), 'score_time': array([0.01840305, 0.02117825, 0.02056718, 0.01985383, 0.01995277]), 'test_r2': [array([ 0.1650865 ,  0.0012187 , -0.08354123]), array([ 0.09885293,  0.04216445, -0.0483124 ]), array([ 0.02997848,  0.0799076 , -0.02069531]), array([-0.34397746,  0.0483159 , -0.02030007]), array([ 0.11026303,  0.10898322, -0.02888597])], 'test_rmse': [array([8.96892614e+00, 1.81257859e+02, 9.12447771e+03]), array([8.48954711e+00, 1.58177134e+02, 2.83155902e+04]), array([9.35730100e+00, 1.44386293e+02, 9.45649259e+04]), array([7.46862903e+00, 1.50997317e+02, 3.25547551e+05]), array([8.25085033e+00, 1.36558505e+02, 1.50048267e+04])], 'test_mae': [array([   6.4481989 ,  116.37725151, 2533.58706216]), array([   6.70565069,  106.27896394, 6078.684953  ]), array([7.26676712e+00, 9.90895239e+01, 1.34653617e+04]), array([5.86575858e+00, 1.00038770e+02, 4.59197271e+04]), array([   6.14933188,   98.39340435, 2514.14936145])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.051805658216930506, 'regressor__estimator__min_samples_split': 0.06925621302063295, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 63, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.28371096, 0.27635765, 0.19076705, 0.27688527, 0.26934028]), 'score_time': array([0.01734591, 0.01810694, 0.01570082, 0.01831365, 0.01980877]), 'test_r2': [array([ 0.01681645, -0.02548025, -0.03941125]), array([ 0.16816283,  0.09535639, -0.03085697]), array([-0.23564059,  0.07165183, -0.02151636]), array([ 0.16045862,  0.07368343, -0.05134985]), array([-0.03513863,  0.11869474, -0.03873772])], 'test_rmse': [array([8.93935511e+00, 1.57318875e+02, 2.39116006e+04]), array([7.93584288e+00, 1.58669077e+02, 6.08041529e+04]), array([7.20384827e+00, 1.57327736e+02, 3.33425656e+05]), array([9.34539531e+00, 1.69742943e+02, 1.41461886e+04]), array([9.12641675e+00, 1.26082464e+02, 1.98551629e+04])], 'test_mae': [array([   6.68978874,  103.72289655, 4656.13116006]), array([5.87357621e+00, 1.04054817e+02, 1.05198794e+04]), array([5.88678021e+00, 1.11900144e+02, 4.83905668e+04]), array([   6.91838553,  108.99193328, 3126.33510263]), array([   6.83031667,   89.24396387, 3834.3141495 ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([3.73973775, 3.75880456, 3.53934932, 3.63866186, 3.76513433]), 'score_time': array([0.1753161 , 0.1739254 , 0.16615748, 0.16702199, 0.18238616]), 'test_r2': [array([-0.06810026,  0.1157735 , -0.01952413]), array([ 0.21694341,  0.03105723, -0.02284035]), array([ 0.07990356,  0.13990434, -0.04258461]), array([-0.06260277, -0.0527106 , -0.04042158]), array([ 0.02227122,  0.0090787 , -0.03877488])], 'test_rmse': [array([8.14984455e+00, 1.54746296e+02, 3.25183322e+05]), array([7.53127662e+00, 1.51955034e+02, 9.46021027e+04]), array([9.74815406e+00, 1.37113943e+02, 3.19712539e+04]), array([9.66406108e+00, 1.59459783e+02, 1.31850374e+04]), array([7.76161678e+00, 1.74016933e+02, 1.19655413e+04])], 'test_mae': [array([6.45459907e+00, 1.07148395e+02, 4.50002898e+04]), array([5.75081988e+00, 1.03334581e+02, 1.41367064e+04]), array([   6.98830317,   93.04115635, 6461.457318  ]), array([   7.09745854,  104.99670418, 2598.86382111]), array([   6.34525727,  113.65612538, 2311.78377982])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 1055, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([6.75348735, 6.94738626, 6.90540791, 6.8520906 , 6.73000598]), 'score_time': array([0.28261852, 0.30003119, 0.31076956, 0.33486772, 0.28975725]), 'test_r2': [array([ 0.07553824,  0.08446817, -0.04254822]), array([ 0.11194916,  0.13966314, -0.02895066]), array([ 0.10998157,  0.12150823, -0.10246529]), array([ 0.06843796,  0.00654389, -0.01730071]), array([ 0.07025513, -0.06613677, -0.06994657])], 'test_rmse': [array([8.49289105e+00, 1.59319941e+02, 1.61412471e+04]), array([9.27243711e+00, 1.15438146e+02, 9.84051208e+04]), array([   8.48303791,  158.01286523, 7819.42176505]), array([8.04436695e+00, 1.97061451e+02, 3.24765601e+05]), array([7.75533940e+00, 1.34241192e+02, 2.36631826e+04])], 'test_mae': [array([   6.60070743,  105.11095924, 3260.8424633 ]), array([6.79930380e+00, 8.76071920e+01, 1.65062988e+04]), array([   6.39725867,  109.37479391, 2383.86005841]), array([6.11693532e+00, 1.22371504e+02, 4.23523271e+04]), array([5.97379339e+00, 9.42043741e+01, 6.05027879e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.09087338496636638, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([6.7769444 , 6.92616081, 7.12341809, 6.82879901, 6.70449758]), 'score_time': array([0.30637646, 0.31324315, 0.4073174 , 0.28980708, 0.28207064]), 'test_r2': [array([ 0.1043086 ,  0.05931366, -0.0564768 ]), array([ 0.02956491, -0.0282903 , -0.0167816 ]), array([ 0.15951636,  0.14115748, -0.05739543]), array([-0.1492603 ,  0.00199311, -0.03858179]), array([ 0.1305478 ,  0.01274796, -0.02073029])], 'test_rmse': [array([7.11159985e+00, 1.82052074e+02, 3.28620295e+04]), array([8.86034167e+00, 1.36459270e+02, 9.41250715e+04]), array([8.33868586e+00, 1.22316747e+02, 9.55435821e+03]), array([8.70048344e+00, 1.87081660e+02, 1.28679378e+04]), array([9.66651403e+00, 1.42732504e+02, 3.27276694e+05])], 'test_mae': [array([5.55197025e+00, 1.12713582e+02, 7.59800355e+03]), array([6.24177711e+00, 1.00588657e+02, 1.20922791e+04]), array([   6.71529278,   90.67647109, 2225.98190697]), array([   6.64972773,  122.4551181 , 2480.16258956]), array([7.23934945e+00, 9.70369504e+01, 4.66403955e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([6.85056448, 6.76813173, 6.87807655, 7.23730993, 6.88284421]), 'score_time': array([0.29481435, 0.29063249, 0.32629871, 0.37189293, 0.29747701]), 'test_r2': [array([-0.09075445, -0.0342297 , -0.03924598]), array([-0.01826817,  0.02171168, -0.01419866]), array([ 0.18884807, -0.00264194, -0.01571678]), array([ 0.15592266,  0.07872068, -0.08224412]), array([ 0.07996026,  0.13505586, -0.02142485])], 'test_rmse': [array([9.27831541e+00, 1.32397773e+02, 2.52058607e+04]), array([8.08004810e+00, 1.65299567e+02, 9.36149715e+04]), array([8.10778224e+00, 1.56965209e+02, 3.20549792e+05]), array([8.63123199e+00, 1.88302764e+02, 2.28100742e+04]), array([8.59228699e+00, 1.27850297e+02, 5.83106947e+04])], 'test_mae': [array([   6.95314065,   97.68249692, 4898.24041461]), array([6.02042324e+00, 1.01176199e+02, 1.10766258e+04]), array([6.19980342e+00, 1.06351692e+02, 3.98741079e+04]), array([   6.76447833,  117.18698152, 6288.05795509]), array([6.37086928e+00, 9.59463700e+01, 8.44508457e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.08099366028582039, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.03920304,  0.04584055, -0.04057391]), 'r2_stdev': array([0.12873286, 0.07178616, 0.02189316]), 'rmse_avg': array([8.51594438e+00, 1.54440051e+02, 9.38188954e+04]), 'rmse_stdev': array([7.19240614e-01, 1.95017662e+01, 1.20176692e+05]), 'mae_avg': array([6.46345283e+00, 1.04142321e+02, 1.41217050e+04]), 'mae_stdev': array([4.59770671e-01, 8.49438346e+00, 1.64566893e+04]), 'r2_avg_aggregate': 0.014823228697928901, 'r2_stdev_aggregate': 0.07413739421395872, 'rmse_avg_aggregate': 31327.283799902285, 'rmse_stdev_aggregate': 40065.63758389017, 'mae_avg_aggregate': 4744.103576449973, 'mae_stdev_aggregate': 5488.547803774168}
scaler
Filename: (polymer dP-polymer dD-polymer dH)_RF_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH)_RF_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH)_RF_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(polymer dP-polymer dD-polymer dH)_RF_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n03>
Subject: Job 288796: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c023n02> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:23:15 2025
Job was executed on host(s) <6*c201n03>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:23:16 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:23:16 2025
Terminated at Mon Jan 20 00:59:35 2025
Results reported at Mon Jan 20 00:59:35 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats "polymer dP" "polymer dD" "polymer dH"                                


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   22144.40 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.97 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   5796 sec.
    Turnaround time :                            5780 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09705197720373507), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07369038491121309), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09289320510190399), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.10403891243039068), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.07277100258828698), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.050036229593508806), ('regressor__regressor__estimator__min_samples_split', 0.08785812291108251), ('regressor__regressor__estimator__n_estimators', 188)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.08663171548728582), ('regressor__regressor__estimator__min_samples_split', 0.11598206148940271), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05391817862344186), ('regressor__regressor__estimator__min_samples_split', 0.06414306561071512), ('regressor__regressor__estimator__n_estimators', 57)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.09842035759121483), ('regressor__regressor__estimator__min_samples_split', 0.09700620507873667), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.0511112590226121), ('regressor__regressor__estimator__min_samples_split', 0.05866087268822301), ('regressor__regressor__estimator__n_estimators', 180)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09412429624052332), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.08626024549458873), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.0913901294647059), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.0549916684149152), ('regressor__regressor__estimator__min_samples_split', 0.06446665820678342), ('regressor__regressor__estimator__n_estimators', 52)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.08818134946476977), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 1166)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05075361050683714), ('regressor__regressor__estimator__min_samples_split', 0.05660874421191145), ('regressor__regressor__estimator__n_estimators', 127)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05071388419214858), ('regressor__regressor__estimator__min_samples_split', 0.06724929626288029), ('regressor__regressor__estimator__n_estimators', 55)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.09423093942449441), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051907680310410056), ('regressor__regressor__estimator__min_samples_split', 0.05093923097989127), ('regressor__regressor__estimator__n_estimators', 1803)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.06747779649013264), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05466586989340593), ('regressor__regressor__estimator__min_samples_split', 0.05035255377369423), ('regressor__regressor__estimator__n_estimators', 99)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051846529914625426), ('regressor__regressor__estimator__min_samples_split', 0.05035677251322243), ('regressor__regressor__estimator__n_estimators', 242)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 73)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.07551930880938237), ('regressor__regressor__estimator__min_samples_split', 0.10271477609560678), ('regressor__regressor__estimator__n_estimators', 2000)])


Average scores:	 r2: [ 0.031  0.079 -0.041]±[0.144 0.052 0.022]
[array([ 0.03103669,  0.0793376 , -0.04057391]), array([8.54424127e+00, 1.51729698e+02, 9.38188954e+04]), array([6.51664105e+00, 1.03024793e+02, 1.41217049e+04])]
{6: {'fit_time': array([0.2889967 , 0.27336621, 0.27804828, 0.26753998, 0.27154827]), 'score_time': array([0.02031207, 0.01862478, 0.01770616, 0.01743507, 0.01699901]), 'test_r2': [array([-0.44614371,  0.10353076, -0.05822495]), array([ 0.00236518,  0.03081511, -0.02611814]), array([ 0.06330334,  0.08446418, -0.02783678]), array([ 0.18291854,  0.0648879 , -0.07501854]), array([ 0.03871742,  0.10519947, -0.06112798])], 'test_rmse': [array([7.78942760e+00, 1.34935486e+02, 1.76619554e+04]), array([8.74115144e+00, 1.34579767e+02, 3.38441238e+05]), array([8.53975821e+00, 1.77251706e+02, 2.43688777e+04]), array([8.71345404e+00, 1.61385580e+02, 1.34127023e+04]), array([9.40203428e+00, 1.52559047e+02, 2.01971192e+04])], 'test_mae': [array([   6.03247125,   94.41374926, 4142.89989848]), array([6.66201043e+00, 9.37558294e+01, 5.39952677e+04]), array([   6.25640405,  111.3872583 , 4010.35759208]), array([   6.47672438,  106.08349869, 3543.17677761]), array([   7.49161665,  108.00559187, 4847.58694881])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.09705197720373507, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 13: {'fit_time': array([7.1835525 , 6.99960995, 6.84315157, 7.15070796, 6.86657906]), 'score_time': array([0.32576418, 0.31973219, 0.31640935, 0.35074401, 0.30757236]), 'test_r2': [array([ 0.14003055,  0.0850498 , -0.08354125]), array([ 0.17991427,  0.14177778, -0.04831241]), array([-0.00738764,  0.02227899, -0.02069531]), array([-0.2854199 ,  0.11885896, -0.02030007]), array([ 0.09357578,  0.00088161, -0.02888597])], 'test_rmse': [array([9.10251112e+00, 1.73484377e+02, 9.12447777e+03]), array([8.09871868e+00, 1.49726304e+02, 2.83155903e+04]), array([9.53582394e+00, 1.48839334e+02, 9.45649259e+04]), array([7.30411170e+00, 1.45293283e+02, 3.25547551e+05]), array([8.32786431e+00, 1.44605326e+02, 1.50048267e+04])], 'test_mae': [array([   6.56545228,  114.16939534, 2533.58714528]), array([   6.53969744,   98.81621108, 6078.68472049]), array([7.40284300e+00, 1.00691131e+02, 1.34653617e+04]), array([5.81939356e+00, 9.44570815e+01, 4.59197270e+04]), array([   6.0859672 ,  109.05721715, 2514.14925582])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.07277100258828698, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 42: {'fit_time': array([0.22433519, 0.27725554, 0.27283669, 0.20630312, 0.27972674]), 'score_time': array([0.01733565, 0.01928949, 0.01821637, 0.01749563, 0.01929426]), 'test_r2': [array([ 0.05831951,  0.10861658, -0.03941126]), array([ 0.10123877,  0.05763544, -0.03085698]), array([-0.22587083,  0.0707507 , -0.02151636]), array([ 0.13819717,  0.11733848, -0.05134986]), array([-0.11196325,  0.10756759, -0.03873772])], 'test_rmse': [array([8.74864257e+00, 1.46672757e+02, 2.39116008e+04]), array([8.24890048e+00, 1.61943309e+02, 6.08041530e+04]), array([7.17531264e+00, 1.57404075e+02, 3.33425656e+05]), array([9.46848685e+00, 1.65694888e+02, 1.41461886e+04]), array([9.45902242e+00, 1.26875911e+02, 1.98551628e+04])], 'test_mae': [array([   6.56827388,   99.12631033, 4656.13066188]), array([6.32442759e+00, 1.03812985e+02, 1.05198793e+04]), array([5.84823944e+00, 1.14589216e+02, 4.83905667e+04]), array([   6.98401714,  108.45447719, 3126.33503471]), array([   7.26804927,   86.01059079, 3834.31393895])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'log2', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 69: {'fit_time': array([6.85530257, 6.74533701, 6.91484618, 6.89119864, 7.04086423]), 'score_time': array([0.30382323, 0.32111812, 0.31293774, 0.29756451, 0.31768775]), 'test_r2': [array([-0.07789933,  0.1143149 , -0.01952413]), array([ 0.18283866,  0.07239602, -0.02284035]), array([ 0.11446849,  0.19161018, -0.04258463]), array([-0.0490489 ,  0.01772028, -0.04042159]), array([ 0.008237  ,  0.03566898, -0.03877486])], 'test_rmse': [array([8.18714375e+00, 1.54873876e+02, 3.25183322e+05]), array([7.69353495e+00, 1.48678212e+02, 9.46021027e+04]), array([9.56329865e+00, 1.32928670e+02, 3.19712541e+04]), array([9.60222903e+00, 1.54033172e+02, 1.31850374e+04]), array([7.81712307e+00, 1.71666281e+02, 1.19655413e+04])], 'test_mae': [array([6.11522480e+00, 1.09601085e+02, 4.50002897e+04]), array([5.93479447e+00, 1.05738629e+02, 1.41367064e+04]), array([   6.91241132,   89.99332402, 6461.45721474]), array([   7.23197542,  105.22471343, 2598.8640742 ]), array([   6.39371327,  104.97289166, 2311.78347687])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.08626024549458873, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 420: {'fit_time': array([0.27862072, 0.27359009, 0.27650118, 0.27685642, 0.19471288]), 'score_time': array([0.01839733, 0.01965594, 0.01801443, 0.01841164, 0.01857758]), 'test_r2': [array([ 0.03475106,  0.02954661, -0.04254821]), array([ 0.13168615,  0.11812988, -0.02895066]), array([ 0.14366276,  0.14586654, -0.10246532]), array([ 0.04102384,  0.08921536, -0.01730071]), array([-0.08582657,  0.03280251, -0.06994658])], 'test_rmse': [array([8.67822175e+00, 1.64029044e+02, 1.61412470e+04]), array([9.16881787e+00, 1.16873861e+02, 9.84051208e+04]), array([   8.32097704,  155.80682114, 7819.4218726 ]), array([8.16187403e+00, 1.88684048e+02, 3.24765601e+05]), array([8.38106380e+00, 1.27860653e+02, 2.36631826e+04])], 'test_mae': [array([   6.46788723,  102.93504052, 3260.84233799]), array([6.82996959e+00, 9.19820005e+01, 1.65062985e+04]), array([   6.16869098,  110.83111225, 2383.86001956]), array([6.39835302e+00, 1.17712541e+02, 4.23523268e+04]), array([   6.64500868,   88.90691212, 6050.27867065])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.05, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 1234567890: {'fit_time': array([7.00457954, 6.9983542 , 6.84274054, 6.58743167, 6.86099339]), 'score_time': array([0.30356002, 0.30885243, 0.30490994, 0.29340172, 0.3227489 ]), 'test_r2': [array([ 0.10930979,  0.10153382, -0.0564768 ]), array([ 0.04324932, -0.05124884, -0.0167816 ]), array([ 0.19560203,  0.20404315, -0.05739544]), array([-0.104642  ,  0.08128799, -0.03858181]), array([ 0.1112597 ,  0.01741369, -0.02073029])], 'test_rmse': [array([7.09171786e+00, 1.77919717e+02, 3.28620295e+04]), array([8.79764866e+00, 1.37974218e+02, 9.41250715e+04]), array([8.15771377e+00, 1.17753524e+02, 9.55435828e+03]), array([8.52992003e+00, 1.79495738e+02, 1.28679379e+04]), array([9.77314779e+00, 1.42394829e+02, 3.27276694e+05])], 'test_mae': [array([5.64197619e+00, 1.10127673e+02, 7.59800349e+03]), array([6.14892560e+00, 1.09713219e+02, 1.20922793e+04]), array([   6.56592729,   86.46942096, 2225.981608  ]), array([   6.58004471,  115.92075655, 2480.16208979]), array([7.34520696e+00, 9.58072312e+01, 4.66403958e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05, 'regressor__estimator__min_samples_split': 0.09423093942449441, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 2000, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 473129: {'fit_time': array([0.52048874, 0.46972132, 0.35373521, 0.4742713 , 0.45931411]), 'score_time': array([0.02907467, 0.02946806, 0.02625513, 0.02732706, 0.02817726]), 'test_r2': [array([-0.1381141 ,  0.08837534, -0.03924599]), array([ 0.06600836,  0.02755912, -0.01419866]), array([ 0.2006639 ,  0.10462998, -0.01571678]), array([ 0.18115204,  0.10565112, -0.08224412]), array([ 0.05610693,  0.03064588, -0.02142486])], 'test_rmse': [array([9.47760355e+00, 1.24302599e+02, 2.52058609e+04]), array([7.73845671e+00, 1.64804811e+02, 9.36149716e+04]), array([8.04851369e+00, 1.48330938e+02, 3.20549792e+05]), array([8.50126014e+00, 1.85530159e+02, 2.28100743e+04]), array([8.70295786e+00, 1.35347096e+02, 5.83106948e+04])], 'test_mae': [array([   7.13229792,   91.17259112, 4898.24017528]), array([5.84937245e+00, 1.03786191e+02, 1.10766256e+04]), array([6.16883512e+00, 1.00750221e+02, 3.98741082e+04]), array([   6.5109722 ,  116.27721436, 6288.057851  ]), array([6.71526210e+00, 1.05114430e+02, 8.44508446e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__bootstrap': True, 'regressor__estimator__ccp_alpha': 0.0, 'regressor__estimator__criterion': 'squared_error', 'regressor__estimator__max_depth': None, 'regressor__estimator__max_features': 'sqrt', 'regressor__estimator__max_leaf_nodes': None, 'regressor__estimator__max_samples': None, 'regressor__estimator__min_impurity_decrease': 0.0, 'regressor__estimator__min_samples_leaf': 0.05466586989340593, 'regressor__estimator__min_samples_split': 0.05035255377369423, 'regressor__estimator__min_weight_fraction_leaf': 0.0, 'regressor__estimator__monotonic_cst': None, 'regressor__estimator__n_estimators': 99, 'regressor__estimator__n_jobs': None, 'regressor__estimator__oob_score': False, 'regressor__estimator__random_state': None, 'regressor__estimator__verbose': 0, 'regressor__estimator__warm_start': False, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__unit_variance': False, 'transformer__y scaler__with_centering': True, 'transformer__y scaler__with_scaling': True}}, 'r2_avg': array([ 0.03103669,  0.0793376 , -0.04057391]), 'r2_stdev': array([0.14355077, 0.05238472, 0.02189316]), 'rmse_avg': array([8.54424127e+00, 1.51729698e+02, 9.38188954e+04]), 'rmse_stdev': array([7.15954846e-01, 1.86708006e+01, 1.20176692e+05]), 'mae_avg': array([6.51664105e+00, 1.03024793e+02, 1.41217049e+04]), 'mae_stdev': array([4.78627578e-01, 8.83292896e+00, 1.64566893e+04]), 'r2_avg_aggregate': 0.023266792775035305, 'r2_stdev_aggregate': 0.07260955009835794, 'rmse_avg_aggregate': 31326.389793331542, 'rmse_stdev_aggregate': 40065.35949640239, 'mae_avg_aggregate': 4743.74876419442, 'mae_stdev_aggregate': 5488.666950494665}
scaler
Filename: (solvent dP-solvent dD-solvent dH)_RF_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(solvent dP-solvent dD-solvent dH)_RF_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(solvent dP-solvent dD-solvent dH)_RF_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(solvent dP-solvent dD-solvent dH)_RF_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n11>
Subject: Job 288791: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c202n11> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:22:15 2025
Job was executed on host(s) <6*c205n11>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:22:16 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:22:16 2025
Terminated at Mon Jan 20 01:00:40 2025
Results reported at Mon Jan 20 01:00:40 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats "solvent dP" "solvent dD" "solvent dH"                                


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   22404.00 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.97 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   5915 sec.
    Turnaround time :                            5905 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250119.err> for stderr output of this job.

