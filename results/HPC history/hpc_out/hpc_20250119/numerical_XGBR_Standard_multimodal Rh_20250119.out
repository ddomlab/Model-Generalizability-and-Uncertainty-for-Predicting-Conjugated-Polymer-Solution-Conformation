


OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013525384809960555), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008022975031025854), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 100), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 112), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0026404797254611177), ('regressor__regressor__estimator__max_depth', 6125), ('regressor__regressor__estimator__n_estimators', 398), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011548177705639677), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0823944276444509), ('regressor__regressor__estimator__max_depth', 193), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008747012561467751), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 615), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012923641766320226), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006337573557896935), ('regressor__regressor__estimator__max_depth', 2888), ('regressor__regressor__estimator__n_estimators', 605), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012212543829922852), ('regressor__regressor__estimator__max_depth', 5755), ('regressor__regressor__estimator__n_estimators', 312), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0021145551880251833), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 365), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.002729478473454655), ('regressor__regressor__estimator__max_depth', 1906), ('regressor__regressor__estimator__n_estimators', 215), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 748), ('regressor__regressor__estimator__n_estimators', 744), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.1), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0091221896938626), ('regressor__regressor__estimator__max_depth', 7075), ('regressor__regressor__estimator__n_estimators', 88), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013978993462480093), ('regressor__regressor__estimator__max_depth', 653), ('regressor__regressor__estimator__n_estimators', 60), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0013603575731361472), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 533), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0013292531525110967), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 596), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013630125828320584), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0031966452292785936), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 237), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.05354041402966721), ('regressor__regressor__estimator__max_depth', 28), ('regressor__regressor__estimator__n_estimators', 79), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0428839069891835), ('regressor__regressor__estimator__max_depth', 236), ('regressor__regressor__estimator__n_estimators', 102), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.007377065745326072), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 848), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.02458987019365655), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 197), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.09924210319254471), ('regressor__regressor__estimator__max_depth', 55), ('regressor__regressor__estimator__n_estimators', 357), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003834761019133293), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 176), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001026127989394692), ('regressor__regressor__estimator__max_depth', 38), ('regressor__regressor__estimator__n_estimators', 697), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003412234091453092), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 194), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.010426109239136148), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 760), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0022185982401026127), ('regressor__regressor__estimator__max_depth', 7828), ('regressor__regressor__estimator__n_estimators', 2000), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.07585017974995738), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 296), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004612373350755102), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 157), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.07171867044028261), ('regressor__regressor__estimator__max_depth', 8774), ('regressor__regressor__estimator__n_estimators', 67), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [ 0.043 -0.097  0.232]±[0.186 0.254 0.396]
[array([ 0.0430268 , -0.09690731,  0.23181473]), array([8.47420606e+00, 1.63490192e+02, 8.74380815e+04]), array([5.26998666e+00, 9.87603202e+01, 1.28660893e+04])]
{6: {'fit_time': array([0.26685548, 0.30351853, 0.28271937, 0.28135228, 0.2766695 ]), 'score_time': array([0.02732468, 0.0355978 , 0.02685118, 0.02581429, 0.0274241 ]), 'test_r2': [array([ 0.021705  ,  0.14770638, -0.09300637]), array([ 0.37359393, -0.33546443, -0.01217884]), array([ 0.00892306, -0.03918488,  0.73809846]), array([ 0.27010978, -0.21232225,  0.18489512]), array([ 0.01959081, -0.32833042,  0.92318976])], 'test_rmse': [array([6.40670512e+00, 1.31568856e+02, 1.79498627e+04]), array([6.92645189e+00, 1.57976547e+02, 3.36134602e+05]), array([8.78415060e+00, 1.88842249e+02, 1.23010583e+04]), array([8.23543303e+00, 1.83756169e+02, 1.16792527e+04]), array([   9.49510957,  185.8779655 , 5433.94343931])], 'test_mae': [array([3.94206044e+00, 8.12376489e+01, 4.15609440e+03]), array([4.27078420e+00, 9.83971915e+01, 5.15880470e+04]), array([   4.89170496,  113.64268322, 2754.42787916]), array([   5.07859939,  103.50596093, 3308.88212034]), array([   5.92572991,  108.18284949, 1808.7028715 ])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.1, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 112, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([0.18431187, 0.18520641, 0.18356752, 0.19252682, 0.19072008]), 'score_time': array([0.02512717, 0.02928591, 0.02530527, 0.02822709, 0.02806711]), 'test_r2': [array([-0.02919484,  0.18800618,  0.86963018]), array([ 0.18144597, -0.10070804,  0.3539876 ]), array([-0.04748192, -0.05401835,  0.15378866]), array([-0.21083105, -0.34055562, -0.01016683]), array([ 0.03029061, -0.26213004,  0.74361387])], 'test_rmse': [array([   9.95791707,  163.43234262, 3165.0008101 ]), array([8.09115200e+00, 1.69564251e+02, 2.22280151e+04]), array([9.72373651e+00, 1.54537659e+02, 8.61036275e+04]), array([7.08902766e+00, 1.79211239e+02, 3.23926908e+05]), array([   8.61367915,  162.5278773 , 7490.22090933])], 'test_mae': [array([   6.1642769 ,  103.5968521 , 1451.04558034]), array([   5.17010523,  103.84057019, 4944.02699162]), array([5.79222620e+00, 8.66068309e+01, 1.23509608e+04]), array([4.23930240e+00, 1.05974761e+02, 4.43151984e+04]), array([   5.27414966,  102.838605  , 1511.69721537])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0823944276444509, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 193, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([0.1601212 , 0.16219902, 0.15265226, 0.15711999, 0.15346837]), 'score_time': array([0.02862573, 0.0258801 , 0.02611375, 0.02632928, 0.02621245]), 'test_r2': [array([ 0.23496222, -0.43616783,  0.55691746]), array([-0.23129824,  0.04487562,  0.3592924 ]), array([-0.35692975, -0.06983896,  0.00301052]), array([0.11596134, 0.36288359, 0.15200167]), array([ 0.12728066, -0.30403126,  0.93764416])], 'test_rmse': [array([7.88551982e+00, 1.86174321e+02, 1.56119539e+04]), array([9.65507224e+00, 1.63035996e+02, 4.79362409e+04]), array([7.54913436e+00, 1.68891991e+02, 3.29398517e+05]), array([9.58985966e+00, 1.40773662e+02, 1.27046677e+04]), array([   8.3798904 ,  153.36826637, 4864.73356046])], 'test_mae': [array([   5.09285801,  118.90977899, 3178.88760903]), array([5.45968118e+00, 9.59164646e+01, 7.12388120e+03]), array([4.27252840e+00, 1.02260482e+02, 4.64204033e+04]), array([   5.63236001,   79.90146344, 2944.07514968]), array([   5.53347405,   86.57552942, 1175.36238396])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.1, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 50, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([1.10445523, 1.23094749, 1.00034451, 1.04501033, 1.14526772]), 'score_time': array([0.03627467, 0.03678465, 0.03653812, 0.03286266, 0.03883767]), 'test_r2': [array([ 0.26165903,  0.18596414, -0.01952391]), array([ 0.17513832,  0.02071347, -0.0228371 ]), array([ 0.05863692,  0.17101638, -0.04255584]), array([ 0.09215753,  0.20671311, -0.04038749]), array([ 0.09416258, -0.03541378, -0.03876805])], 'test_rmse': [array([6.77597505e+00, 1.48477371e+02, 3.25183288e+05]), array([7.72969912e+00, 1.52763964e+02, 9.46019523e+04]), array([9.86016747e+00, 1.34611205e+02, 3.19708128e+04]), array([8.93263200e+00, 1.38424132e+02, 1.31848213e+04]), array([7.47081746e+00, 1.77880728e+02, 1.19655020e+04])], 'test_mae': [array([5.18651556e+00, 1.04075146e+02, 4.50001944e+04]), array([5.45026101e+00, 1.05218131e+02, 1.41365684e+04]), array([   6.5503805 ,   83.45092675, 6461.30908693]), array([   6.33999072,   91.58722313, 2598.81358045]), array([   5.63660623,  104.25241961, 2311.68550959])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0013292531525110967, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 596, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([2.28628945, 2.67104936, 2.4122324 , 2.34466434, 2.29990387]), 'score_time': array([0.04940128, 0.05275178, 0.04573011, 0.04434919, 0.04526854]), 'test_r2': [array([0.08608464, 0.09978549, 0.41075686]), array([ 0.33813239, -0.13030812,  0.47895934]), array([ 0.03344237, -0.08488797, -0.06929395]), array([-0.11797062, -0.02469998, -0.00307165]), array([-0.13239933, -0.56660838,  0.6043846 ])], 'test_rmse': [array([8.44430797e+00, 1.57981567e+02, 1.21349021e+04]), array([8.00498544e+00, 1.32316347e+02, 7.00255022e+04]), array([   8.8402752 ,  175.59657718, 7700.88665379]), array([8.81254155e+00, 2.00136222e+02, 3.22486343e+05]), array([8.55891504e+00, 1.62726979e+02, 1.43889367e+04])], 'test_mae': [array([   5.57962588,   91.28556795, 2895.64247893]), array([4.72121342e+00, 7.95053168e+01, 1.04827044e+04]), array([   5.14300608,   98.28052344, 2188.04472073]), array([4.91911960e+00, 1.17915302e+02, 4.04412846e+04]), array([   5.30934639,  102.03449531, 3246.44828884])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.007377065745326072, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 848, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([0.45025873, 0.46712923, 0.47055387, 0.45389652, 0.44365549]), 'score_time': array([0.0309329 , 0.02739906, 0.02758765, 0.03004193, 0.03319335]), 'test_r2': [array([-0.41807277, -0.05274006, -0.59530953]), array([-0.00681851, -0.89422314,  0.39074806]), array([ 0.30374145, -0.35026194, -0.76532085]), array([-0.23361661,  0.14323274, -0.20117483]), array([ 0.1707539 , -0.01249993, -0.00358499])], 'test_rmse': [array([8.94823473e+00, 1.92590024e+02, 4.03819120e+04]), array([9.02490877e+00, 1.85208428e+02, 7.28601298e+04]), array([7.58958886e+00, 1.53369205e+02, 1.23451005e+04]), array([9.01413977e+00, 1.73338836e+02, 1.38385858e+04]), array([9.44036417e+00, 1.44546096e+02, 3.24516406e+05])], 'test_mae': [array([5.41630596e+00, 1.14328361e+02, 7.39241950e+03]), array([5.39586975e+00, 1.14004896e+02, 9.18571220e+03]), array([   4.47844224,   94.67206701, 3145.76633328]), array([   5.67122188,   97.90306272, 3000.88949139]), array([5.66598984e+00, 8.66156482e+01, 4.43697753e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.09924210319254471, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 55, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 357, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([0.46636629, 0.47382665, 0.45685673, 0.4821279 , 0.45199871]), 'score_time': array([0.03329968, 0.03088379, 0.03214979, 0.03079748, 0.03353238]), 'test_r2': [array([ 0.01742129, -0.14379503,  0.60821385]), array([0.02944938, 0.09242839, 0.51618113]), array([-0.05865532,  0.1245672 , -0.02682859]), array([0.28892224, 0.03377335, 0.50511712]), array([ 0.01564166, -0.43523143,  0.56709359])], 'test_rmse': [array([8.80621552e+00, 1.39234314e+02, 1.54762913e+04]), array([7.88845509e+00, 1.59213076e+02, 6.46584357e+04]), array([9.26250095e+00, 1.46670197e+02, 3.22298410e+05]), array([7.92209811e+00, 1.92841517e+02, 1.54246492e+04]), array([8.88755075e+00, 1.64690550e+02, 3.79613821e+04])], 'test_mae': [array([   5.20094295,   87.02252439, 3391.87163948]), array([4.75548616e+00, 8.81805988e+01, 9.14178959e+03]), array([5.85399821e+00, 9.41437136e+01, 4.18454383e+04]), array([4.95970563e+00, 1.12043544e+02, 5.05891406e+03]), array([   5.47566405,   98.70406853, 4986.15968483])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.07585017974995738, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 296, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 'r2_avg': array([ 0.0430268 , -0.09690731,  0.23181473]), 'r2_stdev': array([0.1858741 , 0.25408388, 0.39569847]), 'rmse_avg': array([8.47420606e+00, 1.63490192e+02, 8.74380815e+04]), 'rmse_stdev': array([9.05572361e-01, 1.87181642e+01, 1.21665358e+05]), 'mae_avg': array([5.26998666e+00, 9.87603202e+01, 1.28660893e+04]), 'mae_stdev': array([5.85688059e-01, 1.08412235e+01, 1.63432739e+04]), 'r2_avg_aggregate': 0.059311408901831654, 'r2_stdev_aggregate': 0.278552150274234, 'rmse_avg_aggregate': 29203.348645534545, 'rmse_stdev_aggregate': 40561.66073754901, 'mae_avg_aggregate': 4323.373193044276, 'mae_stdev_aggregate': 5451.566946872808}
scaler
Filename: (PDI-Mw-concentration-temperature)_XGBR_mean_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_XGBR_mean_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_XGBR_mean_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature)_XGBR_mean_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c036n01>
Subject: Job 288757: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c023n02> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:11:47 2025
Job was executed on host(s) <6*c036n01>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:11:49 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:11:49 2025
Terminated at Sun Jan 19 23:58:49 2025
Results reported at Sun Jan 19 23:58:49 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Standard_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Standard_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Standard"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)'                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   8105.00 sec.
    Max Memory :                                 10 GB
    Average Memory :                             9.37 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               6.00 GB
    Max Swap :                                   -
    Max Processes :                              38
    Max Threads :                                41
    Run time :                                   2823 sec.
    Turnaround time :                            2822 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Standard_multimodal Rh_20250119.err> for stderr output of this job.



Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.016377128851062038), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 75), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 865), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008179225291263406), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 93), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008480161612944409), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 134), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0051727608777825205), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 198), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.016900365439959212), ('regressor__regressor__estimator__max_depth', 4063), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0014515073118612962), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 711), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 730), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01594893970138391), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006337573557896935), ('regressor__regressor__estimator__max_depth', 2888), ('regressor__regressor__estimator__n_estimators', 605), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.002573001937991941), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 329), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006135861384044143), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 127), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.009051090510873137), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 102), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.013677435230109017), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0034249387196326558), ('regressor__regressor__estimator__max_depth', 12), ('regressor__regressor__estimator__n_estimators', 213), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.012549503950244092), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 78), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.03429891522191478), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 120), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.011531843579381692), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 71), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004364515222120505), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 230), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.01728463523480272), ('regressor__regressor__estimator__max_depth', 26), ('regressor__regressor__estimator__n_estimators', 51), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006043927681192527), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 140), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.003329889483538336), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 254), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0013408411605806817), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 499), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.044601166517841434), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 81), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.015823811087407644), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 50), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008297598310001451), ('regressor__regressor__estimator__max_depth', 563), ('regressor__regressor__estimator__n_estimators', 131), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0012021053761178155), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 661), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0034779933540493965), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 333), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.004979560248604608), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 137), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.006623087145234356), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 99), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.008563803964047347), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 119), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0017886593184351467), ('regressor__regressor__estimator__max_depth', 10000), ('regressor__regressor__estimator__n_estimators', 445), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.001), ('regressor__regressor__estimator__max_depth', 7065), ('regressor__regressor__estimator__n_estimators', 948), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.0018068043027529607), ('regressor__regressor__estimator__max_depth', 10), ('regressor__regressor__estimator__n_estimators', 488), ('regressor__regressor__estimator__n_jobs', -2)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR XGBR 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__learning_rate', 0.03258035627116066), ('regressor__regressor__estimator__max_depth', 15), ('regressor__regressor__estimator__n_estimators', 179), ('regressor__regressor__estimator__n_jobs', -2)])


Average scores:	 r2: [ 0.121  0.121 -0.564]±[0.166 0.172 2.562]
[array([ 0.12104553,  0.12130844, -0.56428405]), array([8.13672849e+00, 1.47080816e+02, 9.47023402e+04]), array([5.19403944e+00, 8.90785394e+01, 1.40600736e+04])]
{6: {'fit_time': array([0.71738291, 0.72323775, 0.72708178, 0.70610428, 0.71567488]), 'score_time': array([0.03358769, 0.03196359, 0.03107333, 0.0294373 , 0.03061342]), 'test_r2': [array([ 0.10815462,  0.18489397, -0.05802639]), array([ 0.23473666,  0.11968667, -0.02611699]), array([ 0.19558831,  0.48266898, -0.02771981]), array([ 0.33610487,  0.06165798, -0.07488516]), array([ 0.13196743,  0.13268   , -0.06102336])], 'test_rmse': [array([6.11708623e+00, 1.28666514e+02, 1.76602984e+04]), array([7.65575979e+00, 1.28261139e+02, 3.38441049e+05]), array([7.91380371e+00, 1.33240734e+02, 2.43674910e+04]), array([7.85429861e+00, 1.61664057e+02, 1.34118702e+04]), array([8.93437759e+00, 1.50198132e+02, 2.01961235e+04])], 'test_mae': [array([   4.18540219,   88.25262622, 4141.84589513]), array([5.32737249e+00, 8.47535063e+01, 5.39943151e+04]), array([   5.02441844,   85.84319641, 4010.07263643]), array([   5.30561634,   92.18154609, 3542.31274777]), array([   6.22510618,   97.98380924, 4845.99196369])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.008480161612944409, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10000, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 134, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 13: {'fit_time': array([2.80836201, 2.74329257, 2.86728454, 2.86604714, 2.75103068]), 'score_time': array([0.03961968, 0.04167151, 0.03884554, 0.03985834, 0.03895164]), 'test_r2': [array([0.25297656, 0.30529973, 0.00741408]), array([0.16757196, 0.05217758, 0.03297514]), array([-0.0092772 ,  0.06199655,  0.09825693]), array([-0.47939044, -0.19297367, -0.01363103]), array([0.22634496, 0.17665915, 0.69582797])], 'test_rmse': [array([8.48372966e+00, 1.51168178e+02, 8.73311840e+03]), array([8.15943406e+00, 1.57348177e+02, 2.71956270e+04]), array([9.54476295e+00, 1.45784873e+02, 8.88839681e+04]), array([7.83585336e+00, 1.69058984e+02, 3.24481860e+05]), array([7.69381201e+00, 1.31270048e+02, 8.15843772e+03])], 'test_mae': [array([   4.68287235,   88.02427018, 2342.35263819]), array([5.01859085e+00, 1.00750750e+02, 5.65368098e+03]), array([5.60098659e+00, 7.53769027e+01, 1.25601006e+04]), array([4.38022426e+00, 1.00403427e+02, 4.49816114e+04]), array([   4.45388095,   75.72486843, 1516.38243791])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.006337573557896935, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 2888, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 605, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 42: {'fit_time': array([0.96430635, 0.85917497, 0.83373427, 0.94639802, 0.90169358]), 'score_time': array([0.0308671 , 0.02980256, 0.0330832 , 0.03149438, 0.03038597]), 'test_r2': [array([ 0.16933875,  0.08875808, -0.03940957]), array([ 0.12980021,  0.22185695, -0.03085378]), array([ 0.18305108,  0.13884048, -0.02151619]), array([ 0.14981442,  0.34339153, -0.05134512]), array([ 0.23351542,  0.14104477, -0.03871914])], 'test_rmse': [array([8.21676497e+00, 1.48297567e+02, 2.39115813e+04]), array([8.11677274e+00, 1.47157790e+02, 6.08040586e+04]), array([5.85754893e+00, 1.51527568e+02, 3.33425629e+05]), array([9.40445194e+00, 1.42910866e+02, 1.41461567e+04]), array([7.85331014e+00, 1.24473463e+02, 1.98549853e+04])], 'test_mae': [array([   6.02845301,  100.07088012, 4656.05355342]), array([5.52508072e+00, 9.16936840e+01, 1.05198181e+04]), array([4.81114745e+00, 1.06714787e+02, 4.83905092e+04]), array([   6.22239725,   95.20179259, 3126.26744444]), array([   5.69695964,   81.13744028, 3834.25923066])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.0034249387196326558, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 12, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 213, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 69: {'fit_time': array([0.53710985, 0.55754209, 0.4390347 , 0.57452297, 0.54377675]), 'score_time': array([0.03286338, 0.03218436, 0.03036427, 0.03370762, 0.0322659 ]), 'test_r2': [array([ 0.09212418,  0.16153499, -0.01211549]), array([ 0.10110724, -0.16839076,  0.13917206]), array([-0.07277706,  0.50968463,  0.27397419]), array([ 0.16091498,  0.10871349, -0.03863879]), array([-0.05289948, -0.15422952, -0.19574427])], 'test_rmse': [array([7.51374651e+00, 1.50688799e+02, 3.23999654e+05]), array([8.06911614e+00, 1.66863014e+02, 8.67870730e+04]), array([1.05259293e+01, 1.03525180e+02, 2.66796448e+04]), array([8.58770622e+00, 1.46725412e+02, 1.31737360e+04]), array([8.05446045e+00, 1.87809699e+02, 1.28378054e+04])], 'test_mae': [array([4.42176709e+00, 8.50141631e+01, 4.40381320e+04]), array([4.70130887e+00, 9.75392492e+01, 1.25461138e+04]), array([   6.12641633,   67.22326373, 4962.72270399]), array([   5.36870317,   86.49300386, 2590.31360229]), array([   5.27002803,   94.76203286, 2650.54841724])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.03429891522191478, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 120, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 420: {'fit_time': array([0.41585207, 0.4170804 , 0.42046046, 0.43288708, 0.40040684]), 'score_time': array([0.03183174, 0.03272796, 0.03197765, 0.04392672, 0.0326519 ]), 'test_r2': [array([ 0.01065737,  0.23679263, -7.09570663]), array([0.48620432, 0.19409233, 0.05558403]), array([ 0.13403458,  0.09748622, -0.07085332]), array([-0.12510276,  0.23800969, -0.01236006]), array([ 0.05748059, -0.22586729,  0.21034185])], 'test_rmse': [array([8.78586322e+00, 1.45463721e+02, 4.49796829e+04]), array([7.05294028e+00, 1.11726893e+02, 9.42762031e+04]), array([   8.36762448,  160.15869511, 7706.49977128]), array([8.84060686e+00, 1.72584608e+02, 3.23976009e+05]), array([7.80843620e+00, 1.43946486e+02, 2.03287965e+04])], 'test_mae': [array([5.47702281e+00, 8.19092404e+01, 7.04596635e+03]), array([4.27552176e+00, 6.83959223e+01, 1.54068664e+04]), array([   5.0165678 ,   90.07331944, 2195.97570273]), array([5.16820180e+00, 9.75288717e+01, 4.16805398e+04]), array([   5.04592455,   85.86563359, 4894.44851101])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.044601166517841434, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 10, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 81, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 1234567890: {'fit_time': array([0.70174146, 0.58098936, 0.70918989, 0.74847031, 0.6741426 ]), 'score_time': array([0.02962112, 0.02992892, 0.02923846, 0.03752804, 0.02975774]), 'test_r2': [array([ 0.0393347 ,  0.23166032, -0.0563865 ]), array([ 0.28904503, -0.07457168, -0.01674557]), array([ 0.29706359,  0.23332151, -0.05694463]), array([ 0.12321028,  0.3129031 , -0.03853252]), array([ 0.18280554,  0.07155014, -0.02072886])], 'test_rmse': [array([7.36502390e+00, 1.64531798e+02, 3.28606249e+04]), array([7.58382445e+00, 1.39496359e+02, 9.41234037e+04]), array([7.62589812e+00, 1.15567520e+02, 9.55232136e+03]), array([7.59944553e+00, 1.55229207e+02, 1.28676325e+04]), array([9.37151353e+00, 1.38416573e+02, 3.27276465e+05])], 'test_mae': [array([5.25212883e+00, 9.54216682e+01, 7.59734648e+03]), array([5.23128439e+00, 9.32491808e+01, 1.20911676e+04]), array([   5.27442036,   84.73574443, 2224.58286878]), array([   5.04466564,   98.27480778, 2479.97813962]), array([6.38451378e+00, 9.12103396e+01, 4.66399497e+04])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.008297598310001451, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 563, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 131, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 473129: {'fit_time': array([0.91327834, 1.0237112 , 0.98997688, 0.96293926, 0.97418022]), 'score_time': array([0.03129506, 0.0302887 , 0.0316    , 0.03174639, 0.03088689]), 'test_r2': [array([  0.11842323,  -0.02028419, -13.76654484]), array([0.27300833, 0.11748613, 0.34277125]), array([-0.18619113, -0.17712431, -0.01744941]), array([ 0.17372193,  0.04493106, -0.16653245]), array([0.10413047, 0.1894583 , 0.40227074])], 'test_rmse': [array([8.34133771e+00, 1.31502120e+02, 9.50127308e+04]), array([6.82727786e+00, 1.56999783e+02, 7.53602049e+04]), array([9.80456454e+00, 1.70075452e+02, 3.20823076e+05]), array([8.53974265e+00, 1.91724844e+02, 2.36816792e+04]), array([8.47867259e+00, 1.23764301e+02, 4.46064090e+04])], 'test_mae': [array([4.95091643e+00, 7.91142844e+01, 1.24115408e+04]), array([3.94946891e+00, 8.42952795e+01, 9.31019322e+03]), array([6.00527533e+00, 9.63382923e+01, 4.01034644e+04]), array([5.17525597e+00, 1.07582172e+02, 6.50946493e+03]), array([5.16348000e+00, 6.86089234e+01, 6.60768591e+03])], 'best_params': {'check_inverse': True, 'func': None, 'inverse_func': None, 'regressor__estimator__objective': 'reg:squarederror', 'regressor__estimator__base_score': None, 'regressor__estimator__booster': None, 'regressor__estimator__callbacks': None, 'regressor__estimator__colsample_bylevel': None, 'regressor__estimator__colsample_bynode': None, 'regressor__estimator__colsample_bytree': None, 'regressor__estimator__device': None, 'regressor__estimator__early_stopping_rounds': None, 'regressor__estimator__enable_categorical': False, 'regressor__estimator__eval_metric': None, 'regressor__estimator__feature_types': None, 'regressor__estimator__gamma': None, 'regressor__estimator__grow_policy': None, 'regressor__estimator__importance_type': None, 'regressor__estimator__interaction_constraints': None, 'regressor__estimator__learning_rate': 0.03258035627116066, 'regressor__estimator__max_bin': None, 'regressor__estimator__max_cat_threshold': None, 'regressor__estimator__max_cat_to_onehot': None, 'regressor__estimator__max_delta_step': None, 'regressor__estimator__max_depth': 15, 'regressor__estimator__max_leaves': None, 'regressor__estimator__min_child_weight': None, 'regressor__estimator__missing': nan, 'regressor__estimator__monotone_constraints': None, 'regressor__estimator__multi_strategy': None, 'regressor__estimator__n_estimators': 179, 'regressor__estimator__n_jobs': -2, 'regressor__estimator__num_parallel_tree': None, 'regressor__estimator__random_state': None, 'regressor__estimator__reg_alpha': None, 'regressor__estimator__reg_lambda': None, 'regressor__estimator__sampling_method': None, 'regressor__estimator__scale_pos_weight': None, 'regressor__estimator__subsample': None, 'regressor__estimator__tree_method': None, 'regressor__estimator__validate_parameters': None, 'regressor__estimator__verbosity': None, 'regressor__n_jobs': None, 'transformer__memory': None, 'transformer__verbose': False, 'transformer__log transform__accept_sparse': False, 'transformer__log transform__check_inverse': True, 'transformer__log transform__feature_names_out': None, 'transformer__log transform__inv_kw_args': None, 'transformer__log transform__kw_args': None, 'transformer__log transform__validate': False, 'transformer__y scaler__copy': True, 'transformer__y scaler__with_mean': True, 'transformer__y scaler__with_std': True}}, 'r2_avg': array([ 0.12104553,  0.12130844, -0.56428405]), 'r2_stdev': array([0.16597279, 0.17164591, 2.56203884]), 'rmse_avg': array([8.13672849e+00, 1.47080816e+02, 9.47023402e+04]), 'rmse_stdev': array([9.36739025e-01, 1.96113633e+01, 1.19479440e+05]), 'mae_avg': array([5.19403944e+00, 8.90785394e+01, 1.40600736e+04]), 'mae_stdev': array([5.97877597e-01, 1.00828131e+01, 1.62994348e+04]), 'r2_avg_aggregate': -0.1073100249578061, 'r2_stdev_aggregate': 0.9665525114624963, 'rmse_avg_aggregate': 31619.185907938023, 'rmse_stdev_aggregate': 39833.329525382214, 'mae_avg_aggregate': 4718.115385777684, 'mae_stdev_aggregate': 5436.705176231222}
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Standard
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Standard_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Standard_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_XGBR_mean_Standard_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c201n11>
Subject: Job 288742: <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> in cluster <Hazel> Done

Job <numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119> was submitted from host <c039n03> by user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:03:13 2025
Job was executed on host(s) <6*c201n11>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan 19 23:03:15 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan 19 23:03:15 2025
Terminated at Mon Jan 20 00:11:02 2025
Results reported at Mon Jan 20 00:11:02 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 25:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_XGBR_polymer_size_feats_on_multimodal Rh_all_num_20250119"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Standard_multimodal Rh_20250119.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Standard_multimodal Rh_20250119.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "XGBR"                                     --transform_type "Standard"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   12634.00 sec.
    Max Memory :                                 8 GB
    Average Memory :                             7.80 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               8.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   4089 sec.
    Turnaround time :                            4069 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_XGBR_Standard_multimodal Rh_20250119.err> for stderr output of this job.

