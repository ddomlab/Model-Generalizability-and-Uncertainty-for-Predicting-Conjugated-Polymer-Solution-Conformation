
------------------------------------------------------------
Sender: LSF System <lsfadmin@c006n04>
Subject: Job 156447: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num> was submitted from host <c011n01> by user <sdehgha2> in cluster <Hazel> at Sun Jan  5 15:53:59 2025
Job was executed on host(s) <6*c006n04>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan  5 15:54:00 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan  5 15:54:00 2025
Terminated at Sun Jan  5 15:56:06 2025
Results reported at Sun Jan  5 15:56:06 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_NGB_20250105.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_NGB_20250105.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   7.16 sec.
    Max Memory :                                 -
    Average Memory :                             -
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               -
    Max Swap :                                   -
    Max Processes :                              5
    Max Threads :                                6
    Run time :                                   129 sec.
    Turnaround time :                            127 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_NGB_20250105.err> for stderr output of this job.

['multimodal Rh']
{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='identity'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='identity'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='identity'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6

------------------------------------------------------------
Sender: LSF System <lsfadmin@c205n11>
Subject: Job 163498: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num> in cluster <Hazel> Exited

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num> was submitted from host <c202n11> by user <sdehgha2> in cluster <Hazel> at Sun Jan  5 23:50:37 2025
Job was executed on host(s) <6*c205n11>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Sun Jan  5 23:50:38 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Sun Jan  5 23:50:38 2025
Terminated at Sun Jan  5 23:56:29 2025
Results reported at Sun Jan  5 23:56:29 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_NGB_20250105.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_NGB_20250105.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

TERM_OWNER: job killed by owner.
Exited with exit code 130.

Resource usage summary:

    CPU time :                                   134.00 sec.
    Max Memory :                                 4 GB
    Average Memory :                             1.00 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               12.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   367 sec.
    Turnaround time :                            352 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_NGB_20250105.err> for stderr output of this job.

['multimodal Rh']
{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='identity'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='identity'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='identity'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.8558573452866339), ('regressor__regressor__estimator__min_samples_split', 0.9145975982030404), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.31254295761105855), ('regressor__regressor__estimator__min_samples_split', 0.39589315182776863), ('regressor__regressor__estimator__n_estimators', 57)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.11693393771055265), ('regressor__regressor__estimator__min_samples_split', 0.9358866635354776), ('regressor__regressor__estimator__n_estimators', 51)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.5567911682432669), ('regressor__regressor__estimator__min_samples_split', 0.9094494238843179), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.853693865744977), ('regressor__regressor__estimator__min_samples_split', 0.44681414704251454), ('regressor__regressor__estimator__n_estimators', 169)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.684325921655077), ('regressor__regressor__estimator__min_samples_split', 0.32309284827301027), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.6853432548567874), ('regressor__regressor__estimator__min_samples_split', 0.3238251878778093), ('regressor__regressor__estimator__n_estimators', 51)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.8229002644720778), ('regressor__regressor__estimator__min_samples_split', 0.1855728999778276), ('regressor__regressor__estimator__n_estimators', 908)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.6772831987503316), ('regressor__regressor__estimator__min_samples_split', 0.07987199916789511), ('regressor__regressor__estimator__n_estimators', 98)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.6853432548567874), ('regressor__regressor__estimator__min_samples_split', 0.3238251878778093), ('regressor__regressor__estimator__n_estimators', 51)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.41407463012517187), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.5075536164128865), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.7495946537500966), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.7816766302071606), ('regressor__regressor__estimator__min_samples_split', 0.2630754682194132), ('regressor__regressor__estimator__n_estimators', 64)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051494031085785236), ('regressor__regressor__estimator__min_samples_split', 0.056004565892354384), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.6178291557070119), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 175)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.7983903317644832), ('regressor__regressor__estimator__min_samples_split', 0.7995793652377879), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.9506477649557714), ('regressor__regressor__estimator__min_samples_split', 0.07476069820607219), ('regressor__regressor__estimator__n_estimators', 50)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.3236991120391358), ('regressor__regressor__estimator__min_samples_split', 0.5555728743486289), ('regressor__regressor__estimator__n_estimators', 94)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.7295471817583459), ('regressor__regressor__estimator__min_samples_split', 0.7022139666683717), ('regressor__regressor__estimator__n_estimators', 763)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.5449493955241506), ('regressor__regressor__estimator__min_samples_split', 0.4688246439037563), ('regressor__regressor__estimator__n_estimators', 52)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05115267110967256), ('regressor__regressor__estimator__min_samples_split', 0.06456386661191398), ('regressor__regressor__estimator__n_estimators', 56)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.5467458147064176), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.3082608489932172), ('regressor__regressor__estimator__min_samples_split', 0.45480490295557957), ('regressor__regressor__estimator__n_estimators', 68)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.10792614273180971), ('regressor__regressor__estimator__min_samples_split', 0.6381918597169391), ('regressor__regressor__estimator__n_estimators', 263)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.40829752077971204), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.7985929841194163), ('regressor__regressor__estimator__min_samples_split', 0.2996795104017147), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.9593727378586473), ('regressor__regressor__estimator__min_samples_split', 0.6223893613322589), ('regressor__regressor__estimator__n_estimators', 104)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.12895079794539227), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.8344652434907391), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.866580165430605), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.6137217562426387), ('regressor__regressor__estimator__min_samples_split', 0.19640680924720816), ('regressor__regressor__estimator__n_estimators', 143)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])


Average scores:	 r: 0.25±0.12	 r2: -0.45±1.33
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c202n12>
Subject: Job 163701: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num> was submitted from host <c202n02> by user <sdehgha2> in cluster <Hazel> at Mon Jan  6 00:22:19 2025
Job was executed on host(s) <6*c202n12>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Mon Jan  6 00:22:21 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Mon Jan  6 00:22:21 2025
Terminated at Mon Jan  6 02:02:52 2025
Results reported at Mon Jan  6 02:02:52 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_NGB_20250105.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_NGB_20250105.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   19589.25 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.64 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   6053 sec.
    Turnaround time :                            6033 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_NGB_20250105.err> for stderr output of this job.

