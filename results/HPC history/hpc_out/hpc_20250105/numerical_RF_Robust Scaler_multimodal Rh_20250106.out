['multimodal Rh']
{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='identity'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='identity'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='identity'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.14474033920477053), ('regressor__regressor__estimator__min_samples_split', 0.6460264509117251), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.6606054726657045), ('regressor__regressor__estimator__min_samples_split', 0.08784139386964504), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.5068865120148736), ('regressor__regressor__estimator__min_samples_split', 0.7503736543685208), ('regressor__regressor__estimator__n_estimators', 71)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.6102709438068236), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 91)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 6


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.223411073282746), ('regressor__regressor__estimator__min_samples_split', 0.7889289053176827), ('regressor__regressor__estimator__n_estimators', 61)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.8457297378992694), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.9234596164401341), ('regressor__regressor__estimator__min_samples_split', 0.21992040386208178), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 13


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.6772831987503316), ('regressor__regressor__estimator__min_samples_split', 0.07987199916789511), ('regressor__regressor__estimator__n_estimators', 98)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.5166787013809138), ('regressor__regressor__estimator__min_samples_split', 0.8373970508368951), ('regressor__regressor__estimator__n_estimators', 165)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.681192125695855), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.6663181650645847), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.2695227009725619), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 42


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.7719502274633359), ('regressor__regressor__estimator__min_samples_split', 0.09708086919166159), ('regressor__regressor__estimator__n_estimators', 50)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.051494031085785236), ('regressor__regressor__estimator__min_samples_split', 0.056004565892354384), ('regressor__regressor__estimator__n_estimators', 53)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.7076939108180994), ('regressor__regressor__estimator__min_samples_split', 0.5376615830530964), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.2302015801704554), ('regressor__regressor__estimator__min_samples_split', 0.9047599835092216), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.6079535498768586), ('regressor__regressor__estimator__min_samples_split', 0.9751998987321884), ('regressor__regressor__estimator__n_estimators', 115)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 69


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.9119234075574606), ('regressor__regressor__estimator__min_samples_split', 0.25454048067389307), ('regressor__regressor__estimator__n_estimators', 63)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.5960148696366859), ('regressor__regressor__estimator__min_samples_split', 0.5507614069737222), ('regressor__regressor__estimator__n_estimators', 81)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.8079173408543572), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.47384626016347187), ('regressor__regressor__estimator__min_samples_split', 0.9452169471222465), ('regressor__regressor__estimator__n_estimators', 388)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.05), ('regressor__regressor__estimator__n_estimators', 630)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 420


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.5637594003211099), ('regressor__regressor__estimator__min_samples_split', 0.7580194415294544), ('regressor__regressor__estimator__n_estimators', 51)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.6254721242523319), ('regressor__regressor__estimator__min_samples_split', 0.99), ('regressor__regressor__estimator__n_estimators', 95)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.1113276017157163), ('regressor__regressor__estimator__min_samples_split', 0.2870779838882826), ('regressor__regressor__estimator__n_estimators', 123)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.327990445603106), ('regressor__regressor__estimator__min_samples_split', 0.8028496579313417), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.9288765135276934), ('regressor__regressor__estimator__min_samples_split', 0.13432828760630083), ('regressor__regressor__estimator__n_estimators', 136)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 1234567890


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.31115307304126816), ('regressor__regressor__estimator__min_samples_split', 0.7317005686249316), ('regressor__regressor__estimator__n_estimators', 249)])


{'regressor__regressor__estimator__n_estimators': Integer(low=50, high=2000, prior='log-uniform', transform='normalize'), 'regressor__regressor__estimator__max_depth': [None], 'regressor__regressor__estimator__min_samples_split': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__min_samples_leaf': Real(low=0.05, high=0.99, prior='uniform', transform='normalize'), 'regressor__regressor__estimator__max_features': Categorical(categories=('sqrt', 'log2'), prior=None)}



OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.05), ('regressor__regressor__estimator__min_samples_split', 0.24567580186931065), ('regressor__regressor__estimator__n_estimators', 2000)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.6620196583510172), ('regressor__regressor__estimator__min_samples_split', 0.19830328521561053), ('regressor__regressor__estimator__n_estimators', 60)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'sqrt'), ('regressor__regressor__estimator__min_samples_leaf', 0.35087807228272394), ('regressor__regressor__estimator__min_samples_split', 0.8685020717802572), ('regressor__regressor__estimator__n_estimators', 50)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.42015260439262303), ('regressor__regressor__estimator__min_samples_split', 0.6093480696906298), ('regressor__regressor__estimator__n_estimators', 68)])





OPTIMIZING HYPERPARAMETERS FOR REGRESSOR RF 	SEED: 473129


Best parameters: OrderedDict([('regressor__regressor__estimator__max_depth', None), ('regressor__regressor__estimator__max_features', 'log2'), ('regressor__regressor__estimator__min_samples_leaf', 0.99), ('regressor__regressor__estimator__min_samples_split', 0.18310402806781367), ('regressor__regressor__estimator__n_estimators', 50)])


Average scores:	 r: 0.25±0.12	 r2: -0.53±1.78
scaler
Filename: (PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_scores.json
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_predictions.csv
/gpfs_common/share03/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/target_multimodal Rh/scaler/(PDI-Mw-concentration-temperature-solvent dP-solvent dD-solvent dH)_RF_mean_Robust Scaler_shape.json
Done Saving scores!

------------------------------------------------------------
Sender: LSF System <lsfadmin@c202n08>
Subject: Job 166056: <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num> in cluster <Hazel> Done

Job <numerical_RF_polymer_size_feats_on_multimodal Rh_all_num> was submitted from host <c202n03> by user <sdehgha2> in cluster <Hazel> at Mon Jan  6 11:47:04 2025
Job was executed on host(s) <6*c202n08>, in queue <single_chassis>, as user <sdehgha2> in cluster <Hazel> at Mon Jan  6 11:47:05 2025
</home/sdehgha2> was used as the home directory.
</share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/code_/training/hpc_submit_training_Rh> was used as the working directory.
Started at Mon Jan  6 11:47:05 2025
Terminated at Mon Jan  6 13:39:02 2025
Results reported at Mon Jan  6 13:39:02 2025

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#BSUB -n 6
#BSUB -W 40:01
#BSUB -R span[hosts=1]
#BSUB -R "rusage[mem=16GB]"
#BSUB -J "numerical_RF_polymer_size_feats_on_multimodal Rh_all_num"
#BSUB -o "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250106.out"
#BSUB -e "/share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250106.err"

source ~/.bashrc
conda activate /usr/local/usrapps/ddomlab/sdehgha2/pls-dataset-env
python ../train_numerical_only.py --target_features "multimodal Rh"                                     --regressor_type "RF"                                     --transform_type "Robust Scaler"                                     --numerical_feats 'Mn (g/mol)' 'PDI' 'Mw (g/mol)' 'Concentration (mg/ml)' 'Temperature SANS/SLS/DLS/SEC (K)' "solvent dP" "solvent dD" "solvent dH"                                     --columns_to_impute "PDI" "Temperature SANS/SLS/DLS/SEC (K)" "Concentration (mg/ml)"                                     --special_impute 'Mw (g/mol)'                                     --imputer mean


conda deactivate


------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   20872.00 sec.
    Max Memory :                                 5 GB
    Average Memory :                             4.52 GB
    Total Requested Memory :                     16.00 GB
    Delta Memory :                               11.00 GB
    Max Swap :                                   -
    Max Processes :                              30
    Max Threads :                                33
    Run time :                                   6747 sec.
    Turnaround time :                            6718 sec.

The output (if any) is above this job summary.



PS:

Read file </share/ddomlab/sdehgha2/working-space/main/P1_pls-dataset/pls-dataset-space/PLS-Dataset/results/numerical_RF_Robust Scaler_multimodal Rh_20250106.err> for stderr output of this job.

